cscope 15 $HOME/incoming/onload_tests/src/lib/transport/ip               0001278468
	@active_wild.c

3 
	~"ù_öã∫Æ.h
"

6 
	$ci_a˘ive_wûd_°©e_öô
(
ci_√tif
* 
√tif
, 
ci_a˘ive_wûd
* 
aw
)

8 
oo_p
 
p
;

10 
	`ci_sock_cmn_öô
(
√tif
, &
aw
->
s
, 1);

11 
aw
->
s
.
b
.
°©e
 = 
CI_TCP_STATE_ACTIVE_WILD
;

12 
aw
->
s
.
b
.
sb_aÊags
 = 0;

14 
	`sock_¥Ÿocﬁ
(&
aw
->
s
Ë
IPPROTO_TCP
;

15 
	`sock_œddr_be32
(&
aw
->
s
) = 0u;

16 
	`sock_Õ‹t_be16
(&
aw
->
s
) = 0u;

17 
	`sock_øddr_be32
(&
aw
->
s
) = 0u;;

18 
	`sock_Ω‹t_be16
(&
aw
->
s
) = 0u;

20 
p
 = 
	`TS_OFF
(
√tif
, 
aw
);

21 
	`OO_P_ADD
(
p
, 
	`CI_MEMBER_OFFSET
(
ci_a˘ive_wûd
, 
poﬁ_lök
));

22 
	`ci_ni_dŒi°_lök_öô
(
√tif
, &
aw
->
poﬁ_lök
, 
p
, "pool");

23 
	`ci_ni_dŒi°_£lf_lök
(
√tif
, &
aw
->
poﬁ_lök
);

25 
aw
->
expúy
 = 
	`ci_ù_time_now
(
√tif
);

26 
aw
->
œ°_œddr
 = 0u;

27 
aw
->
œ°_øddr
 = 0u;

28 
aw
->
œ°_Ω‹t
 = 0u;

29 
	}
}

32 
ci_a˘ive_wûd
* 
	$ci_a˘ive_wûd_gë_°©e_buf
(
ci_√tif
* 
√tif
)

34 
côp_waôabÀ_obj
* 
wo
;

36 
	`ci_as£π
(
√tif
);

38 
wo
 = 
	`côp_waôabÀ_obj_Æloc
(
√tif
);

39 if–
wo
 ) {

40 
	`ci_a˘ive_wûd_°©e_öô
(
√tif
, &
wo
->
aw
);

41  &
wo
->
aw
;

43  
NULL
;

44 
	}
}

51 
	$ci_a˘ive_wûd_Æl_fds_g⁄e
(
ci_√tif
* 
ni
, 
ci_a˘ive_wûd
* 
aw
, 
do_‰ì
)

53 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

54 
	`ci_as£π
(
aw
->
s
.
b
.
°©e
 =
CI_TCP_STATE_ACTIVE_WILD
);

56 
	`ci_t˝_ï_˛ór_fûãrs
(
ni
, 
	`SC_SP
(&
aw
->
s
), 0);

58 if–
do_‰ì
 )

59 
	`côp_waôabÀ_obj_‰ì
(
ni
, &
aw
->
s
.
b
);

60 
	}
}

	@common_ioctl.c

14 #ifde‡ 
__sun__


15 
	~<√t/if.h
>

16 
	~<√t/if_¨p.h
>

19 #ifde‡ 
__löux__


20 
	~<löux/sockios.h
>

23 
	~"ù_öã∫Æ.h
"

24 
	~<ci/√t/io˘ls.h
>

30 
	$ci_cmn_io˘l
(
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
, 
ªque°
,

31 * 
¨g
, 
os_rc
, 
os_sockë_exi°s
)

33 
	`ci_as£π
(
√tif
);

34 
	`ci_as£π
(
s
);

39 
	`LOG_SV
–
	`ci_log
("ªque° = %u/%#x,árg = %lu/%#lx", 
ªque°
,Ñequest,

40 (Ë
¨g
, ()árg));

42  
ªque°
 ) {

43 #ifde‡ 
__unix__


44 
SIOCGPGRP
:

46 if–!
	`CI_IOCTL_ARG_OK
(, 
¨g
) )

47 
Áû_Áu…
;

48 
	`CI_IOCTL_SETARG
–((*)
¨g
), 
s
->
b
.
sigown
);

51 
SIOCSPGRP
:

53 if–!
	`CI_IOCTL_ARG_OK
(, 
¨g
) )

54 
Áû_Áu…
;

55 
s
->
b
.
sigown
 = 
	`CI_IOCTL_GETARG
(,
¨g
);

56 if–
s
->
b
.
sigown
 && (s->b.
sb_aÊags
 & 
CI_SB_AFLAG_O_ASYNC
) )

57 
	`ci_bô_£t
(&
s
->
b
.
wake_ªque°
, 
CI_SB_FLAG_WAKE_RX_B
);

61 #ifde‡ 
__löux__


62 
SIOCGSTAMP
:

63 
SIOCGSTAMPNS
:

64 
	`RET_WITH_ERRNO
(
ENOENT
);

68 i‡(!
os_sockë_exi°s
)

69 
	`RET_WITH_ERRNO
(
ENOTTY
);

71  
os_rc
;

77 #ifde‡ 
__unix__


78 
Áû_Áu…
:

79 
	`LOG_SC
–
	`ci_log
("%s: "
NS_FMT
"Ñeq %d/%#xárg %ld/%#lx unhandled (EINVAL)",

80 
__FUNCTION__
, 
	`NS_PRI_ARGS
(
√tif
, 
s
),

81 
ªque°
,Ñeque°, ()
¨g
, ()arg));

82 
	`RET_WITH_ERRNO
(
EFAULT
);

84 
	}
}

	@common_sockopts.c

14 
	~"ù_öã∫Æ.h
"

15 
	~<ci/öã∫Æ/ù_°©s.h
>

16 
	~<ci/√t/sock›ts.h
>

19 #ifde‡ 
__löux__


28 
	#IP_MTU
 14

	)

31 
	#VERB
(
x
)

	)

33 #i‚de‡
NDEBUG


34 
	#STG_VERB
(
x
Ë
	)
x

36 
	#STG_VERB
(
x
)

	)

39 #ifde‡
_WIN32


41 
	#REPORT_CASE
(
sym
Ësym: 
	`STG_VERB
(
	`ci_log
(
__FUNCTION__
": "#sym));

	)

44 
	#OPTION_ALERT_NOT_SUPP
(
sym
,
l
) sym: { \

45 
	`ci_log
("%s: ******************************************", 
__FUNCTION__
); \

46 
	`ci_log
("%s: "#sym, 
__FUNCTION__
); \

47 
	`ci_log
("%s: !! unsuµ‹ãd o±i⁄,Çìd†©ã¡i⁄ !! ", 
__FUNCTION__
); \

48 
	`ci_log
("%s: ******************************************", 
__FUNCTION__
); \

49 
l
; }

	)

52 
	#OPTION_NOT_SUPP
(
sym
,
l
) sym: { \

53 
	`VERB
(
	`ci_log
("%s: sì¿unsuµ‹ãd o±i⁄ "#sym, 
__FUNCTION__
)); \

54 
l
; }

	)

57 
	#OPTION_ABORT_NOT_EXP
(
sym
) sym: { \

58 
	`ci_log
("%s: *********************************************", 
__FUNCTION__
); \

59 
	`ci_log
("%s: "#sym, 
__FUNCTION__
); \

60 
	`ci_log
("%s: !! o±i⁄ÇŸÉx≥˘ed hîe,Çìd†fixög !! ", 
__FUNCTION__
); \

61 
	`ci_log
("%s: *********************************************", 
__FUNCTION__
); \

62 
	`ci_as£π
(0); }

	)

65 
	#OPTION_UDP_MSG
(
sym
,
sc
,
l
) sym: { \

66 if–
	`sock_¥Ÿocﬁ
(
sc
Ë=
IPPROTO_TCP
 ) 
l
; \

67 
u
 = 
CI_UDP_MAX_PAYLOAD_BYTES
; \

68 
u_out
; }

	)

71 
	#OPTION_NOT_TCP
(
sym
,
sc
,
l
) sym: { \

72 if–
	`sock_¥Ÿocﬁ
(
sc
Ë=
IPPROTO_TCP
 ) 
l
; \

73 
	`ci_log
(
__FUNCTION__
": *** "#sym"Çot implemented for UDP ***");\

74 
l
; }

	)

77 
	#REPORT_CASE
(
sym
Ësym:

	)

80 #i‚de‡
__KERNEL__


81 
	~<limôs.h
>

82 
	~<√t/if.h
>

84 #ifde‡
__löux__


86 
	~<löux/ty≥s.h
>

87 
	~<löux/pkt_sched.h
>

89 
	gci_tos2¥i‹ôy
[] = {

90  
TC_PRIO_BESTEFFORT
,

91  
TC_PRIO_FILLER
,

92  
TC_PRIO_BESTEFFORT
,

93  
TC_PRIO_BESTEFFORT
,

94  
TC_PRIO_BULK
,

95  
TC_PRIO_BULK
,

96  
TC_PRIO_BULK
,

97  
TC_PRIO_BULK
,

98  
TC_PRIO_INTERACTIVE
,

99  
TC_PRIO_INTERACTIVE
,

100  
TC_PRIO_INTERACTIVE
,

101  
TC_PRIO_INTERACTIVE
,

102  
TC_PRIO_INTERACTIVE_BULK
,

103  
TC_PRIO_INTERACTIVE_BULK
,

104  
TC_PRIO_INTERACTIVE_BULK
,

105  
TC_PRIO_INTERACTIVE_BULK


110 
	$ci_sock_rx_böd2dev
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
, 
ci_ifid_t
 
ifödex
)

112 
ci_ifid_t
 
ba£_ifödex
;

113 
ci_hwp‹t_id_t
 
hwp‹t
;

114 
ci˝_íˇp_t
 
íˇp
;

115 
rc
;

118 
rc
 = 
	`ci˝_Œ≠_ªåõve
(
	`CICP_HANDLE
(
ni
), 
ifödex
, 
NULL
 , &
hwp‹t
,

119 
NULL
 , &
íˇp
, &
ba£_ifödex
, NULL);

120 if–
rc
 != 0 ) {

122  
CI_SOCKET_HANDOVER
;

124 if–(Ë
hwp‹t
 >
CPLANE_MAX_REGISTER_INTERFACES
 )

125  
CI_SOCKET_HANDOVER
;

126 if–
	`__ci_hwp‹t_to_ötf_i
(
ni
, 
hwp‹t
) < 0 )

130  
CI_SOCKET_HANDOVER
;

132 
s
->
rx_böd2dev_ifödex
 = 
ifödex
;

133 
s
->
rx_böd2dev_ba£_ifödex
 = 
ba£_ifödex
;

134 
s
->
rx_böd2dev_vœn
 = 
íˇp
.
vœn_id
;

135 
	`ci_ù_ˇche_övÆid©e
(&
s
->
pkt
);

136 if–
s
->
b
.
°©e
 =
CI_TCP_STATE_UDP
 )

138 
	`ci_ù_ˇche_övÆid©e
(&
	`SOCK_TO_UDP
(
s
)->
ïhemîÆ_pkt
);

140 
	}
}

143 
	$ci_sock_bödtodevi˚
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
,

144 c⁄° * 
›tvÆ
, 
sockÀn_t
 
›éí
)

146 
ci_ifid_t
 
ifödex
;

147 
i‰eq
 
i‰
;

148 
rc
;

150 if–
›éí
 =0 || ((*)
›tvÆ
)[0] == '\0' ) {

152 
s
->
˝
.
so_bödtodevi˚
 = 
CI_IFID_BAD
;

153 
s
->
rx_böd2dev_ifödex
 = 
CI_IFID_BAD
;

158 
s
->
rx_böd2dev_ba£_ifödex
 = 0;

159 
s
->
rx_böd2dev_vœn
 = 0;

163 if–
	`NI_OPTS
(
ni
).
bödtodevi˚_h™dovî
 )

164 
h™dovî
;

167 
	`mem£t
(&
i‰
, 0, (ifr));

168 
	`mem˝y
(
i‰
.
i‰_«me
, 
›tvÆ
, 
	`CI_MIN
(
›éí
, (ifr.ifr_name)));

169 
i‰
.
i‰_«me
[(ifr.ifr_name) - 1] = '\0';

170 
ifödex
 = 
	`if_«mëoödex
(
i‰
.
i‰_«me
);

171 if–
ifödex
 == 0 ) {

176 
	`LOG_E
(
	`ci_log
("%s: ERROR: if_nametoindex(%s) failed",

177 
__FUNCTION__
, 
i‰
.
i‰_«me
));

178  -
ENODEV
;

181 
rc
 = 
	`ci_sock_rx_böd2dev
(
ni
, 
s
, 
ifödex
);

182 if–
rc
 == 0 )

183 
s
->
˝
.
so_bödtodevi˚
 = 
ifödex
;

184  
rc
;

186 
h™dovî
:

197  
CI_SOCKET_HANDOVER
;

198 
	}
}

203 
ci_ölöe
 

204 
	$ci_gë_os_sock›t
(
ci_fd_t
 
fd
, 
Àvñ
, 
›äame
, *
›tvÆ
,

205 
sockÀn_t
 *
›éí
 )

207 
rc
;

208 
ci_fd_t
 
os_sock
 = 
	`ci_gë_os_sock_fd
(
fd
);

210 i‡(
	`CI_IS_VALID_SOCKET
(
os_sock
) ) {

211 
rc
 = 
	`ci_sys_gësock›t
(
os_sock
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
);

212 
	`ci_ªl_os_sock_fd
(
os_sock
);

213 i‡(
rc
 != 0)

214 
	`RET_WITH_ERRNO
(
î∫o
);

218 
	`RET_WITH_ERRNO
(
ENOPROTOOPT
);

220 
	}
}

233 
	$ci_gë_sﬁ_ù
–
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
, 
ci_fd_t
 
fd
,

234 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
 )

236 
u
;

241 
›äame
) {

242 
IP_OPTIONS
:

244 
	`LOG_U
(
	`ci_log
("%s: "
NS_FMT
" unh™dÀd IP_OPTIONS", 
__FUNCTION__
,

245 
	`NS_PRI_ARGS
(
ni
, 
s
)));

246 
Áû_unsup
;

248 
IP_TOS
:

250 
	`ci_as£π
((
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
) ||

251 
s
->
b
.
°©e
 =
CI_TCP_STATE_UDP
);

253 
u
 = 
s
->
pkt
.
ù
.
ù_tos
;

256 
IP_TTL
:

258 
	`ci_as£π
((
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
) ||

259 
s
->
b
.
°©e
 =
CI_TCP_STATE_UDP
);

261 
u
 = 
s
->
˝
.
ù_âl
;

264 #ifde‡ 
__löux__


265 
IP_MTU
:

266 if–
s
->
b
.
°©e
 =
CI_TCP_STATE_UDP
 ) {

267 #i‚de‡
__KERNEL__


268 if–
	`sock_øddr_be32
(
s
) != 0 ) {

269 
	`ci_ù_ˇche_övÆid©e
(&
s
->
pkt
);

270 
	`ci˝_u£r_ªåõve
(
ni
, &
s
->
pkt
, &s->
˝
);

271 if–
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
), &
s
->
pkt
) ) {

272 
u
 = 
s
->
pkt
.
mtu
;

276  
	`ci_gë_os_sock›t
(
fd
, 
IPPROTO_IP
, 
›äame
, 
›tvÆ
, 
›éí
);

281 
	`ci_as£π
(0);

287 if–
s
->
b
.
°©e
 <
CI_TCP_LISTEN
 ||

288 
s
->
b
.
°©e
 >
CI_TCP_TIME_WAIT
 ) {

290 
	`RET_WITH_ERRNO
(
ENOTCONN
);

292 
u
 = 
	`SOCK_TO_TCP
(
s
)->
pmtus
.
pmtu
;

295 
IP_MTU_DISCOVER
:

297  
s
->
s_Êags
 & (
CI_SOCK_FLAG_PMTU_DO
 | 
CI_SOCK_FLAG_ALWAYS_DF
) ) {

298 
CI_SOCK_FLAG_PMTU_DO
 | 
CI_SOCK_FLAG_ALWAYS_DF
:

299 
u
 = 
IP_PMTUDISC_DO
;

301 
CI_SOCK_FLAG_PMTU_DO
:

302 
u
 = 
IP_PMTUDISC_WANT
;

304 
CI_SOCK_FLAG_ALWAYS_DF
:

305 #ifde‡
IP_PMTUDISC_PROBE


306 
u
 = 
IP_PMTUDISC_PROBE
;

308 
	`ci_as£π
(0);

309 
u
 = 
IP_PMTUDISC_DO
;

313 
u
 = 
IP_PMTUDISC_DONT
;

318 
IP_RECVTOS
:

319 
u
 = !!(
s
->
cmsg_Êags
 & 
CI_IP_CMSG_TOS
);

322 
IP_PKTOPTIONS
:

324 
msghdr
 
msg
;

325 
cmsg_°©e
 cmsg_state;

327 #ifde‡
__löux__


329 if–
s
->
b
.
°©e
 =
CI_TCP_STATE_UDP
 )

330 
	`RET_WITH_ERRNO
(
ENOPROTOOPT
);

335 
	`mem£t
(
›tvÆ
, 0, *
›éí
);

337 
msg
.
msg_c⁄åﬁ
 = 
›tvÆ
;

338 
msg
.
msg_c⁄åﬁÀn
 = *
›éí
;

339 
msg
.
msg_Êags
 = 0;

340 
cmsg_°©e
.
msg
 = &msg;

341 
cmsg_°©e
.
cm
 = 
	`CMSG_FIRSTHDR
(&
msg
);

342 
cmsg_°©e
.
cmsg_byãs_u£d
 = 0;

343 
cmsg_°©e
.
p_msg_Êags
 = &
msg
.
msg_Êags
;

345 i‡(
s
->
cmsg_Êags
 & 
CI_IP_CMSG_PKTINFO
) {

346 
ö_pktöfo
 
öfo
;

347 
öfo
.
ùi_addr
.
s_addr
 = info.
ùi_•ec_d°
.s_add∏
	`sock_œddr_be32
(
s
);

349 
öfo
.
ùi_ifödex
 = 
s
->
˝
.
ù_mu…iˇ°_if
 < 0 ?

350 0 : 
s
->
˝
.
ù_mu…iˇ°_if
;

351 
	`ci_put_cmsg
(&
cmsg_°©e
, 
IPPROTO_IP
, 
IP_PKTINFO
, (
öfo
), &info);

352 if(
msg
.
msg_Êags
 & 
MSG_CTRUNC
)

353 
Áû_övÆ
;

356 i‡(
s
->
cmsg_Êags
 & 
CI_IP_CMSG_TTL
) {

357 
âl
 = 
s
->
˝
.
ù_mˇ°_âl
;

358 
	`ci_put_cmsg
(&
cmsg_°©e
, 
IPPROTO_IP
, 
IP_TTL
, (
âl
), &ttl);

359 if(
msg
.
msg_Êags
 & 
MSG_CTRUNC
)

360 
Áû_övÆ
;

363 *
›éí
 = 
cmsg_°©e
.
cmsg_byãs_u£d
;

367 
IP_RECVERR
:

368 
u
 = !!(
s
->
so
.
so_debug
 & 
CI_SOCKOPT_FLAG_IP_RECVERR
);

371 #ifde‡
IP_TRANSPARENT


372 
IP_TRANSPARENT
:

373 
u
 = !!(
s
->
s_Êags
 & 
CI_SOCK_FLAG_TPROXY
);

379 #ifde‡ 
__unix__


380 
IP_RECVTTL
:

381 
u
 = !!(
s
->
cmsg_Êags
 & 
CI_IP_CMSG_TTL
);

384 
IP_RECVOPTS
:

385 
u
 = !!(
s
->
cmsg_Êags
 & 
CI_IP_CMSG_RECVOPTS
);

388 
IP_RETOPTS
:

389 
u
 = !!(
s
->
cmsg_Êags
 & 
CI_IP_CMSG_RETOPTS
);

393 #i‚de‡
__KERNEL__


395 
	`REPORT_CASE
(
IP_MULTICAST_IF
)

396 
	`REPORT_CASE
(
IP_MULTICAST_LOOP
)

397 
	`REPORT_CASE
(
IP_MULTICAST_TTL
)

402 if–
s
->
b
.
sb_aÊags
 & 
CI_SB_AFLAG_OS_BACKED
 )

403  
	`ci_gë_os_sock›t
(
fd
, 
IPPROTO_IP
, 
›äame
, 
›tvÆ
, 
›éí
);

405 
	`RET_WITH_ERRNO
(
ENOPROTOOPT
);

408 #i‡
	`deföed
(
__löux__
Ë|| deföed(
_WIN32
)

409 
IP_PKTINFO
:

410 
u
 = !!(
s
->
cmsg_Êags
 & 
CI_IP_CMSG_PKTINFO
);

414 #ifde‡
_WIN32


415 
IP_DONTFRAGMENT
:

418 
u
 = !!(
s
->
s_Êags
 & 
CI_SOCK_FLAG_DF
);

421 
IP_RECEIVE_BROADCAST
:

424 if–
s
->
b
.
°©e
 !
CI_TCP_STATE_UDP
 )

425 
Áû_no›t
;

427 
u
 = !!(
	`SOCK_TO_UDP
(
s
)->
udpÊags
 & 
CI_UDPF_RECV_BROADCAST
);

434 
	`OPTION_NOT_SUPP
(
IP_HDRINCL
, 
Áû_no›t
);

438 
Áû_no›t
;

441  
	`ci_gësock›t_föÆ
(
›tvÆ
, 
›éí
, 
SOL_IP
, &
u
, (u));

443 #ifde‡ 
__löux__


444 
Áû_övÆ
:

445 
	`LOG_SC
–
	`log
("%s: "
NS_FMT
" invalid option: %i (EINVAL)",

446 
__FUNCTION__
, 
	`NS_PRI_ARGS
(
ni
, 
s
), 
›äame
));

447 
	`RET_WITH_ERRNO
(
EINVAL
);

450 
Áû_no›t
:

451 
	`LOG_SC
–
	`log
("%s: "
NS_FMT
" unimplemented/bad option: %i (ENOPROTOOPT)",

452 
__FUNCTION__
, 
	`NS_PRI_ARGS
(
ni
, 
s
), 
›äame
));

454 
Áû_unsup
:

455 
	`RET_WITH_ERRNO
(
ENOPROTOOPT
);

456 
	}
}

458 #i‚de‡
__KERNEL__


459 #i‡
CI_CFG_FAKE_IPV6


461 
	$ci_gë_sﬁ_ù6
(
ci_sock_cmn
* 
s
, 
ci_fd_t
 
fd
, 
›äame
, *
›tvÆ
,

462 
sockÀn_t
 *
›éí
 )

464 
rc
;

465 
ci_fd_t
 
os_sock
 = 
	`ci_gë_os_sock_fd
(
fd
);

467 i‡(
	`CI_IS_VALID_SOCKET
(
os_sock
) ) {

468 
rc
 = 
	`ci_sys_gësock›t
–
os_sock
, 
IPPROTO_IPV6
, 
›äame
, 
›tvÆ
, 
›éí
);

469 
	`ci_ªl_os_sock_fd
–
os_sock
 );

470 i‡(
rc
 != 0)

471 
	`RET_WITH_ERRNO
(
î∫o
);

475 
	`RET_WITH_ERRNO
(
ENOPROTOOPT
);

477 
	}
}

482 
	$ci_gë_sﬁ_sockë
–
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
,

483 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
 )

485 
u
;

487 
›äame
) {

488 #i‡
CI_CFG_TCP_SOCK_STATS


489 
CI_SO_L5_GET_SOCK_STATS
:

494 if(*
›éí
 < ((
ci_ù_sock_°©s
)<<1) )

495 
Áû_övÆ
;

496 
	`ci_t˝_°©s_a˘i⁄
(
√tif
, (
ci_t˝_°©e
*Ë
s
, 
CI_IP_STATS_REPORT
,

497 
CI_IP_STATS_OUTPUT_NONE
, 
›tvÆ
, 
›éí
 );

500 
CI_SO_L5_DUMP_SOCK_STATS
:

501 #i‡
CI_CFG_SEND_STATS_TO_LOG
==0

503 if(*
›éí
 == 0)

504 
Áû_övÆ
;

506 if–! (
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
) )

507 
Áû_övÆ
;

508 
	`ci_t˝_°©s_a˘i⁄
(
√tif
, 
	`SOCK_TO_TCP
(
s
), 
CI_IP_STATS_REPORT
,

509 
CI_IP_STATS_OUTPUT_NONE
, 
›tvÆ
, 
›éí
 );

513 #i‡
CI_CFG_SUPPORT_STATS_COLLECTION


514 
CI_SO_L5_GET_NETIF_STATS
:

519 if(*
›éí
 < ((
ci_ù_°©s
)<<1) )

520 
Áû_övÆ
;

522 
	`ci_√tif_°©s_a˘i⁄
(
√tif
, 
CI_IP_STATS_REPORT
,

523 
CI_IP_STATS_OUTPUT_NONE
, 
›tvÆ
, 
›éí
 );

526 
CI_SO_L5_DUMP_NETIF_STATS
:

527 #i‡
CI_CFG_SEND_STATS_TO_LOG
==0

529 if(*
›éí
 == 0)

530 
Áû_övÆ
;

533 
	`ci_√tif_°©s_a˘i⁄
(
√tif
, 
CI_IP_STATS_REPORT
,

534 
CI_IP_STATS_OUTPUT_NONE
, 
›tvÆ
, 
›éí
 );

538 
SO_KEEPALIVE
:

539 #ifde‡
_WIN32


540 if–
	`sock_¥Ÿocﬁ
(
s
Ë=
IPPROTO_UDP
 )

541 
Áû_no›t
;

543 
u
 = !!(
s
->
s_Êags
 & 
CI_SOCK_FLAG_KALIVE
);

544 
u_out
;

546 
SO_OOBINLINE
:

548 #ifde‡
_WIN32


549 if–
	`sock_¥Ÿocﬁ
(
s
Ë=
IPPROTO_UDP
 )

550 
Áû_no›t
;

553 
u
 = !!(
s
->
s_Êags
 & 
CI_SOCK_FLAG_OOBINLINE
);

554 
u_out
;

556 
SO_RCVLOWAT
:

557 #ifde‡
_WIN32


558 
Áû_no›t
;

560 
u
 = 
s
->
so
.
rcvlow©
;

561 
u_out
;

564 
SO_SNDLOWAT
:

565 #ifde‡
_WIN32


566 
Áû_no›t
;

569 
u
 = 1u;

570 
u_out
;

573 
SO_RCVTIMEO
: {

575 #ifde‡
_WIN32


576 
DWORD
 
t
;

577 
t
 = (
DWORD
)((
s
->
so
.
rcvtimeo
.
tv_£c
 * 1000) +

578 (
s
->
so
.
rcvtimeo
.
tv_u£c
 / 1000));

579  
	`ci_gësock›t_föÆ
(
›tvÆ
, 
›éí
, 
SOL_SOCKET
, &
t
, (t));

581 
timevÆ
 
tv
;

582 
tv
.
tv_£c
 = 
s
->
so
.
rcvtimeo_m£c
 / 1000;

583 
tv
.
tv_u£c
 = (
s
->
so
.
rcvtimeo_m£c
 - (tv.
tv_£c
 * 1000ULL)) * 1000ULL;

584  
	`ci_gësock›t_föÆ
(
›tvÆ
, 
›éí
, 
SOL_SOCKET
, &
tv
, (tv));

588 
SO_SNDTIMEO
: {

590 #ifde‡
_WIN32


591 
DWORD
 
t
;

592 
t
 = (
DWORD
)((
s
->
so
.
¢dtimeo
.
tv_£c
 * 1000) +

593 (
s
->
so
.
¢dtimeo
.
tv_u£c
 / 1000));

594  
	`ci_gësock›t_föÆ
(
›tvÆ
, 
›éí
, 
SOL_SOCKET
, &
t
, (t));

596 
timevÆ
 
tv
;

597 
tv
.
tv_£c
 = 
s
->
so
.
¢dtimeo_m£c
 / 1000;

598 
tv
.
tv_u£c
 = (
s
->
so
.
¢dtimeo_m£c
 - (tv.
tv_£c
 * 1000ULL)) * 1000ULL;

599  
	`ci_gësock›t_föÆ
(
›tvÆ
, 
›éí
, 
SOL_SOCKET
, &
tv
, (tv));

603 
SO_REUSEADDR
:

605 
u
 = !!(
s
->
s_Êags
 & 
CI_SOCK_FLAG_REUSEADDR
);

606 
u_out
;

608 
SO_TYPE
:

610 
	`ci_as£π
((
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
) ||

611 
s
->
b
.
°©e
 =
CI_TCP_STATE_UDP
);

612 
u
 = (
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
Ë? 
SOCK_STREAM
 : 
SOCK_DGRAM
;

613 
u_out
;

615 #ifde‡
SO_PROTOCOL


616 
SO_PROTOCOL
:

618 
	`ci_as£π
((
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
) ||

619 
s
->
b
.
°©e
 =
CI_TCP_STATE_UDP
);

620 
u
 = (
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
Ë? 
IPPROTO_TCP
 : 
IPPROTO_UDP
;

621 
u_out
;

624 #ifde‡
_WIN32


625 
SO_GROUP_ID
:

627 
u
=0;

628 
u_out
;

630 
SO_GROUP_PRIORITY
:

631 
u
=0;

633 
u_out
;

636 
SO_DONTROUTE
:

638 #ifde‡
_WIN32


639 
u
 = !!(
s
->
s_Êags
 & 
CI_SOCK_FLAG_DONTROUTE
);

640 
u_out
;

643 
Áû_no›t
;

646 
SO_BROADCAST
:

648 #ifde‡
_WIN32


649 if–
	`sock_¥Ÿocﬁ
(
s
Ë=
IPPROTO_TCP
 )

650 
Áû_no›t
;

653 
u
 = !!(
s
->
s_Êags
 & 
CI_SOCK_FLAG_BROADCAST
);

654 
u_out
;

656 
SO_SNDBUF
:

658 
u
 = 
s
->
so
.
¢dbuf
;

659 
u_out
;

661 
SO_RCVBUF
:

663 
u
 = 
s
->
so
.
rcvbuf
;

664 
u_out
;

666 
SO_LINGER
:

668 
lögî
 
l
;

669 
	`mem£t
(&
l
, 0, (l));

671 #ifde‡
_WIN32


672 if–
	`sock_¥Ÿocﬁ
(
s
Ë=
IPPROTO_UDP
 )

673 
Áû_no›t
;

676 if–
s
->
s_Êags
 & 
CI_SOCK_FLAG_LINGER
 ) {

677 
l
.
l_⁄off
 = 1;

678 
l
.
l_lögî
 = 
s
->
so
.
lögî
;

680 
l
.
l_⁄off
 = 0;

681 #ifde‡
_WIN32


683 
l
.
l_lögî
 = 
s
->
so
.
lögî
;

686 
	`VERB
(
	`ci_log
("%s: onoff:%d fl:%x", 
__FUNCTION__
,

687 
l
.
l_⁄off
, 
s
->
s_Êags
));

688  
	`ci_gësock›t_föÆ
(
›tvÆ
, 
›éí
, 
SOL_SOCKET
, &
l
, (l));

691 #ifde‡ 
__löux__


692 
SO_PRIORITY
:

693 
u
 = (Ë
s
->
so_¥i‹ôy
;

694 
u_out
;

697 
SO_ERROR
:

698 #ifde‡
_WIN32


701 
u
 = 
s
->
so_îr‹
;

704 
u
 = 
	`ci_gë_so_îr‹
(
s
);

706 
u_out
;

708 
SO_ACCEPTCONN
:

709 #ifde‡
_WIN32


710 if–
	`sock_¥Ÿocﬁ
(
s
Ë=
IPPROTO_UDP
 )

711 
Áû_no›t
;

713 
u
 = (
s
->
b
.
°©e
 =
CI_TCP_LISTEN
);

714 
u_out
;

716 
SO_DEBUG
:

717 
u
 = !!(
s
->
so
.
so_debug
 & 
CI_SOCKOPT_FLAG_SO_DEBUG
);

718 
u_out
;

720 #ifde‡
_WIN32


721 
SO_EXCLUSIVEADDRUSE
:

722 
	`VERB
(
	`ci_log
("%s: SO_EXCLUSIVEADDRUSE", 
__FUNCTION__
));

723 
u
 = (
s
->
s_Êags
 & 
CI_SOCK_FLAG_REUSEADDR
)==0;

724 
u_out
;

726 
SO_DONTLINGER
:

727 if–
	`sock_¥Ÿocﬁ
(
s
Ë=
IPPROTO_UDP
 )

728 
Áû_no›t
;

730 
u
 = (
s
->
s_Êags
 & 
CI_SOCK_FLAG_LINGER
)==0;

731 
u_out
;

733 
SO_CONNECT_TIME
:

736 if–
	`sock_¥Ÿocﬁ
(
s
Ë=
IPPROTO_UDP
 ||

737 
s
->
b
.
°©e
 & 
CI_TCP_STATE_NOT_CONNECTED
 )

738 
u
 = -1;

740 
ci_ùtime_t
 
t
 = 
	`ci_t˝_time_now
(
√tif
Ë- 
s
->
c⁄√˘ed_time
;

741 
ms
 = 
	`ci_ù_time_ticks2ms
(
√tif
, 
t
);

742 
u
 = 
ms
 / 1000u;

744 
u_out
;

746 
	`OPTION_UDP_MSG
(
SO_MAX_MSG_SIZE
, 
s
, 
Áû_no›t
);

747 
	`OPTION_UDP_MSG
(
SO_MAXDG
, 
s
, 
Áû_no›t
);

748 
	`OPTION_UDP_MSG
(
SO_MAXPATHDG
, 
s
, 
Áû_no›t
);

750 
	`OPTION_NOT_SUPP
(
SO_OPENTYPE
, 
Áû_no›t
);

751 
	`OPTION_NOT_SUPP
(
SO_USELOOPBACK
, 
Áû_no›t
);

753 
	`OPTION_ALERT_NOT_SUPP
–
SO_CONDITIONAL_ACCEPT
, 
Áû_no›t
 );

755 #ifde‡
SO_PROTECT


756 
SO_PROTECT
:

759 
Áû_no›t
;

764 
SO_TIMESTAMP
:

765 
u
 = !!(
s
->
cmsg_Êags
 & 
CI_IP_CMSG_TIMESTAMP
);

766 
u_out
;

768 
SO_TIMESTAMPNS
:

769 
u
 = !!(
s
->
cmsg_Êags
 & 
CI_IP_CMSG_TIMESTAMPNS
);

770 
u_out
;

772 
ONLOAD_SO_TIMESTAMPING
:

773 
u
 = 
s
->
time°ampög_Êags
;

774 
u_out
;

776 
SO_REUSEPORT
:

777 
u
 = !!(
s
->
s_Êags
 & 
CI_SOCK_FLAG_REUSEPORT
);

778 
u_out
;

780 
ONLOAD_SO_BUSY_POLL
:

782 
vÆ
 = 
	`oo_cy˛es64_to_u£c
(
√tif
, 
s
->
b
.
•ö_cy˛es
);

784 if–
vÆ
 > 
INT_MAX
 )

785 
u
 = 
INT_MAX
;

787 
u
 = 
vÆ
;

788 
u_out
;

791 #ifde‡
SO_SELECT_ERR_QUEUE


792 
SO_SELECT_ERR_QUEUE
:

793 if–
s
->
s_aÊags
 & 
CI_SOCK_AFLAG_SELECT_ERR_QUEUE
 )

794 
u
 = 1;

796 
u
 = 0;

797 
u_out
;

801 
Áû_no›t
;

806 
u_out
:

807 if–()*
›éí
 >= 0 ) {

808 
möÀn
 = 
	`CI_MIN
((
u
), ()*
›éí
);

809 
	`mem˝y
(
›tvÆ
, (*)&
u
, 
möÀn
);

810 *
›éí
 = 
möÀn
;

815 
Áû_övÆ
:

816 
	`LOG_SC
(
	`log
("%s: "
NS_FMT
" option %iÖtr/lenÉrror (EINVAL or EFAULT)",

817 
__FUNCTION__
, 
	`NS_PRI_ARGS
(
√tif
, 
s
), 
›äame
));

818 
	`RET_WITH_ERRNO
(
EINVAL
);

820 
Áû_no›t
:

821 
	`LOG_SC
(
	`log
("%s: "
NS_FMT
" unimplemented/bad option %i (ENOPROTOOPT)",

822 
__FUNCTION__
, 
	`NS_PRI_ARGS
(
√tif
, 
s
), 
›äame
));

823 
	`RET_WITH_ERRNO
(
ENOPROTOOPT
);

824 
	}
}

826 #i‚de‡
__KERNEL__


828 
	$ci_£t_sﬁ_ù
–
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
,

829 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
)

831 
rc
 = 0;

833 
	`ci_as£π
(
√tif
);

836 
›äame
) {

837 
IP_OPTIONS
:

840 
	`LOG_U
(
	`ci_log
("%s: "
NS_FMT
" unh™dÀd IP_OPTIONS", 
__FUNCTION__
,

841 
	`NS_PRI_ARGS
(
√tif
, 
s
)));

842 
Áû_unh™
;

844 
IP_TOS
:

846 
vÆ
;

851 if–(
rc
 = 
	`›t_nŸ_ok
–
›tvÆ
, 
›éí
, )) ) {

852 #ifde‡
__löux__


853 if–
›éí
 == 0 )

856 
Áû_Áu…
;

858 
vÆ
 = 
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
);

862 if–*(*)
›éí
 > 
CI_IP_MAX_TOS
 )

863 
Áû_övÆ
;

866 #ifde‡
__löux__


867 if–
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
 ) {

869 
vÆ
 &= ~3;

870 
vÆ
 |
s
->
pkt
.
ù
.
ù_tos
 & 3;

873 
vÆ
 = 
	`CI_MIN
(vÆ, 
CI_IP_MAX_TOS
);

874 
s
->
pkt
.
ù
.
ù_tos
 = (
ci_uöt8
)
vÆ
;

875 if–
s
->
b
.
°©e
 =
CI_TCP_STATE_UDP
 )

876 
	`SOCK_TO_UDP
(
s
)->
ïhemîÆ_pkt
.
ù
.
ù_tos
 = (
ci_uöt8
)
vÆ
;

878 
	`LOG_TV
(
	`log
("%s: "
NS_FMT
" TCP IP_TOS = %u", 
__FUNCTION__
,

879 
	`NS_PRI_ARGS
(
√tif
, 
s
), s->
pkt
.
ù
.
ù_tos
));

881 #ifde‡
__löux__


883 
s
->
so_¥i‹ôy
 = 
ci_tos2¥i‹ôy
[(((
vÆ
)>>1) & 0xf)];

888 
IP_TTL
: {

889 
v
;

891 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

892 
Áû_Áu…
;

893 
v
 = 
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
);

896 #i‚de‡
_WIN32


897 
v
 == 0 ||

899 
v
 > 
CI_IP_MAX_TTL
 ) {

900 
rc
 = -
EINVAL
;

901 
Áû_Áu…
;

904 
s
->
˝
.
ù_âl
 = (
ci_uöt8
Ë
v
;

905 
s
->
s_Êags
 |
CI_SOCK_FLAG_SET_IP_TTL
;

906 if–! 
	`CI_IP_IS_MULTICAST
(
s
->
pkt
.
ù
.
ù_daddr_be32
) )

907 
s
->
pkt
.
ù
.
ù_âl
 = s->
˝
.ip_ttl;

908 if–
s
->
b
.
°©e
 =
CI_TCP_STATE_UDP
) {

909 
ci_udp_°©e
* 
us
 = 
	`SOCK_TO_UDP
(
s
);

910 i‡(! 
	`CI_IP_IS_MULTICAST
(
us
->
ïhemîÆ_pkt
.
ù
.
ù_daddr_be32
) )

911 
us
->
ïhemîÆ_pkt
.
ù
.
ù_âl
 = 
s
->
˝
.ip_ttl;

913 
	`LOG_TV
(
	`log
("%s: "
NS_FMT
" IP_TTL = %u", 
__FUNCTION__
,

914 
	`NS_PRI_ARGS
(
√tif
, 
s
), s->
˝
.
ù_âl
));

919 #i‡
	`deföed
(
__löux__
Ë|| deföed(
_WIN32
)

920 
IP_PKTINFO
:

921 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) ) {

922 #ifde‡
__löux__


923 if–
›éí
 == 0 )

926 
Áû_Áu…
;

929 i‡(
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
))

930 
s
->
cmsg_Êags
 |
CI_IP_CMSG_PKTINFO
;

932 
s
->
cmsg_Êags
 &~
CI_IP_CMSG_PKTINFO
;

936 #ifde‡
__löux__


937 
IP_MTU_DISCOVER
:

939 
vÆ
;

941 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

942 
Áû_Áu…
;

943 
vÆ
 = 
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
);

945 if–
vÆ
 < 
IP_PMTUDISC_DONT
 ||

946 #ifde‡
IP_PMTUDISC_PROBE


947 
vÆ
 > 
IP_PMTUDISC_PROBE


949 
vÆ
 > 
IP_PMTUDISC_DO


952 
rc
 = -
EINVAL
;

953 
Áû_Áu…
;

956  
vÆ
 ) {

957 
IP_PMTUDISC_DONT
:

958 
s
->
s_Êags
 &~(
CI_SOCK_FLAG_ALWAYS_DF
 | 
CI_SOCK_FLAG_PMTU_DO
);

960 
IP_PMTUDISC_DO
:

961 
s
->
s_Êags
 |
CI_SOCK_FLAG_PMTU_DO
 | 
CI_SOCK_FLAG_ALWAYS_DF
;

963 
IP_PMTUDISC_WANT
:

964 
s
->
s_Êags
 |
CI_SOCK_FLAG_PMTU_DO
;

965 
s
->
s_Êags
 &~
CI_SOCK_FLAG_ALWAYS_DF
;

967 #ifde‡
IP_PMTUDISC_PROBE


968 
IP_PMTUDISC_PROBE
:

969 
s
->
s_Êags
 |
CI_SOCK_FLAG_ALWAYS_DF
;

970 
s
->
s_Êags
 &~
CI_SOCK_FLAG_PMTU_DO
;

977 
IP_RECVTOS
:

978 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

979 
Áû_Áu…
;

981 i‡(
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
))

982 
s
->
cmsg_Êags
 |
CI_IP_CMSG_TOS
;

984 
s
->
cmsg_Êags
 &~
CI_IP_CMSG_TOS
;

987 
IP_RECVERR
:

988 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

989 
Áû_Áu…
;

990 i‡(
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
))

991 
s
->
so
.
so_debug
 |
CI_SOCKOPT_FLAG_IP_RECVERR
;

993 
s
->
so
.
so_debug
 &~
CI_SOCKOPT_FLAG_IP_RECVERR
;

994 if–
s
->
os_sock_°©us
 & 
OO_OS_STATUS_ERR
 ) {

995 
oo_•
 
sock_id
 = 
	`SC_SP
(
s
);

996 
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
√tif
),

997 
OO_IOC_OS_POLLERR_CLEAR
, &
sock_id
);

1002 #ifde‡
IP_TRANSPARENT


1003 
IP_TRANSPARENT
:

1004 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1005 
Áû_Áu…
;

1006 i‡(
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
)) {

1007 if–(
	`NI_OPTS
(
√tif
).
sˇœbÀ_fûãr_íabÀ
 !=

1008 
CITP_SCALABLE_FILTERS_ENABLE
) ||

1009 (
	`NI_OPTS
(
√tif
).
sˇœbÀ_fûãr_mode
 &

1010 
CITP_SCALABLE_MODE_TPROXY_ACTIVE
) == 0 ||

1011 ! (
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
) )

1012 
h™dovî
;

1013 if–
s
->
b
.
sb_aÊags
 & 
CI_SB_AFLAG_OS_BACKED
 ) {

1017 
rc
 = -
EINVAL
;

1018 
Áû_Áu…
;

1020 
s
->
s_Êags
 |
CI_SOCK_FLAG_TPROXY
;

1031 if–(
s
->
s_Êags
 & 
CI_SOCK_FLAG_TPROXY
) &&

1032 (
s
->
s_Êags
 & 
CI_SOCK_FLAG_BOUND
) ) {

1033 
rc
 = -
EINVAL
;

1034 
Áû_Áu…
;

1037 
s
->
s_Êags
 &~
CI_SOCK_FLAG_TPROXY
;

1045 #ifde‡ 
__unix__


1047 
IP_RECVTTL
:

1048 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1049 
Áû_Áu…
;

1051 i‡(
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
))

1052 
s
->
cmsg_Êags
 |
CI_IP_CMSG_TTL
;

1054 
s
->
cmsg_Êags
 &~
CI_IP_CMSG_TTL
;

1057 
IP_RECVOPTS
:

1058 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1059 
Áû_Áu…
;

1061 i‡(
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
))

1062 
s
->
cmsg_Êags
 |
CI_IP_CMSG_RECVOPTS
;

1064 
s
->
cmsg_Êags
 &~
CI_IP_CMSG_RECVOPTS
;

1067 
IP_RETOPTS
:

1068 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1069 
Áû_Áu…
;

1071 i‡(
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
))

1072 
s
->
cmsg_Êags
 |
CI_IP_CMSG_RETOPTS
;

1074 
s
->
cmsg_Êags
 &~
CI_IP_CMSG_RETOPTS
;

1079 
	`REPORT_CASE
(
IP_ADD_MEMBERSHIP
)

1080 
	`REPORT_CASE
(
IP_DROP_MEMBERSHIP
)

1081 #ifde‡
MCAST_JOIN_GROUP


1082 
	`REPORT_CASE
(
MCAST_JOIN_GROUP
)

1083 
	`REPORT_CASE
(
MCAST_LEAVE_GROUP
)

1085 
	`REPORT_CASE
(
IP_MULTICAST_IF
)

1086 
	`REPORT_CASE
(
IP_MULTICAST_LOOP
)

1087 
	`REPORT_CASE
(
IP_MULTICAST_TTL
)

1092 #ifde‡
_WIN32


1093 
IP_DONTFRAGMENT
:

1096 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1097 
Áû_Áu…
;

1099 i‡(*(*)
›tvÆ
)

1100 
s
->
s_Êags
 |
CI_SOCK_FLAG_DF
;

1102 
s
->
s_Êags
 &~
CI_SOCK_FLAG_DF
;

1105 
IP_RECEIVE_BROADCAST
:

1110 
ci_udp_°©e
* 
us
;

1112 if–
s
->
b
.
°©e
 !
CI_TCP_STATE_UDP
 )

1113 
Áû_no›t
;

1115 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1116 
Áû_Áu…
;

1117 
us
 = 
	`SOCK_TO_UDP
(
s
);

1118 if–*(*)
›tvÆ
 )

1119 
us
->
udpÊags
 |
CI_UDPF_RECV_BROADCAST
;

1121 
us
->
udpÊags
 &~
CI_UDPF_RECV_BROADCAST
;

1122 #i‡
CI_CFG_INSTALL_UDP_BROADCAST_FILTERS


1123 #îr‹ 
Fûãrög
 
UDP
 
bˇ°
; 
we
 
√ed
 
to
 
mod
 
fûãrs
 
ö
 
IP_RECEIVE_BROADCAST


1129 
	`OPTION_NOT_SUPP
(
IP_HDRINCL
, 
Áû_no›t
);

1131 
	`OPTION_NOT_TCP
–
IP_ADD_SOURCE_MEMBERSHIP
, 
s
, 
Áû_no›t
);

1132 
	`OPTION_NOT_TCP
–
IP_BLOCK_SOURCE
, 
s
, 
Áû_no›t
);

1133 
	`OPTION_NOT_TCP
–
IP_DROP_SOURCE_MEMBERSHIP
, 
s
, 
Áû_no›t
);

1134 
	`OPTION_NOT_TCP
–
IP_UNBLOCK_SOURCE
, 
s
, 
Áû_no›t
);

1139 
Áû_no›t
;

1144 
Áû_Áu…
:

1145 
	`LOG_SC
(
	`log
("%s: "
NS_FMT
" o±i⁄ %ò±r/À¿îr‹ (EFAULT o∏EINVAL)", 
__FUNCTION__
,

1146 
	`NS_PRI_ARGS
(
√tif
, 
s
), 
›äame
));

1147 
	`RET_WITH_ERRNO
–-
rc
 );

1149 
Áû_no›t
:

1150 
	`LOG_SC
(
	`log
("%s: "
NS_FMT
" unimplemented/bad option %i (ENOPROTOOPT)",

1151 
__FUNCTION__
, 
	`NS_PRI_ARGS
(
√tif
, 
s
), 
›äame
));

1152 
Áû_unh™
:

1153 
	`RET_WITH_ERRNO
–
ENOPROTOOPT
 );

1155 #ifde‡
IP_TRANSPARENT


1156 
h™dovî
:

1157 
	`LOG_SC
(
	`log
("%s: "
NS_FMT
" can't handle option %i; handing over",

1158 
__FUNCTION__
, 
	`NS_PRI_ARGS
(
√tif
, 
s
), 
›äame
));

1160  
CI_SOCKET_HANDOVER
;

1162 
	}
}

1164 #i‡
CI_CFG_FAKE_IPV6


1166 
	$ci_£t_sﬁ_ù6
–
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
,

1167 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
 )

1169 #ifde‡ 
IPV6_V6ONLY


1170 i‡(
›äame
 =
IPV6_V6ONLY
 &&

1171 (
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, ) || *(*)optval)) {

1172  
CI_SOCKET_HANDOVER
;

1178 
	}
}

1182 
	$ci_£t_sﬁ_sockë
(
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
,

1183 
›äame
, c⁄° * 
›tvÆ
, 
sockÀn_t
 
›éí
)

1185 
v
;

1186 
rc
;

1188 
	`ci_as£π
(
√tif
);

1190 
›äame
) {

1191 #i‡
CI_CFG_TCP_SOCK_STATS


1193 
CI_SO_L5_CONFIG_SOCK_STATS
:

1195 
ci_t˝_°©e
* 
ts
 = (ci_t˝_°©e*Ë
s
;

1196 
ci_ù_°©s_c⁄fig
 *
t˝_c⁄fig
;

1197 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, 
ci_ù_°©s_c⁄fig
)) )

1198 
Áû_övÆ
;

1200 
t˝_c⁄fig
 = (
ci_ù_°©s_c⁄fig
 *Ë
›tvÆ
;

1202 
	`NI_CONF
(
√tif
).
tc⁄°_°©s
 =

1203 
	`ci_t˝_time_ms2ticks
(
√tif
, 
t˝_c⁄fig
->
timeout
);

1205 
ts
->
°©s_fmt
 = 
t˝_c⁄fig
->
ouçut_fmt
;

1207 
	`ci_t˝_°©s_a˘i⁄
–
√tif
, 
ts
,

1208 
t˝_c⁄fig
->
a˘i⁄_ty≥
,

1209 
t˝_c⁄fig
->
ouçut_fmt
,

1210 
NULL
, NULL);

1215 #i‡
CI_CFG_SUPPORT_STATS_COLLECTION


1216 
CI_SO_L5_CONFIG_NETIF_STATS
:

1218 
ci_ù_°©s_c⁄fig
 *
√tif_c⁄fig
;

1220 if–(
rc
 =
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, 
ci_ù_°©s_c⁄fig
)) )

1221 
Áû_övÆ
;

1223 
√tif_c⁄fig
 = (
ci_ù_°©s_c⁄fig
 *Ë
›tvÆ
;

1225 
	`NI_CONF
(
√tif
).
tc⁄°_°©s
 =

1226 
	`ci_t˝_time_ms2ticks
(
√tif
, 
√tif_c⁄fig
->
timeout
);

1228 
√tif
->
°©e
->
°©s_fmt
 = 
√tif_c⁄fig
->
ouçut_fmt
;

1230 
	`ci_√tif_°©s_a˘i⁄
–
√tif
,

1231 
√tif_c⁄fig
->
a˘i⁄_ty≥
,

1232 
√tif_c⁄fig
->
ouçut_fmt
,

1233 
NULL
, NULL);

1238 
SO_KEEPALIVE
:

1241 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1242 
Áû_övÆ
;

1244 if(*(*)
›tvÆ
)

1245 
s
->
s_Êags
 |
CI_SOCK_FLAG_KALIVE
;

1247 
s
->
s_Êags
 &~
CI_SOCK_FLAG_KALIVE
;

1250 
SO_OOBINLINE
:

1253 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1254 
Áû_övÆ
;

1256 #ifde‡
_WIN32


1257 if–
	`sock_¥Ÿocﬁ
(
s
Ë=
IPPROTO_UDP
 )

1258 
Áû_no›t
;

1261 
s
->
s_Êags
 = ( *((*)
›tvÆ
) )

1262 ? 
s
->
s_Êags
 | 
CI_SOCK_FLAG_OOBINLINE


1263 : 
s
->
s_Êags
 & (~
CI_SOCK_FLAG_OOBINLINE
);

1266 
SO_RCVLOWAT
: {

1267 
vÆ
;

1268 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1269 
Áû_övÆ
;

1270 
vÆ
 = *(*Ë
›tvÆ
;

1272 #ifde‡
__löux__


1273 if–
vÆ
 < 0)

1274 
vÆ
 = 
INT_MAX
;

1276 
s
->
so
.
rcvlow©
 = 
vÆ
 ? val : 1;

1278 if–
vÆ
 < 1 ) {

1279 
rc
 = -
EINVAL
;

1280 
Áû_övÆ
;

1282 
s
->
so
.
rcvlow©
 = 
vÆ
;

1287 
SO_DONTROUTE
:

1289 #ifde‡
_WIN32


1290 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1291 
Áû_övÆ
;

1293 if(*(*)
›tvÆ
)

1294 
s
->
s_Êags
 |
CI_SOCK_FLAG_DONTROUTE
;

1296 
s
->
s_Êags
 &~
CI_SOCK_FLAG_DONTROUTE
;

1300 
	`LOG_U
(
	`ci_log
("%s: "
NS_FMT
" SO_DONTROUTE seen (not supported)",

1301 
__FUNCTION__
, 
	`NS_PRI_ARGS
(
√tif
, 
s
)));

1302 
Áû_no›t
;

1305 
SO_BROADCAST
:

1307 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1308 
Áû_övÆ
;

1310 if(*(*)
›tvÆ
)

1311 
s
->
s_Êags
 |
CI_SOCK_FLAG_BROADCAST
;

1313 
s
->
s_Êags
 &~
CI_SOCK_FLAG_BROADCAST
;

1316 
SO_REUSEADDR
:

1317 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1318 
Áû_övÆ
;

1319 if–*(*Ë
›tvÆ
 )

1320 
s
->
s_Êags
 |
CI_SOCK_FLAG_REUSEADDR
;

1322 
s
->
s_Êags
 &~
CI_SOCK_FLAG_REUSEADDR
;

1325 
SO_SNDBUF
:

1327 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1328 
Áû_övÆ
;

1329 
v
 = *(*Ë
›tvÆ
;

1330 if–
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
 ) {

1331 
v
 = 
	`CI_MIN
(v, (Ë
	`NI_OPTS
(
√tif
).
t˝_¢dbuf_max
);

1332 
s
->
so
.
¢dbuf
 = 
	`CI_MAX
(
	`oo_adju°_SO_XBUF
(
v
), (Ë
	`NI_OPTS
(
√tif
).
t˝_¢dbuf_mö
);

1337 if–! (
s
->
b
.
°©e
 & 
CI_TCP_STATE_NOT_CONNECTED
) )

1338 
	`ci_t˝_£t_¢dbuf
(
√tif
, 
	`SOCK_TO_TCP
(
s
));

1341 
v
 = 
	`CI_MIN
(v, (Ë
	`NI_OPTS
(
√tif
).
udp_¢dbuf_max
);

1342 
s
->
so
.
¢dbuf
 = 
	`CI_MAX
(
	`oo_adju°_SO_XBUF
(
v
), (Ë
	`NI_OPTS
(
√tif
).
udp_¢dbuf_mö
);

1344 
s
->
s_Êags
 |
CI_SOCK_FLAG_SET_SNDBUF
;

1347 
SO_RCVBUF
:

1349 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1350 
Áû_övÆ
;

1351 
v
 = *(*Ë
›tvÆ
;

1352 if–
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
 ) {

1353 
v
 = 
	`CI_MIN
(v, (Ë
	`NI_OPTS
(
√tif
).
t˝_rcvbuf_max
);

1354 
s
->
so
.
rcvbuf
 = 
	`CI_MAX
(
	`oo_adju°_SO_XBUF
(
v
), (Ë
	`NI_OPTS
(
√tif
).
t˝_rcvbuf_mö
);

1355 if–~
s
->
b
.
°©e
 & 
CI_TCP_STATE_NOT_CONNECTED
 )

1356 
	`ci_t˝_£t_rcvbuf
(
√tif
, 
	`SOCK_TO_TCP
(
s
));

1359 
v
 = 
	`CI_MIN
(v, (Ë
	`NI_OPTS
(
√tif
).
udp_rcvbuf_max
);

1360 
s
->
so
.
rcvbuf
 = 
	`CI_MAX
(
	`oo_adju°_SO_XBUF
(
v
), (Ë
	`NI_OPTS
(
√tif
).
udp_rcvbuf_mö
);

1362 
s
->
s_Êags
 |
CI_SOCK_FLAG_SET_RCVBUF
;

1365 
SO_LINGER
:

1367 
lögî
 *
l
 = (lögî*)
›tvÆ
;

1370 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, 
lögî
)) )

1371 
Áû_övÆ
;

1373 if–
l
->
l_⁄off
 ) {

1374 
s
->
s_Êags
 |
CI_SOCK_FLAG_LINGER
;

1375 
s
->
so
.
lögî
 = 
l
->
l_lögî
;

1377 
s
->
s_Êags
 &~
CI_SOCK_FLAG_LINGER
;

1379 
	`VERB
(
	`ci_log
("%s: onoff:%d fl:%x", 
__FUNCTION__
,

1380 
l
->
l_⁄off
, 
s
->
s_Êags
));

1384 #ifde‡ 
__löux__


1385 
SO_PRIORITY
:

1386 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, 
ci_pkt_¥i‹ôy_t
)) )

1387 
Áû_övÆ
;

1390 
s
->
so_¥i‹ôy
 = *(
ci_pkt_¥i‹ôy_t
 *)
›tvÆ
;

1393 
SO_BINDTODEVICE
:

1394 
rc
 = 
	`ci_sock_bödtodevi˚
(
√tif
, 
s
, 
›tvÆ
, 
›éí
);

1395 if–
rc
 =0 ||Ñ¯=
CI_SOCKET_HANDOVER
 )

1396  
rc
;

1398 
Áû_Ÿhî
;

1402 
SO_DEBUG
:

1403 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1404 
Áû_övÆ
;

1406 i‡(*(*)
›tvÆ
)

1407 
s
->
so
.
so_debug
 |
CI_SOCKOPT_FLAG_SO_DEBUG
;

1409 
s
->
so
.
so_debug
 &~
CI_SOCKOPT_FLAG_SO_DEBUG
;

1412 #ifde‡
_WIN32


1413 
SO_GROUP_ID
:

1414 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1415 
Áû_övÆ
;

1418 
SO_GROUP_PRIORITY
:

1419 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1420 
Áû_övÆ
;

1424 
SO_EXCLUSIVEADDRUSE
:

1428 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1429 
Áû_övÆ
;

1430 if(*(*)
›tvÆ
)

1431 
s
->
s_Êags
 &~
CI_SOCK_FLAG_REUSEADDR
;

1433 
s
->
s_Êags
 |
CI_SOCK_FLAG_REUSEADDR
;

1436 
SO_DONTLINGER
:

1437 
	`VERB
(
	`ci_log
("%s: SO_DONTLINGER", 
__FUNCTION__
));

1438 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1439 
Áû_övÆ
;

1441 i‡(*(*)
›tvÆ
)

1442 
s
->
s_Êags
 &~
CI_SOCK_FLAG_LINGER
;

1444 
s
->
s_Êags
 |
CI_SOCK_FLAG_LINGER
;

1447 #i‡
	`deföed
(
_WIN32
Ë&& deföed(
SO_PROTECT
)

1448 
SO_PROTECT
:

1450 
	`LOG_U
(
	`ci_log
("%s: *** SO_PROTECT sì¿***",
__FUNCTION__
));

1451 
Áû_no›t
;

1454 
	`OPTION_NOT_SUPP
–
SO_OPENTYPE
, 
Áû_no›t
 );

1455 
	`OPTION_ALERT_NOT_SUPP
–
SO_CONDITIONAL_ACCEPT
, 
Áû_no›t
 );

1457 
	`OPTION_ABORT_NOT_EXP
–
SO_UPDATE_CONNECT_CONTEXT
 );

1458 
	`OPTION_ABORT_NOT_EXP
–
SO_UPDATE_ACCEPT_CONTEXT
 );

1462 
SO_TIMESTAMP
:

1463 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1464 
Áû_övÆ
;

1465 if–
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
) )

1466 
s
->
cmsg_Êags
 |
CI_IP_CMSG_TIMESTAMP
;

1468 
s
->
cmsg_Êags
 &~
CI_IP_CMSG_TIMESTAMP
;

1471 
SO_TIMESTAMPNS
:

1472 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1473 
Áû_övÆ
;

1474 if–
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
) )

1475 
s
->
cmsg_Êags
 |
CI_IP_CMSG_TIMESTAMPNS
;

1477 
s
->
cmsg_Êags
 &~
CI_IP_CMSG_TIMESTAMPNS
;

1480 
SO_REUSEPORT
:

1481 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1482 
Áû_övÆ
;

1483 if–*(*Ë
›tvÆ
 )

1484 
s
->
s_Êags
 |
CI_SOCK_FLAG_REUSEPORT
;

1486 
s
->
s_Êags
 &~
CI_SOCK_FLAG_REUSEPORT
;

1489 
ONLOAD_SO_BUSY_POLL
:

1491 
vÆ
;

1492 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1493 
Áû_övÆ
;

1494 
vÆ
 = *(*Ë
›tvÆ
;

1496 if–
vÆ
 < 0 )

1497 
Áû_övÆ
;

1499 
s
->
b
.
•ö_cy˛es
 = 
	`oo_u£c_to_cy˛es64
(
√tif
,

1500 
vÆ
 =
INT_MAX
 ? -1 : val);

1504 
ONLOAD_SO_TIMESTAMPING
:

1505 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1506 
Áû_övÆ
;

1507 
v
 = 
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
);

1508 
rc
 = -
EINVAL
;

1509 if–
v
 & ~(
ONLOAD_SOF_TIMESTAMPING_MASK
 |

1510 
ONLOAD_SOF_TIMESTAMPING_STREAM
) )

1511 
Áû_övÆ
;

1512 if–(
v
 & 
ONLOAD_SOF_TIMESTAMPING_STREAM
) &&

1513 –! (
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
) ||

1514 ! (
v
 & 
ONLOAD_SOF_TIMESTAMPING_TX_HARDWARE
) ) )

1515 
Áû_övÆ
;

1517 if–(
v
 & 
ONLOAD_SOF_TIMESTAMPING_TX_HARDWARE
) ) {

1518 
ötf_i
;

1519 
some_good
 = 0;

1521 
	`OO_STACK_FOR_EACH_INTF_I
(
√tif
, 
ötf_i
) {

1522 if–
√tif
->
°©e
->
nic
[
ötf_i
].
oo_vi_Êags
 &

1523 
OO_VI_FLAGS_TX_HW_TS_EN
 )

1524 
some_good
 = 1;

1526 
	`LOG_U
(
	`log
("WARNING: Request for SOF_TIMESTAMPING_TX_HARDWARE when "

1530 
	`ci_√tif_ötf_i_to_ba£_ifödex
(
√tif
, 
ötf_i
)));

1532 if–! 
some_good
 )

1533 
	`log
("WARNING: Request for SOF_TIMESTAMPING_TX_HARDWARE when "

1537 if–(
v
 & 
ONLOAD_SOF_TIMESTAMPING_RX_HARDWARE
) ) {

1538 
ötf_i
;

1539 
some_good
 = 0;

1541 
	`OO_STACK_FOR_EACH_INTF_I
(
√tif
, 
ötf_i
) {

1542 if–
√tif
->
°©e
->
nic
[
ötf_i
].
oo_vi_Êags
 &

1543 
OO_VI_FLAGS_RX_HW_TS_EN
 )

1544 
some_good
 = 1;

1546 
	`LOG_U
(
	`log
("WARNING: Request for SOF_TIMESTAMPING_RX_HARDWARE when "

1550 
	`ci_√tif_ötf_i_to_ba£_ifödex
(
√tif
, 
ötf_i
)));

1552 if–! 
some_good
 )

1553 
	`log
("WARNING: Request for SOF_TIMESTAMPING_RX_HARDWARE when "

1560 if–
v
 & 
ONLOAD_SOF_TIMESTAMPING_OPT_ID
 &&

1561 ~
s
->
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_OPT_ID
 ) {

1562 
s
->
ts_key
 = 0;

1563 if–
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
 )

1564 
s
->
ts_key
 = 
	`SOCK_TO_TCP
(s)->
¢d_u«
;

1567 
rc
 = 0;

1568 
s
->
time°ampög_Êags
 = 
v
;

1569 i‡–(
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
) &&

1570 (~
s
->
b
.
°©e
 & 
CI_TCP_STATE_NOT_CONNECTED
) )

1571 
	`ci_t˝_£t_¢dbuf
(
√tif
, 
	`SOCK_TO_TCP
(
s
));

1574 if–
v
 & (
ONLOAD_SOF_TIMESTAMPING_RX_HARDWARE
 |

1575 
ONLOAD_SOF_TIMESTAMPING_RX_SOFTWARE
) )

1576 
s
->
cmsg_Êags
 |
CI_IP_CMSG_TIMESTAMPING
;

1578 
s
->
cmsg_Êags
 &~
CI_IP_CMSG_TIMESTAMPING
;

1581 #ifde‡
SO_SELECT_ERR_QUEUE


1582 
SO_SELECT_ERR_QUEUE
:

1583 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

1584 
Áû_övÆ
;

1585 if–
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
) )

1586 
	`ci_bô_£t
(&
s
->
s_aÊags
, 
CI_SOCK_AFLAG_SELECT_ERR_QUEUE_BIT
);

1588 
	`ci_bô_˛ór
(&
s
->
s_aÊags
, 
CI_SOCK_AFLAG_SELECT_ERR_QUEUE_BIT
);

1597 
Áû_no›t
;

1603 
Áû_övÆ
:

1604 
	`LOG_SC
(
	`log
("%s: "
NS_FMT
" option %iÖtr/lenÉrror (EINVAL or EFAULT)",

1605 
__FUNCTION__
, 
	`NS_PRI_ARGS
(
√tif
, 
s
), 
›äame
));

1606 
	`RET_WITH_ERRNO
–-
rc
 );

1608 
Áû_no›t
:

1609 
	`LOG_SC
(
	`log
("%s: "
NS_FMT
" unimplemented/bad option %i (ENOPROTOOPT)",

1610 
__FUNCTION__
, 
	`NS_PRI_ARGS
(
√tif
, 
s
), 
›äame
));

1611 
	`RET_WITH_ERRNO
–
ENOPROTOOPT
 );

1613 
Áû_Ÿhî
:

1614 
	`RET_WITH_ERRNO
(-
rc
);

1615 
	}
}

1618 
	$ci_›t_is_£âög_ªu£p‹t
(
Àvñ
, 
›äame
, c⁄° * 
›tvÆ
,

1619 
sockÀn_t
 
›éí
)

1621 if–
Àvñ
 =
SOL_SOCKET
 && 
›äame
 =
SO_REUSEPORT
 &&

1622 
	`›t_ok
(
›tvÆ
, 
›éí
, ) && *(*)optval == 1 )

1625 
	}
}

1627 
	$ci_£tsock›t_os_Áû_ign‹e
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
, 
îr
,

1628 
Àvñ
, 
›äame
,

1629 c⁄° * 
›tvÆ
, 
sockÀn_t
 
›éí
)

1631 if–
Àvñ
 =
SOL_SOCKET
 && 
›äame
 =
ONLOAD_SO_BUSY_POLL
 &&

1632 
›éí
 >= () )

1634 if–(
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
Ë&& 
Àvñ
 =
SOL_SOCKET
 &&

1635 –
›äame
 =
SO_TIMESTAMP
 || o±«mê=
SO_TIMESTAMPNS
 ||

1636 
›äame
 =
ONLOAD_SO_TIMESTAMPING
 ) &&

1637 
›éí
 >= () )

1640 
	}
}

1648 
	$ci_£t_sﬁ_sockë_nﬁock
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
, 
›äame
,

1649 c⁄° * 
›tvÆ
, 
sockÀn_t
 
›éí
)

1651 
rc
 = 1;

1653  
›äame
 ) {

1654 
SO_RCVTIMEO
: {

1655 #ifde‡
_WIN32


1656 
DWORD
 
dw
;

1657 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, 
DWORD
)) )

1658 
Áû_övÆ
;

1659 
dw
 = *(
DWORD
*)
›tvÆ
;

1660 if–!
dw
 )

1661 
	`ci_bô_˛ór
(&
s
->
s_aÊags
, 
CI_SOCK_AFLAG_RCVTIMEO_BIT
);

1663 
	`ci_bô_£t
(&
s
->
s_aÊags
, 
CI_SOCK_AFLAG_RCVTIMEO_BIT
);

1664 
s
->
so
.
rcvtimeo
.
tv_£c
 = (
ci_öt32
)(
dw
/1000);

1665 
s
->
so
.
rcvtimeo
.
tv_u£c
 = (
ci_öt32
)((
dw
%1000)*1000);

1667 
timevÆ
 *
tv
 = (timevÆ *)
›tvÆ
;

1668 
ci_uöt64
 
timeo_u£c
;

1669 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, 
timevÆ
)) )

1670 
Áû_övÆ
;

1671 
timeo_u£c
 = 
tv
->
tv_£c
 * 1000000ULL +Åv->
tv_u£c
;

1672 if–
timeo_u£c
 == 0 )

1673 
s
->
so
.
rcvtimeo_m£c
 = 0;

1674 if–
timeo_u£c
 > 0xffffffffULL * 1000 )

1675 
s
->
so
.
rcvtimeo_m£c
 = -1;

1676 if–
timeo_u£c
 < 1000 )

1677 
s
->
so
.
rcvtimeo_m£c
 = 1;

1679 
s
->
so
.
rcvtimeo_m£c
 = 
tv
->
tv_£c
 * 1000 +Åv->
tv_u£c
 / 1000;

1681 
rc
 = 0;

1685 
SO_SNDTIMEO
: {

1686 #ifde‡
_WIN32


1687 
DWORD
 
dw
;

1688 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, 
DWORD
)) )

1689 
Áû_övÆ
;

1690 
dw
 = *(
DWORD
*)
›tvÆ
;

1691 if–!
dw
 )

1692 
	`ci_bô_˛ór
(&
s
->
s_aÊags
, 
CI_SOCK_AFLAG_SNDTIMEO_BIT
);

1694 
	`ci_bô_£t
(&
s
->
s_aÊags
, 
CI_SOCK_AFLAG_SNDTIMEO_BIT
);

1695 
s
->
so
.
¢dtimeo
.
tv_£c
 = (
ci_öt32
)(
dw
/1000);

1696 
s
->
so
.
¢dtimeo
.
tv_u£c
 = (
ci_öt32
)((
dw
%1000)*1000);

1698 
timevÆ
 *
tv
 = (timevÆ *)
›tvÆ
;

1699 
ci_uöt64
 
timeo_u£c
;

1700 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, 
timevÆ
)) )

1701 
Áû_övÆ
;

1702 
timeo_u£c
 = 
tv
->
tv_£c
 * 1000000ULL +Åv->
tv_u£c
;

1703 if–
timeo_u£c
 == 0 )

1704 
s
->
so
.
¢dtimeo_m£c
 = 0;

1705 if–
timeo_u£c
 > 0xffffffffULL * 1000 )

1706 
s
->
so
.
¢dtimeo_m£c
 = -1;

1707 if–
timeo_u£c
 < 1000 )

1708 
s
->
so
.
¢dtimeo_m£c
 = 1;

1710 
s
->
so
.
¢dtimeo_m£c
 = 
tv
->
tv_£c
 * 1000 +Åv->
tv_u£c
 / 1000;

1712 
rc
 = 0;

1716 #ifde‡
_WIN32


1717 
SO_ERROR
:

1718 if–
	`›t_ok
(
›tvÆ
, 
›éí
, )) {

1722 
s
->
so_îr‹
 = *(*)
›tvÆ
;

1724 
rc
 = 0;

1728  
rc
;

1730 
Áû_övÆ
:

1731 
	`RET_WITH_ERRNO
(-
rc
);

1732 
	}
}

	@cplane_ops.c

65 
	~<⁄lﬂd/˝œ√_›s.h
>

69 #i‚de‡
TRUE


70 
	#TRUE
 1

	)

71 
	#FALSE
 0

	)

76 #ifde‡
__KERNEL__


77 
	~<˝œ√/exp‹ãd.h
>

90 
	#DPRINTF
 
ci_log


	)

92 
	#CODEID
 "˝œ√(⁄lﬂd)"

	)

105 
ci_ölöe
 
	$ci˝_Æl_¶aves_ö_°ack
(c⁄° 
ci˝_ul_mibs_t
 *
u£r
,

106 
ci_√tif
 *
ni
, 
ci_öt16
 
b⁄d_rowid
)

112 
ci˝_b⁄d_row_t
* 
b⁄d_row
;

113 
ci_hwp‹t_id_t
 
hwp‹t
;

115 
	`ci_as£π
(
b⁄d_rowid
 >0 && b⁄d_rowid < 
u£r
->
b⁄döfo_uèbÀ
->
rows_max
);

116 
b⁄d_row
 = &
u£r
->
b⁄döfo_uèbÀ
->
b⁄d
[
b⁄d_rowid
];

118  
b⁄d_row
->
√xt
 !
CICP_BOND_ROW_NEXT_BAD
 ) {

119 
	`ci_as£π
(
b⁄d_row
->
√xt
 < 
u£r
->
b⁄döfo_uèbÀ
->
rows_max
);

120 
b⁄d_row
 = &
u£r
->
b⁄döfo_uèbÀ
->
b⁄d
[b⁄d_row->
√xt
];

121 if–
b⁄d_row
->
ty≥
 !
CICP_BOND_ROW_TYPE_SLAVE
 )

123 
hwp‹t
 = 
b⁄d_row
->
¶ave
.hwport;

124 if–(Ë
hwp‹t
 >
CPLANE_MAX_REGISTER_INTERFACES
 ||

125 
	`__ci_hwp‹t_to_ötf_i
(
ni
, 
hwp‹t
) < 0 )

130 
	}
}

133 
ci_ölöe
 

134 
	$ci_ù_ˇche_is_⁄lﬂdabÀ
(
ci_√tif
* 
ni
, 
ci_ù_ˇched_hdrs
* 
ùˇche
)

141 
ci_hwp‹t_id_t
 
hwp‹t
 = 
ùˇche
->hwport;

142 
	`ci_as£π
(
hwp‹t
 =
CI_HWPORT_ID_BAD
 ||

143 (Ë
hwp‹t
 < 
CPLANE_MAX_REGISTER_INTERFACES
);

144  (Ë
hwp‹t
 < 
CPLANE_MAX_REGISTER_INTERFACES
 &&

145 (
ùˇche
->
ötf_i
 = 
	`__ci_hwp‹t_to_ötf_i
(
ni
, 
hwp‹t
)) >= 0;

146 
	}
}

149 #i‡
CPLANE_TEAMING


151 
	$ci˝_u£r_b⁄d_hash_gë_hwp‹t
(
ci_√tif
* 
ni
, 
ci_ù_ˇched_hdrs
* 
ùˇche
,

152 c⁄° 
ci˝_Œ≠_row_t
* 
Œ≠_row
,

153 
ci_uöt16
 
§c_p‹t_be16
,

154 
ci˝_íˇp_t
 
íˇp
)

159 
ci˝_hash_°©e
 
hs
;

161 if–
§c_p‹t_be16
 !0 || 
ùˇche
->
dp‹t_be16
 != 0)

162 
hs
.
Êags
 = 
CICP_HASH_STATE_FLAGS_IS_TCP_UDP
 |

163 
CICP_HASH_STATE_FLAGS_IS_IP
;

165 
hs
.
Êags
 = 
CICP_HASH_STATE_FLAGS_IS_IP
;

166 
	`CI_MAC_ADDR_SET
(&
hs
.
d°_mac
, 
	`ci_ù_ˇche_ëhî_dho°
(
ùˇche
));

167 
	`CI_MAC_ADDR_SET
(&
hs
.
§c_mac
, 
	`ci_ù_ˇche_ëhî_sho°
(
ùˇche
));

168 
hs
.
§c_addr_be32
 = 
ùˇche
->
ù_ßddr_be32
;

169 
hs
.
d°_addr_be32
 = 
ùˇche
->
ù
.
ù_daddr_be32
;

170 
hs
.
§c_p‹t_be16
 = src_port_be16;

171 
hs
.
d°_p‹t_be16
 = 
ùˇche
->
dp‹t_be16
;

172 
ùˇche
->
hwp‹t
 = 
	`ci_hwp‹t_b⁄d_gë
(
	`CICP_HANDLE
(
ni
), &
íˇp
,

173 
Œ≠_row
->
b⁄d_rowid
, &
hs
);

174  ! 
	`ci_ù_ˇche_is_⁄lﬂdabÀ
(
ni
, 
ùˇche
);

175 
	}
}

179 
ci_ölöe
 

180 
	$ci˝_mˇ°_u£_gw_mac
(c⁄° 
ci˝_fwd_row_t
* 
row
,

181 c⁄° 
oo_sock_˝œ√
* 
sock_˝
)

199 if–
row
 !
NULL
 &&Ñow->
fú°_h›
 !0 &&Ñow->
de°√t_ù£t
 != 0 ) {

200 if–
sock_˝
->
ù_mu…iˇ°_if
 =
CI_IFID_BAD
 ) {

201  (
sock_˝
->
sock_˝_Êags
 &

202 (
OO_SCP_LADDR_BOUND
 | 
OO_SCP_CONNECTED
)) == 0;

205  
sock_˝
->
ù_mu…iˇ°_if
 =
row
->
de°_ifödex
;

209 
	}
}

212 
ci_ölöe
 

213 
	$ci_ù_ˇche_öô_mˇ°_mac
(
ci_√tif
* 
ni
, 
ci_ù_ˇched_hdrs
* 
ùˇche
,

214 
daddr_be32
)

216 
ci_uöt8
* 
dho°
 = 
	`ci_ù_ˇche_ëhî_dho°
(
ùˇche
);

217 
daddr
 = 
	`CI_BSWAP_BE32
(
daddr_be32
);

218 
dho°
[0] = 1;

219 
dho°
[1] = 0;

220 
dho°
[2] = 0x5e;

221 
dho°
[3] = (
daddr
 >> 16) & 0x7f;

222 
dho°
[4] = (
daddr
 >> 8) & 0xff;

223 
dho°
[5] = 
daddr
 & 0xff;

224 
	`ci˝_mac_£t_mo°ly_vÆid
(
	`CICP_USER_MIBS
(
	`CICP_HANDLE
(
ni
)).
mac_uèbÀ
,

225 &
ùˇche
->
mac_öãgrôy
);

226 
ùˇche
->
√xth›
 = 0;

227 
	}
}

231 
	$ci˝_u£r_ªåõve
(
ci_√tif
* 
ni
,

232 
ci_ù_ˇched_hdrs
* 
ùˇche
,

233 c⁄° 
oo_sock_˝œ√
* 
sock_˝
)

235 c⁄° 
ci˝_ul_mibs_t
* 
u£r
 = &
	`CICP_USER_MIBS
(
	`CICP_HANDLE
(
ni
));

236 
ci˝_fwdöfo_t
* 
fwdt
 = 
u£r
->
fwdöfo_uèbÀ
;

237 
ci˝_Œ≠öfo_t
* 
Œ≠t
 = 
u£r
->
Œ≠öfo_uèbÀ
;

238 c⁄° 
ci˝_fwd_row_t
* 
row
;

239 c⁄° 
ci˝_Œ≠_row_t
* 
Ãow
 = 
NULL
;

240 
ci˝_mac_vîöfo_t
 
mac_öfo
;

241 
o§c
;

243 
	`ci_as£π
(
u£r
);

244 
	`ci_as£π
(
Œ≠t
);

245 (Ë
Œ≠t
;

246 
	`CI_DEBUG
(
ùˇche
->
°©us
 = -1);

248 if(
	`CI_UNLIKELY
–
	`CI_IP_IS_MULTICAST
(
ùˇche
->
ù
.
ù_daddr_be32
) &&

249 (
sock_˝
->
sock_˝_Êags
 & 
OO_SCP_NO_MULTICAST
) ))

250 
Æõƒouã_no_vîlock
;

252 
agaö
:

253 
	`CICP_READ_LOCK
(
	`CICP_HANDLE
(
ni
), 
Œ≠t
->
vîsi⁄
)

261 
row
 = 
	`_ci˝_fwd_föd_ù
(
fwdt
, 
ùˇche
->
ù
.
ù_daddr_be32
,

262 
sock_˝
->
so_bödtodevi˚
);

263 if–
row
 !
NULL
 ) {

264 
Ãow
 = &
u£r
->
Œ≠öfo_uèbÀ
->
Œ≠
[
row
->
Œ≠_rowid
];

265 if–
row
->
de°_ifödex
 !
Ãow
->
ifödex
) {

270 
	`LOG_U
(
	`ci_log
("WARNING in %s: unexpected data inÅhe controlÖlane "

273 
__func__
, 
	`ù_addr_°r
(
ùˇche
->
ù
.
ù_daddr_be32
),

274 
row
->
de°_ifödex
,Ñow->
Œ≠_rowid
, 
Ãow
->
ifödex
));

275 #ifde‡
__KERNEL__


276 
Æõƒouã
;

278 
agaö
;

283 if–
sock_˝
->
so_bödtodevi˚
 !
CI_IFID_BAD
 ) {

284 
ùˇche
->
ifödex
 = 
sock_˝
->
so_bödtodevi˚
;

285 
h™dÀ_bound_dev
;

287 if–
	`CI_IP_IS_MULTICAST
(
ùˇche
->
ù
.
ù_daddr_be32
) &&

288 
sock_˝
->
ù_mu…iˇ°_if
 !
CI_IFID_BAD
 ) {

295 
ùˇche
->
ifödex
 = 
sock_˝
->
ù_mu…iˇ°_if
;

298 
row
 = 
NULL
;

299 
h™dÀ_bound_dev
:

300 
Ãow
 = 
	`ci˝_Œ≠_föd_ifid
(
u£r
->
Œ≠öfo_uèbÀ
, 
ùˇche
->
ifödex
);

301 if–
Ãow
 =
NULL
 )

302 
Æõƒouã
;

303 
ùˇche
->
mtu
 = 
Ãow
->mtu;

304 
ùˇche
->
hwp‹t
 = 
Ãow
->hwport;

305 
ùˇche
->
íˇp
 = 
Ãow
->encap;

307 if–! 
	`ci_ù_ˇche_is_⁄lﬂdabÀ
(
ni
, 
ùˇche
)

308 #i‡
CPLANE_TEAMING


309 || ( (
ùˇche
->
íˇp
.
ty≥
 & 
CICP_LLAP_TYPE_BOND
) &&

310 ! 
	`ci˝_Æl_¶aves_ö_°ack
(
u£r
, 
ni
, 
Ãow
->
b⁄d_rowid
) )

313 
Æõƒouã
;

325 if–
sock_˝
->
ù_œddr_be32
 != 0 )

326 
ùˇche
->
ù_ßddr_be32
 = 
sock_˝
->
ù_œddr_be32
;

327 if–
sock_˝
->
ù_mu…iˇ°_if
 !
CI_IFID_BAD
 &&

328 
sock_˝
->
ù_mu…iˇ°_if_œddr_be32
 != 0 )

329 
ùˇche
->
ù_ßddr_be32
 = 
sock_˝
->
ù_mu…iˇ°_if_œddr_be32
;

335 if–
row
 !
NULL
 )

336 
ùˇche
->
ù_ßddr_be32
 = 
row
->
¥ef_sour˚
;

337 if–
Ãow
->
ù_addr
 !
INADDR_ANY
 )

338 
ùˇche
->
ù_ßddr_be32
 = 
Ãow
->
ù_addr
;

340 
Æõƒouã
;

343 if(
	`CI_UNLIKELY
–
row
 =
NULL
 ))

344 
n‹ouã
;

345 if(
	`CI_UNLIKELY
–
row
->
ty≥
 =
CICP_ROUTE_ALIEN
 ))

346 
Æõƒouã
;

347 
ùˇche
->
mtu
 = 
row
->mtu =0 ? 
Ãow
->mtu :Ñow->mtu;

348 
	`ci_as£π
(
ùˇche
->
mtu
);

350 if–
ùˇche
->
ù
.
ù_daddr_be32
 =
row
->
¥ef_sour˚
 ||

351 
Ãow
->
íˇp
.
ty≥
 =
CICP_LLAP_TYPE_LOOP
) {

352 
ùˇche
->
°©us
 = 
ªårc_loˇÃouã
;

353 
ùˇche
->
íˇp
.
ty≥
 = 
CICP_LLAP_TYPE_SFC
;

354 
ùˇche
->
ëhî_off£t
 = 4;

355 
ùˇche
->
ötf_i
 = 
OO_INTF_I_LOOPBACK
;

356 
	`ci˝_mac_£t_mo°ly_vÆid
(
	`CICP_USER_MIBS
(
	`CICP_HANDLE
(
ni
)).
mac_uèbÀ
,

357 &
ùˇche
->
mac_öãgrôy
);

358 
check_vîlock_™d_out
;

360 
ùˇche
->
hwp‹t
 = 
Ãow
->hwport;

361 if–! 
	`ci_ù_ˇche_is_⁄lﬂdabÀ
(
ni
, 
ùˇche
)

362 #i‡
CPLANE_TEAMING


363 || ( (
Ãow
->
íˇp
.
ty≥
 & 
CICP_LLAP_TYPE_BOND
) &&

364 ! 
	`ci˝_Æl_¶aves_ö_°ack
(
u£r
, 
ni
, 
Ãow
->
b⁄d_rowid
) )

367 
Æõƒouã
;

368 
ùˇche
->
ifödex
 = 
row
->
de°_ifödex
;

369 if–
sock_˝
->
ù_œddr_be32
 != 0 )

370 
ùˇche
->
ù_ßddr_be32
 = 
sock_˝
->
ù_œddr_be32
;

372 
ùˇche
->
ù_ßddr_be32
 = 
row
->
¥ef_sour˚
;

373 
ùˇche
->
íˇp
 = 
Ãow
->encap;

377 
	`ci˝_ùˇche_vœn_£t
(
ùˇche
);

378 
	`mem˝y
(
	`ci_ù_ˇche_ëhî_sho°
(
ùˇche
), 
Ãow
->
mac
, 
ETH_ALEN
);

381 if–
	`CI_IP_IS_MULTICAST
(
ùˇche
->
ù
.
ù_daddr_be32
) ) {

382 
ùˇche
->
ù
.
ù_âl
 = 
sock_˝
->
ù_mˇ°_âl
;

383 if–! 
	`ci˝_mˇ°_u£_gw_mac
(
row
, 
sock_˝
) ) {

384 
	`ci_ù_ˇche_öô_mˇ°_mac
(
ni
, 
ùˇche
, ipˇche->
ù
.
ù_daddr_be32
);

385 #i‡
CPLANE_TEAMING


386 if–
ùˇche
->
íˇp
.
ty≥
 & 
CICP_LLAP_TYPE_USES_HASH
 )

387 if–
	`ci˝_u£r_b⁄d_hash_gë_hwp‹t
(
ni
, 
ùˇche
, 
Ãow
,

388 
sock_˝
->
Õ‹t_be16
,

389 
ùˇche
->
íˇp
) != 0 )

390 
Æõƒouã
;

392 
ùˇche
->
°©us
 = 
ªårc_suc˚ss
;

393 
check_vîlock_™d_out
;

395 
ùˇche
->
√xth›
 = 
row
->
fú°_h›
;

398 
ùˇche
->
ù
.
ù_âl
 = 
sock_˝
->ip_ttl;

399 if–
row
 !
NULL
 &&Ñow->
fú°_h›
 != 0 &&

400 (
sock_˝
->
so_bödtodevi˚
 =
CI_IFID_BAD
 ||

401 
ùˇche
->
ifödex
 =
row
->
de°_ifödex
) ) {

402 
ùˇche
->
√xth›
 = 
row
->
fú°_h›
;

405 
ùˇche
->
√xth›
 = ipˇche->
ù
.
ù_daddr_be32
;

417 
o§c
 = 
	`ci˝_mac_gë
(
u£r
->
mac_uèbÀ
, 
ùˇche
->
ifödex
, ipˇche->
√xth›
,

418 
	`ci_ù_ˇche_ëhî_dho°
(
ùˇche
), &
mac_öfo
);

420 if–
o§c
 == 0 ) {

421 #i‡
CPLANE_TEAMING


422 if–
ùˇche
->
íˇp
.
ty≥
 & 
CICP_LLAP_TYPE_USES_HASH
 )

423 if–
	`ci˝_u£r_b⁄d_hash_gë_hwp‹t
(
ni
, 
ùˇche
, 
Ãow
, 
sock_˝
->
Õ‹t_be16
,

424 
ùˇche
->
íˇp
) != 0 )

425 
Æõƒouã
;

427 
ùˇche
->
mac_öãgrôy
 = 
mac_öfo
;

428 
ùˇche
->
°©us
 = 
ªårc_suc˚ss
;

429 if–
u£r
->
mac_uèbÀ
->
ùmac
[
mac_öfo
.
row_ödex
].
√ed_upd©e
 ) {

430 
ùˇche
->
Êags
 |
CI_IP_CACHE_NEED_UPDATE_SOON
;

431 if–
u£r
->
mac_uèbÀ
->
ùmac
[
mac_öfo
.
row_ödex
].
√ed_upd©e
 ==

432 
CICP_MAC_ROW_NEED_UPDATE_STALE
 )

433 
ùˇche
->
Êags
 |
CI_IP_CACHE_NEED_UPDATE_STALE
;

435 
check_vîlock_™d_out
;

437 if–
o§c
 =-
EDESTADDRREQ
 ) {

439 
ùˇche
->
mac_öãgrôy
.
row_vîsi⁄
 = 
CI_VERLOCK_BAD
;

440 
ùˇche
->
°©us
 = 
ªårc_nomac
;

441 
check_vîlock_™d_out
;

443 if–
o§c
 =-
EAGAIN
 ) {

444 #ifde‡
__KERNEL__


447 
	`ci˝_u∆ock
(
_c⁄åﬁ_∂™e
);

449 
agaö
;

456 
ùˇche
->
°©us
 = (
ci_öt16
Ë
o§c
;

457 if–
ùˇche
->
°©us
 =-
EHOSTUNREACH
 ) {

463 
ùˇche
->
mac_öãgrôy
.
row_vîsi⁄
 = 
CI_VERLOCK_BAD
;

464 
ùˇche
->
°©us
 = 
ªårc_nomac
;

465 
check_vîlock_™d_out
;

467 
nŸ_⁄lﬂdabÀ
;

470 
check_vîlock_™d_out
:

472 
	`CICP_READ_UNLOCK
(
	`CICP_HANDLE
(
ni
), 
Œ≠t
->
vîsi⁄
)

473 
out
:

474 
	`ci_as£π
(
ùˇche
->
°©us
 != -1);

477 
nŸ_⁄lﬂdabÀ
:

478 
ùˇche
->
hwp‹t
 = 
CI_HWPORT_ID_BAD
;

479 
ùˇche
->
ötf_i
 = -1;

480 
	`ci˝_mac_£t_mo°ly_vÆid
(
	`CICP_USER_MIBS
(
	`CICP_HANDLE
(
ni
)).
mac_uèbÀ
,

481 &
ùˇche
->
mac_öãgrôy
);

482 
check_vîlock_™d_out
;

484 
Æõƒouã
:

485 
ùˇche
->
°©us
 = 
ªårc_Æõƒouã
;

486 
nŸ_⁄lﬂdabÀ
;

488 
n‹ouã
:

489 
ùˇche
->
°©us
 = 
ªårc_n‹ouã
;

490 
nŸ_⁄lﬂdabÀ
;

492 
Æõƒouã_no_vîlock
:

493 
ùˇche
->
hwp‹t
 = 
CI_HWPORT_ID_BAD
;

494 
ùˇche
->
ötf_i
 = -1;

495 
	`ci˝_mac_£t_mo°ly_vÆid
(
	`CICP_USER_MIBS
(
	`CICP_HANDLE
(
ni
)).
mac_uèbÀ
,

496 &
ùˇche
->
mac_öãgrôy
);

497 
ùˇche
->
°©us
 = 
ªårc_Æõƒouã
;

498 
out
;

499 
	}
}

503 
	$ci˝_ù_ˇche_upd©e_‰om
(
ci_√tif
* 
ni
, 
ci_ù_ˇched_hdrs
* 
ùˇche
,

504 c⁄° 
ci_ù_ˇched_hdrs
* 
‰om_ùˇche
)

509 
	`ci_as£π_equÆ
(
ùˇche
->
ù
.
ù_daddr_be32
, 
‰om_ùˇche
->ip.ip_daddr_be32);

510 
	`ci_as£π_equÆ
(
ùˇche
->
dp‹t_be16
, 
‰om_ùˇche
->dport_be16);

512 
ùˇche
->
mac_öãgrôy
 = 
‰om_ùˇche
->mac_integrity;

513 
ùˇche
->
ù_ßddr_be32
 = 
‰om_ùˇche
->ip_saddr_be32;

514 
ùˇche
->
ù
.
ù_âl
 = 
‰om_ùˇche
->ip.ip_ttl;

515 
ùˇche
->
°©us
 = 
‰om_ùˇche
->status;

516 
ùˇche
->
Êags
 = 
‰om_ùˇche
->flags;

517 
ùˇche
->
√xth›
 = 
‰om_ùˇche
->nexthop;

519 
ùˇche
->
mtu
 = 
‰om_ùˇche
->mtu;

520 
ùˇche
->
ifödex
 = 
‰om_ùˇche
->ifindex;

521 
ùˇche
->
íˇp
 = 
‰om_ùˇche
->encap;

522 
ùˇche
->
ötf_i
 = 
‰om_ùˇche
->intf_i;

523 
ùˇche
->
hwp‹t
 = 
‰om_ùˇche
->hwport;

524 
ùˇche
->
ëhî_off£t
 = 
‰om_ùˇche
->ether_offset;

525 
	`mem˝y
(
ùˇche
->
ëhî_hódî
, 
‰om_ùˇche
->ether_header,

526 (
ùˇche
->
ëhî_hódî
));

527 
	}
}

	@csum_copy_iovec_setlen.c

14 
	~"ù_öã∫Æ.h
"

17 
ci_ölöe
 
do_c›y_‰om_u£r
(* 
to
, c⁄° * 
‰om
, 
n_byãs


18 
	$CI_KERNEL_ARG
(
ci_addr_•c_t
 
addr_•c
))

20 #ifde‡
__unix__


21 #ifde‡
__KERNEL__


22 if–
addr_•c
 !
CI_ADDR_SPC_KERNEL
 )

23  
	`c›y_‰om_u£r
(
to
, 
‰om
, 
n_byãs
);

26 
	`mem˝y
(
to
, 
‰om
, 
n_byãs
);

28 
	}
}

31 
__ci_c›y_iovec_to_pkt
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

32 
ci_iovec_±r
* 
piov


33 
	$CI_KERNEL_ARG
(
ci_addr_•c_t
 
addr_•c
))

35 
n
, 
tŸÆ
;

36 * 
de°
;

38 
	`ci_as£π
(! 
	`ci_iovec_±r_is_em±y_¥›î
(
piov
));

39 
	`ci_as£π_gt
(
	`oo_offbuf_À·
(&
pkt
->
buf
), 0);

41 
de°
 = 
	`oo_offbuf_±r
(&
pkt
->
buf
);

43 
	`ci_as£π_equÆ
(
pkt
->
n_buf„rs
, 1);

45 
tŸÆ
 = 0;

47 
n
 = 
	`oo_offbuf_À·
(&
pkt
->
buf
);

48 
n
 = 
	`CI_MIN
“, ()
	`CI_IOVEC_LEN
(&
piov
->
io
));

49 if(
	`CI_UNLIKELY
–
	`do_c›y_‰om_u£r
(
de°
, 
	`CI_IOVEC_BASE
(&
piov
->
io
), 
n


50 
	`CI_KERNEL_ARG
(
addr_•c
)) ))

51  -
EFAULT
;

57 
pkt
->
buf_Àn
 +
n
;

58 
pkt
->
∑y_Àn
 +
n
;

60 
tŸÆ
 +
n
;

61 
	`ci_iovec_±r_adv™˚
(
piov
, 
n
);

62 
	`oo_offbuf_adv™˚
(&
pkt
->
buf
, 
n
);

68 if–
	`CI_IOVEC_LEN
(&
piov
->
io
) == 0 ) {

69 if–
piov
->
iovÀn
 =0 ) 
d⁄e
;

70 --
piov
->
iovÀn
;

71 
piov
->
io
 = *piov->
iov
++;

74 if–
	`oo_offbuf_À·
(&
pkt
->
buf
Ë=0 ) 
d⁄e
;

76 
de°
 +
n
;

79 
d⁄e
:

80  
tŸÆ
;

81 
	}
}

84 #ifde‡
__KERNEL__


85 #i‡
deföed
(
__unix__
)

86 
ssize_t


87 
	$__ci_ù_c›y_pkt_to_u£r
(
ci_√tif
* 
ni
, 
ci_iovec
* 
iov
, 
ci_ù_pkt_fmt
* 
pkt
,

88 
≥ek_off
)

90 
Àn
;

92 
Àn
 = 
	`CI_MIN
(
	`oo_offbuf_À·
(&
pkt
->
buf
Ë- 
≥ek_off
, 
iov
->
iov_Àn
);

93 if–
	`c›y_to_u£r
(
	`CI_IOVEC_BASE
(
iov
),

94 
	`oo_offbuf_±r
(&
pkt
->
buf
Ë+ 
≥ek_off
, 
Àn
) ) {

95 
	`ci_log
("%s: fau…ed", 
__FUNCTION__
);

96  -
EFAULT
;

98 
	`oo_offbuf_adv™˚
(&
pkt
->
buf
, 
Àn
);

99 
	`CI_IOVEC_BASE
(
iov
Ë(*)CI_IOVEC_BASE(iovË+ 
Àn
;

100 
	`CI_IOVEC_LEN
(
iov
Ë-
Àn
;

101  
Àn
;

102 
	}
}

106 
ssize_t


107 
	$__ci_ù_c›y_pkt_to_u£r
(
ci_√tif
* 
ni
, 
ci_iovec
* 
iov
,

108 
ci_ù_pkt_fmt
* 
pkt
, 
≥ek_off
)

110 
Àn
;

112 
Àn
 = 
	`oo_offbuf_À·
(&
pkt
->
buf
Ë- 
≥ek_off
;

113 
Àn
 = 
	`CI_MIN
÷í, (Ë
	`CI_IOVEC_LEN
(
iov
));

115 
	`mem˝y
(
	`CI_IOVEC_BASE
(
iov
), 
	`oo_offbuf_±r
(&
pkt
->
buf
Ë+ 
≥ek_off
, 
Àn
);

117 
	`oo_offbuf_adv™˚
(&
pkt
->
buf
, 
Àn
);

118 
	`CI_IOVEC_BASE
(
iov
Ë(*)CI_IOVEC_BASE(iovË+ 
Àn
;

119 
	`CI_IOVEC_LEN
(
iov
Ë-
Àn
;

121  
Àn
;

122 
	}
}

126 #ifde‡
__KERNEL__


127 #i‡
deföed
(
__unix__
)

129 
ci_ölöe
 
size_t


130 
	$ci_ù_fﬁlow_™d_c›y_∑ge
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

131 
ci_addr_•c_t
 
addr_•c
, * 
§c
,

132 
off£t
, 
Àn
)

134 
∑ge
 *page;

135 *
de°
;

136 
ci_iovec_±r
 
piov
;

138 
∑ge
 = 
	`ci_fﬁlow_∑ge
(
addr_•c
, 
§c
);

139 i‡(
∑ge
 =
NULL
)

142 
de°
 = 
	`ci_km≠_ö_©omic
(
∑ge
);

143 
	`ci_as£π
(
de°
);

145 
Àn
 = 
	`CI_MIN
÷í, 
CI_PAGE_SIZE
 - 
off£t
);

147 
	`ci_iovec_±r_öô_buf
(&
piov
, 
de°
 + 
off£t
, 
Àn
);

148 
Àn
 = 
	`ci_c›y_iovec_to_pkt
(
ni
, 
pkt
, &
piov
, 
CI_ADDR_SPC_KERNEL
);

150 
	`ci_kunm≠_ö_©omic
(
∑ge
, 
de°
);

151 
	`put_∑ge
(
∑ge
);

153  
Àn
;

154 
	}
}

157 
size_t


158 
	$__ci_ù_c›y_pkt_‰om_piov
(

159 
ci_√tif
 *
ni
,

160 
ci_ù_pkt_fmt
 *
pkt
,

161 
ci_iovec_±r
 *
piov
,

162 
ci_addr_•c_t
 
addr_•c
)

164 
tŸÆ
;

166 if–
addr_•c
 =
CI_ADDR_SPC_KERNEL
 ||áddr_•¯=
CI_ADDR_SPC_CURRENT
)

167  
	`ci_c›y_iovec_to_pkt
(
ni
, 
pkt
, 
piov
, 
addr_•c
);

169 if–
addr_•c
 =
CI_ADDR_SPC_INVALID
 ) {

171 
	`ci_log
("%s: CI_ADDR_SPC_INVALID", 
__FUNCTION__
);

175 
tŸÆ
 = 0;

176  
	`oo_offbuf_À·
(&
pkt
->
buf
Ë&& ! 
	`ci_iovec_±r_is_em±y_¥›î
(
piov
) ) {

177 *
§c
 = 
	`CI_IOVEC_BASE
(&
piov
->
io
);

178 
off£t
 = 
	`CI_PTR_OFFSET
(
§c
, 
CI_PAGE_SIZE
);

179 
Àn
 = 
	`CI_IOVEC_LEN
(&
piov
->
io
);

181 
Àn
 = 
	`ci_ù_fﬁlow_™d_c›y_∑ge
(
ni
, 
pkt
, 
addr_•c
, 
§c
, 
off£t
,Üen);

182 if–
Àn
 == 0 )

184 
tŸÆ
 +
Àn
;

185 
	`ci_iovec_±r_adv™˚
(
piov
, 
Àn
);

188  
tŸÆ
;

189 
	}
}

193 #ifde‡
_WIN32


194 
size_t


195 
	$__ci_ù_c›y_pkt_‰om_piov
(

196 
ci_√tif
 *
ni
,

197 
ci_ù_pkt_fmt
 *
pkt
,

198 
ci_iovec_±r
 *
piov
,

199 
ci_addr_•c_t
 
addr_•c
)

201 
Àn
, 
tŸÆ
;

202 
ci_iovec_±r
 
ãmp_piov
;

204 
tŸÆ
 = 0;

206 if–
addr_•c
 =
CI_ADDR_SPC_KERNEL
 ) {

207  
	`ci_c›y_iovec_to_pkt
(
ni
, 
pkt
, 
piov
);

209 if–(
addr_•c
 !
CI_ADDR_SPC_CURRENT
) &&

210 (
addr_•c
 !(
ci_addr_•c_t
)
ni
->
addr_•c_id
) ) {

213 
	`LOG_E
(
	`ci_log
("%s: %d badáddªs†•a˚ %∞!%p", 
__FUNCTION__
,

214 
	`NI_ID
(
ni
), 
addr_•c
, (
ci_addr_•c_t
Íi->
addr_•c_id
));

221 
	`Áke_c›y_pkt_‰om_piov
(
ni
, 
pkt
, 
piov
, &
tŸÆ
);

223  
tŸÆ
;

226 
__åy
 {

227  
	`oo_offbuf_À·
(&
pkt
->
buf
Ë&& !
	`ci_iovec_±r_is_em±y_¥›î
(
piov
) ) {

228 
	`ProbeF‹Ród
(
	`CI_IOVEC_BASE
(&
piov
->
io
), 
	`CI_IOVEC_LEN
(&piov->io), 1);

230 
	`ci_iovec_±r_öô_buf
(&
ãmp_piov
, 
	`CI_IOVEC_BASE
(&
piov
->
io
),

231 
	`CI_IOVEC_LEN
(&
piov
->
io
));

232 
Àn
 = 
	`ci_c›y_iovec_to_pkt
(
ni
, 
pkt
, &
ãmp_piov
);

234 
tŸÆ
 +
Àn
;

236 
	`ci_iovec_±r_adv™˚
(
piov
, 
Àn
);

239 
	`__ex˚±
(
EXCEPTION_EXECUTE_HANDLER
) {

243 
	`LOG_E
(
	`ci_log
("WARNING: %s faulted during copy - faking data write"

244 " (bug3767)", 
__FUNCTION__
));

251 
	`Áke_c›y_pkt_‰om_piov
(
ni
, 
pkt
, 
piov
, &
tŸÆ
);

253  
tŸÆ
;

256  
tŸÆ
;

257 
	}
}

262 
size_t


263 
	$__ci_ù_c›y_pkt_‰om_piov
(

264 
ci_√tif
 *
ni
,

265 
ci_ù_pkt_fmt
 *
pkt
,

266 
ci_iovec_±r
 *
piov
)

269  
	`ci_c›y_iovec_to_pkt
(
ni
, 
pkt
, 
piov
);

270 
	}
}

	@efabcfg.c

14 
	~"ù_öã∫Æ.h
"

15 
	~<ci/öã∫Æ/eÁbcfg.h
>

18 #ifde‡
DO


19 #unde‡
DO


22 #ifde‡
IGNORE


23 #unde‡
IGNORE


26 
	#DPRINTF
 
ci_log


	)

28 
	#DO
(
_x
Ë
	)
_x

29 
	#IGNORE
(
_x
)

	)

33 #ifde‡
NDEBUG


34 #unde‡
DEBUG_INTERCEPT


37 #i‚de‡
DEBUG_INTERCEPT


38 
	#DEBUG_INTERCEPT
 
IGNORE


	)

42 #unde‡
CI_CFG_OPT


43 
	#CI_CFG_OPT
(
ív
, 
«me
, 
ty≥
, 
doc
, 
ty≥_m
, 
group
, , 
max
, 
mö
, 
¥e¢
) \

44 
	`CI_STRUCT_MBR
(
«me
, ),

	)

45 
ci_cfg_›ts_t
 
	gci_cfg_›ts
 = {

47 
	~<ci/öã∫Æ/›ts_côp_def.h
>

50 
	~<ci/öã∫Æ/›ts_√tif_def.h
>

53 
	~<ci/öã∫Æ/›ts_u£r_def.h
>

56 #unde‡
CI_CFG_OPT


68 
	$ci_cfg_quîy
(*
¥oc_«me_utf8
, *
ªf_cfgîr
)

70 
ci_io˘l_cfg_quîy_t
 
q
;

71 
ci_cfg_io˘l_desc_t
 
desc
;

72 
ef_drivî_h™dÀ
 
fd
;

73 
rc
, 
i
 = 0;

75 *
ªf_cfgîr
 = 0;

81 
	`ci_√tif_c⁄fig_›ts_deÁu…s
(&
ci_cfg_›ts
.
√tif_›ts
);

83 
	`mem£t
(&
desc
, 0, (desc));

84 
	`CI_USER_PTR_SET
(
desc
.
±r
, &
q
);

85 
desc
.
Àn
 = (
q
);

87 
	`CI_USER_PTR_SET
(
q
.
uid_n_¥oc
.
uid_±r
, 0);

88 
q
.
uid_n_¥oc
.
uid_Àn
 = 0;

89 
	`CI_USER_PTR_SET
(
q
.
uid_n_¥oc
.
¥oc_«me_±r
, 
¥oc_«me_utf8
);

90 
q
.
uid_n_¥oc
.
¥oc_«me_Àn
 = 
¥oc_«me_utf8


91 ? (
	`°æí
(
¥oc_«me_utf8
)+1) : 0;

92 
q
.
›ts
 = 
ci_cfg_›ts
;

94 
rc
 = 
	`ef_⁄lﬂd_drivî_›í
(&
fd
, 
OO_STACK_DEV
, 1);

95 if–
rc
 < 0 ) {

96 
	`LOG_E
(
	`ci_log
("%s:Éf_onload_driver_open() failed (rc=%d)",

97 
__FUNCTION__
, 
rc
);

98 if–
rc
 =-
ENOENT
 )

99 
	`ci_log
("%s: I†/dev/⁄lﬂd missög?", 
__FUNCTION__
);

100 if–
rc
 =-
ENXIO
 )

101 
	`ci_log
("%s: I†thê⁄lﬂd moduÀÜﬂded?", 
__FUNCTION__
);

103 
d⁄t_öãr˚±_w¨n
;

106 
rc
 = 
	`oo_c⁄fig_quîy
(
fd
, &
desc
);

107 
	`CI_UNLIKELY
–
rc
 =0 && 
desc
.
îr
 =
CICFG_DESC_EAGAIN
 && 
i
 < 5 )) {

109 
	`CI_DEBUG
(
	`ci_log
("%s: you should onlyÉver seeÅhis message if youáre "

111 
__FUNCTION__
));

112 
rc
 = 
	`oo_c⁄fig_quîy
(
fd
, &
desc
);

113 
i
++;

116 
	`ef_⁄lﬂd_drivî_˛o£
(
fd
);

123 if–
rc
 || (
desc
.
îr
 && desc.î∏!
CICFG_DESC_ENOTINST
) ) {

124 if–
rc
 =0 && 
desc
.
îr
 =
CICFG_DESC_EPROCEXCL
 )

125 
d⁄t_öãr˚±
;

126 
	`LOG_E
(
	`ci_log
("%s: oo_config_query() failed (rc=%d,Érr=%d)",

127 
__FUNCTION__
, 
rc
, 
desc
.
îr
));

128 if–
rc
 == 0 )

129 
rc
 = -
EINVAL
;

130 
d⁄t_öãr˚±_w¨n
;

134 if–! 
desc
.
îr
 )

135 
ci_cfg_›ts
 = 
q
.
›ts
;

138 
	`ci_√tif_c⁄fig_›ts_gëív
(&
ci_cfg_›ts
.
√tif_›ts
);

139 
	`ci_√tif_c⁄fig_›ts_øngecheck
(&
ci_cfg_›ts
.
√tif_›ts
);

140 
	`LOG_S
(
	`ci_√tif_c⁄fig_›ts_dump
(&
ci_cfg_›ts
.
√tif_›ts
));

143 i‡(
ci_cfg_›ts
.
côp_›ts
.
öãr˚±
 == 0) {

144 
rc
 = 0;

145 
d⁄t_öãr˚±
;

148 
	`DEBUG_INTERCEPT
(
	`DPRINTF
("config:áccelerationÉnabled - '%s'",

149 
¥oc_«me_utf8
););

152 
d⁄t_öãr˚±_w¨n
:

153 
	`ci_log
("%s: WARNING: O≥nO∆ﬂdác˚Àøti⁄ dißbÀd.", 
__FUNCTION__
);

154 
d⁄t_öãr˚±
:

155 
	`ci_cfg_d⁄t_öãr˚±
(&
CITP_OPTS
);

156 
	`DEBUG_INTERCEPT
(
	`DPRINTF
("config:ácceleration disabled - '%s'",

157 
¥oc_«me_utf8
););

158  
rc
;

159 
	}
}

	@eplock_slow.c

13 
	~<ci/öã∫Æ/ù.h
>

14 
	~<ci/öã∫Æ/ù_log.h
>

16 #i‚de‡
__KERNEL__


17 
	~<⁄lﬂd/ul.h
>

18 
	~"ù_öã∫Æ.h
"

22 
CI_BUILD_ASSERT
–(
CI_EPLOCK_LOCK_FLAGS
 & 
CI_EPLOCK_CALLBACK_FLAGS
) == 0 );

25 
	$__ef_ïlock_lock_waô
(
ci_√tif
 *
ni
, 
maybe_wedged
)

27 #i‚de‡
__KERNEL__


28 
	`ci_as£π_equÆ
(
maybe_wedged
, 0);

29  
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
), 
OO_IOC_EPLOCK_LOCK_WAIT
,

30 
NULL
);

32 #ifde‡
_WIN32


36 
	`ci_•ölo›_∑u£
();

39  
	`eÁb_ïlock_lock_waô
(
ni


40 
	`CI_BLOCKING_CTX_ARG
(
	`ci_blockög_˘x_¨g_√eded
()),

41 
maybe_wedged
);

44 
	}
}

47 
	$__ef_ïlock_lock_¶ow
(
ci_√tif
 *
ni
, 
maybe_wedged
)

49 #i‚de‡
__KERNEL__


50 
ci_uöt64
 
°¨t_‰c
, 
now_‰c
;

52 
rc
;

53 
ci_uöt64
 
l
, 
n
;

55 #i‚de‡
__KERNEL__


56 
	`ci_as£π_equÆ
(
maybe_wedged
, 0);

59 if–
	`ef_ïlock_åylock
(&
ni
->
°©e
->
lock
) )

62 #i‚de‡
__KERNEL__


66 if–
	`oo_≥r_thªad_gë
()->
•ö°©e
 & (1 << 
ONLOAD_SPIN_STACK_LOCK
) ) {

67 
	`CITP_STATS_NETIF
(++
ni
->
°©e
->
°©s
.
°ack_lock_buzz
);

68 
	`ci_‰c64
(&
now_‰c
);

69 
°¨t_‰c
 = 
now_‰c
;

70  
now_‰c
 - 
°¨t_‰c
 < 
ni
->
°©e
->
buzz_cy˛es
 ) {

71 
	`ci_•ölo›_∑u£
();

72 
	`ci_‰c64
(&
now_‰c
);

73 if–
	`ef_ïlock_åylock
(&
ni
->
°©e
->
lock
) )

80 if–(
rc
 = 
	`__ef_ïlock_lock_waô
(
ni
, 
maybe_wedged
)) < 0 ) {

81 #i‚de‡
__KERNEL__


82 if–
rc
 =-
EINTR
 )

92 
	`LOG_E
(
	`ci_log
("%s: ERROR:Ñc=%d", 
__FUNCTION__
, 
rc
));

93 
	`CI_TEST
(0);

98 if–(
rc
 =-
ERESTARTSYS
Ë|| (r¯=-
ECANCELED
) )

99  
rc
;

100 
	`LOG_E
(
	`ci_log
("%s: ERROR:Ñc=%d", 
__FUNCTION__
, 
rc
));

101  
rc
;

108 
agaö
:

109 
l
 = 
ni
->
°©e
->
lock
.lock;

110 if–
l
 & 
CI_EPLOCK_UNLOCKED
 ) {

111 
n
 = (
l
 &~ 
CI_EPLOCK_UNLOCKED
Ë| 
CI_EPLOCK_LOCKED
;

112 if–
	`ci_ˇs64u_suc˚ed
(&
ni
->
°©e
->
lock
.lock, 
l
, 
n
) )

115 
agaö
;

120 
	`ci_as£π
(0);

122 
	}
}

	@icmp_send.c

14 
	~"ù_öã∫Æ.h
"

15 
	~"ù_tx.h
"

18 
	#LPF
 "ci_icmp_"

	)

19 
	#LPFIN
 "-> " 
LPF


	)

20 
	#LPFOUT
 "<- " 
LPF


	)

26 
ci_uöt32
 
	mnobuf
;

27 
ci_uöt32
 
	mno•a˚
;

28 
ci_uöt32
 
	m£¡ok
;

29 } 
	tci_icmp_tx_°©s
;

31 
ci_icmp_tx_°©s
 
	gicmp_tx_°©s
 = {0,0,0};

33 
	#CI_ICMP_TX_STAT_NOBUF
(
ni
Ë(
icmp_tx_°©s
.
nobuf
++)

	)

34 
	#CI_ICMP_TX_STAT_NOSPACE
(
ni
Ë(
icmp_tx_°©s
.
no•a˚
++)

	)

35 
	#CI_ICMP_TX_STAT_SENT
(
ni
Ë(
icmp_tx_°©s
.
£¡ok
++)

	)

38 
	#CI_ICMP_MAX_PAYLOAD
 ( 60 + 8 )

	)

41 
	#CI_ICMP_MAX_MSG_LEN
 \

42 ((
ci_ù4_hdr
Ë+ (
ci_icmp_hdr
Ë+ 4 + 
CI_ICMP_MAX_PAYLOAD
)

	)

48 
	$ci_icmp_£nd
(
ci_√tif
 *
ni
, 
ci_ù_pkt_fmt
 *
tx_pkt
,

49 c⁄° 
ci_ù_addr_t
 *
ªf_ù_sour˚
,

50 c⁄° 
ci_ù_addr_t
 *
ªf_ù_de°
,

51 c⁄° 
ci_mac_addr_t
 *
mac_de°
,

52 
ci_uöt8
 
ty≥
, ci_uöt8 
code
, 
ci_uöt16
 
d©a_Àn
)

54 
oo_ëh_hdr
 *
tx_ëh
;

55 
ci_ù4_hdr
 *
tx_ù
;

56 
ci_icmp_hdr
 *
icmp
;

57 
ci_uöt16
 
ùid
;

58 
csum
;

60 
	`ci_as£π
(
ni
);

62 
tx_ù
 = 
	`oo_tx_ù_hdr
(
tx_pkt
);

63 
tx_ëh
 = 
	`oo_ëhî_hdr
(
tx_pkt
);

64 
icmp
 = (
ci_icmp_hdr
*Ë(
tx_ù
 + 1);

67 
	`ci_as£π
((
ci_icmp_hdr
) == 4);

68 
	`oo_offbuf_öô
(&
tx_pkt
->
buf
,

69 (*)
tx_ù
+(
ci_ù4_hdr
Ë+ (
ci_icmp_hdr
) + 4,

70 
CI_ICMP_MAX_PAYLOAD
);

73 i‡(
	`oo_offbuf_À·
(&
tx_pkt
->
buf
Ë< 
CI_ICMP_MAX_PAYLOAD
) {

74 
	`LOG_IPP
–
	`log
(
LPF
 "send_error: BufferÅoo short forán ICMP msg (%d)!",

75 
	`oo_offbuf_À·
(&
tx_pkt
->
buf
)));

76 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
tx_pkt
);

77 
	`CI_ICMP_TX_STAT_NOSPACE
(
ni
);

78 
	`CI_ICMP_STATS_INC_OUT_ERRS
–
ni
 );

83 
	`mem˝y
–
tx_ëh
->
ëhî_dho°
, 
mac_de°
, 
ETH_ALEN
 );

84 
tx_ëh
->
ëhî_ty≥
 = 
CI_ETHERTYPE_IP
;

88 
	`mem£t
–
tx_ù
, 0, (
ci_ù4_hdr
));

89 
tx_ù
->
ù_ihl_vîsi⁄
 = 
	`CI_IP4_IHL_VERSION
–(
ci_ù4_hdr
));

90 
ùid
 = 
	`NEXT_IP_ID
–
ni
 );

91 
tx_ù
->
ù_id_be16
 = 
	`CI_BSWAP_BE16
–
ùid
 );

92 
tx_ù
->
ù_‰ag_off_be16
 = 
CI_IP4_FRAG_DONT
;

93 
tx_ù
->
ù_âl
 = 
CI_IP_DFLT_TTL
;

94 
tx_ù
->
ù_¥Ÿocﬁ
 = 
IPPROTO_ICMP
;

95 
tx_ù
->
ù_ßddr_be32
 = *
ªf_ù_sour˚
;

96 
tx_ù
->
ù_daddr_be32
 = *
ªf_ù_de°
;

99 
icmp
->
ty≥
 =Åype;

100 
icmp
->
code
 = code;

101 
icmp
->
check
 = 0;

102 
	`ci_as£π
–(
ci_icmp_hdr
) == 4 );

104 
csum
 = 
	`ci_ù_csum_∑πül
(0, 
icmp
, (
ci_icmp_hdr
Ë+ 4 + 
d©a_Àn
 );

105 
icmp
->
check
 = (
ci_uöt16
)
	`ci_icmp_csum_föish
(
csum
);

107 
tx_ù
->
ù_tŸ_Àn_be16
 = 
	`CI_BSWAP_BE16
–(
ci_ù4_hdr
)

108 + (
ci_icmp_hdr
Ë+ 4 + 
d©a_Àn
 );

109 
tx_ù
->
ù_check_be16
 = (
ci_uöt16
)
	`ci_ù_checksum
(tx_ip);

111 
tx_pkt
->
buf_Àn
 =Åx_pkt->
∑y_Àn
 =

112 
	`CI_BSWAP_BE16
(
tx_ù
->
ù_tŸ_Àn_be16
Ë+ 
	`oo_ëhî_hdr_size
(
tx_pkt
);

118 
	`ci_ù_£nd_pkt
(
ni
, 
NULL
, 
tx_pkt
);

129 
	`CI_ICMP_STATS_INC_OUT_MSGS
(
ni
);

130 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
tx_pkt
);

131 
	`CI_ICMP_TX_STAT_SENT
(
ni
);

132 
	`LOG_IPP
(
	`log
(
LPF
 "send_error: sent %d/%dÅo %s",

133 
code
, 
ty≥
, 
	`ù_addr_°r
–*
ªf_ù_de°
 )));

135 #i‡
CI_CFG_SUPPORT_STATS_COLLECTION


136 
	`CI_ICMP_OUT_STATS_COLLECT
(
ni
, 
icmp
);

140 
	}
}

150 
	$__ci_icmp_£nd_îr‹
(
ci_√tif
 *
ni
,

151 
ci_ù4_hdr
* 
rx_ù
,

152 
oo_ëh_hdr
* 
rx_ëh
,

153 
ci_uöt8
 
ty≥
, ci_uöt8 
code
)

155 
	`ci_as£π
(
ni
);

156 
	`ci_as£π
(
rx_ù
);

157 
	`ci_as£π
(
rx_ëh
);

162 if–
	`ci˝_u£r_is_loˇl_addr
(
	`CICP_HANDLE
(
ni
), &
rx_ù
->
ù_ßddr_be32
) ) {

163 
buf
[32];

164 if–
rx_ù
->
ù_¥Ÿocﬁ
 =
IPPROTO_TCP
 )

165 
	`°r˝y
(
buf
, "TCPÖacket");

166 i‡–
rx_ù
->
ù_¥Ÿocﬁ
 =
IPPROTO_UDP
 )

167 
	`°r˝y
(
buf
, "UDPÖacket");

170 #i‡
	`deföed
 (
__unix__
)

171 
	`¢¥ötf
(
buf
, (buf), "∑ckë wôhÖrŸocﬁ=%u", 
rx_ù
->
ù_¥Ÿocﬁ
);

173 
	`°r˝y
(
buf
, "OtherÖrotocol");

176 if–
rx_ù
->
ù_ßddr_be32
 =rx_ù->
ù_daddr_be32
 ) {

177 
	`LOG_U
(
	`ci_log
("WARNING: UnexpectedÑeceipt ofá %s with source IP\n"

179 "NŸ sídög ICMPÅy≥=%u code=%u", 
buf
,

180 
	`ù_addr_°r
–
rx_ù
->
ù_ßddr_be32
 ), 
ty≥
, 
code
));

184 
	`LOG_U
(
	`ci_log
("UnexpectedÑeceipt ofá %sÖacket fromáÜocal IP\n"

185 "addªs†(%s). NŸ sídög ICMPÅy≥=%u code=%u", 
buf
,

186 
	`ù_addr_°r
–
rx_ù
->
ù_ßddr_be32
 ), 
ty≥
, 
code
));

191 { 
ci_ù_pkt_fmt
 *
tx_pkt
 = 
	`ci_√tif_pkt_Æloc
(
ni
);

193 i‡(
NULL
 =
tx_pkt
) {

194 
	`LOG_IPP
–
	`log
(
LPF
 "send-error: !!No buff, yetÉxpectedátÜeast one!!"));

195 
	`CI_ICMP_TX_STAT_NOBUF
–
ni
 );

196 
	`CI_ICMP_STATS_INC_OUT_ERRS
–
ni
 );

200 { 
ci_uöt16
 
d©a_Àn
 = 
	`CI_MIN
–
	`CI_IP4_IHL
(
rx_ù
) + 8,

201 
rx_ù
->
ù_tŸ_Àn_be16
 );

202 
ci_icmp_hdr
 *
icmp
;

204 
	`oo_tx_pkt_œyout_öô
(
tx_pkt
);

205 
	`oo_tx_ëhî_ty≥_£t
(
tx_pkt
, 
CI_ETHERTYPE_IP
);

206 
icmp
 = (
ci_icmp_hdr
*Ë(
	`oo_tx_ù_hdr
(
tx_pkt
) + 1);

208 *(
ci_uöt32
*)&
icmp
[1] = 0;

209 
	`mem˝y
–&
icmp
[2], 
rx_ù
, 
d©a_Àn
 );

211  
	`ci_icmp_£nd
(
ni
, 
tx_pkt
,

212  &
rx_ù
->
ù_daddr_be32
,

213  &
rx_ù
->
ù_ßddr_be32
,

214  (c⁄° 
ci_mac_addr_t
 *)

215 &
rx_ëh
->
ëhî_sho°
,

216 
ty≥
, 
code
, 
d©a_Àn
);

219 
	}
}

	@init.c

14 
	~"ù_öã∫Æ.h
"

15 
	~<⁄lﬂd/ul/≥r_thªad.h
>

16 
	~<˝œ√/debug.h
>

20 
	gci_ç_log
 = 
CI_TP_LOG_DEFAULT
;

21 
	gci_ç_max_dump
 = 80;

24 
	$ci_ç_öô
(
côp_öô_thªad_ˇŒback
 
cb
)

26 c⁄° * 
s
;

28 #i‚de‡
NDEBUG


29 
d⁄e
 = 0;

30 
	`ci_as£π
(!
d⁄e
);

31 
d⁄e
 = 1;

35 if–(
s
 = 
	`gëív
("TP_LOG")ËË
	`ssˇnf
(s, "%x", &
ci_ç_log
);

36 
	`LOG_S
(
	`log
("TP_LOG = %x", 
ci_ç_log
));

38 
öô_thªad_ˇŒback
 = 
cb
;

39 
	`oo_≥r_thªad_öô
();

42 
	}
}

	@iovec_ptr.h

13 #i‚de‡
__ETHERFABRIC_IOVEC_PTR_H__


14 
	#__ETHERFABRIC_IOVEC_PTR_H__


	)

16 #ifde‡
__˝lu•lus


24 c⁄° 
ef_iovec
* 
iov
;

25 
iovÀn
;

26 
ef_iovec
 
io
;

27 } 
	tef_iovec_±r
;

30 
ef_vi_ölöe
 
ef_iovec_±r_öô
(
ef_iovec_±r
* 
p
, c⁄° 
ef_iovec
* 
iov
,

31 
iovÀn
) {

32 
p
->
iov
 = iov;

33 
p
->
iovÀn
 = iovlen;

34 
p
->
io
.
iov_Àn
 = 0;

37 
ef_vi_ölöe
 
ef_iovec_±r_öô_nz
(
ef_iovec_±r
* 
p
, c⁄° 
ef_iovec
* 
iov
,

38 
iovÀn
) {

39 
ci_as£π
(
iovÀn
 > 0);

40 
p
->
iov
 = iov + 1;

41 
p
->
iovÀn
 = iovlen - 1;

42 
p
->
io
 = *
iov
;

49 
ef_vi_ölöe
 
ef_iovec_±r_is_em±y
(c⁄° 
ef_iovec_±r
* 
p
)

50 {  
p
->
io
.
iov_Àn
 =0 &&Ö->
iovÀn
 == 0; }

55 
ef_vi_ölöe
 
ef_iovec_±r_is_em±y_¥›î
(
ef_iovec_±r
* 
p
) {

56  
p
->
io
.
iov_Àn
 == 0 ) {

57 if–
p
->
iovÀn
 == 0 )  1;

58 
p
->
io
 = *p->
iov
++;

59 --
p
->
iovÀn
;

65 
ef_vi_ölöe
 
ef_iovec_±r_adv™˚
(
ef_iovec_±r
* 
p
, 
n
) {

66 
ci_as£π_ge
(
p
->
io
.
iov_Àn
, (
ci_uöt32
)
n
);

67 
p
->
io
.
iov_Àn
 -
n
;

68 
p
->
io
.
iov_ba£
 +
n
;

72 
ef_vi_ölöe
 
ef_iovec_±r_√xt
(
ef_iovec_±r
* 
p
) {

73 
ci_as£π_equÆ
(
p
->
io
.
iov_Àn
, 0);

74 
ci_as£π_gt
(
p
->
iovÀn
, 0);

75 
p
->
io
 = *p->
iov
++;

76 --
p
->
iovÀn
;

79 #ifde‡
__˝lu•lus


	@ip_cmsg.c

14 
	~"ù_öã∫Æ.h
"

17 
	#LPF
 "IP CMSG "

	)

21 #i‡
deföed
(
__löux__
)

22 
	#NEED_A_WORKAROUND_FOR_GLIBC_BUG_13500


	)

26 #i‡
deföed
–
__löux__
)

39 
	$ci_put_cmsg
(
cmsg_°©e
 *cmsg_state,

40 
Àvñ
, 
ty≥
, 
sockÀn_t
 
Àn
, c⁄° * 
d©a
)

43 
d©a_•a˚
, 
d©a_Àn
 = 
Àn
;

49 if–*
cmsg_°©e
->
p_msg_Êags
 & 
MSG_CTRUNC
 )

51 if–
cmsg_°©e
->
cm
 =
NULL
 ) {

52 *
cmsg_°©e
->
p_msg_Êags
 |
MSG_CTRUNC
;

56 
d©a_•a˚
 = ((*)
cmsg_°©e
->
msg
->
msg_c⁄åﬁ
 +

57 
cmsg_°©e
->
msg
->
msg_c⁄åﬁÀn
) -

58 (*)
	`CMSG_DATA
(
cmsg_°©e
->
cm
);

59 if–
d©a_•a˚
 < 0 ) {

60 *
cmsg_°©e
->
p_msg_Êags
 |
MSG_CTRUNC
;

64 if–
d©a_Àn
 > 
d©a_•a˚
 ) {

65 *
cmsg_°©e
->
p_msg_Êags
 |
MSG_CTRUNC
;

66 
d©a_Àn
 = 
d©a_•a˚
;

69 
cmsg_°©e
->
cm
->
cmsg_Àn
 = 
	`CMSG_LEN
(
d©a_Àn
);

70 
cmsg_°©e
->
cm
->
cmsg_Àvñ
 = 
Àvñ
;

71 
cmsg_°©e
->
cm
->
cmsg_ty≥
 = 
ty≥
;

73 
	`mem˝y
(
	`CMSG_DATA
(
cmsg_°©e
->
cm
), 
d©a
, 
d©a_Àn
);

75 
cmsg_°©e
->
cmsg_byãs_u£d
 +
	`CMSG_SPACE
(
d©a_Àn
);

77 if–*
cmsg_°©e
->
p_msg_Êags
 & 
MSG_CTRUNC
 )

80 #i‡!
	`deföed
(
NEED_A_WORKAROUND_FOR_GLIBC_BUG_13500
Ë|| deföed(
__KERNEL__
)

81 
cmsg_°©e
->
cm
 = 
	`CMSG_NXTHDR
(cmsg_°©e->
msg
, cmsg_state->cm);

84 
cmsg_°©e
->
cm
 = (
cmsghdr
*)(((*)(cmsg_state->cm))

85 + (
	`CMSG_ALIGN
(
cmsg_°©e
->
cm
->
cmsg_Àn
)));

87 
	}
}

90 #i‚de‡
__KERNEL__


95 
	$ù_cmsg_ªcv_pktöfo
(
ci_√tif
* 
√tif
, c⁄° 
ci_ù_pkt_fmt
* 
pkt
,

96 
cmsg_°©e
 *cmsg_state)

101 
ö_pktöfo
 
öfo
;

102 
ci_uöt32
 
addr
;

103 
hwp‹t
;

104 
ci˝_Œ≠_row_t
 *
Ãow
;

106 
addr
 = 
	`oo_ù_hdr_c⁄°
(
pkt
)->
ù_daddr_be32
;

107 
öfo
.
ùi_addr
.
s_addr
 = 
addr
;

111 
ci_ifid_t
 
ifödex
 = 0;

112 
rc
 = 0;

114 
hwp‹t
 = 
√tif
->
°©e
->
ötf_i_to_hwp‹t
[
pkt
->
ötf_i
];

115 
rc
 = 
	`ci˝_Œ≠_föd
(
	`CICP_HANDLE
(
√tif
), &
ifödex
,

116 
	`CI_HWPORT_ID
(
hwp‹t
), 
pkt
->
vœn
);

117 if–
rc
 != 0 )

118 
	`LOG_E
(
	`ci_log
("%s: cicp_llap_find(intf_i=%d, hwport=%d) failedÑc=%d",

119 
__FUNCTION__
, 
pkt
->
ötf_i
, 
hwp‹t
, 
rc
));

120 
öfo
.
ùi_ifödex
 = 
ifödex
;

132 if–
	`CI_IP_ADDR_IS_MULTICAST
(&
	`oo_ù_hdr_c⁄°
(
pkt
)->
ù_daddr_be32
) ) {

133 
Ãow
 = 
	`ci˝_Œ≠_föd_ifid
(

134 
	`CICP_USER_MIBS
(
	`CICP_HANDLE
(
√tif
)).
Œ≠öfo_uèbÀ
,

135 
öfo
.
ùi_ifödex
);

136 
öfo
.
ùi_•ec_d°
.
s_addr
 = 
Ãow
->
ù_addr
;

139 
öfo
.
ùi_•ec_d°
.
s_addr
 = 
	`oo_ù_hdr_c⁄°
(
pkt
)->
ù_daddr_be32
;

141 
	`ci_put_cmsg
(
cmsg_°©e
, 
IPPROTO_IP
, 
IP_PKTINFO
, (
öfo
), &info);

142 
	}
}

147 
ci_ölöe
 
	$ù_cmsg_ªcv_âl
(c⁄° 
ci_ù_pkt_fmt
 *
pkt
,

148 
cmsg_°©e
 *cmsg_state)

150 
âl
 = 
	`oo_ù_hdr_c⁄°
(
pkt
)->
ù_âl
;

152 
	`ci_put_cmsg
(
cmsg_°©e
, 
IPPROTO_IP
, 
IP_TTL
, (
âl
), &ttl);

153 
	}
}

158 
ci_ölöe
 
	$ù_cmsg_ªcv_tos
(c⁄° 
ci_ù_pkt_fmt
 *
pkt
,

159 
cmsg_°©e
 *cmsg_state)

161 
tos
 = 
	`oo_ù_hdr_c⁄°
(
pkt
)->
ù_tos
;

163 
	`ci_put_cmsg
(
cmsg_°©e
, 
IPPROTO_IP
, 
IP_TOS
, (
tos
), &tos);

164 
	}
}

169 
	$ù_cmsg_ªcv_time°amp
(
ci_√tif
 *
ni
, 
ci_uöt64
 
time°amp
,

170 
cmsg_°©e
 *cmsg_state)

172 
time•ec
 
ts
;

173 
timevÆ
 
tv
;

175 
	`ci_udp_compuã_°amp
(
ni
, 
time°amp
, &
ts
);

176 
tv
.
tv_£c
 = 
ts
.tv_sec;

177 
tv
.
tv_u£c
 = 
ts
.
tv_n£c
 / 1000;

179 
	`ci_put_cmsg
(
cmsg_°©e
, 
SOL_SOCKET
, 
SO_TIMESTAMP
, (
tv
), &tv);

180 
	}
}

185 
	$ù_cmsg_ªcv_time°am≤s
(
ci_√tif
 *
ni
, 
ci_uöt64
 
time°amp
,

186 
cmsg_°©e
 *cmsg_state)

188 
time•ec
 
ts
;

190 
	`ci_udp_compuã_°amp
(
ni
, 
time°amp
, &
ts
);

192 
	`ci_put_cmsg
(
cmsg_°©e
, 
SOL_SOCKET
, 
SO_TIMESTAMPNS
, (
ts
), &ts);

193 
	}
}

199 
	$ù_cmsg_ªcv_time°ampög
(
ci_√tif
 *
ni
,

200 
ci_uöt64
 
sys_time°amp
, 
time•ec
* 
hw_time°amp
,

201 
Êags
, 
cmsg_°©e
 *cmsg_state)

204 
time•ec
 
sy°ime
;

205 
time•ec
 
hwtimëøns
;

206 
time•ec
 
hwtimîaw
;

207 } 
ts
;

209 
c_Êags
 = 0;

211 if–
hw_time°amp
->
tv_£c
 != 0 )

212 
c_Êags
 = 
Êags
 & (
ONLOAD_SOF_TIMESTAMPING_RAW_HARDWARE


213 | 
ONLOAD_SOF_TIMESTAMPING_SYS_HARDWARE
);

214 if–
sys_time°amp
 != 0 )

215 
c_Êags
 |
Êags
 & 
ONLOAD_SOF_TIMESTAMPING_SOFTWARE
;

217 
	`mem£t
(&
ts
, 0, (ts));

218 if–
c_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_SOFTWARE
 )

219 
	`ci_udp_compuã_°amp
(
ni
, 
sys_time°amp
, &
ts
.
sy°ime
);

220 if–
c_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_RAW_HARDWARE
 )

221 
ts
.
hwtimîaw
 = *
hw_time°amp
;

222 if–
c_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_SYS_HARDWARE
 )

223 
ts
.
hwtimëøns
 = *
hw_time°amp
;

225 
	`ci_put_cmsg
(
cmsg_°©e
, 
SOL_SOCKET
, 
ONLOAD_SO_TIMESTAMPING
, (
ts
), &ts);

226 
	}
}

228 
	$ci_ù_cmsg_föish
(
cmsg_°©e
* cmsg_state)

230 #i‚de‡
NEED_A_WORKAROUND_FOR_GLIBC_BUG_13500


234 if–(
cmsg_°©e
->
cm
) &&

235 –((*)((&
cmsg_°©e
->
cm
->
cmsg_Àn
) + 1))

236 - ((*)
cmsg_°©e
->
msg
->
msg_c⁄åﬁ
)

237 <
cmsg_°©e
->
msg
->
msg_c⁄åﬁÀn
 ) )

238 
cmsg_°©e
->
cm
->
cmsg_Àn
 = 0;

241 
cmsg_°©e
->
msg
->
msg_c⁄åﬁÀn
 = cmsg_°©e->
cmsg_byãs_u£d
;

242 
	}
}

248 
	$ci_ù_cmsg_ªcv
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
, c⁄° 
ci_ù_pkt_fmt
 *
pkt
,

249 
msghdr
 *
msg
, 
√tif_locked
, *
p_msg_Êags
)

251 
Êags
 = 
us
->
s
.
cmsg_Êags
;

252 
cmsg_°©e
 cmsg_state;

254 
cmsg_°©e
.
msg
 = msg;

255 
cmsg_°©e
.
cmsg_byãs_u£d
 = 0;

256 
cmsg_°©e
.
cm
 = 
	`CMSG_FIRSTHDR
(
msg
);

257 
cmsg_°©e
.
p_msg_Êags
 =Ö_msg_flags;

259 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_RX_INDIRECT
 )

260 
pkt
 = 
	`PKT_CHK_NML
(
ni
,Ökt->
‰ag_√xt
, 
√tif_locked
);

262 i‡(
Êags
 & 
CI_IP_CMSG_PKTINFO
) {

263 ++
us
->
°©s
.
n_rx_pktöfo
;

264 
	`ù_cmsg_ªcv_pktöfo
(
ni
, 
pkt
, &
cmsg_°©e
);

267 i‡(
Êags
 & 
CI_IP_CMSG_TTL
)

268 
	`ù_cmsg_ªcv_âl
(
pkt
, &
cmsg_°©e
);

270 i‡(
Êags
 & 
CI_IP_CMSG_TOS
)

271 
	`ù_cmsg_ªcv_tos
(
pkt
, &
cmsg_°©e
);

273 if–
Êags
 & 
CI_IP_CMSG_TIMESTAMPNS
 )

274 
	`ù_cmsg_ªcv_time°am≤s
(
ni
, 
pkt
->
pf
.
udp
.
rx_°amp
, &
cmsg_°©e
);

276 if–
Êags
 & 
CI_IP_CMSG_TIMESTAMP
 )

277 
	`ù_cmsg_ªcv_time°amp
(
ni
, 
pkt
->
pf
.
udp
.
rx_°amp
, &
cmsg_°©e
);

279 if–
Êags
 & 
CI_IP_CMSG_TIMESTAMPING
 ) {

280 
Êags
 = 
us
->
s
.
time°ampög_Êags
;

281 if–
Êags
 & (
ONLOAD_SOF_TIMESTAMPING_RAW_HARDWARE


282 | 
ONLOAD_SOF_TIMESTAMPING_SYS_HARDWARE


283 | 
ONLOAD_SOF_TIMESTAMPING_SOFTWARE
) ) {

284 
time•ec
 
rx_hw_°amp
;

285 
rx_hw_°amp
.
tv_£c
 = 
pkt
->
pf
.
udp
.rx_hw_stamp.tv_sec;

286 
rx_hw_°amp
.
tv_n£c
 = 
pkt
->
pf
.
udp
.rx_hw_stamp.tv_nsec;

287 if–! (
rx_hw_°amp
.
tv_n£c
 & 
CI_IP_PKT_HW_STAMP_FLAG_IN_SYNC
) )

288 
Êags
 &~
ONLOAD_SOF_TIMESTAMPING_SYS_HARDWARE
;

289 
	`ù_cmsg_ªcv_time°ampög
(
ni
, 
pkt
->
pf
.
udp
.
rx_°amp
, &
rx_hw_°amp
,

290 
Êags
, &
cmsg_°©e
);

294 
	`ci_ù_cmsg_föish
(&
cmsg_°©e
);

295 
	}
}

305 
	$ci_ù_cmsg_£nd
(c⁄° 
msghdr
* 
msg
, 
ö_pktöfo
** 
öfo_out
)

307 
cmsghdr
 *
cmsg
;

312  
cmsg
 = 
	`CMSG_FIRSTHDR
(
msg
); cmsg;

313 
cmsg
 = 
	`CMSG_NXTHDR
((
msghdr
*Ë
msg
, cmsg) ) {

315 if–
cmsg
->
cmsg_Àn
 < (
cmsghdr
) ||

316 (
sockÀn_t
)(((*)
cmsg
 - (*)
msg
->
msg_c⁄åﬁ
)

317 + 
cmsg
->
cmsg_Àn
Ë> 
msg
->
msg_c⁄åﬁÀn
 )

318  -
EINVAL
;

320 if–
cmsg
->
cmsg_Àvñ
 !
IPPROTO_IP
 )

323  
cmsg
->
cmsg_ty≥
 ) {

324 #i‚de‡
_WIN32


325 
IP_RETOPTS
:

327  -
ENOPROTOOPT
;

330 
IP_PKTINFO
:

331 i‡(
cmsg
->
cmsg_Àn
 !
	`CMSG_LEN
((
ö_pktöfo
)))

332  -
EINVAL
;

333 *
öfo_out
 = (
ö_pktöfo
 *)
	`CMSG_DATA
(
cmsg
);

337  -
EINVAL
;

342 
	}
}

	@ip_internal.h

14 #i‚de‡
__CI_LIB_IP_INTERNAL_H__


15 
	#__CI_LIB_IP_INTERNAL_H__


	)

17 
	~<ci/öã∫Æ/ù.h
>

18 
	~<ci/öã∫Æ/ù_log.h
>

19 
	~<ci/√t/ëhî√t.h
>

20 
	~<⁄lﬂd/ul/t˝_hñ≥r.h
>

21 #ifde‡
__KERNEL__


22 
	~<⁄lﬂd/oof_öãrÁ˚.h
>

24 
	~<⁄lﬂd/˝œ√_›s.h
>

27 #ifde‡
__KERNEL__


33 
	#ONLOAD_MSG_WARM
 0

	)

38 
	#ONLOAD_MSG_ONEPKT
 0

	)

46 
ci_ç_log
 
CI_HV
;

47 
ci_ç_max_dump
 
CI_HV
;

50 
	#log
 
ci_log


	)

53 
ci_ölöe
 
	$ù_pkt_dump_Àn
(
Àn
) {

54 
Àn
 +
ETH_HLEN
;

55 if–
Àn
 > 
ETH_FRAME_LEN
 )Üen = 80;

56 #i‡
	`deföed
(
__ci_drivî__
)

57 if–
Àn
 > 80 )Üen = 80;

59 if–
Àn
 > 
ci_ç_max_dump
 )Üen = ci_tp_max_dump;

61  
Àn
;

62 
	}
}

65 #ifde‡
__ci_drivî__


67 
	~<⁄lﬂd/t˝_hñ≥r_ídpoöt.h
>

68 
	~<⁄lﬂd/t˝_hñ≥r_‚s.h
>

79 
ci_ölöe
 
	$ci_t˝_upd©e_πt
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
, 
m
)

83 
	`ci_as£π_ge
(
m
, 0);

84 
m
 = 
	`CI_MAX
(1, m);

86 if–
	`CI_LIKELY
(
ts
->
ß
) ) {

90 
m
 -(
ts
->
ß
 >> 3u);

91 
ts
->
ß
 +
m
;

92 if–
m
 < 0 ) m = -m;

93 
m
 -(
ts
->
sv
 >> 2u);

94 
ts
->
sv
 +
m
;

95 
ts
->
πo
 = 
	`t˝_§â
—sË+Ås->
sv
;

99 
ts
->
ß
 = (
m
 << 3u);

100 
ts
->
sv
 = (
m
 << 1u);

101 
ts
->
πo
 = 
m
 +Ås->
sv
;

104 
	`ci_t˝_πo_bound
(
√tif
, 
ts
);

106 
	`CI_IP_SOCK_STATS_VAL_RTT_SRTT_RTO
–
ts
,Ås->
sv
 >> 2,Ås->
ß
 >> 3,Ås->
πo
 );

107 
	`LOG_TR
(
	`ci_log
("TCP RX %d UPDATE RTT sa=%u sv=%u SRTT=%u RTTVAR=%u RTO=%u",

108 
	`S_FMT
(
ts
),Ås->
ß
,Ås->
sv
,

109 
	`t˝_§â
(
ts
), 
	`t˝_πtv¨
—s),Ås->
πo
));

110 
	}
}

115 
ù_cmsg_ªcv_time°amp
(
ci_√tif
 *
ni
, 
ci_uöt64
 
time°amp
,

116 
cmsg_°©e
 *cmsg_state);

117 
ù_cmsg_ªcv_time°am≤s
(
ci_√tif
 *
ni
, 
ci_uöt64
 
time°amp
,

118 
cmsg_°©e
 *cmsg_state);

119 
ù_cmsg_ªcv_time°ampög
(
ci_√tif
 *
ni
,

120 
ci_uöt64
 
sys_time°amp
, 
time•ec
* 
hw_time°amp
,

121 
Êags
, 
cmsg_°©e
 *cmsg_state);

129 #i‡
deföed
(
_WIN32
Ë&& deföed(
__KERNEL__
)

131 
	#CITP_WAITABLE_SLEEP_DELAY_USECS
 100000

	)

132 
	#CITP_WAITABLE_SLEEP_WHILE
(
ni
, 
w
, 
why
, 
timeout
, 
c⁄d
, 
¥c
) \

134 
LARGE_INTEGER
 
èrgë_ticks
, 
cuºít_ticks
, 
dñay
; \

135 if–(
timeout
Ë!
NULL
 && (—imeout)->
tv_£c
 != 0 || \

136 (
timeout
)->
tv_u£c
 != 0) ) { \

137 
	`KeQuîyTickCou¡
(&
èrgë_ticks
); \

138 
èrgë_ticks
.
QuadP¨t
 +((
timeout
)->
tv_£c
 * 10000000LL \

139 + (
timeout
)->
tv_u£c
 * 10LL) \

140 / 
	`KeQuîyTimeIn¸emít
(); \

142 
èrgë_ticks
.
QuadP¨t
 = 0LL; \

144 *(
¥c
) = 0; \

145  (
c⁄d
) ) { \

146 
	`ci_√tif_pﬁl
(
ni
); \

147 if–
èrgë_ticks
.
QuadP¨t
 != 0) { \

148 
	`KeQuîyTickCou¡
(&
cuºít_ticks
); \

149 if–
èrgë_ticks
.
QuadP¨t
 <
cuºít_ticks
.QuadPart ) { \

150 *(
¥c
Ë-
EAGAIN
; \

154 
	`ci_√tif_u∆ock
(
ni
); \

155 
dñay
.
QuadP¨t
 = -
CITP_WAITABLE_SLEEP_DELAY_USECS
; \

156 
	`KeDñayExecuti⁄Thªad
(
Kî√lMode
, 
FALSE
, &
dñay
); \

157 
	`ci_√tif_lock
(
ni
); \

159 } 0)

	)

162 
	#CITP_WAITABLE_SLEEP_WHILE
(
ni
, 
w
, 
why
, 
timeout
, 
c⁄d
, 
¥c
) \

164 
ci_uöt64
 
__¶ìp_£q
; \

165 
ci_uöt32
 
t
 = (
timeout
); \

166 *(
¥c
) = 0; \

168 
__¶ìp_£q
 = (
w
)->
¶ìp_£q
.
Æl
; \

169 
	`ci_rmb
(); \

170 if–!(
c⁄d
) ) ; \

171 (*
¥c
Ë
	`ci_sock_¶ìp
((
ni
), (
w
), (
why
), \

172 
CI_SLEEP_NETIF_LOCKED
 | \

173 
CI_SLEEP_NETIF_RQ
, \

174 
__¶ìp_£q
, &
t
); \

176 
	`CI_TEST
(
	`ci_√tif_lock
(
ni
) == 0); \

177 if–*(
¥c
) ) ; \

178 
	`ci_√tif_pﬁl
(
ni
); \

180 } 0)

	)

184 
	#CI_TCP_SLEEP_WHILE
(
ni
, 
ts
, 
why
, 
timeout
, 
c⁄d
, 
¥c
) \

185 
	`CITP_WAITABLE_SLEEP_WHILE
((
ni
), &(
ts
)->
s
.
b
, (
why
), (
timeout
), (
c⁄d
), (
¥c
))

	)

208 
ci_ölöe
 

209 
	$ci_t˝_ï_£t_fûãrs
(
ci_√tif
 * 
ni
,

210 
oo_•
 
sock_id
,

211 
ci_ifid_t
 
bödto_ifödex
,

212 
oo_•
 
‰om_t˝_id
)

214 
rc
;

216 
	`ci_as£π
(
ni
);

218 
	`LOG_TC
(
	`ci_log
("%s: %d:%d bindto_ifindex=%dÖort_sock=%d",

219 
__FUNCTION__
, 
	`NI_ID
(
ni
), 
	`OO_SP_FMT
(
sock_id
),

220 (Ë
bödto_ifödex
, 
	`OO_SP_FMT
(
‰om_t˝_id
)));

222 #ifde‡
__ci_drivî__


223 
rc
 = 
	`t˝_hñ≥r_ídpoöt_£t_fûãrs
(
	`ci_√tif_gë_vÆid_ï
(
ni
, 
sock_id
),

224 
bödto_ifödex
, 
‰om_t˝_id
);

227 if–
	`ci_t˝_ˇn_£t_fûãr_ö_ul
(
ni
, 
	`SP_TO_SOCK
“i, 
sock_id
)) )

228 
rc
 = 
	`ci_t˝_sock_£t_sˇœbÀ_fûãr
(
ni
, 
	`SP_TO_TCP
“i, 
sock_id
));

230 
rc
 = 
	`ci_t˝_hñ≥r_ï_£t_fûãrs
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
), 
sock_id
,

231 
bödto_ifödex
, 
‰om_t˝_id
);

234 
	`LOG_TC
–if(
rc
 < 0)

235 
	`ci_log
(" ---> %†‘c=%d)", 
__FUNCTION__
, 
rc
) );

236  
rc
;

237 
	}
}

239 #i‚de‡
__ci_drivî__


240 
ci_ölöe
 

241 
	$ci_t˝_ï_ªu£p‹t_böd
(
ci_fd_t
 
fd
, c⁄° * 
˛u°î_«me
,

242 
ci_öt32
 
˛u°î_size
, 
ci_uöt32
 
˛u°î_ª°¨t_›t
,

243 
ci_uöt32
 
addr_be32
, 
ci_uöt16
 
p‹t_be16
)

245 
rc
;

247 
	`LOG_TC
(
	`ci_log
("%s: %dáddr_be32: %dÖ‹t: %d", 
__FUNCTION__
, 
fd
, 
addr_be32
,

248 
p‹t_be16
));

249 
rc
 = 
	`ci_t˝_hñ≥r_ï_ªu£p‹t_böd
(
fd
, 
˛u°î_«me
, 
˛u°î_size
,

250 
˛u°î_ª°¨t_›t
, 
addr_be32
,

251 
p‹t_be16
);

252 
	`LOG_TC
–if(
rc
 < 0)

253 
	`ci_log
(" ---> %†‘c=%d)", 
__FUNCTION__
, 
rc
) );

254  
rc
;

255 
	}
}

271 
ci_ölöe
 

272 
	$ci_t˝_ï_˛ór_fûãrs
(
ci_√tif
* 
ni
,

273 
oo_•
 
sock_id
,

274 
√ed_upd©e
)

276 
rc
;

277 #ifde‡
__ci_drivî__


278 
su¥ess_hw_›s
 = 
ni
->
Êags
 & 
CI_NETIF_FLAG_IN_DL_CONTEXT
;

280 
	`ci_as£π
(
ni
);

282 
	`LOG_TC
(
	`ci_log
("%s: %d:%d (%d)", 
__FUNCTION__
,

283 
ni
->
°©e
->
°ack_id
, 
	`OO_SP_FMT
(
sock_id
), 
√ed_upd©e
));

284 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

286 #ifde‡
__ci_drivî__


287 
rc
 = 
	`t˝_hñ≥r_ídpoöt_˛ór_fûãrs
(
	`ci_√tif_gë_vÆid_ï
(
ni
, 
sock_id
),

288 
su¥ess_hw_›s
, 
√ed_upd©e
);

290 if–(
	`SP_TO_SOCK
(
ni
, 
sock_id
)->
s_Êags
 & 
CI_SOCK_FLAG_MAC_FILTER
) &&

291 
	`ci_t˝_ˇn_£t_fûãr_ö_ul
(
ni
, 
	`SP_TO_SOCK
“i, 
sock_id
)) ) {

292 
	`ci_t˝_sock_˛ór_sˇœbÀ_fûãr
(
ni
, 
	`SP_TO_TCP
“i, 
sock_id
));

293 
rc
 = 0;

296 
rc
 = 
	`ci_t˝_hñ≥r_ï_˛ór_fûãrs
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
), 
sock_id
,

297 
√ed_upd©e
);

300 
	`LOG_TC
–i‡(
rc
 < 0 &&Ñ¯!-
EAGAIN
)

301 
	`ci_log
(" ---> %†‘c=%d)", 
__FUNCTION__
, 
rc
) );

302  
rc
;

303 
	}
}

330 
ci_ölöe
 

331 
	$ci_t˝_ï_mˇ°_add_dñ
(
ci_√tif
* 
ni
,

332 
oo_•
 
sock_id
,

333 
ci_ifid_t
 
ifödex
,

334 
ci_uöt32
 
mˇ°_addr
,

335 
add
)

337 
rc
;

339 
	`ci_as£π
(
ni
);

341 
	`LOG_TC
(
	`ci_log
("%s: id=%d (ifid=%d, maddr=%s)",

342 
__FUNCTION__
, 
	`OO_SP_FMT
(
sock_id
), 
ifödex
,

343 
	`ù_addr_°r
(
mˇ°_addr
)));

345 #ifde‡
__ci_drivî__


347 
t˝_hñ≥r_ídpoöt_t
* 
ï
 = 
	`ci_√tif_gë_vÆid_ï
(
ni
, 
sock_id
);

348 if–
add
 )

349 
rc
 = 
	`oof_sockë_mˇ°_add
(
eÁb_t˝_drivî
.
fûãr_m™agî
,

350 &
ï
->
oofûãr
, 
mˇ°_addr
, 
ifödex
);

352 
	`oof_sockë_mˇ°_dñ
(
eÁb_t˝_drivî
.
fûãr_m™agî
,

353 &
ï
->
oofûãr
, 
mˇ°_addr
, 
ifödex
);

354 
rc
 = 0;

358 
rc
 = 
	`ci_t˝_hñ≥r_ï_mˇ°_add_dñ
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

359 
sock_id
, 
mˇ°_addr
, 
ifödex
, 
add
);

362 
	`LOG_TC
–if(
rc
 < 0)

363 
	`ci_log
(" ---> %†‘c=%d)", 
__FUNCTION__
, 
rc
) );

364  
rc
;

365 
	}
}

372 #ifde‡
__KERNEL__


373 
	#vîify_Áû
(Ë

	)

375 
	#vîify_Áû
(Ë
	`ci_Áû
(("STOP."))

	)

378 
	#vîify
(
exp
) \

380 if–
	`CI_UNLIKELY
(!(
exp
)) ) { \

381 
	`ci_log
("********** vîify(%sË© %s:%d", #exp, 
__FILE__
, 
__LINE__
); \

382 
	`ci_log
("********** from %s:%d", 
fûe
?fûe:"", 
löe
); \

383 
	`vîify_Áû
(); \

385 }0)

	)

387 #unde‡
vîify


388 
	#vîify
(
exp
Ë
	`ci_as£π
”xp)

	)

395 #i‚de‡
SO_TIMESTAMPNS


396 
	#SO_TIMESTAMPNS
 35

	)

399 #i‚de‡
SO_REUSEPORT


400 
	#SO_REUSEPORT
 15

	)

406 
	#ONLOAD_SO_TIMESTAMPING
 37

	)

407 
	#ONLOAD_SCM_TIMESTAMPING
 
ONLOAD_SO_TIMESTAMPING


	)

413 
	mONLOAD_SOF_TIMESTAMPING_TX_HARDWARE
 = (1<<0),

414 
	mONLOAD_SOF_TIMESTAMPING_TX_SOFTWARE
 = (1<<1),

415 
	mONLOAD_SOF_TIMESTAMPING_RX_HARDWARE
 = (1<<2),

416 
	mONLOAD_SOF_TIMESTAMPING_RX_SOFTWARE
 = (1<<3),

417 
	mONLOAD_SOF_TIMESTAMPING_SOFTWARE
 = (1<<4),

418 
	mONLOAD_SOF_TIMESTAMPING_SYS_HARDWARE
 = (1<<5),

419 
	mONLOAD_SOF_TIMESTAMPING_RAW_HARDWARE
 = (1<<6),

420 
	mONLOAD_SOF_TIMESTAMPING_OPT_ID
 = (1<<7),

421 
	mONLOAD_SOF_TIMESTAMPING_TX_SCHED
 = (1<<8),

422 
	mONLOAD_SOF_TIMESTAMPING_TX_ACK
 = (1<<9),

423 
	mONLOAD_SOF_TIMESTAMPING_OPT_CMSG
 = (1<<10),

424 
	mONLOAD_SOF_TIMESTAMPING_OPT_TSONLY
 = (1<<11),

426 
	mONLOAD_SOF_TIMESTAMPING_LAST
 = 
ONLOAD_SOF_TIMESTAMPING_OPT_TSONLY
,

427 
	mONLOAD_SOF_TIMESTAMPING_MASK
 =

428 –(
ONLOAD_SOF_TIMESTAMPING_LAST
 << 1) - 1 )

433 
	soo_sock_exãnded_îr
 {

434 
ci_uöt32
 
	mì_î∫o
;

435 
ci_uöt8
 
	mì_‹igö
;

436 
ci_uöt8
 
	mì_ty≥
;

437 
ci_uöt8
 
	mì_code
;

438 
ci_uöt8
 
	mì_∑d
;

439 
ci_uöt32
 
	mì_öfo
;

440 
ci_uöt32
 
	mì_d©a
;

444 #i‚de‡
SO_EE_ORIGIN_TIMESTAMPING


445 
	#SO_EE_ORIGIN_TIMESTAMPING
 4

	)

451 
	#ONLOAD_SO_BUSY_POLL
 46

	)

455 
	#›t_ok
(
ov
,
ﬁ
,
ty
Ë((ovË&& (ﬁË>—y))

	)

456 
	#›t_nŸ_ok
(
ov
,
ﬁ
,
ty
) \

457 ((
ﬁ
Ë< (
ty
Ë? -
EINVAL
 : (
ov
Ë? 0 : -
EFAULT
)

	)

459 
ci_ölöe
 

460 
	$ci_gë_›tvÆ
(c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
)

462 i‡(
›éí
 >= ())

463  (*(*)
›tvÆ
);

464  ()(*(*)
›tvÆ
);

465 
	}
}

468 
ci_ölöe
 

469 
	$ci_gësock›t_föÆ_¥e
(*
›tvÆ
, 
sockÀn_t
 *
›éí
, 
Àvñ
,

470 *
vÆ
, 
size_t
 
vÆ_size
)

472 if–*
›éí
 > 0 )

473 
	`mem˝y
(
›tvÆ
, 
vÆ
, 
	`CI_MIN
(*
›éí
, 
vÆ_size
));

474 #i‡
	`deföed
(
_WIN32
)

475 if–*
›éí
 > 
vÆ_size
 )

476 #ñi‡
	`deföed
(
__löux__
)

477 if–*
›éí
 > 
vÆ_size
 )

479 *
›éí
 = 
vÆ_size
;

482 
	}
}

486 
ci_ölöe
 

487 
	$ci_gësock›t_föÆ
(*
›tvÆ
, 
sockÀn_t
 *
›éí
, 
Àvñ
,

488 *
vÆ
, 
size_t
 
vÆ_size
)

490 #ifde‡
__löux__


491 if–(
Àvñ
 =
SOL_SOCKET
 ||Üevñ =
SOL_IP
) &&

492 
vÆ_size
 == () &&

493 *
›éí
 >= () && *optlen < () ) {

494 
ivÆ
 = *((*)
vÆ
);

495 
ucvÆ
 = ()
ivÆ
;

496 if–
ivÆ
 >=0 && ival <= 255)

497  
	`ci_gësock›t_föÆ_¥e
(
›tvÆ
, 
›éí
, 
Àvñ
,

498 &
ucvÆ
, (ucval));

501  
	`ci_gësock›t_föÆ_¥e
(
›tvÆ
, 
›éí
, 
Àvñ
,

502 
vÆ
, 
vÆ_size
);

503 
	}
}

514 
	$ci_gë_sﬁ_t˝
(
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
,

515 
›äame
, *
›tvÆ
,

516 
sockÀn_t
 *
›éí
Ë
CI_HF
;

528 
	$ci_gë_sﬁ_ù
–
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
, 
ci_fd_t
 
fd
,

529 
›äame
, *
›tvÆ
,

530 
sockÀn_t
 *
›éí
 ) 
CI_HF
;

532 #i‡
CI_CFG_FAKE_IPV6


542 
	$ci_gë_sﬁ_ù6
–
ci_sock_cmn
* 
s
, 
ci_fd_t
 
fd
,

543 
›äame
, *
›tvÆ
,

544 
sockÀn_t
 *
›éí
 ) 
CI_HF
;

555 
	$ci_gë_sﬁ_sockë
–
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
,

556 
›äame
, *
›tvÆ
,

557 
sockÀn_t
 *
›éí
 ) 
CI_HF
;

568 
	$ci_£t_sﬁ_ù
–
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
,

569 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
Ë
CI_HF
;

571 #i‡
CI_CFG_FAKE_IPV6


581 
	$ci_£t_sﬁ_ù6
–
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
,

582 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
Ë
CI_HF
;

594 
	$ci_£t_sﬁ_sockë
–
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
,

595 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
Ë
CI_HF
;

599 
	$ci_£t_sﬁ_sockë_nﬁock
(
ci_√tif
*, 
ci_sock_cmn
* 
s
, 
›äame
,

600 c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
Ë
CI_HF
;

606 #i‡!
	`deföed
(
__KERNEL__
Ë|| deföed(
__löux__
)

608 #ifde‡
__KERNEL__


609 
	#CI_IOCTL_ARG_OK
(
t
,
a
Ë({à
_v
; 
_rc
 = 
	`gë_u£r
(_v, (t*)◊)); ()_v; _rc==0;
	}
})

	)

610 
	#CI_IOCTL_SETARG
(
a
,
v
Ëdÿ{ 
	`put_u£r
(v,a); } 0)

	)

611 
	#CI_IOCTL_GETARG
(
t
,
a
Ë({à
_v
; 
	`gë_u£r
(_v, (t*)◊)); _v; })

	)

613 
	#CI_IOCTL_ARG_OK
(
t
,
a
Ë(◊Ë!0)

	)

614 
	#CI_IOCTL_SETARG
(
a
,
v
Ëdÿ{ *◊)=(v); } 0)

	)

615 
	#CI_IOCTL_GETARG
(
t
,
v
Ë(*—*)(v))

	)

618 #i‡
deföed
(
__KERNEL
)

621 
	#CI_CMN_IOCTL_FIONBIO
(
s
, 
¨g
) do { \

622 
v
, 
_rc
 = 
	`gë_u£r
(v, 
¨g
); \

623 if–
v
 ) { \

624 
	`LOG_SV
–
	`ci_log
("%s: sëÇ⁄-blockög mode", 
__FUNCTION__
 ) ); \

625 
	`ci_bô_£t
(&(
s
)->
b
.
sb_aÊags
, 
CI_SB_AFLAG_O_NONBLOCK_BIT
); \

627 
	`LOG_SV
–
	`ci_log
("%s: cÀ¨Ç⁄-blockög mode", 
__FUNCTION__
 ) ); \

628 
	`ci_bô_˛ór
(&(
s
)->
b
.
sb_aÊags
, 
CI_SB_AFLAG_O_NONBLOCK_BIT
); \

629 } } 0)

	)

633 
	#CI_CMN_IOCTL_FIONBIO
(
s
, 
¨g
) do { \

634 if–*(*)(
¨g
) ) { \

635 
	`LOG_SV
–
	`ci_log
("%s: sëÇ⁄-blockög mode", 
__FUNCTION__
 ) ); \

636 
	`ci_bô_£t
(&(
s
)->
b
.
sb_aÊags
, 
CI_SB_AFLAG_O_NONBLOCK_BIT
); \

638 
	`LOG_SV
–
	`ci_log
("%s: cÀ¨Ç⁄-blockög mode", 
__FUNCTION__
 ) ); \

639 
	`ci_bô_˛ór
(&(
s
)->
b
.
sb_aÊags
, 
CI_SB_AFLAG_O_NONBLOCK_BIT
); \

640 } } 0)

	)

652 
ci_cmn_io˘l
(
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
, 
ªque°
,

653 * 
¨g
, 
os_rc
, 
os_sockë_exi°s
);

658 
ci_udp_compuã_°amp
(
ci_√tif
 *
√tif
, 
ci_uöt64
 
°amp
,

659 
time•ec
 *
ts
);

666 #i‡
deföed
(
__löux__
)

667 
	#SOCKOPT_RET_INVALID_LEVEL
(
s
) \

668 i‡((
s
)->
domaö
 =
AF_INET6
 ) \

669 
	`RET_WITH_ERRNO
(
ENOPROTOOPT
); \

671 
	`RET_WITH_ERRNO
(
EOPNOTSUPP
)

	)

672 #ñi‡
deföed
(
__sun__
)

673 
	#SOCKOPT_RET_INVALID_LEVEL
(
s
Ë
	`RET_WITH_ERRNO
(
ENOPROTOOPT
)

	)

674 #ñi‡
deföed
(
_WIN32
)

675 
	#SOCKOPT_RET_INVALID_LEVEL
(
s
Ë
	`RET_WITH_ERRNO
(
EINVAL
)

	)

686 #ifde‡ 
_WIN32


688 
	#WSS_OPERATION_IN_PROGRESS
 0x00000103L

	)

689 
	#TF_REUSE_SOCKET
 0x02

	)

693 
	#AFN_FMT
 "%s: %d:%d [a›:%d,ty≥=%d] "

	)

694 
	#AFN_PRI_ARGS
(
ni
, 
a›
Ë
__FUNCTION__
, 
	`NI_ID
“i), (a›)->
sock_id
, \

695 
	`AOP_ID
((
ni
),(
a›
)), (a›)->
ty≥


	)

697 
	#AFNS_FMT
 "%s: "
NSS_FMT
" [a›:%d,ty≥=%d] "

	)

698 
	#AFNS_PRI_ARGS
(
ni
, 
a›
Ë
__FUNCTION__
, \

699 
	`NSS_PRI_ARGS
((
ni
), 
	`SP_TO_SOCK
(“i),(
a›
)->
sock_id
)), \

700 
	`AOP_ID
((
ni
),(
a›
)), (a›)->
ty≥


	)

702 #ifde‡ 
__KERNEL__


705 
wdm_ci_com∂ëe_io
(
ci_os_fûe
 
Â
, 
PVOID
 
ovîœµed
,

706 
ci_uöt32
 
°©us
, ci_uöt32 
byãs
, 
do_com∂ëi⁄_p‹t
);

710 
	$_com∂ëi⁄_≠c
(
PVOID
 
¨g1
, PVOID 
¨g2
, PVOID 
¨g3
Ë
CI_HF
;

715 
ci_ölöe
 
DWORD
 
	$wö_wßîr‹_to_îr‹
(
DWORD
 
îrcode
)

717 
îrcode
) {

718 
WSAECONNRESET
:

719  
ERROR_NETNAME_DELETED
;

722 i‡((
îrcode
 > 10000) && (errcode < 12000)) {

723 
	`ci_log
("Warning:Öassing winsockÉrror %dÅoÇon-winsock callback",

724 
îrcode
);

728  
îrcode
;

730 
	}
}

735 #i‡
deföed
(
__löux__
Ë&& !deföed(
ECANCELED
)

736 
	#ECANCELED
 125

	)

740 #i‡
deföed
(
__KERNEL__
)

741 
	$ci_ù_queue_íqueue_¬l
(
ci_√tif
* 
√tif
, 
ci_ù_pkt_queue
*
qu
,

742 
ci_ù_pkt_fmt
* 
pkt
Ë
CI_HF
;

744 
ci_ù_pkt_fmt
* 
	$ci_pkt_Æloc_n
(
ci_√tif
* 
ni
, 
n
Ë
CI_HF
;

745 
ci_ù_pkt_fmt
* 
	$ci_pkt_Æloc_n_¬l
(
ci_√tif
* 
ni
, 
n
Ë
CI_HF
;

757 
	#UDP_PAYLOAD1_SPACE_PMTU
(
pmtu
) \

758 (((
pmtu
)-(
ci_ù4_hdr
)- (
ci_udp_hdr
))&0xfff8)

	)

761 
	#UDP_PAYLOAD2_SPACE_PMTU
(
pmtu
Ë((’mtu)-(
ci_ù4_hdr
))&0xfff8)

	)

763 #ifde‡
_WIN32


764 
	#UDP_HAS_SENDQ_SPACE
(
us
,
l
Ë((us)->
s
.
so
.
¢dbuf
 > ()(us)->
tx_cou¡
)

	)

766 
	#UDP_HAS_SENDQ_SPACE
(
us
,
l
) \

767 ((
us
)->
s
.
so
.
¢dbuf
 >()((us)->
tx_cou¡
 + (
l
)))

	)

771 #ifde‡
__löux__


773 
	#oo_adju°_SO_XBUF
(
v
Ë((vË* 2)

	)

775 
	#oo_adju°_SO_XBUF
(
v
Ë(v)

	)

783 #ifde‡
__KERNEL__


785 
ci_ölöe
 

786 
	$oo_•ölo›_∑u£_check_sig«ls
(
ci_√tif
* 
ni
, 
ci_uöt64
 
now_‰c
,

787 
ci_uöt64
* 
scheduÀ_‰c
, 
have_timeout
)

789 if(
	`CI_UNLIKELY
–
	`sig«l_≥ndög
(
cuºít
) ))

790  
have_timeout
 ? -
EINTR
 : -
ERESTARTSYS
;

791 if–
now_‰c
 - *
scheduÀ_‰c
 > 
	`IPTIMER_STATE
(
ni
)->
khz
 ) {

792 
	`scheduÀ
();

793 *
scheduÀ_‰c
 = 
now_‰c
;

796 
	}
}

798 
	#OO_SPINLOOP_PAUSE_CHECK_SIGNALS
(
ni
, 
now_‰c
, 
scheduÀ_‰c
, \

799 
have_timeout
, 
w
, 
si
) \

800 
	`oo_•ölo›_∑u£_check_sig«ls
(
ni
, 
now_‰c
, 
scheduÀ_‰c
, 
have_timeout
)

	)

804 
	~"ci/öã∫Æ/ù_sig«l.h
"

805 
	$oo_•ölo›_run_≥ndög_sigs
(
ci_√tif
*, 
côp_waôabÀ
*,

806 
côp_sig«l_öfo
*, Ë
CI_HF
;

808 
ci_ölöe
 

809 
	$oo_•ölo›_∑u£_check_sig«ls
(
ci_√tif
* 
ni
, 
ci_uöt64
 
now_‰c
,

810 
ci_uöt64
* 
scheduÀ_‰c
 ,

811 
have_timeout
,

812 
côp_waôabÀ
* 
w
, 
côp_sig«l_öfo
* 
si
)

814 
	`ci_as£π_gt
(
si
->
öside_lib
, 0);

815 
	`ci_as£π
(~
si
->
aÊags
 & 
OO_SIGNAL_FLAG_FDTABLE_LOCKED
);

817 if(
	`CI_LIKELY
–~
si
->
aÊags
 & 
OO_SIGNAL_FLAG_HAVE_PENDING
 )) {

818 
	`ci_•ölo›_∑u£
();

821  
	`oo_•ölo›_run_≥ndög_sigs
(
ni
, 
w
, 
si
, 
have_timeout
);

822 
	}
}

824 
	#OO_SPINLOOP_PAUSE_CHECK_SIGNALS
(
ni
, 
now_‰c
, 
scheduÀ_‰c
, \

825 
have_timeout
, 
w
, 
si
) \

826 
	`oo_•ölo›_∑u£_check_sig«ls
(
ni
, 
now_‰c
, 
scheduÀ_‰c
, \

827 
have_timeout
, 
w
, 
si
)

	)

836 #i‚de‡
__KERNEL__


837 
côp_öô_thªad_ˇŒback
 
öô_thªad_ˇŒback
 
CI_HV
;

845 #i‡
CI_CFG_PORT_STRIPING


846 
	#ci_ts_p‹t_sw≠
(
£q
, 
ts
Ë((£q / 
	`t˝_eff_mss
—s)Ë& 1)

	)

849 
ci_ölöe
 
	$ci_√tif_ötf_i_to_ba£_ifödex
(
ci_√tif
* 
ni
, 
ötf_i
)

851 
ci_hwp‹t_id_t
 
hwp‹t
;

852 
	`ci_as£π_…
((Ë
ötf_i
, 
CI_CFG_MAX_INTERFACES
);

853 
hwp‹t
 = 
ni
->
°©e
->
ötf_i_to_hwp‹t
[
ötf_i
];

854 
	`ci_as£π_…
((Ë
hwp‹t
, 
CPLANE_MAX_REGISTER_INTERFACES
);

855  
	`ci˝_fwd_hwp‹t_to_ba£_ifödex
(&
	`CICP_USER_MIBS
(
	`CICP_HANDLE
(
ni
)),

856 
hwp‹t
);

857 
	}
}

865 
ci_ölöe
 

866 
	$ci_√tif_pkt_ªÀa£_ö_pﬁl
(
ci_√tif
* 
√tif
, 
ci_ù_pkt_fmt
* 
pkt
,

867 
ci_√tif_pﬁl_°©e
* 
ps
)

869 if–
pkt
->
ªfcou¡
 == 1 ) {

872 
	`ci_as£π
(~
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_PENDING
);

874 
pkt
->
ªfcou¡
 = 0;

875 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_RX
 )

876 --
√tif
->
°©e
->
n_rx_pkts
;

877 
	`__ci_√tif_pkt_˛ón
(
pkt
);

878 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_NONB_POOL
 ) {

879 *
ps
->
tx_pkt_‰ì_li°_ö£π
 = 
	`OO_PKT_P
(
pkt
);

880 
ps
->
tx_pkt_‰ì_li°_ö£π
 = &
pkt
->
√xt
;

881 ++
ps
->
tx_pkt_‰ì_li°_n
;

884 
	`ci_√tif_pkt_put
(
√tif
, 
pkt
);

886  
CI_TRUE
;

889 
	`ci_as£π_gt
(
pkt
->
ªfcou¡
, 1);

890 --
pkt
->
ªfcou¡
;

891  
CI_FALSE
;

893 
	}
}

896 #ifde‡
__KERNEL__


897 
ci_√tif_£t_mîge_©omic_Êag
(
ci_√tif
* 
ni
);

898 
	#CI_NETIF_STATE_MOD
(
ni
, 
is_locked
, 
fõld
, 
mod
) \

900 if–
is_locked
 ) { \

901 
mod
##mod 
ni
->
°©e
->
fõld
; \

904 
ci_öt32
 
vÆ
; \

906 
vÆ
 = 
ni
->
°©e
->
©omic_
##
fõld
; \

907 }  
	`ci_ˇs32u_Áû
(&
ni
->
°©e
->
©omic_
##
fõld
, 
vÆ
, vÆ 
mod
 1) );\

909 } 0)

	)

911 
	#CI_NETIF_STATE_MOD
(
ni
, 
is_locked
, 
fõld
, 
mod
) \

912 dÿ{ 
mod
##mod 
ni
->
°©e
->
fõld
; } 0)

	)

	@ip_tx.c

14 
	~"ù_öã∫Æ.h
"

15 
	~"ù_tx.h
"

16 
	~<ci/toﬁs/pktdump.h
>

19 
	$ci_ù_£nd_pkt_lookup
(
ci_√tif
* 
ni
,

20 c⁄° 
oo_sock_˝œ√
* 
sock_˝_›t
,

21 
ci_ù_pkt_fmt
* 
pkt
,

22 
ci_ù_ˇched_hdrs
* 
ùˇche
)

24 
ci_ù4_hdr
* 
pkt_ù
 = 
	`oo_tx_ù_hdr
(
pkt
);

25 
oo_sock_˝œ√
 
sock_˝
;

27 
	`ci_as£π
(
pkt_ù
->
ù_ßddr_be32
 != 0);

28 
	`ci_as£π
(
pkt_ù
->
ù_daddr_be32
 != 0);

30 if–
sock_˝_›t
 !
NULL
 )

31 
sock_˝
 = *
sock_˝_›t
;

33 
	`oo_sock_˝œ√_öô
(&
sock_˝
);

34 
	`ci_ù_ˇche_öô
(
ùˇche
);

35 
sock_˝
.
ù_œddr_be32
 = 
pkt_ù
->
ù_ßddr_be32
;

36 
ùˇche
->
ù
.
ù_daddr_be32
 = 
pkt_ù
->ip_daddr_be32;

38  
pkt_ù
->
ù_¥Ÿocﬁ
 ) {

39 
IPPROTO_UDP
:

40 
IPPROTO_TCP
:

41 
sock_˝
.
Õ‹t_be16
 = 
	`TX_PKT_SPORT_BE16
(
pkt
);

42 
ùˇche
->
dp‹t_be16
 = 
	`TX_PKT_DPORT_BE16
(
pkt
);

45 
sock_˝
.
Õ‹t_be16
 = 0;

46 
ùˇche
->
dp‹t_be16
 = 0;

50 
	`ci˝_u£r_ªåõve
(
ni
, 
ùˇche
, &
sock_˝
);

51 
	}
}

53 
	$ci_ù_£nd_pkt_£nd
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

54 c⁄° 
ci_ù_ˇched_hdrs
* 
ùˇche
)

56 
os_rc
 = 0;

58  
ùˇche
->
°©us
 ) {

59 
ªårc_suc˚ss
:

60 
	`ci_ù_£t_mac_™d_p‹t
(
ni
, 
ùˇche
, 
pkt
);

61 
	`ci_√tif_pkt_hﬁd
(
ni
, 
pkt
);

62 
	`ci_√tif_£nd
(
ni
, 
pkt
);

64 
ªårc_nomac
:

65 
	`ci˝_u£r_de„r_£nd
(
ni
, 
ªårc_nomac
, &
os_rc
, 
	`OO_PKT_P
(
pkt
),

66 
ùˇche
->
ifödex
);

68 
ªårc_n‹ouã
:

69  -
EHOSTUNREACH
;

70 
ªårc_Æõƒouã
:

71  -
ENETUNREACH
;

72 
ªårc_loˇÃouã
:

73 if–
ùˇche
->
Êags
 & 
CI_IP_CACHE_IS_LOCALROUTE
 )

74 
	`ci_as£π
(0);

77 if–
ùˇche
->
°©us
 < 0 )

78  
ùˇche
->
°©us
;

83 
	}
}

86 
	$ci_ù_£nd_pkt
(
ci_√tif
* 
ni
, c⁄° 
oo_sock_˝œ√
* 
sock_˝_›t
,

87 
ci_ù_pkt_fmt
* 
pkt
)

89 
ci_ù_ˇched_hdrs
 
ùˇche
;

90 
	`ci_ù_£nd_pkt_lookup
(
ni
, 
sock_˝_›t
, 
pkt
, &
ùˇche
);

91  
	`ci_ù_£nd_pkt_£nd
(
ni
, 
pkt
, &
ùˇche
);

92 
	}
}

95 
	$ci_ù_£nd_t˝_¶ow
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
, 
ci_ù_pkt_fmt
* 
pkt
)

98 
rc
, 
¥ev_mtu
 = 
ts
->
s
.
pkt
.
mtu
;

100 
	`ci˝_u£r_ªåõve
(
ni
, &
ts
->
s
.
pkt
, &ts->s.
˝
);

102 if–
ts
->
s
.
pkt
.
°©us
 =
ªårc_suc˚ss
 ) {

103 if–
ts
->
s
.
pkt
.
mtu
 !
¥ev_mtu
 )

104 
	`CI_PMTU_TIMER_NOW
(
ni
, &
ts
->
pmtus
);

105 
	`ci_ù_£t_mac_™d_p‹t
(
ni
, &
ts
->
s
.
pkt
,Ökt);

106 
	`ci_√tif_pkt_hﬁd
(
ni
, 
pkt
);

107 
	`ci_√tif_£nd
(
ni
, 
pkt
);

110 if–
ts
->
s
.
pkt
.
°©us
 =
ªårc_loˇÃouã
 &&

111 (
ts
->
s
.
pkt
.
Êags
 & 
CI_IP_CACHE_IS_LOCALROUTE
) ) {

112 
	`ci_√tif_pkt_hﬁd
(
ni
, 
pkt
);

113 
	`ci_ù_loˇl_£nd
(
ni
, 
pkt
, 
	`S_SP
(
ts
), 
OO_SP_NULL
);

117 
	`ci_ù_ˇche_övÆid©e
(&
ts
->
s
.
pkt
);

119  
ts
->
s
.
pkt
.
°©us
 ) {

120 
ªårc_nomac
:

121 
rc
 = 0;

122 #ifde‡
__löux__


128 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_SYN_SENT
 ) {

129 if–
ts
->
ªå™smôs
 == 1 )

130 
ts
->
t˝Êags
 |
CI_TCPT_FLAG_NO_ARP
;

131 if–(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_NO_ARP
) &&

132 
ts
->
ªå™smôs
 == 2 ) {

133 
	`ci_t˝_dr›
(
ni
, 
ts
, 
EHOSTUNREACH
);

138 
	`ci˝_u£r_de„r_£nd
(
ni
, 
ªårc_nomac
, &
rc
, 
	`OO_PKT_P
(
pkt
),

139 
ts
->
s
.
pkt
.
ifödex
);

140 ++
ts
->
°©s
.
tx_nomac_de„r
;

142 
ªårc_n‹ouã
:

143 
rc
 = -
EHOSTUNREACH
;

145 
ªårc_Æõƒouã
:

146 
ªårc_loˇÃouã
:

150 
	`ci_as£π_…
(
ts
->
s
.
pkt
.
°©us
, 0);

151 if–
ts
->
s
.
pkt
.
°©us
 < 0 )

152 
rc
 = 
ts
->
s
.
pkt
.
°©us
;

155 
rc
 = 0;

158 
	`ci_as£π_À
(
rc
, 0);

171 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_SYN_SENT
 && 
rc
 < 0 &&Ås->
ªå™smôs
 > 0 &&

172 (
rc
 =-
EHOSTUNREACH
 ||Ñ¯=-
ENETUNREACH
 ||Ñ¯=-
ENETDOWN
) )

173 
	`ci_t˝_dr›
(
ni
, 
ts
, -
rc
);

174 
	}
}

	@ip_tx.h

14 #i‚de‡
__CI_INTERNAL_IP_TX_H__


15 
	#__CI_INTERNAL_IP_TX_H__


	)

17 
	~<ci/öã∫Æ/ù.h
>

18 
	~"√tif_tx.h
"

32 
	$ci_ù_£nd_pkt
(
ci_√tif
* 
ni
,

33 c⁄° 
oo_sock_˝œ√
* 
sock_˝_›t
,

34 
ci_ù_pkt_fmt
* 
pkt
Ë
CI_HF
;

44 
	$ci_ù_£nd_pkt_lookup
(
ci_√tif
* 
ni
,

45 c⁄° 
oo_sock_˝œ√
* 
sock_˝_›t
,

46 
ci_ù_pkt_fmt
* 
pkt
,

47 
ci_ù_ˇched_hdrs
* 
ùˇche
Ë
CI_HF
;

50 
	$ci_ù_£nd_pkt_£nd
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

51 c⁄° 
ci_ù_ˇched_hdrs
* 
ùˇche
Ë
CI_HF
;

55 
ci_ölöe
 
	$ci_ù_loˇl_£nd
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

56 
oo_•
 
§c
, oo_• 
d°
)

58 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

59 
pkt
->
pf
.
t˝_tx
.
lo
.
tx_sock
 = 
§c
;

60 
pkt
->
pf
.
t˝_tx
.
lo
.
rx_sock
 = 
d°
;

61 if–
	`OO_SP_IS_NULL
(
pkt
->
pf
.
t˝_tx
.
lo
.
rx_sock
) ) {

62 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pkt
);

66 
	`LOG_NT
(
	`ci_log
("%d:%dÜo›back TXÖkà%dÅÿ%d", 
	`NI_ID
(
ni
), 
	`OO_SP_FMT
(
§c
),

67 
	`OO_PKT_FMT
(
pkt
), 
	`OO_SP_FMT
(
d°
)));

68 
pkt
->
√xt
 = 
ni
->
°©e
->
lo›pkts
;

69 
ni
->
°©e
->
lo›pkts
 = 
	`OO_PKT_P
(
pkt
);

70 
ni
->
°©e
->
n_lo›pkts
++;

71 
ni
->
°©e
->
pﬁl_w‹k_out°™dög
 = 1;

72 
	}
}

74 
ci_ölöe
 

75 
	$ci_ù_£t_mac_™d_p‹t
(
ci_√tif
* 
ni
, c⁄° 
ci_ù_ˇched_hdrs
* 
ùˇche
,

76 
ci_ù_pkt_fmt
* 
pkt
)

78 
	`ci_as£π_equÆ
(
ùˇche
->
ëhî_ty≥
, 
CI_ETHERTYPE_IP
);

79 
	`oo_tx_pkt_œyout_upd©e
(
pkt
, 
ùˇche
->
ëhî_off£t
);

80 
	`mem˝y
(
	`oo_tx_ëhî_hdr
(
pkt
), 
	`ci_ù_ˇche_ëhî_hdr
(
ùˇche
),

81 
	`oo_ëhî_hdr_size
(
pkt
));

82 
pkt
->
ötf_i
 = 
ùˇche
->intf_i;

83 #i‡
CI_CFG_PORT_STRIPING


87 
pkt
->
ötf_i
 ^pkt->
√tif
.
tx
.
ötf_sw≠
;

88 
	`oo_ëhî_dho°
(
pkt
)[5] ^pkt->
√tif
.
tx
.
ötf_sw≠
;

89 
	`oo_ëhî_sho°
(
pkt
)[5] ^pkt->
√tif
.
tx
.
ötf_sw≠
;

91 
	`ci_as£π_equÆ
(
	`oo_ëhî_ty≥_gë
(
pkt
), 
CI_ETHERTYPE_IP
);

92 
	`ci_as£π_equÆ
(
	`CI_IP4_IHL
(
	`oo_tx_ù_hdr
(
pkt
)), (
ci_ù4_hdr
));

93 
	}
}

96 
	$ci_ù_£nd_t˝_¶ow
(
ci_√tif
*, 
ci_t˝_°©e
*, 
ci_ù_pkt_fmt
*)
CI_HF
;

99 
ci_ölöe
 

100 
	$__ci_ù_£nd_t˝
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
, 
ci_t˝_°©e
* 
ts
)

102 if–
ts
->
s
.
pkt
.
Êags
 & 
CI_IP_CACHE_IS_LOCALROUTE
 ) {

103 
	`ci_√tif_pkt_hﬁd
(
ni
, 
pkt
);

104 
	`ci_ù_loˇl_£nd
(
ni
, 
pkt
, 
	`S_SP
(
ts
),Ås->
loˇl_≥î
);

107 
	`CI_IPV4_STATS_INC_OUT_REQUESTS
(
ni
);

108 if(
	`CI_LIKELY
–
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
), &
ts
->
s
.
pkt
) )) {

109 
	`ci_ù_£t_mac_™d_p‹t
(
ni
, &
ts
->
s
.
pkt
,Ökt);

110 
	`ci_√tif_pkt_hﬁd
(
ni
, 
pkt
);

111 
	`ci_√tif_£nd
(
ni
, 
pkt
);

114 
	`ci_ù_£nd_t˝_¶ow
(
ni
, 
ts
, 
pkt
);

116 
	}
}

119 
ci_ölöe
 

120 
	$ci_ù_£nd_t˝
(
ci_√tif
 *
ni
, 
ci_ù_pkt_fmt
 *
pkt
, 
ci_t˝_°©e
 *
ts
)

122 #i‡
CI_CFG_PORT_STRIPING


123 
pkt
->
√tif
.
tx
.
ötf_sw≠
 = 0;

125 
	`__ci_ù_£nd_t˝
(
ni
, 
pkt
, 
ts
);

126 
	}
}

	@ipid.c

14 
	~"ù_öã∫Æ.h
"

15 #ifde‡
__ci_drivî__


16 
	~<⁄lﬂd/ùid.h
>

18 
	~<ci/öã∫Æ/ùid.h
>

19 
	~<⁄lﬂd/ul.h
>

23 
	#LPF
 "ci_ùid_"

	)

26 
ci_ölöe
 
	$ci_ùid_ønge_gë
–
ci_√tif
* 
ni
, 
ci_fd_t
 
fd
 )

28 #ifde‡
__ci_drivî__


29 
rc
 = 
	`eÁb_ùid_Æloc
(&
eÁb_t˝_drivî
.
ùid
);

30 
	`LOG_IP
(
	`ci_log
–
LPF
 "ønge_gë: %d", 
rc
 ));

31  
rc
;

33 
ci_öt32
 
v
;

35 
rc
 = 
	`oo_ùid_ønge_Æloc
(
fd
, &
v
);

36 
	`LOG_IP
(
	`ci_log
–
LPF
 "ønge_gë: %d", 
rc
 ));

37  
rc
 ?Ñ¯: 
v
;

40 
	}
}

42 
ci_ölöe
 
	$ci_ùid_ønge_ªÀa£
–
ci_√tif
* 
ni
, 
ci_fd_t
 
fd
, 
ci_öt32
 
r
 )

44 #ifde‡
__ci_drivî__


45  
	`eÁb_ùid_‰ì
(&
eÁb_t˝_drivî
.
ùid
, 
r
);

48  
	`oo_ùid_ønge_‰ì
–
fd
, &
r
 );

50 
	}
}

52 
ci_ölöe
 
	$ci_ùid_öô_√xt
–
ci_√tif_ùid_cb_t
* 
ùid
, 
idx
 )

55 
ùid
->
ønge
[ 
idx
 ].
√xt
 =

56 
ùid
->
ønge
[ 
idx
 ].
ba£
 + 
CI_IPID_BLOCK_MASK
;

57 
	}
}

62 
ci_ölöe
 
	$ci_ùid_ønge_add
–
ci_√tif_ùid_cb_t
* 
ùid
, 
ønge
 )

64 
	`ci_as£π
(
ùid
);

66 if–
	`CI_LIKELY
–
ønge
 >= 0 )) {

67 
	`ci_as£π
–(
ønge
+
CI_IPID_BLOCK_MASK
) <0x10000);

68 
	`ci_as£π
(
ùid
->
max_ödex
 < (
CI_IPID_BLOCK_COUNT
 - 1));

69 
	`ci_as£π
(
ùid
->
max_ödex
 < 
CI_TP_IPID_RANGES
);

71 
ùid
->
ønge
[ùid->
max_ödex
].
ba£
 = (
ci_uöt16
)range;

72 
	`ci_ùid_öô_√xt
–
ùid
, ipid->
max_ödex
 );

73 ++
ùid
->
max_ödex
;

74 
	`LOG_IP
(
	`ci_log
–
LPF
 "range_add: block %xát slot %d",

75 
ønge
, 
ùid
->
max_ödex
 - 1));

79 
	}
}

81 #i‡
CI_CFG_FULL_IP_ID_HANDLING


86 
	$ci_ùid_ªcy˛e
–
ci_√tif
* 
ni
, 
ci_fd_t
 
fd
 )

88 
ci_√tif_ùid_cb_t
* 
ùid
;

90 
	`ci_as£π
(
ni
);

91 
ùid
 = 
	`NI_IPID
(
ni
);

93 
	`LOG_IP
(
	`ci_log
–
LPF
 "recycle: curr %d max %d",

94 
ùid
->
cuºít_ödex
, ipid->
max_ödex
 ));

95 
	`ci_as£π
–
ùid
->
cuºít_ödex
 >= 0 );

96 
	`ci_as£π
–
ùid
->
cuºít_ödex
 < ipid->
max_ödex
 );

98 
	`ci_ùid_öô_√xt
–
ùid
, ipid->
cuºít_ödex
 );

101 if–++
ùid
->
cuºít_ödex
 =ùid->
max_ödex
 ) {

102 
now
 = 
	`ci_ù_time_now
(
ni
);

103 
diff
 = 
now
 - 
ùid
->
lo›_°¨t_time
;

107 if(
diff
 < 
CI_IPID_MIN_CYCLE_TIME
 ) {

112 
	`LOG_IP
(
	`ci_log
(
LPF
 "recycle: we're busy -Çeedánother block"));

113 if–(
ùid
->
max_ödex
 =(
CI_TP_IPID_RANGES
 - 1)) ||

114 
	`ci_ùid_ønge_add
–
ùid
, 
	`ci_ùid_ønge_gë
(
ni
, 
fd
) ) ) {

117 
ùid
->
low_u£_°¨t_time
 = 
now
;

118 
ùid
->
cuºít_ödex
 = 0;

122 
ùid
->
cuºít_ödex
 = 0;

123 
ùid
->
lo›_°¨t_time
 = 
now
;

125 if––
diff
 >
CI_IPID_MAX_CYCLE_TIME
 ) &&

126 –
ùid
->
max_ödex
 > 1 ) ) {

129 if–(
now
 - 
ùid
->
low_u£_°¨t_time
) >=

130 
CI_IPID_LOW_USE_TIME
) {

132 
	`LOG_IP
(
	`ci_log
(
LPF
 "recycle:Çot so busy,Ñelease one block"));

133 
	`ci_ùid_ønge_ªÀa£
–
ni
, 
fd
,

134 (
ci_öt32
)
ùid
->
ønge
[ --ùid->
max_ödex
 ].
ba£
);

135 
ùid
->
low_u£_°¨t_time
 = 
now
;

138 
ùid
->
low_u£_°¨t_time
 = 
now
;

142 
	}
}

157 
	$ci_ùid_˘‹
–
ci_√tif
* 
ni
, 
ci_fd_t
 
fd
 )

159 
ci_√tif_ùid_cb_t
* 
ùid
;

160 
rc
;

162 
	`ci_as£π
(
ni
);

164 
ùid
 = 
	`NI_IPID
(
ni
);

165 
	`mem£t
–
ùid
, 0, (*ipid));

167 #i‡
CI_CFG_NO_IP_ID_FAILURE


168 if–0 > (
rc
 = 
	`ci_ùid_ønge_gë
(
ni
, 
fd
)) ) {

169 
ùid
->
no_‰ì
 = 1;

170 
rc
 = 
CI_IPID_MIN
;

173 
	`CI_TRY_RET
–
rc
 = 
	`ci_ùid_ønge_gë
(
ni
, 
fd
) );

176 
	`ci_ùid_ønge_add
–
ùid
, 
rc
 );

178 #i‡
CI_CFG_FULL_IP_ID_HANDLING
==0

179 
ùid
->
ba£
 = ipid->
ønge
[0].base;

180 
ùid
->
√xt
 = 0;

183 
ùid
->
lo›_°¨t_time
 =

184 
ùid
->
low_u£_°¨t_time
 = 
	`ci_ù_time_now
(
ni
);

186 
	}
}

189 
	$ci_ùid_dt‹
–
ci_√tif
* 
ni
, 
ci_fd_t
 
fd
 )

191 
ci_√tif_ùid_cb_t
* 
ùid
;

192 
	`ci_as£π
(
ni
);

193 
ùid
 = 
	`NI_IPID
(
ni
);

194 
	`ci_as£π
–
ùid
->
max_ödex
 >= 0 &&

195 
ùid
->
max_ödex
 < 
CI_TP_IPID_RANGES
 );

197 #i‡
CI_CFG_NO_IP_ID_FAILURE


200  
ùid
->
max_ödex
-- > ipid->
no_‰ì
 ) {

203  
ùid
->
max_ödex
-- ) {

205 
	`ci_as£π
–
ùid
->
ønge
[ùid->
max_ödex
].
ba£
 <=

206 (
ci_uöt16
)(0x10000 - 
CI_IPID_BLOCK_LENGTH
) );

207 
	`ci_as£π
–!(
ùid
->
ønge
[ùid->
max_ödex
].
ba£
 &

208 
CI_IPID_BLOCK_MASK
));

209 
	`LOG_IP
(
	`ci_log
(
LPF
 "dtor:ÑeleaseÑange %#x (%d)",

210 
ùid
->
ønge
[ùid->
max_ödex
 ].
ba£
,

211 
ùid
->
max_ödex
));

212 
	`ci_ùid_ønge_ªÀa£
–
ni
, 
fd
,

213 (
ci_öt32
)
ùid
->
ønge
[ùid->
max_ödex
 ].
ba£
 );

216 
	}
}

219 #i‡
CI_CFG_FULL_IP_ID_HANDLING
 && !
deföed
(
NDEBUG
)

222 
	$ci_ùid_as£π_vÆid
(
ci_√tif
* 
ni
, c⁄° * 
fûe
, 
löe
)

224 
˘r
;

225 
ci_√tif_ùid_cb_t
* 
ùid
;

227 
	`vîify
(
ni
);

228 
ùid
 = 
	`NI_IPID
(
ni
);

230 
	`vîify
–
ùid
->
max_ödex
 >= 0 &&

231 
ùid
->
max_ödex
 < 
CI_TP_IPID_RANGES
 );

233 
	`vîify
–
ùid
->
cuºít_ödex
 >=0 &&

234 
ùid
->
cuºít_ödex
 < ipid->
max_ödex
 );

236 
	`vîify
–
ùid
->
low_u£_°¨t_time
 <=

237 
ùid
->
lo›_°¨t_time
 );

239  
˘r
 = 0; cå < 
ùid
->
max_ödex
; ctr++ ) {

240 
	`vîify
–
ùid
->
ønge
[
˘r
].
ba£
 <=

241 (
ci_uöt16
)(0x10000 - 
CI_IPID_BLOCK_LENGTH
) );

242 
	`vîify
–!(
ùid
->
ønge
[
˘r
].
ba£
 & 
CI_IPID_BLOCK_MASK
) );

243 
	`vîify
–
ùid
->
ønge
[
˘r
].
√xt
 >ùid->ønge[˘r].
ba£
 );

244 if–
˘r
 !
ùid
->
cuºít_ödex
 )

245 
	`vîify
–
ùid
->
ønge
[
˘r
].
√xt
 ==

246 
ùid
->
ønge
[
˘r
].
ba£
 + 
CI_IPID_BLOCK_MASK
 );

248 
	`vîify
–
ùid
->
ønge
[
˘r
].
√xt
 <=

249 
ùid
->
ønge
[
˘r
].
ba£
 + 
CI_IPID_BLOCK_MASK
 );

251 
	}
}

	@iptimer.c

14 
	~"ù_öã∫Æ.h
"

15 #i‚de‡
__KERNEL__


16 
	~<limôs.h
>

20 
	#SAMPLE
(
n
Ë“)

	)

22 
	#LPF
 "IPTIMER "

	)

24 
	#DUMP_TIMER_SUPPORT
 1

	)

27 
	#DETAILED_CHECK_TIMERS
(
ni
)

	)

29 
	#DETAILED_CHECK_TIMERS
 
CHECK_TIMERS


	)

33 
	#LINK2TIMER
(
 k
) \

34 
	`CI_CONTAINER
(
ci_ù_timî
, 
lök
, (
 k
))

	)

36 
	#ADDR2TIMER
(
ni
, 
id
) \

37 
	`LINK2TIMER
((
ci_ni_dŒi°_lök
*Ë
	`CI_NETIF_PTR
((
ni
), (
id
)))

	)

40 #i‡
CI_CFG_IP_TIMER_DEBUG


42 
	$ci_ù_timî_debug
(
ci_√tif
* 
√tif
, 
timî_id
, 
∑øm
) {

43 
	`LOG_ITV
(
	`log
–
LPF
 "netif=%lxÅimer_id=%uÖaram=%xÇow=%u",

44 ()
√tif
, 
timî_id
, 
∑øm
,

45 
	`ci_ù_time_now
(
√tif
)));

46 
	}
}

49 (*
ci_ù_timî_debug_‚
)(
ci_√tif
*, , Ë
ci_ù_timî_debug
;

62 
	#BUCKETNO
(
whì o
, 
abs
) \

63 (((
abs
Ë>> ((
whì o
)*
CI_IPTIME_BUCKETBITS
)Ë& 
CI_IPTIME_BUCKETMASK
)

	)

66 
	#BUCKET
(
√tif
, 
whì o
, 
abs
) \

67 (&(
	`IPTIMER_STATE
((
√tif
))->
w¨øy
[(
whì o
)*
CI_IPTIME_BUCKETS
 + 
	`BUCKETNO
((whì o), (
abs
))]))

	)

69 
	#WHEEL2_MASK
 (
CI_IPTIME_BUCKETMASK
 << (
CI_IPTIME_BUCKETBITS
*3))

	)

70 
	#WHEEL1_MASK
 (
WHEEL2_MASK
 + \

71 (
CI_IPTIME_BUCKETMASK
 << (
CI_IPTIME_BUCKETBITS
*2)))

	)

72 
	#WHEEL0_MASK
 (
WHEEL1_MASK
 + \

73 (
CI_IPTIME_BUCKETMASK
 << (
CI_IPTIME_BUCKETBITS
*1)))

	)

76 #i‚de‡
__KERNEL__


78 
	$ci_ù_timî_°©e_öô_ul
(
ci_√tif
 *
ni
)

80 
ci_ù_timî_°©e
* 
ùts
 = 
	`IPTIMER_STATE
(
ni
);

82 
ni
->
ci_ù_time_tick2ms
 =

83 ()(1u<<
ùts
->
ci_ù_time_‰c2tick
)/(()ùts->
khz
);

84 
	}
}

89 #ifde‡
__KERNEL__


91 
	$shi·_f‹_gøn
(
ci_uöt32
 
G
, 
khz
)

93 
tmp
;

94 
sh·
;

110 if–
G
 < 1000 ) {

111 
tmp
 = (
khz
/1000)*
G
;

113 
tmp
 = 
khz
*(
G
/1000);

117 
sh·
 = 0;

118  
tmp
 >(1u << 
sh·
) ) {

119 
sh·
++;

120 if(
sh·
 =
CI_IP_TIME_MAX_FRCSHIFT
) ;

122  
sh·
;

123 
	}
}

127 
	$ci_ù_timî_°©e_öô
(
ci_√tif
* 
√tif
, 
˝u_khz
)

129 
ci_ù_timî_°©e
* 
ùts
 = 
	`IPTIMER_STATE
(
√tif
);

130 
i
;

133 
ùts
->
khz
 = 
˝u_khz
;

134 
ùts
->
ci_ù_time_‰c2tick
 = 
	`shi·_f‹_gøn
(
CI_IP_TIME_APP_GRANULARITY
, i±s->
khz
);

135 
ùts
->
ci_ù_time_‰c2us
 = 
	`shi·_f‹_gøn
(1, i±s->
khz
);

136 
	`ci_ù_time_öôül_sync
(
ùts
);

137 
ùts
->
sched_ticks
 = 
	`ci_ù_time_now
(
√tif
);

140 
	`ci_t˝_timî_öô
(
√tif
);

142 
	`ci_ni_dŒi°_öô
(
√tif
, &
ùts
->
fúe_li°
,

143 
	`oo_±r_to_°©ï
(
√tif
, &
ùts
->
fúe_li°
),

147  
i
=0; i < 
CI_IPTIME_WHEELSIZE
; i++)

148 
	`ci_ni_dŒi°_öô
(
√tif
, &
ùts
->
w¨øy
[
i
],

149 
	`oo_±r_to_°©ï
(
√tif
, &
ùts
->
w¨øy
[
i
]),

151 
	}
}

156 
	$__ci_ù_timî_£t
(
ci_√tif
 *
√tif
, 
ci_ù_timî
 *
ts
, 
ci_ùtime_t
 
t
)

158 
ci_ni_dŒi°_t
* 
buckë
;

159 
w
;

160 
ci_ùtime_t
 
°ime
 = 
	`IPTIMER_STATE
(
√tif
)->
sched_ticks
;

162 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
NDEBUG
)

163 if–!
	`TIME_GT
(
t
, 
°ime
) )

164 
	`ci_log
("%s: Bugz5428 : %#u/%x !> %u/%#x", 
__FUNCTION__
, 
t
,Å, 
°ime
, stime);

166 
	`ci_as£π
(
	`TIME_GT
(
t
, 
°ime
));

168 
ts
->
time
 = 
t
;

176 i‡((
°ime
 & 
WHEEL0_MASK
Ë=(
t
 & WHEEL0_MASK))

177 
w
 = 0;

179 i‡((
°ime
 & 
WHEEL1_MASK
Ë=(
t
 & WHEEL1_MASK))

180 
w
 = 1;

182 i‡((
°ime
 & 
WHEEL2_MASK
Ë=(
t
 & WHEEL2_MASK))

183 
w
 = 2;

185 
w
 = 3;

187 
buckë
 = 
	`BUCKET
(
√tif
, 
w
, 
t
);

189 
	`LOG_ITV
(
	`log
("%s: delta=0x%x (t=0x%x-s=0x%x), w=0x%x, b=0x%x",

190 
__FUNCTION__
,

191 
ts
->
time
-
°ime
,Ås->time, stime,

192 
w
, 
	`BUCKETNO
(w, 
ts
->
time
)));

200 
	`ci_ni_dŒi°_push_èû
(
√tif
, 
buckë
, &
ts
->
lök
);

202 
	`ci_as£π
(
	`ci_ù_timî_is_lök_vÆid
(
√tif
, 
ts
));

203 
	`DETAILED_CHECK_TIMERS
(
√tif
);

204 
	}
}

210 
	$ci_ù_timî_ˇsˇdewhìl
(
ci_√tif
* 
√tif
, 
whì o
,

211 
ci_ùtime_t
 
°ime
)

213 
ci_ù_timî
* 
ts
;

214 
ci_ni_dŒi°_t
* 
buckë
;

215 
oo_p
 
curid
, 
buckid
;

217 
	`ci_as£π
(
whì o
 > 0 && whì ÿ< 
CI_IPTIME_WHEELS
);

219 
	`ci_as£π
–(
°ime
 & (()(-1Ë<< (
CI_IPTIME_BUCKETBITS
*
whì o
))) == stime );

222 
buckë
 = 
	`BUCKET
(
√tif
, 
whì o
, 
°ime
);

223 
buckid
 = 
	`ci_ni_dŒi°_lök_addr
(
√tif
, &
buckë
->
l
);

224 
curid
 = 
buckë
->
l
.
√xt
;

226 
	`LOG_ITV
(
	`log
(
LN_FMT
 "cascading wheel=%u sched_ticks=0x%x bucket=%i",

227 
	`LN_PRI_ARGS
(
√tif
), 
whì o
, 
°ime
, 
	`BUCKETNO
(wheelno, stime)));

230 
	`ci_ni_dŒi°_öô
(
√tif
, 
buckë
,

231 
	`ci_ni_dŒi°_lök_addr
(
√tif
, &
buckë
->
l
), "timw");

233  ! 
	`OO_P_EQ
(
curid
, 
buckid
) ) {

234 
ts
 = 
	`ADDR2TIMER
(
√tif
, 
curid
);

237 
curid
 = 
ts
->
lök
.
√xt
;

239 #i‚de‡
NDEBUG


242 i‡(
whì o
 == 1)

243 
	`ci_as£π
–(
°ime
 & 
WHEEL0_MASK
Ë=(
ts
->
time
 & WHEEL0_MASK) );

245 i‡(
whì o
 == 2)

246 
	`ci_as£π
–(
°ime
 & 
WHEEL1_MASK
Ë=(
ts
->
time
 & WHEEL1_MASK) );

249 
	`ci_as£π
(
whì o
 == 3);

250 
	`ci_as£π
–(
°ime
 & 
WHEEL2_MASK
Ë=(
ts
->
time
 & WHEEL2_MASK) );

256 
buckë
 = 
	`BUCKET
(
√tif
, 
whì o
-1, 
ts
->
time
);

264 
	`ci_ni_dŒi°_push_èû
(
√tif
, 
buckë
, &
ts
->
lök
);

265 
	`ci_as£π
(
	`ci_ù_timî_is_lök_vÆid
(
√tif
, 
ts
));

267 
	}
}

270 
	$ci_ù_timî_doˇŒback
(
ci_√tif
 *
√tif
, 
ci_ù_timî
* 
ts
)

272 
	`ci_as£π
–
	`TIME_LE
(
ts
->
time
, 
	`ci_ù_time_now
(
√tif
)) );

273 
	`ci_as£π
–
ts
->
time
 =
	`IPTIMER_STATE
(
√tif
)->
sched_ticks
 );

275 
ts
->
‚
){

276 
CI_IP_TIMER_TCP_RTO
:

277 
	`CHECK_TS
(
√tif
, 
	`SP_TO_TCP
“ëif, 
ts
->
∑øm1
));

278 
	`ci_t˝_timeout_πo
(
√tif
, 
	`SP_TO_TCP
“ëif, 
ts
->
∑øm1
));

280 
CI_IP_TIMER_TCP_DELACK
:

281 
	`CHECK_TS
(
√tif
, 
	`SP_TO_TCP
“ëif, 
ts
->
∑øm1
));

282 
	`ci_t˝_timeout_dñack
(
√tif
, 
	`SP_TO_TCP
“ëif, 
ts
->
∑øm1
));

284 
CI_IP_TIMER_TCP_ZWIN
:

285 
	`CHECK_TS
(
√tif
, 
	`SP_TO_TCP
“ëif, 
ts
->
∑øm1
));

286 
	`ci_t˝_timeout_zwö
(
√tif
, 
	`SP_TO_TCP
“ëif, 
ts
->
∑øm1
));

288 
CI_IP_TIMER_TCP_KALIVE
:

289 
	`CHECK_TS
(
√tif
, 
	`SP_TO_TCP
“ëif, 
ts
->
∑øm1
));

290 
	`ci_t˝_timeout_kÆive
(
√tif
, 
	`SP_TO_TCP
“ëif, 
ts
->
∑øm1
));

292 
CI_IP_TIMER_TCP_LISTEN
:

293 
	`ci_t˝_timeout_li°í
(
√tif
, 
	`SP_TO_TCP_LISTEN
“ëif, 
ts
->
∑øm1
));

295 
CI_IP_TIMER_TCP_CORK
:

296 
	`ci_t˝_timeout_c‹k
(
√tif
, 
	`SP_TO_TCP
“ëif, 
ts
->
∑øm1
));

298 
CI_IP_TIMER_NETIF_TIMEOUT
:

299 
	`ci_√tif_timeout_°©e
(
√tif
);

301 
CI_IP_TIMER_PMTU_DISCOVER
:

302 
	`ci_pmtu_timeout_pmtu
(
√tif
, 
	`SP_TO_TCP
“ëif, 
ts
->
∑øm1
));

304 #i‡
CI_CFG_TAIL_DROP_PROBE


305 
CI_IP_TIMER_TCP_TAIL_DROP
:

306 
	`ci_t˝_timeout_èûdr›
(
√tif
, 
	`SP_TO_TCP
“ëif, 
ts
->
∑øm1
));

309 #i‡
CI_CFG_TCP_SOCK_STATS


310 
CI_IP_TIMER_TCP_STATS
:

311 
	`ci_t˝_°©s_a˘i⁄
(
√tif
, 
	`SP_TO_TCP
“ëif, 
ts
->
∑øm1
),

312 
CI_IP_STATS_FLUSH
,

313 
CI_IP_STATS_OUTPUT_NONE
, 
NULL
, NULL );

316 #i‡
CI_CFG_SUPPORT_STATS_COLLECTION


317 
CI_IP_TIMER_NETIF_STATS
:

318 
	`ci_√tif_°©s_a˘i⁄
(
√tif
, 
CI_IP_STATS_FLUSH
,

319 
CI_IP_STATS_OUTPUT_NONE
, 
NULL
, NULL );

322 #i‡
CI_CFG_IP_TIMER_DEBUG


323 
CI_IP_TIMER_DEBUG_HOOK
:

324 
	`ci_ù_timî_debug_‚
(
√tif
, 
ts
->
lök
.
addr
,Ås->
∑øm1
);

328 
	`LOG_U
(
	`log
–
LPF
 "unknownÅimer callback code:%xÖaram1:%d",

329 
ts
->
‚
, 
	`OO_SP_FMT
—s->
∑øm1
)));

330 
	`CI_DEBUG
(
	`ci_Áû_°›_‚
());

332 
	}
}

335 
	$ci_ù_timî_pﬁl
(
ci_√tif
 *
√tif
) {

336 
ci_ù_timî_°©e
* 
ùts
 = 
	`IPTIMER_STATE
(
√tif
);

337 
ci_ùtime_t
* 
°ime
 = &
ùts
->
sched_ticks
;

338 
ci_ù_timî
* 
ts
;

339 
ci_ùtime_t
 
πime
;

340 
ci_ni_dŒi°_lök
* 
lök
;

345 
πime
 = 
	`ci_ù_time_now
(
√tif
);

347 
	`ci_as£π
–
	`TIME_GE
(
πime
, *
°ime
) );

350 
	`ci_as£π
–
	`ci_ni_dŒi°_is_vÆid
(
√tif
, &
ùts
->
fúe_li°
.
l
) );

351 
	`ci_as£π
–
	`ci_ni_dŒi°_is_em±y
(
√tif
, &
ùts
->
fúe_li°
));

353  
	`TIME_LT
(*
°ime
, 
πime
) ) {

355 
	`DETAILED_CHECK_TIMERS
(
√tif
);

358 (*
°ime
)++;

361 if(
	`BUCKETNO
(0, *
°ime
) == 0) {

362 if(
	`BUCKETNO
(1, *
°ime
) == 0) {

363 if(
	`BUCKETNO
(2, *
°ime
) == 0) {

364 
	`ci_ù_timî_ˇsˇdewhìl
(
√tif
, 3, *
°ime
);

366 
	`ci_ù_timî_ˇsˇdewhìl
(
√tif
, 2, *
°ime
);

368 
	`ci_ù_timî_ˇsˇdewhìl
(
√tif
, 1, *
°ime
);

379 
	`ci_as£π
–
	`ci_ni_dŒi°_is_vÆid
(
√tif
, &
ùts
->
fúe_li°
.
l
));

380 
	`ci_as£π
–
	`ci_ni_dŒi°_is_em±y
(
√tif
, &
ùts
->
fúe_li°
));

383 
	`ci_ni_dŒi°_ªhome
–
√tif
,

384 &
ùts
->
fúe_li°
,

385 &
ùts
->
w¨øy
[
	`BUCKETNO
(0, *
°ime
)] );

386 
	`DETAILED_CHECK_TIMERS
(
√tif
);

388  (
lök
 = 
	`ci_ni_dŒi°_åy_p›
(
√tif
, &
ùts
->
fúe_li°
)) ) {

390 
ts
 = 
	`LINK2TIMER
(
lök
);

392 
	`ci_as£π_equÆ
(
ts
->
time
, *
°ime
);

395 
	`ci_ni_dŒi°_£lf_lök
(
√tif
, &
ts
->
lök
);

398 
	`ci_ù_timî_doˇŒback
(
√tif
, 
ts
);

400 
	`ci_as£π
–
	`ci_ni_dŒi°_is_vÆid
(
√tif
, &
ùts
->
fúe_li°
.
l
) );

401 
	`ci_as£π
–
	`ci_ni_dŒi°_is_em±y
(
√tif
, &
ùts
->
fúe_li°
));

403 
	`DETAILED_CHECK_TIMERS
(
√tif
);

406 
	`ci_as£π
–
	`ci_ni_dŒi°_is_vÆid
(
√tif
, &
ùts
->
fúe_li°
.
l
) );

407 
	`ci_as£π
–
	`ci_ni_dŒi°_is_em±y
(
√tif
, &
ùts
->
fúe_li°
));

408 
	}
}

411 #i‚de‡
NDEBUG


413 
	$ci_ù_timî_°©e_as£π_vÆid
(
ci_√tif
* 
ni
, c⁄° * 
fûe
, 
löe
)

415 
ci_ù_timî_°©e
* 
ùts
;

416 
ci_ù_timî
* 
ts
;

417 
ci_ni_dŒi°_t
* 
buckë
;

418 
ci_ni_dŒi°_lök
* 
l
;

419 
ci_ùtime_t
 
°ime
, 
whìl_ba£
, 
max_time
, 
mö_time
;

420 
a1
, 
a2
, 
a3
, 
w
, 
b
, 
bô_shi·
;

426 
whìl_mask
[
CI_IPTIME_WHEELS
] =

427 { 
WHEEL0_MASK
, 
WHEEL1_MASK
, 
WHEEL2_MASK
, 0 };

429 
ùts
 = 
	`IPTIMER_STATE
(
ni
);

430 
°ime
 = 
ùts
->
sched_ticks
;

433 
w
=0; w < 
CI_IPTIME_WHEELS
; w++) {

436 
whìl_ba£
 = 
°ime
 & 
whìl_mask
[
w
];

438 
b
=0; b < 
CI_IPTIME_BUCKETS
; b++) {

441 
bô_shi·
 = 
CI_IPTIME_BUCKETBITS
*
w
;

442 
mö_time
 = 
whìl_ba£
 + (
b
 << 
bô_shi·
);

443 
max_time
 = 
mö_time
 + (1 << 
bô_shi·
);

445 
buckë
 = &
ùts
->
w¨øy
[
w
*
CI_IPTIME_BUCKETS
 + 
b
];

448 i‡–
	`ci_ni_dŒi°_°¨t
(
ni
, 
buckë
Ë=
	`ci_ni_dŒi°_íd
(ni, bucket) ) {

449 
	`ci_as£π
–
	`ci_ni_dŒi°_is_em±y
(
ni
, 
buckë
) );

453 
a3
 = 
	`TIME_GT
(
mö_time
, 
°ime
Ë|| 
	`ci_ni_dŒi°_is_em±y
(
ni
, 
buckë
);

456 
l
 = 
	`ci_ni_dŒi°_°¨t
(
ni
, 
buckë
);

457 
l
 !
	`ci_ni_dŒi°_íd
(
ni
, 
buckë
);

458 
	`ci_ni_dŒi°_ôî
(
ni
, 
l
) ) {

460 
	`ci_ni_dŒi°_lök_as£π_vÆid
(
ni
, 
l
);

463 
ts
 = 
	`LINK2TIMER
(
l
);

466 
a1
 = 
	`TIME_GT
(
ts
->
time
, 
°ime
);

468 
a2
 = 
	`TIME_LT
(
ts
->
time
, 
max_time
Ë&& 
	`TIME_GE
—s->time, 
mö_time
);

471 i‡(!
a1
 || !
a2
 || !
a3
) {

472 
	`ci_log
("%s: [w=0x%x/b=0x%x] stime=0x%x", 
__FUNCTION__
, 
w
, 
b
, 
°ime
);

473 
	`ci_log
(" -->Å=0x%x, mö=0x%x, max=0x%x", 
ts
->
time
, 
mö_time
, 
max_time
);

474 
	`ci_log
(" [%†löe=%d]", 
fûe
, 
löe
);

477 
	`ci_as£π
(
a1
 && 
a2
 && 
a3
);

481 
	}
}

485 #ifde‡
DUMP_TIMER_SUPPORT


487 
	$ci_ù_timî_dump
(
ci_ù_timî
* 
ts
)

489 * 
timî_«me
;

490 
unknown_timî
[20];

492 
ts
->
‚
) {

494 #unde‡
MAKECASE


495 
	#MAKECASE
(
id
, 
«me
Ëid: 
timî_«me
 =Çame; ;

	)

497 
	`MAKECASE
(
CI_IP_TIMER_TCP_RTO
, "rto")

498 
	`MAKECASE
(
CI_IP_TIMER_TCP_DELACK
, "delack")

499 
	`MAKECASE
(
CI_IP_TIMER_TCP_ZWIN
, "zwin")

500 
	`MAKECASE
(
CI_IP_TIMER_TCP_KALIVE
, "kalive")

501 
	`MAKECASE
(
CI_IP_TIMER_TCP_LISTEN
, "listen")

502 
	`MAKECASE
(
CI_IP_TIMER_TCP_CORK
, "cork")

503 
	`MAKECASE
(
CI_IP_TIMER_NETIF_TIMEOUT
, "netif")

504 
	`MAKECASE
(
CI_IP_TIMER_PMTU_DISCOVER
, "pmtu")

505 #i‡
CI_CFG_SUPPORT_STATS_COLLECTION


506 
	`MAKECASE
(
CI_IP_TIMER_TCP_STATS
, "tcp-stats")

507 
	`MAKECASE
(
CI_IP_TIMER_NETIF_STATS
, "ni-stats")

509 #i‡
CI_CFG_TAIL_DROP_PROBE


510 
	`MAKECASE
(
CI_IP_TIMER_TCP_TAIL_DROP
, "taildrop")

512 #i‡
CI_CFG_IP_TIMER_DEBUG


513 
	`MAKECASE
(
CI_IP_TIMER_DEBUG_HOOK
, "debug")

516 
	`•rötf
(
unknown_timî
, "unk=%d", 
ts
->
‚
);

517 
timî_«me
 = 
unknown_timî
;

519 #unde‡
MAKECASE


521  
timî_«me
;

522 
	}
}

525 
	$ci_ù_timî_°©e_dump
(
ci_√tif
* 
ni
)

527 
ci_ù_timî_°©e
* 
ùts
;

528 
ci_ù_timî
* 
ts
;

529 
ci_ni_dŒi°_t
* 
buckë
;

530 
ci_ni_dŒi°_lök
* 
l
;

531 
ci_ùtime_t
 
°ime
, 
whìl_ba£
, 
max_time
, 
mö_time
;

532 
w
, 
b
, 
bô_shi·
;

538 
whìl_mask
[
CI_IPTIME_WHEELS
] =

539 { 
WHEEL0_MASK
, 
WHEEL1_MASK
, 
WHEEL2_MASK
, 0 };

541 
ùts
 = 
	`IPTIMER_STATE
(
ni
);

542 
°ime
 = 
ùts
->
sched_ticks
;

544 
	`ci_log
("%s:Åimêi†0x%x", 
__FUNCTION__
, 
°ime
);

546 
w
=0; w < 
CI_IPTIME_WHEELS
; w++) {

549 
whìl_ba£
 = 
°ime
 & 
whìl_mask
[
w
];

551 
b
=0; b < 
CI_IPTIME_BUCKETS
; b++) {

554 
bô_shi·
 = 
CI_IPTIME_BUCKETBITS
*
w
;

555 
mö_time
 = 
whìl_ba£
 + (
b
 << 
bô_shi·
);

556 
max_time
 = 
mö_time
 + (1 << 
bô_shi·
);

558 
buckë
 = &
ùts
->
w¨øy
[
w
*
CI_IPTIME_BUCKETS
 + 
b
];

561 i‡–
	`TIME_LE
(
mö_time
, 
°ime
Ë&& !
	`ci_ni_dŒi°_is_em±y
(
ni
, 
buckë
) )

562 
	`ci_log
("w:%d, b:%d, [0x%x->0x%x] - bucket should beÉmpty",

563 
w
, 
b
, 
mö_time
, 
max_time
);

566 
l
 = 
	`ci_ni_dŒi°_°¨t
(
ni
, 
buckë
);

567 
l
 !
	`ci_ni_dŒi°_íd
(
ni
, 
buckë
);

568 
	`ci_ni_dŒi°_ôî
(
ni
, 
l
) ) {

571 
ts
 = 
	`LINK2TIMER
(
l
);

573 
	`ci_log
("Ås = 0x%x %s w:%d, b:%d, [0x%x->0x%x]",

574 
ts
->
time
, 
	`ci_ù_timî_dump
—s), 
w
, 
b
, 
mö_time
, 
max_time
);

575 i‡–
	`TIME_LE
(
ts
->
time
, 
°ime
) )

576 
	`ci_log
(" ERROR:Åimer before currentÅime");

577 i‡–!(
	`TIME_LT
(
ts
->
time
, 
max_time
Ë&& 
	`TIME_GE
—s->time, 
mö_time
)) )

578 
	`ci_log
(" ERROR:Åimer in wrong bucket");

582 
	`ci_log
("----------------------");

583 
	}
}

	@netif.c

10 
	~"ù_öã∫Æ.h
"

12 
	#LPF
 "NETIF "

	)

14 #i‡
CI_CFG_DETAILED_CHECKS


15 * 
	$CI_NETIF_PTR
(
ci_√tif
* 
ni
, 
oo_p
 
off
)

17 
	`ASSERT_VALID_NETIF_ADDR
(
ni
, 
off
, 1);

18  
	`__CI_NETIF_PTR
(
ni
, 
off
);

19 
	}
}

30 
ci_ölöe
 
	$ci_√tif_timeout_£t_timî
(
ci_√tif
* 
ni
, 
ci_ùtime_t
 
¥ev_time
)

32 
ci_ùtime_t
 
time
 = 0;

33 
i
, 
found
 = 0;

35  
i
 = 0; i < 
OO_TIMEOUT_Q_MAX
; i++ ) {

36 
ci_t˝_°©e
* 
ts
;

37 if–
	`ci_ni_dŒi°_is_em±y
(
ni
, &ni->
°©e
->
timeout_q
[
i
]) )

39 
ts
 = 
	`TCP_STATE_FROM_LINK
(
	`ci_ni_dŒi°_hód
(
ni
, &ni->
°©e
->
timeout_q
[
i
]));

40 if–
	`TIME_LE
(
ts
->
t_œ°_£¡
, 
¥ev_time
) )

42 if–!
found
 || 
	`TIME_LT
(
ts
->
t_œ°_£¡
, 
time
) ) {

43 
found
 = 1;

44 
time
 = 
ts
->
t_œ°_£¡
;

50 if–! 
found
 )

51 
	`ci_ù_timî_˛ór
(
ni
, &ni->
°©e
->
timeout_tid
);

52 if–
	`ci_ù_timî_≥ndög
(
ni
, &ni->
°©e
->
timeout_tid
) )

53 
	`ci_ù_timî_modify
(
ni
, &ni->
°©e
->
timeout_tid
, 
time
);

55 
	`ci_ù_timî_£t
(
ni
, &ni->
°©e
->
timeout_tid
, 
time
);

56 
	}
}

60 
ci_ölöe
 
	$ci_√tif_timeout_add
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
, 
idx
)

62 
is_fú°
;

63 
ci_ni_dŒi°_t
* 
my_li°
 = &
ni
->
°©e
->
timeout_q
[
idx
];

64 
ci_ni_dŒi°_t
* 
Ÿhî_li°
;

65 
ci_t˝_°©e
* 
Ÿhî_ts
;

67 
	`ci_as£π
–
	`ci_ni_dŒi°_is_‰ì
(&
ts
->
timeout_q_lök
) );

69 
is_fú°
 = 
	`ci_ni_dŒi°_is_em±y
(
ni
, 
my_li°
);

70 
	`ci_ni_dŒi°_push_èû
(
ni
, 
my_li°
, &
ts
->
timeout_q_lök
);

73 if–! 
is_fú°
 )

76 
Ÿhî_li°
 = &
ni
->
°©e
->
timeout_q
[1-
idx
];

77 if–
	`ci_ni_dŒi°_is_em±y
(
ni
, 
Ÿhî_li°
) ) {

78 
	`ci_ù_timî_£t
(
ni
, &ni->
°©e
->
timeout_tid
, 
ts
->
t_œ°_£¡
);

82 
Ÿhî_ts
 = 
	`TCP_STATE_FROM_LINK
(
	`ci_ni_dŒi°_hód
(
ni
, 
Ÿhî_li°
));

83 if–
	`TIME_LT
(
ts
->
t_œ°_£¡
, 
Ÿhî_ts
->t_last_sent) )

84 
	`ci_ù_timî_modify
(
ni
, &ni->
°©e
->
timeout_tid
, 
ts
->
t_œ°_£¡
);

86 
	`ci_ù_timî_modify
(
ni
, &ni->
°©e
->
timeout_tid
, 
Ÿhî_ts
->
t_œ°_£¡
);

87 
	}
}

90 
	$ci_√tif_timeout_ªmove
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

92 
is_fú°
, 
idx
;

94 
	`ci_as£π
–(
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
) ||

95 
	`ci_t˝_is_timeout_‹ph™
(
ts
));

96 
	`ci_as£π
–!
	`ci_ni_dŒi°_is_‰ì
(&
ts
->
timeout_q_lök
) );

98 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
 )

99 
idx
 = 
OO_TIMEOUT_Q_TIMEWAIT
;

101 
idx
 = 
OO_TIMEOUT_Q_FINWAIT
;

102 
is_fú°
 = 
	`OO_P_EQ
–
	`ci_ni_dŒi°_lök_addr
(
ni
, &
ts
->
timeout_q_lök
),

103 
	`ci_ni_dŒi°_lök_addr
(
ni
, 
	`ci_ni_dŒi°_hód
(ni,

104 &
ni
->
°©e
->
timeout_q
[
idx
])) );

107 
	`ci_ni_dŒi°_ªmove
(
ni
, &
ts
->
timeout_q_lök
);

108 
	`ci_ni_dŒi°_m¨k_‰ì
(&
ts
->
timeout_q_lök
);

111 if–! 
is_fú°
 )

114 
	`ci_√tif_timeout_£t_timî
(
ni
, 
ts
->
t_œ°_£¡
);

115 
	}
}

118 
	$ci_√tif_timeout_Àave
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

120 
	`ci_as£π
(
√tif
);

121 
	`ci_as£π
(
ts
);

122 
	`ci_as£π
–(
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
) ||

123 
	`ci_t˝_is_timeout_‹ph™
(
ts
) );

125 #i‚de‡
NDEBUG


126 i‡(
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
)

127 
	`LOG_TC
(
	`log
(
LPF
 "%d TIME_WAIT->CLOSED (2MSLÉxpúed)", 
	`S_FMT
(
ts
)));

129 
	`LOG_TC
(
	`log
(
LPF
 "%d Dr›ög ORPHANed %s", 
	`S_FMT
(
ts
), 
	`°©e_°r
(ts)));

134 
	`ci_t˝_dr›
(
√tif
, 
ts
, 0);

135 
	}
}

141 
	$ci_√tif_timeout_ª≠
(
ci_√tif
* 
ni
)

143 
i
;

144 
ª≠ed
 = 0;

146 
	`ci_as£π
(
ni
);

147 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

148 
	`ci_as£π
(
	`OO_SP_IS_NULL
(
ni
->
°©e
->
‰ì_ïs_hód
));

150  
i
 = 0; i < 
OO_TIMEOUT_Q_MAX
; i++ ) {

151 
ci_ni_dŒi°_t
* 
li°
 = &
ni
->
°©e
->
timeout_q
[
i
];

152 
ci_ni_dŒi°_lök
* 
l
;

153 
oo_p
 
√xt
;

155  
l
 = 
	`ci_ni_dŒi°_°¨t
(
ni
, 
li°
);Ü !
	`ci_ni_dŒi°_íd
(ni,Üist);

156 
l
 = (*Ë
	`CI_NETIF_PTR
(
ni
, 
√xt
) ) {

157 
ci_t˝_°©e
* 
ts
 = 
	`TCP_STATE_FROM_LINK
(
l
);

158 
√xt
 = 
l
->next;

160 #i‡
CI_CFG_FD_CACHING


161 if–
ts
->
s
.
b
.
sb_aÊags
 & (
CI_SB_AFLAG_ORPHAN
 | 
CI_SB_AFLAG_IN_CACHE
) ) {

163 if–
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
 ) {

165 
	`LOG_NV
(
	`log
(
LPF
 "Rópög %d from %s", 
	`S_FMT
(
ts
), 
	`°©e_°r
(ts)));

166 
	`ci_√tif_timeout_Àave
(
ni
, 
ts
);

167 
	`CITP_STATS_NETIF
(++
ni
->
°©e
->
°©s
.
timewaô_ª≠
);

168 if–
	`OO_SP_NOT_NULL
(
ni
->
°©e
->
‰ì_ïs_hód
) )

173 
ª≠ed
 = 1;

178 if–! 
ª≠ed
 )

179 
	`LOG_U
(
	`log
(
LPF
 "No more connectionsÅoÑeap from TIME_WAIT/FIN_WAIT2"));

180 
	}
}

184 
	$ci_√tif_timeout_°©e
(
ci_√tif
* 
ni
)

186 
i
;

188 
	`LOG_NV
(
	`log
(
LPF
 "timeouà°©êtimî,Çow=0x%x", 
	`ci_ù_time_now
(
ni
)));

192  
i
 = 0; i < 
OO_TIMEOUT_Q_MAX
; i++ ) {

193 
ci_ni_dŒi°_lök
* 
 k
;

194 
ci_t˝_°©e
* 
ts
;

195 
ci_ni_dŒi°_t
* 
li°
 = &
ni
->
°©e
->
timeout_q
[
i
];

197  
	`ci_ni_dŒi°_nŸ_em±y
(
ni
, 
li°
) ) {

198 
 k
 = 
	`ci_ni_dŒi°_hód
(
ni
, 
li°
);

199 
ts
 = 
	`TCP_STATE_FROM_LINK
(
 k
);

200 
	`ci_as£π
–(
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
) ||

201 
	`ci_t˝_is_timeout_‹ph™
(
ts
) );

203 if–
	`TIME_GT
(
ts
->
t_œ°_£¡
, 
	`ci_ù_time_now
(
ni
)) )

208 
	`ci_√tif_timeout_Àave
(
ni
, 
ts
);

211 
	}
}

225 
	$ci_√tif_timeout_ª°¨t
(
ci_√tif
 *
ni
, 
ci_t˝_°©e
 *
ts
)

227 
is_tw
 = (
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
);

228 
	`ci_as£π
(
ts
);

229 
	`ci_as£π
–
is_tw
 || 
	`ci_t˝_is_timeout_‹ph™
(
ts
));

232 
	`ci_√tif_timeout_ªmove
(
ni
, 
ts
);

234 
ts
->
t_œ°_£¡
 = 
	`ci_ù_time_now
(
ni
) +

235 –
is_tw
 ?

236 
	`NI_CONF
(
ni
).
tc⁄°_2m¶_time
 : NI_CONF“i).
tc⁄°_fö_timeout
 );

238 
	`ci_√tif_timeout_add
(

239 
ni
, 
ts
,

240 
is_tw
 ? 
OO_TIMEOUT_Q_TIMEWAIT
 : 
OO_TIMEOUT_Q_FINWAIT
);

241 
	}
}

248 
	$ci_√tif_timewaô_íãr
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

250 
	`ci_as£π
(
ts
);

257 
	`ci_as£π
(
	`ci_t˝_£ndq_is_em±y
(
ts
));

258 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
));

259 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
rob
));

262 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 !
CI_TCP_TIME_WAIT
);

264 i‡–
	`ci_t˝_is_timeout_‹ph™
(
ts
) ) {

265 
	`ci_√tif_timeout_ªmove
(
ni
, 
ts
);

267 
	`ci_as£π
–
	`ci_ni_dŒi°_is_‰ì
(&
ts
->
timeout_q_lök
) );

269 
	`ci_t˝_°›_timîs
(
ni
, 
ts
);

272 
ts
->
t_œ°_£¡
 = 
	`ci_ù_time_now
(
ni
Ë+ 
	`NI_CONF
“i).
tc⁄°_2m¶_time
;

274 
	`ci_√tif_timeout_add
(
ni
, 
ts
, 
OO_TIMEOUT_Q_TIMEWAIT
);

275 
	}
}

278 
	$ci_√tif_timewaô_åy_to_‰ì_fûãr
(
ci_√tif
* 
ni
)

280 
i
;

281 
found
 = 0;

283 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

285  
i
 = 0; i < 
OO_TIMEOUT_Q_MAX
; i++ ) {

286 
ci_ni_dŒi°_t
* 
li°
 = &
ni
->
°©e
->
timeout_q
[
i
];

287 
ci_ni_dŒi°_lök
* 
l
;

288 
oo_p
 
√xt
;

290  
l
 = 
	`ci_ni_dŒi°_°¨t
(
ni
, 
li°
);Ü !
	`ci_ni_dŒi°_íd
(ni,Üist);

291 
l
 = (*Ë
	`CI_NETIF_PTR
(
ni
, 
√xt
) ) {

292 
ci_t˝_°©e
* 
ts
 = 
	`TCP_STATE_FROM_LINK
(
l
);

293 
√xt
 = 
l
->next;

295 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_FILTER
 ) {

298 
	`ci_as£π
–(
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
) ||

299 
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
 );

301 
	`ci_√tif_timeout_Àave
(
ni
, 
ts
);

302 
	`CITP_STATS_NETIF
(++
ni
->
°©e
->
°©s
.
timewaô_ª≠_fûãr
);

310 if–
i
 =
OO_TIMEOUT_Q_FINWAIT
 )

312 
found
 = 1;

315 if–
found
 )

319 
	}
}

329 
	$ci_√tif_fö_timeout_íãr
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

332 #i‡
CI_CFG_FD_CACHING


333 
	`ci_as£π
(
ts
->
s
.
b
.
sb_aÊags
 & (
CI_SB_AFLAG_ORPHAN
|
CI_SB_AFLAG_IN_CACHE
));

335 
	`ci_as£π
(
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
);

338 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_TIMEOUT_ORPHAN
);

348 #i‡
CI_CFG_FD_CACHING


349 if–
	`ci_ni_dŒi°_is_‰ì
(&
ts
->
timeout_q_lök
) ) {

351 
	`ci_as£π
(
	`ci_ni_dŒi°_is_‰ì
(&
ts
->
timeout_q_lök
));

353 
	`LOG_TC
(
	`log
(
LPF
 "%s: %d %s", 
__FUNCTION__
, 
	`S_FMT
(
ts
), 
	`°©e_°r
(ts)));

355 
ts
->
t_œ°_£¡
 = 
	`ci_ù_time_now
(
ni
Ë+ 
	`NI_CONF
“i).
tc⁄°_fö_timeout
;

356 
	`ci_√tif_timeout_add
(
ni
, 
ts
, 
OO_TIMEOUT_Q_FINWAIT
);

357 #i‡
CI_CFG_FD_CACHING


360 
	}
}

363 
	$ci_√tif_åy_to_ª≠_udp_ªcv_q
(
ci_√tif
* 
ni
,

364 
ci_udp_ªcv_q
* 
ªcv_q
,

365 * 
add_to_ª≠_li°
)

367 
‰ìd_n
;

368 
ci_uöt32
 
ª≠ed_b4
 = 
ªcv_q
->
pkts_ª≠ed
;

369 
	`ci_udp_ªcv_q_ª≠
(
ni
, 
ªcv_q
);

370 
‰ìd_n
 = 
ªcv_q
->
pkts_ª≠ed
 - 
ª≠ed_b4
;

371 if–
ªcv_q
->
pkts_ª≠ed
 !ªcv_q->
pkts_added
 )

372 ++(*
add_to_ª≠_li°
);

373  
‰ìd_n
;

374 
	}
}

377 
	$ci_√tif_åy_to_ª≠
(
ci_√tif
* 
ni
, 
°›_⁄˚_‰ìd_n
)

381 
ci_ni_dŒi°_lök
* 
 k
;

382 
ci_ni_dŒi°_lök
* 
œ°
;

383 
côp_waôabÀ_obj
* 
wo
;

384 
‰ìd_n
 = 0;

385 
add_to_ª≠_li°
;

386 
ª≠_h¨dî
 = 
ni
->
∑ckës
->
£ts_n
 =ni->∑ckës->
£ts_max


387 || 
ni
->
°©e
->
mem_¥essuª
;

389 if–
	`ci_ni_dŒi°_is_em±y
(
ni
, &ni->
°©e
->
ª≠_li°
) )

396 
°›_⁄˚_‰ìd_n
 <<= 1u;

398 
 k
 = 
	`ci_ni_dŒi°_°¨t
(
ni
, &ni->
°©e
->
ª≠_li°
);

399 
œ°
 = 
	`ci_ni_dŒi°_°¨t_œ°
(
ni
, &ni->
°©e
->
ª≠_li°
);

402 
add_to_ª≠_li°
 = 0;

404 
wo
 = 
	`CI_CONTAINER
(
côp_waôabÀ_obj
, 
sock
.
ª≠_lök
, 
 k
);

405 
 k
 = (
ci_ni_dŒi°_lök
*Ë
	`CI_NETIF_PTR
(
ni
,Ünk->
√xt
);

406 
	`ci_ni_dŒi°_ªmove_ß„
(
ni
, &
wo
->
sock
.
ª≠_lök
);

408 if–
wo
->
waôabÀ
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
 ) {

409 
ci_t˝_°©e
* 
ts
 = &
wo
->
t˝
;

410 
ci_öt32
 
q_num_b4
 = 
ts
->
ªcv1
.
num
;

411 
	`ci_t˝_rx_ª≠_rxq_bufs
(
ni
, 
ts
);

413 
‰ìd_n
 +
q_num_b4
 - 
ts
->
ªcv1
.
num
;

414 
‰ìd_n
 +
	`ci_√tif_åy_to_ª≠_udp_ªcv_q
(
ni
, &
ts
->
time°amp_q
,

415 &
add_to_ª≠_li°
);

418 if–
ª≠_h¨dî
 && 
ts
->
ªcv1
.
num
 == 1 &&

419 
	`ci_sock_åylock
(
ni
, &
ts
->
s
.
b
) ) {

420 
q_num_b4
 = 
ts
->
ªcv1
.
num
;

421 
	`ci_t˝_rx_ª≠_rxq_bufs_socklocked
(
ni
, 
ts
);

422 
‰ìd_n
 +
q_num_b4
 - 
ts
->
ªcv1
.
num
;

423 
	`ci_sock_u∆ock
(
ni
, &
ts
->
s
.
b
);

425 if–
ts
->
ªcv1
.
num
 > 1 || 
add_to_ª≠_li°
)

426 
	`ci_ni_dŒi°_put
(
ni
, &ni->
°©e
->
ª≠_li°
, &
ts
->
s
.
ª≠_lök
);

428 if–
wo
->
waôabÀ
.
°©e
 =
CI_TCP_STATE_UDP
 ) {

429 
ci_udp_°©e
* 
us
 = &
wo
->
udp
;

430 
‰ìd_n
 +
	`ci_√tif_åy_to_ª≠_udp_ªcv_q
(
ni
, &
us
->
ªcv_q
,

431 &
add_to_ª≠_li°
);

432 
‰ìd_n
 +
	`ci_√tif_åy_to_ª≠_udp_ªcv_q
(
ni
, &
us
->
time°amp_q
,

433 &
add_to_ª≠_li°
);

435 if–
add_to_ª≠_li°
 )

436 
	`ci_ni_dŒi°_put
(
ni
, &ni->
°©e
->
ª≠_li°
, &
us
->
s
.
ª≠_lök
);

438 }  
‰ìd_n
 < 
°›_⁄˚_‰ìd_n
 && &
wo
->
sock
.
ª≠_lök
 !
œ°
 );

440 if–
‰ìd_n
 < (
°›_⁄˚_‰ìd_n
 >> 1) ) {

443 
‰ìd_n
 +
	`ci_√tif_pkt_åy_to_‰ì
(
ni
, 0, 
°›_⁄˚_‰ìd_n
 - freed_n);

444 if–
‰ìd_n
 < (
°›_⁄˚_‰ìd_n
 >> 1Ë&& 
ª≠_h¨dî
 ) {

445 
‰ìd_n
 +
	`ci_√tif_pkt_åy_to_‰ì
(
ni
, 1,

446 
°›_⁄˚_‰ìd_n
 - 
‰ìd_n
);

450 
	`CITP_STATS_NETIF_ADD
(
ni
, 
pkts_ª≠ed
, 
‰ìd_n
);

451 
	}
}

454 
	$ci_√tif_rxq_low_⁄_ªcv
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
,

455 
byãs_‰ìd
)

465 
ötf_i
;

466 if–
byãs_‰ìd
 <= 0 ||

467 (
ni
->
°©e
->
rxq_low
 -(
byãs_‰ìd
 / 1500 + 1)) > 0 )

469 if–! 
	`ci_√tif_åylock
(
ni
) ) {

471 
ni
->
°©e
->
rxq_low
 = 1;

478 
ni
->
°©e
->
rxq_low
 = 0;

484 if–
s
->
b
.
°©e
 =
CI_TCP_STATE_UDP
 ) {

485 
	`ci_udp_ªcv_q_ª≠
(
ni
, &
	`SOCK_TO_UDP
(
s
)->
ªcv_q
);

486 
	`ci_udp_ªcv_q_ª≠
(
ni
, &
	`SOCK_TO_UDP
(
s
)->
time°amp_q
);

488 if–
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
 ) {

489 
	`ci_t˝_rx_ª≠_rxq_bufs
(
ni
, 
	`SOCK_TO_TCP
(
s
));

490 
	`ci_udp_ªcv_q_ª≠
(
ni
, &
	`SOCK_TO_TCP
(
s
)->
time°amp_q
);

493 if–
ni
->
°©e
->
mem_¥essuª
 & 
OO_MEM_PRESSURE_CRITICAL
 )

497 if–
	`ci_√tif_mem_¥essuª_åy_exô
(
ni
) )

498 
	`CITP_STATS_NETIF_INC
(
ni
, 
mem‹y_¥essuª_exô_ªcv
);

500 
	`OO_STACK_FOR_EACH_INTF_I
(
ni
, 
ötf_i
)

501 if–
	`ci_√tif_rx_vi_•a˚
(
ni
, 
	`ci_√tif_rx_vi
“i, 
ötf_i
))

502 >
CI_CFG_RX_DESC_BATCH
 )

503 
	`ci_√tif_rx_po°
(
ni
, 
ötf_i
);

504 
	`CITP_STATS_NETIF_INC
(
ni
, 
rx_ªfûl_ªcv
);

505 
	`ci_√tif_u∆ock
(
ni
);

506 
	}
}

509 
	$ci_√tif_mem_¥essuª_pkt_poﬁ_fûl
(
ci_√tif
* 
ni
)

511 
ci_ù_pkt_fmt
* 
pkt
;

512 
ötf_i
, 
n
 = 0;

513 
	`OO_STACK_FOR_EACH_INTF_I
(
ni
, 
ötf_i
)

514 
n
 +(2*
CI_CFG_RX_DESC_BATCH
);

515  
ni
->
°©e
->
mem_¥essuª_pkt_poﬁ_n
 < 
n
 &&

516 (
pkt
 = 
	`ci_√tif_pkt_Æloc
(
ni
)Ë!
NULL
 ) {

517 
pkt
->
Êags
 |
CI_PKT_FLAG_RX
;

518 ++
ni
->
°©e
->
n_rx_pkts
;

519 ++
ni
->
°©e
->
mem_¥essuª_pkt_poﬁ_n
;

520 
pkt
->
ªfcou¡
 = 0;

521 
pkt
->
√xt
 = 
ni
->
°©e
->
mem_¥essuª_pkt_poﬁ
;

522 
ni
->
°©e
->
mem_¥essuª_pkt_poﬁ
 = 
	`OO_PKT_P
(
pkt
);

524 
	}
}

527 
	$ci_√tif_mem_¥essuª_pkt_poﬁ_u£
(
ci_√tif
* 
ni
)

530 
ci_ù_pkt_fmt
* 
pkt
;

531 #ifde‡
__KERNEL__


532 
is_locked
 = 1;

534  ! 
	`OO_PP_IS_NULL
(
ni
->
°©e
->
mem_¥essuª_pkt_poﬁ
) ) {

535 
pkt
 = 
	`PKT
(
ni
,Çi->
°©e
->
mem_¥essuª_pkt_poﬁ
);

536 
ni
->
°©e
->
mem_¥essuª_pkt_poﬁ
 = 
pkt
->
√xt
;

537 --
ni
->
°©e
->
mem_¥essuª_pkt_poﬁ_n
;

538 
	`ci_as£π_equÆ
(
pkt
->
ªfcou¡
, 0);

539 
	`ci_as£π
(
pkt
->
Êags
 & 
CI_PKT_FLAG_RX
);

540 
	`ci_√tif_pkt_‰ì
(
ni
, 
pkt
 
	`CI_KERNEL_ARG
(&
is_locked
));

542 
	}
}

545 
	$ci_√tif_mem_¥essuª_íãr_¸ôiˇl
(
ci_√tif
* 
ni
, 
ötf_i
)

547 if–
ni
->
°©e
->
mem_¥essuª
 & 
OO_MEM_PRESSURE_CRITICAL
 )

550 
	`CITP_STATS_NETIF_INC
(
ni
, 
mem‹y_¥essuª_íãr
);

551 
ni
->
°©e
->
mem_¥essuª
 |
OO_MEM_PRESSURE_CRITICAL
;

552 
ni
->
°©e
->
rxq_limô
 = 2*
CI_CFG_RX_DESC_BATCH
;

553 
	`ci_√tif_mem_¥essuª_pkt_poﬁ_u£
(
ni
);

554 if–
	`ci_√tif_rx_vi_•a˚
(
ni
, 
	`ci_√tif_rx_vi
“i, 
ötf_i
)) >=

555 
CI_CFG_RX_DESC_BATCH
 )

556 
	`ci_√tif_rx_po°
(
ni
, 
ötf_i
);

557 
	}
}

560 
	$ci_√tif_mem_¥essuª_exô_¸ôiˇl
(
ci_√tif
* 
ni
)

562 
	`ci_as£π
(
	`OO_PP_IS_NULL
(
ni
->
°©e
->
mem_¥essuª_pkt_poﬁ
));

563 
	`ci_√tif_mem_¥essuª_pkt_poﬁ_fûl
(
ni
);

564 
ni
->
°©e
->
rxq_limô
 = 
	`NI_OPTS
(ni).rxq_limit;

565 
ni
->
°©e
->
mem_¥essuª
 &~
OO_MEM_PRESSURE_CRITICAL
;

566 
	}
}

569 
	$ci_√tif_mem_¥essuª_åy_exô
(
ci_√tif
* 
ni
)

576 
ötf_i
, 
pkts_√eded
 = 0;

577 
ci_ù_pkt_fmt
* 
pkt
;

579 
	`OO_STACK_FOR_EACH_INTF_I
(
ni
, 
ötf_i
) {

580 
ef_vi
* 
vi
 = 
	`ci_√tif_rx_vi
(
ni
, 
ötf_i
);

581 
pkts_√eded
 +
	`NI_OPTS
(
ni
).
rxq_limô
 - 
	`ef_vi_ª˚ive_fûl_Àvñ
(
vi
);

584 if–
	`NI_OPTS
(
ni
).
max_rx_∑ckës
 -Çi->
°©e
->
n_rx_pkts
 < 
pkts_√eded
 ||

585 
ni
->
∑ckës
->
n_‰ì
 < 
pkts_√eded
 ) {

590 
	`ci_√tif_åy_to_ª≠
(
ni
, 
pkts_√eded
);

592 if–
	`NI_OPTS
(
ni
).
max_rx_∑ckës
 -Çi->
°©e
->
n_rx_pkts
 < 
pkts_√eded
 )

601  
ni
->
∑ckës
->
n_‰ì
 < 
pkts_√eded
 ) {

602 if–(
pkt
 = 
	`ci_√tif_pkt_Æloc_n⁄b
(
ni
)Ë=
NULL
 )

604 --
ni
->
°©e
->
n_async_pkts
;

605 
	`CITP_STATS_NETIF_INC
(
ni
, 
pkt_n⁄b_°ól
);

606 
pkt
->
Êags
 &~
CI_PKT_FLAG_NONB_POOL
;

607 
	`ci_√tif_pkt_ªÀa£_1ªf
(
ni
, 
pkt
);

611 
	`ci_√tif_mem_¥essuª_exô_¸ôiˇl
(
ni
);

613 
	}
}

620 
	$__ci_√tif_rx_po°
(
ci_√tif
* 
ni
, 
ef_vi
* 
vi
, 
ötf_i
,

621 
buf£t_id
, 
max
)

623 
ci_ù_pkt_fmt
* 
pkt
;

624 
i
;

625 
po°ed
 = 0;

627 
	`ci_as£π_ge
(
max
, 
CI_CFG_RX_DESC_BATCH
);

628 
	`ci_as£π_ge
(
ni
->
∑ckës
->
£t
[
buf£t_id
].
n_‰ì
, 
max
);

631  
i
 = 0; i < 
CI_CFG_RX_DESC_BATCH
; ++i ) {

636 
	`ci_as£π
(
	`OO_PP_NOT_NULL
(
ni
->
∑ckës
->
£t
[
buf£t_id
].
‰ì
));

637 
pkt
 = 
	`PKT
(
ni
,Çi->
∑ckës
->
£t
[
buf£t_id
].
‰ì
);

638 
	`ci_as£π
(
	`OO_PP_EQ
(
ni
->
∑ckës
->
£t
[
buf£t_id
].
‰ì
, 
	`OO_PKT_P
(
pkt
)));

639 
ni
->
∑ckës
->
£t
[
buf£t_id
].
‰ì
 = 
pkt
->
√xt
;

640 
pkt
->
ªfcou¡
 = 1;

641 
pkt
->
Êags
 |
CI_PKT_FLAG_RX
;

642 
pkt
->
ötf_i
 = intf_i;

643 
pkt
->
pkt_°¨t_off
 = 
	`ef_vi_ª˚ive_¥efix_Àn
(
vi
);

644 
	`ef_vi_ª˚ive_öô
(
vi
, 
pkt
->
dma_addr
[pkt->
ötf_i
], 
	`OO_PKT_ID
(pkt));

645 #ifde‡
__powîpc__


657 
off
;

658  
off
 = 0; of‡< 
pkt
->
buf_Àn
; of‡+
EF_VI_DMA_ALIGN
 )

659 
	`ci_˛Êush
(
pkt
->
dma_°¨t
 + 
off
);

668 
ni
->
∑ckës
->
£t
[
buf£t_id
].
n_‰ì
 -
CI_CFG_RX_DESC_BATCH
;

669 
ni
->
∑ckës
->
n_‰ì
 -
CI_CFG_RX_DESC_BATCH
;

670 
ni
->
°©e
->
n_rx_pkts
 +
CI_CFG_RX_DESC_BATCH
;

671 
	`ef_vi_ª˚ive_push
(
vi
);

672 
po°ed
 +
CI_CFG_RX_DESC_BATCH
;

673 }  
max
 - 
po°ed
 >
CI_CFG_RX_DESC_BATCH
 );

675  
po°ed
;

676 
	}
}

679 
	#low_thªsh
(
ni
Ë(“i)->
°©e
->
rxq_limô
 / 2)

	)

682 
	$ci_√tif_rx_po°
(
ci_√tif
* 
√tif
, 
ötf_i
)

692 
ef_vi
* 
vi
 = 
	`ci_√tif_rx_vi
(
√tif
, 
ötf_i
);

693 
ci_ù_pkt_fmt
* 
pkt
;

694 
max_n_to_po°
, 
rx_Ælowed
, 
n_to_po°
;

695 
buf£t_id
 = 
	`NI_PKT_SET
(
√tif
);

696 
ask_f‹_m‹e_∑ckës
 = 0;

698 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

699 
	`ci_as£π
(
	`ci_√tif_rx_vi_•a˚
(
√tif
, 
vi
Ë>
CI_CFG_RX_DESC_BATCH
);

701 
max_n_to_po°
 = 
	`ci_√tif_rx_vi_•a˚
(
√tif
, 
vi
);

702 
rx_Ælowed
 = 
	`NI_OPTS
(
√tif
).
max_rx_∑ckës
 -Çëif->
°©e
->
n_rx_pkts
;

703 if–
max_n_to_po°
 > 
rx_Ælowed
 )

704 
rx_limôed
;

705 
nŸ_rx_limôed
:

707 
	`ci_as£π_ge
(
max_n_to_po°
, 
CI_CFG_RX_DESC_BATCH
);

710 if–
√tif
->
∑ckës
->
£t
[
buf£t_id
].
n_‰ì
 < 
CI_CFG_RX_DESC_BATCH
 )

711 
föd_√w_buf£t
;

713 
good_buf£t
:

715 
n_to_po°
 = 
	`CI_MIN
(
max_n_to_po°
, 
√tif
->
∑ckës
->
£t
[
buf£t_id
].
n_‰ì
);

716 
max_n_to_po°
 -
	`__ci_√tif_rx_po°
(
√tif
, 
vi
, 
ötf_i
,

717 
buf£t_id
, 
n_to_po°
);

718 
	`ci_as£π_ge
(
max_n_to_po°
, 0);

720 if–
max_n_to_po°
 < 
CI_CFG_RX_DESC_BATCH
 ) {

721 if–
buf£t_id
 !
√tif
->
∑ckës
->
id
 ) {

722 
	`ci_√tif_pkt_£t_ch™ge
(
√tif
, 
buf£t_id
,

723 
ask_f‹_m‹e_∑ckës
);

725 
	`CHECK_FREEPKTS
(
√tif
);

729 
föd_√w_buf£t
:

730 
buf£t_id
 = 
	`ci_√tif_pkt£t_be°
(
√tif
);

731 if–
buf£t_id
 == -1 ||

732 
√tif
->
∑ckës
->
£t
[
buf£t_id
].
n_‰ì
 < 
CI_CFG_RX_DESC_BATCH
 )

733 
nŸ_íough_pkts
;

734 
ask_f‹_m‹e_∑ckës
 = 
	`ci_√tif_pkt_£t_is_undîfûÀd
(
√tif
,

735 
buf£t_id
);

740 
rx_limôed
:

742 if–
rx_Ælowed
 < 0 )

743 
rx_Ælowed
 = 0;

745 if–
	`ef_vi_ª˚ive_fûl_Àvñ
(
vi
Ë+ 
rx_Ælowed
 < 
	`low_thªsh
(
√tif
) ) {

746 
	`CITP_STATS_NETIF_INC
(
√tif
, 
ª≠_rx_limôed
);

747 
	`ci_√tif_åy_to_ª≠
(
√tif
, 
max_n_to_po°
 - 
rx_Ælowed
);

748 
rx_Ælowed
 = 
	`NI_OPTS
(
√tif
).
max_rx_∑ckës
 -Çëif->
°©e
->
n_rx_pkts
;

749 if–
rx_Ælowed
 < 0 )

750 
rx_Ælowed
 = 0;

751 
max_n_to_po°
 = 
	`CI_MIN
(max_n_to_po°, 
rx_Ælowed
);

752 if–
	`ef_vi_ª˚ive_fûl_Àvñ
(
vi
Ë+ 
max_n_to_po°
 < 
	`low_thªsh
(
√tif
) )

754 
√tif
->
°©e
->
rxq_low
 = 
	`ci_√tif_rx_vi_•a˚
“ëif, 
vi
Ë- 
max_n_to_po°
;

755 if–
max_n_to_po°
 >
CI_CFG_RX_DESC_BATCH
 )

756 
nŸ_rx_limôed
;

758 if–
√tif
->
°©e
->
mem_¥essuª
 & 
OO_MEM_PRESSURE_CRITICAL
 ) {

767 
rx_Ælowed
 = 
CI_CFG_RX_DESC_BATCH
;

768 
max_n_to_po°
 = 
	`ci_√tif_rx_vi_•a˚
(
√tif
, 
vi
);

770 
max_n_to_po°
 = 
	`CI_MIN
(max_n_to_po°, 
rx_Ælowed
);

771 if(
	`CI_LIKELY
–
max_n_to_po°
 >
CI_CFG_RX_DESC_BATCH
 ))

772 
nŸ_rx_limôed
;

773 
	`CITP_STATS_NETIF_INC
(
√tif
, 
ªfûl_rx_limôed
);

774 if–
	`ef_vi_ª˚ive_fûl_Àvñ
(
vi
Ë< 
CI_CFG_RX_DESC_BATCH
 )

775 
	`ci_√tif_mem_¥essuª_íãr_¸ôiˇl
(
√tif
, 
ötf_i
);

778 
nŸ_íough_pkts
:

784 
ask_f‹_m‹e_∑ckës
 = 1;

787  (
pkt
 = 
	`ci_√tif_pkt_Æloc_n⁄b
(
√tif
)Ë!
NULL
 ) {

788 --
√tif
->
°©e
->
n_async_pkts
;

789 
	`CITP_STATS_NETIF_INC
(
√tif
, 
pkt_n⁄b_°ól
);

790 
pkt
->
Êags
 &~
CI_PKT_FLAG_NONB_POOL
;

791 
buf£t_id
 = 
	`PKT_SET_ID
(
pkt
);

792 
	`ci_√tif_pkt_ªÀa£_1ªf
(
√tif
, 
pkt
);

793 if–
√tif
->
∑ckës
->
£t
[
buf£t_id
].
n_‰ì
 >
CI_CFG_RX_DESC_BATCH
 )

794 
good_buf£t
;

798 if–
√tif
->
∑ckës
->
£ts_n
 <Çëif->∑ckës->
£ts_max
 &&

799 
	`ci_t˝_hñ≥r_m‹e_bufs
(
√tif
) == 0 ) {

800 
buf£t_id
 = 
√tif
->
∑ckës
->
£ts_n
 - 1;

801 
	`ci_as£π_equÆ
(
√tif
->
∑ckës
->
£t
[
buf£t_id
].
n_‰ì
,

802 1 << 
CI_CFG_PKTS_PER_SET_S
);

803 
ask_f‹_m‹e_∑ckës
 = 0;

804 
good_buf£t
;

807 if–
	`ef_vi_ª˚ive_fûl_Àvñ
(
vi
Ë< 
	`low_thªsh
(
√tif
) ) {

808 
	`CITP_STATS_NETIF_INC
(
√tif
, 
ª≠_buf_limôed
);

809 
	`ci_√tif_åy_to_ª≠
(
√tif
, 
max_n_to_po°
);

810 
max_n_to_po°
 = 
	`CI_MIN
(max_n_to_po°, 
√tif
->
∑ckës
->
n_‰ì
);

811 
buf£t_id
 = 
	`ci_√tif_pkt£t_be°
(
√tif
);

812 if–
buf£t_id
 != -1 &&

813 
√tif
->
∑ckës
->
£t
[
buf£t_id
].
n_‰ì
 >
CI_CFG_RX_DESC_BATCH
 )

814 
good_buf£t
;

816 
√tif
->
°©e
->
rxq_low
 = 
	`ci_√tif_rx_vi_•a˚
“ëif, 
vi
);

819 
	`CITP_STATS_NETIF_INC
(
√tif
, 
ªfûl_buf_limôed
);

820 if–
	`ef_vi_ª˚ive_fûl_Àvñ
(
vi
Ë< 
CI_CFG_RX_DESC_BATCH
 )

821 
	`ci_√tif_mem_¥essuª_íãr_¸ôiˇl
(
√tif
, 
ötf_i
);

822 
	}
}

825 
	$côp_waôabÀ_de„ºed_w‹k
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
)

827 
côp_waôabÀ_obj
* 
wo
 = 
	`CI_CONTAINER
(côp_waôabÀ_obj, 
waôabÀ
, 
w
);

829 if–
wo
->
waôabÀ
.
°©e
 & 
CI_TCP_STATE_TCP
 )

830 
	`ci_t˝_≥rf‹m_de„ºed_sockë_w‹k
(
ni
, &
wo
->
t˝
);

831 #i‡
CI_CFG_UDP


832 if–
wo
->
waôabÀ
.
°©e
 =
CI_TCP_STATE_UDP
 )

833 
	`ci_udp_≥rf‹m_de„ºed_sockë_w‹k
(
ni
, &
wo
->
udp
);

838 
	`ci_log
("%s: u√x≥˘ed sètu†%†f‹ sockë [%d:%d]", 
__func__
,

839 
	`ci_t˝_°©e_°r
(
wo
->
waôabÀ
.
°©e
), 
	`NI_ID
(
ni
), 
w
->
bufid
);

841 
	}
}

844 
	$ci_√tif_lock_‹_de„r_w‹k
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
)

846 #i‡
CI_CFG_FD_CACHING
 && !
	`deföed
(
NDEBUG
)

849 if–(
w
->
°©e
 & 
CI_TCP_STATE_TCP
Ë&& !(w->°©ê=
CI_TCP_LISTEN
) )

850 
	`ci_as£π
(!
	`ci_t˝_is_ˇched
(&
	`CI_CONTAINER
(
côp_waôabÀ_obj
,

851 
waôabÀ
, 
w
)->
t˝
));

856 
	`ci_as£π
(!(
w
->
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
));

858 if–
ni
->
°©e
->
de„r_w‹k_cou¡
 >
	`NI_OPTS
“i).
de„r_w‹k_limô
 ) {

859 
rc
 = 
	`ci_√tif_lock
(
ni
);

860 if–
rc
 == 0 ) {

861 
	`CITP_STATS_NETIF_INC
(
ni
, 
de„r_w‹k_limôed
);

862 
	`côp_waôabÀ_de„ºed_w‹k
(
ni
, 
w
);

871 if–
	`ci_bô_ã°_™d_£t
(&
w
->
sb_aÊags
, 
CI_SB_AFLAG_DEFERRED_BIT
) ) {

876 ++
ni
->
°©e
->
de„r_w‹k_cou¡
;

881 
ci_uöt64
 
√w_v
, 
v
 = 
ni
->
°©e
->
lock
.lock;

882 if–
v
 & 
CI_EPLOCK_UNLOCKED
 ) {

883 if–
	`ci_√tif_åylock
(
ni
) ) {

884 
	`ci_bô_˛ór
(&
w
->
sb_aÊags
, 
CI_SB_AFLAG_DEFERRED_BIT
);

885 
	`côp_waôabÀ_de„ºed_w‹k
(
ni
, 
w
);

890 
	`ci_as£π
(
w
->
√xt_id
 =
CI_ILL_END
);

891 
w
->
√xt_id
 = 
v
 & 
CI_EPLOCK_NETIF_SOCKET_LIST
;

892 
√w_v
 = (
v
 & ~
CI_EPLOCK_NETIF_SOCKET_LIST
Ë| (
	`W_ID
(
w
) + 1);

893 if–
	`ci_ˇs64u_suc˚ed
(&
ni
->
°©e
->
lock
.lock, 
v
, 
√w_v
) ) {

894 ++
ni
->
°©e
->
de„r_w‹k_cou¡
;

897 
	`CI_DEBUG
(
w
->
√xt_id
 = 
CI_ILL_END
);

900 
	}
}

903 
	$ci_√tif_≥rf‹m_de„ºed_sockë_w‹k
(
ci_√tif
* 
ni
,

904 
sock_id
)

906 
côp_waôabÀ
* 
w
;

907 
oo_•
 
sockp
;

909 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

912 
	`ci_as£π
(
sock_id
 > 0);

913 --
sock_id
;

914 
sockp
 = 
	`OO_SP_FROM_INT
(
ni
, 
sock_id
);

915 
w
 = 
	`SP_TO_WAITABLE
(
ni
, 
sockp
);

916 
sock_id
 = 
w
->
√xt_id
;

917 
	`CI_DEBUG
(
w
->
√xt_id
 = 
CI_ILL_END
);

918 
	`ci_bô_˛ór
(&
w
->
sb_aÊags
, 
CI_SB_AFLAG_DEFERRED_BIT
);

919 
	`CITP_STATS_NETIF
(++
ni
->
°©e
->
°©s
.
de„ºed_w‹k
);

921 
	`côp_waôabÀ_de„ºed_w‹k
(
ni
, 
w
);

923  
sock_id
 > 0 );

924 
	}
}

927 
	$ci_√tif_purge_de„ºed_sockë_li°
(
ci_√tif
* 
ni
)

929 
ci_uöt64
 
l
;

931 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

933  (
l
 = 
ni
->
°©e
->
lock
.lockË& 
CI_EPLOCK_NETIF_SOCKET_LIST
 )

934 if–
	`ci_ˇs64u_suc˚ed
(&
ni
->
°©e
->
lock
.lock, 
l
,

935 
l
 &~ 
CI_EPLOCK_NETIF_SOCKET_LIST
) )

936 
	`ci_√tif_≥rf‹m_de„ºed_sockë_w‹k
(
ni
,

937 
l
 & 
CI_EPLOCK_NETIF_SOCKET_LIST
);

939  
l
;

940 
	}
}

942 
	$ci_√tif_mîge_©omic_cou¡îs
(
ci_√tif
* 
ni
)

944 
ci_öt32
 
vÆ
;

945 
	#mîge
(
ni
, 
fõld
) \

947 
vÆ
 = 
ni
->
°©e
->
©omic_
##
fõld
; \

948 }  
	`ci_ˇs32_Áû
(&
ni
->
°©e
->
©omic_
##
fõld
, 
vÆ
, 0) );\

949 
ni
->
°©e
->
fõld
 +
vÆ
;

	)

951 
	`mîge
(
ni
, 
n_rx_pkts
);

952 
	`mîge
(
ni
, 
n_async_pkts
);

953 #unde‡
mîge


954 
	}
}

956 #ifde‡
__KERNEL__


957 
	#KERNEL_DL_CONTEXT_DECL
 , 
ö_dl_c⁄ãxt


	)

958 
	#KERNEL_DL_CONTEXT
 , 
ö_dl_c⁄ãxt


	)

960 
	#KERNEL_DL_CONTEXT_DECL


	)

961 
	#KERNEL_DL_CONTEXT


	)

964 
	$ci_√tif_u∆ock_¶ow
(
ci_√tif
* 
ni
 
KERNEL_DL_CONTEXT_DECL
)

966 #i‚de‡
__KERNEL__


972 
ci_uöt64
 
l
 = 
ni
->
°©e
->
lock
.lock;

973 
ötf_i
;

974 
ci_uöt64
 
a·î_u∆ock_Êags
;

976 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

978 if–
l
 & 
CI_EPLOCK_NETIF_IS_PKT_WAITER
 )

979 if–
	`ci_√tif_pkt_tx_ˇn_Æloc_now
(
ni
) ) {

980 
	`ef_ïlock_˛ór_Êags
(&
ni
->
°©e
->
lock
, 
CI_EPLOCK_NETIF_IS_PKT_WAITER
);

981 
	`ef_ïlock_hﬁdî_£t_Êag
(&
ni
->
°©e
->
lock
, 
CI_EPLOCK_NETIF_PKT_WAKE
);

982 
l
 = 
ni
->
°©e
->
lock
.lock;

983 
	`CITP_STATS_NETIF_INC
(
ni
, 
u∆ock_¶ow_pkt_waôî
);

986 if–
l
 & 
CI_EPLOCK_NETIF_SOCKET_LIST
 ) {

987 
	`CITP_STATS_NETIF_INC
(
ni
, 
u∆ock_¶ow_sockë_li°
);

988 
l
 = 
	`ci_√tif_purge_de„ºed_sockë_li°
(
ni
);

990 
	`ci_as£π
(! (
l
 & 
CI_EPLOCK_NETIF_SOCKET_LIST
));

992 
ni
->
°©e
->
de„r_w‹k_cou¡
 = 0;

994 if–
l
 & 
CI_EPLOCK_NETIF_NEED_POLL
 ) {

995 
	`CITP_STATS_NETIF
(++
ni
->
°©e
->
°©s
.
de„ºed_pﬁls
);

996 
	`ef_ïlock_˛ór_Êags
(&
ni
->
°©e
->
lock
, 
CI_EPLOCK_NETIF_NEED_POLL
);

997 
	`ci_√tif_pﬁl
(
ni
);

998 
l
 = 
ni
->
°©e
->
lock
.lock;

1001 if–
l
 & 
CI_EPLOCK_NETIF_MERGE_ATOMIC_COUNTERS
 ) {

1002 
	`ef_ïlock_˛ór_Êags
(&
ni
->
°©e
->
lock
,

1003 
CI_EPLOCK_NETIF_MERGE_ATOMIC_COUNTERS
);

1004 
	`ci_√tif_mîge_©omic_cou¡îs
(
ni
);

1005 
l
 = 
ni
->
°©e
->
lock
.lock;

1011 
a·î_u∆ock_Êags
 = 
l
;

1012 if–
a·î_u∆ock_Êags
 & 
CI_EPLOCK_NETIF_NEED_PRIME
 )

1013 
	`ef_ïlock_˛ór_Êags
(&
ni
->
°©e
->
lock
, 
CI_EPLOCK_NETIF_NEED_PRIME
);

1020 if–!(
l
 & (
CI_EPLOCK_NETIF_UNLOCK_FLAGS
 |

1021 
CI_EPLOCK_NETIF_SOCKET_LIST
 |

1022 
CI_EPLOCK_FL_NEED_WAKE
)) ) {

1023 if–
	`ci_ˇs64u_suc˚ed
(&
ni
->
°©e
->
lock
.lock,

1024 
l
, (»&~ 
CI_EPLOCK_LOCKED
Ë| 
CI_EPLOCK_UNLOCKED
) ) {

1026 if–
a·î_u∆ock_Êags
 & 
CI_EPLOCK_NETIF_NEED_PRIME
 ) {

1027 
	`CITP_STATS_NETIF_INC
(
ni
, 
u∆ock_¶ow_√ed_¥ime
);

1028 
	`ci_as£π
(
	`NI_OPTS
(
ni
).
öt_driví
);

1033 
	`OO_STACK_FOR_EACH_INTF_I
(
ni
, 
ötf_i
)

1034 
	`ef_evítq_¥ime
(&
ni
->
nic_hw
[
ötf_i
].
vi
);

1045 if–
a·î_u∆ock_Êags
 & 
CI_EPLOCK_NETIF_NEED_PRIME
 )

1046 
	`ef_ïlock_hﬁdî_£t_Êag
(&
ni
->
°©e
->
lock
, 
CI_EPLOCK_NETIF_NEED_PRIME
);

1051 
rc
;

1053 #i‚de‡
__KERNEL__


1054 
	`ci_as£π
(
ni
->
°©e
->
lock
.lock & 
CI_EPLOCK_LOCKED
);

1055 
	`ci_as£π
(~
ni
->
°©e
->
lock
.lock & 
CI_EPLOCK_UNLOCKED
);

1056 
	`CITP_STATS_NETIF_INC
(
ni
, 
u∆ock_¶ow_sysˇŒ
);

1057 
rc
 = 
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1058 
OO_IOC_EPLOCK_WAKE
, 
NULL
);

1060 
rc
 = 
	`eÁb_ïlock_u∆ock_™d_wake
(
ni
, 
ö_dl_c⁄ãxt
);

1063 if–
rc
 < 0 ) 
	`LOG_NV
(
	`ci_log
("%s:Ñc=%d", 
__FUNCTION__
,Ñc));

1065 
	}
}

1068 
	$ci_√tif_u∆ock
(
ci_√tif
* 
ni
)

1070 #ifde‡
__KERNEL__


1071 
ö_dl_c⁄ãxt
 = 
ni
->
Êags
 & 
CI_NETIF_FLAG_IN_DL_CONTEXT
;

1073 
ni
->
Êags
 &~
CI_NETIF_FLAG_IN_DL_CONTEXT
;

1076 
	`ci_as£π_equÆ
(
ni
->
°©e
->
ö_pﬁl
, 0);

1077 if(
	`CI_LIKELY
–
ni
->
°©e
->
lock
.lock =
CI_EPLOCK_LOCKED
 &&

1078 
	`ci_ˇs64u_suc˚ed
(&
ni
->
°©e
->
lock
.lock,

1079 
CI_EPLOCK_LOCKED
, 
CI_EPLOCK_UNLOCKED
) ))

1081 
	`CITP_STATS_NETIF_INC
(
ni
, 
u∆ock_¶ow
);

1082 
	`ci_√tif_u∆ock_¶ow
(
ni
 
KERNEL_DL_CONTEXT
);

1083 
	}
}

1086 
	$ci_√tif_îr‹_dëe˘ed
(
ci_√tif
* 
ni
, 
îr‹_Êag
,

1087 c⁄° * 
ˇŒî
)

1089 if–
ni
->
îr‹_Êags
 & 
îr‹_Êag
 )

1091 
	`ci_log
("%s: ERROR: [%d]ÑuntimeÉrror %x detected in %s()",

1092 
__FUNCTION__
, 
	`NI_ID
(
ni
), 
îr‹_Êag
, 
ˇŒî
);

1093 
	`ci_log
("%s: ERROR: [%d]Éº‹†dëe˘ed: %x %x "
CI_NETIF_ERRORS_FMT
,

1094 
__FUNCTION__
, 
	`NI_ID
(
ni
),Çi->
îr‹_Êags
,Çi->
°©e
->error_flags,

1095 
	`CI_NETIF_ERRORS_PRI_ARG
(
ni
->
îr‹_Êags
 |Çi->
°©e
->error_flags));

1096 
ni
->
îr‹_Êags
 |
îr‹_Êag
;

1097 
ni
->
°©e
->
îr‹_Êags
 |=Çi->error_flags;

1098 
	}
}

1101 #i‚de‡
__KERNEL__


1102 
	$ci_√tif_gë_ªady_li°
(
ci_√tif
* 
ni
)

1104 
i
 = 0;

1107 
	`ci_√tif_lock
(
ni
);

1108  
i
++ < 
CI_CFG_N_READY_LISTS
 ) {

1109 if–!((
ni
->
°©e
->
ªady_li°s_ö_u£
 >> 
i
) & 1) ) {

1110 
ni
->
°©e
->
ªady_li°s_ö_u£
 |1 << 
i
;

1114 
	`ci_√tif_u∆ock
(
ni
);

1116  
i
 < 
CI_CFG_N_READY_LISTS
 ? i : 0;

1117 
	}
}

1121 
	$ci_√tif_put_ªady_li°
(
ci_√tif
* 
ni
, 
id
)

1123 
ci_ni_dŒi°_lök
* 
 k
;

1124 
côp_waôabÀ
* 
w
;

1126 
	`ci_as£π
(
ni
->
°©e
->
ªady_li°s_ö_u£
 & (1 << 
id
));

1127 
	`ci_as£π_√quÆ
(
id
, 0);

1129 if–
	`ci_√tif_lock
(
ni
) != 0 ) {

1130 
	`ci_log
("ïﬁl: LókögÑódyÜi° [%d:%d]", 
	`NI_ID
(
ni
), 
id
);

1133  
	`ci_ni_dŒi°_nŸ_em±y
(
ni
, &ni->
°©e
->
ªady_li°s
[
id
]) ) {

1134 
 k
 = 
	`ci_ni_dŒi°_p›
(
ni
, &ni->
°©e
->
ªady_li°s
[
id
]);

1135 
w
 = 
	`CI_CONTAINER
(
côp_waôabÀ
, 
ªady_lök
, 
 k
);

1137 
	`ci_ni_dŒi°_£lf_lök
(
ni
, 
 k
);

1138 
w
->
ªady_li°_id
 = 0;

1140 
ni
->
°©e
->
ªady_li°s_ö_u£
 &~(1 << 
id
);

1141 
	`ci_√tif_u∆ock
(
ni
);

1142 
	}
}

1145 #i‚de‡
__KERNEL__


1146 
	$ci_√tif_øw_£nd
(
ci_√tif
* 
ni
, 
ötf_i
,

1147 c⁄° 
ci_iovec
 *
iov
, 
iovÀn
)

1149 
ci_ù_pkt_fmt
* 
pkt
;

1150 
ci_uöt8
* 
p
;

1151 
i
;

1153 
	`ci_√tif_lock
(
ni
);

1154 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
ni
);

1155 if–
pkt
 =
NULL
 )

1156  -
ENOBUFS
;

1158 
pkt
->
ötf_i
 = intf_i;

1159 if–
ötf_i
 < 0 || i¡f_ò>
CI_CFG_MAX_INTERFACES
 )

1160  -
ENETDOWN
;

1162 
pkt
->
pkt_°¨t_off
 = 0;

1163 
pkt
->
buf_Àn
 = 0;

1164 
p
 = 
pkt
->
dma_°¨t
;

1165  
i
 = 0; i < 
iovÀn
; i++ ) {

1166 if–
p
 + 
	`CI_IOVEC_LEN
(
iov
Ë- 
pkt
->
dma_°¨t
 >

1167 
CI_CFG_PKT_BUF_SIZE
 - (
pkt
) ) {

1168 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pkt
);

1169 
	`ci_√tif_u∆ock
(
ni
);

1170  -
EMSGSIZE
;

1173 
	`mem˝y
(
p
, 
	`CI_IOVEC_BASE
(
iov
), 
	`CI_IOVEC_LEN
(iov));

1174 
p
 +
	`CI_IOVEC_LEN
(
iov
);

1175 
pkt
->
buf_Àn
 +
	`CI_IOVEC_LEN
(
iov
);

1176 
iov
++;

1179 
pkt
->
∑y_Àn
 =Ökt->
buf_Àn
;

1180 
	`ci_√tif_pkt_hﬁd
(
ni
, 
pkt
);

1181 
	`ci_√tif_£nd
(
ni
, 
pkt
);

1182 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pkt
);

1184 
	`ci_√tif_u∆ock
(
ni
);

1186 
	}
}

1205 
	$__ci_√tif_a˘ive_wûd_Ælow_ªu£
(
ci_√tif
* 
ni
, 
ci_a˘ive_wûd
* 
aw
,

1206 
œddr
, 
øddr
,

1207 
Ω‹t
)

1209 if–
	`ci_ù_time_now
(
ni
Ë> 
aw
->
expúy
 )

1212  (
aw
->
œ°_œddr
 !
œddr
Ë|| (aw->
œ°_øddr
 !
øddr
) ||

1213 (
aw
->
œ°_Ω‹t
 !
Ω‹t
);

1214 
	}
}

1217 
oo_•
 
	$__ci_√tif_a˘ive_wûd_gë
(
ci_√tif
* 
ni
, 
œddr
,

1218 
øddr
, 
Ω‹t
,

1219 
ci_uöt16
* 
p‹t_out
,

1220 
ci_uöt32
* 
¥ev_£q_out
)

1222 
ci_a˘ive_wûd
* 
aw
;

1223 
ci_uöt16
 
Õ‹t
;

1224 
rc
;

1226 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1228 *
¥ev_£q_out
 = 0;

1230 
ci_ni_dŒi°_lök
* 
lök
 = 
NULL
;

1231 
ci_ni_dŒi°_lök
* 
èû
 = 
	`ci_ni_dŒi°_èû
(
ni
,

1232 &
ni
->
°©e
->
a˘ive_wûd_poﬁ
);

1238 if–
	`ci_ni_dŒi°_is_em±y
(
ni
, &ni->
°©e
->
a˘ive_wûd_poﬁ
) )

1239  
OO_SP_NULL
;

1241  
lök
 !
èû
 ) {

1242 
lök
 = 
	`ci_ni_dŒi°_p›
(
ni
, &ni->
°©e
->
a˘ive_wûd_poﬁ
);

1243 
	`ci_ni_dŒi°_push_èû
(
ni
, &ni->
°©e
->
a˘ive_wûd_poﬁ
, 
lök
);

1245 
aw
 = 
	`CI_CONTAINER
(
ci_a˘ive_wûd
, 
poﬁ_lök
, 
lök
);

1247 
Õ‹t
 = 
	`sock_Õ‹t_be16
(&
aw
->
s
);

1248 
rc
 = 
	`ci_√tif_fûãr_lookup
(
ni
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
,

1249 
	`sock_¥Ÿocﬁ
(&
aw
->
s
));

1251 if–
rc
 >= 0 ) {

1252 
ci_sock_cmn
* 
s
 = 
	`ID_TO_SOCK
(
ni
,Çi->
fûãr_èbÀ
->
èbÀ
[
rc
].
id
);

1253 if–
s
->
b
.
°©e
 =
CI_TCP_TIME_WAIT
 ) {

1258 
ci_t˝_°©e
* 
ts
 = 
	`SOCK_TO_TCP
(
s
);

1259 
	`CITP_STATS_NETIF_INC
(
ni
, 
t˝_sh¨ed_loˇl_p‹ts_ªu£d_tw
);

1260 *
¥ev_£q_out
 = 
ts
->
¢d_nxt
;

1261 
	`ci_√tif_timeout_Àave
(
ni
, 
ts
);

1262 *
p‹t_out
 = 
Õ‹t
;

1263  
	`SC_SP
(&
aw
->
s
);

1270 if–
rc
 =-
ENOENT
 &&

1271 
	`__ci_√tif_a˘ive_wûd_Ælow_ªu£
(
ni
, 
aw
, 
œddr
, 
øddr
, 
Ω‹t
) ) {

1272 *
p‹t_out
 = 
Õ‹t
;

1273  
	`SC_SP
(&
aw
->
s
);

1277  
OO_SP_NULL
;

1278 
	}
}

1281 
oo_•
 
	$ci_√tif_a˘ive_wûd_gë
(
ci_√tif
* 
ni
, 
œddr
,

1282 
øddr
, 
Ω‹t
,

1283 
ci_uöt16
* 
p‹t_out
, 
ci_uöt32
* 
¥ev_£q_out
)

1285 
oo_•
 
a˘ive_wûd
;

1287 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1289 if–
	`NI_OPTS
(
ni
).
t˝_sh¨ed_loˇl_p‹ts
 == 0 )

1290  
OO_SP_NULL
;

1292 
a˘ive_wûd
 = 
	`__ci_√tif_a˘ive_wûd_gë
(
ni
, 
œddr
, 
øddr
, 
Ω‹t
,

1293 
p‹t_out
, 
¥ev_£q_out
);

1296 if–
a˘ive_wûd
 =
OO_SP_NULL
 &&

1297 
ni
->
°©e
->
a˘ive_wûd_n
 < 
	`NI_OPTS
“i).
t˝_sh¨ed_loˇl_p‹ts_max
 ) {

1298 
	`LOG_TC
(
	`ci_log
(
FN_FMT
 "Didn't getáctive wild on firstÅry, getting more",

1299 
	`FN_PRI_ARGS
(
ni
)));

1300 
	`CITP_STATS_NETIF_INC
(
ni
, 
t˝_sh¨ed_loˇl_p‹ts_grow
);

1301 
	`ci_t˝_hñ≥r_Æloc_a˘ive_wûd
(
ni
);

1302 
a˘ive_wûd
 = 
	`__ci_√tif_a˘ive_wûd_gë
(
ni
, 
œddr
, 
øddr
, 
Ω‹t
,

1303 
p‹t_out
, 
¥ev_£q_out
);

1306 if–
a˘ive_wûd
 !
OO_SP_NULL
 ) {

1307 
	`CITP_STATS_NETIF_INC
(
ni
, 
t˝_sh¨ed_loˇl_p‹ts_u£d
);

1308 
	`LOG_TC
(
	`ci_log
(
FN_FMT
 "Lookupáctive wild for %s:0 %s:%u FOUND -Üport %u",

1309 
	`FN_PRI_ARGS
(
ni
), 
	`ù_addr_°r
(
œddr
), ip_addr_°r(
øddr
),

1310 
	`ht⁄s
(
Ω‹t
), ht⁄s(*
p‹t_out
)));

1313 
	`CITP_STATS_NETIF_INC
(
ni
, 
t˝_sh¨ed_loˇl_p‹ts_exhau°ed
);

1314 
	`LOG_TC
(
	`ci_log
(
FN_FMT
 "Lookupáctive wild for %s:0 %s:%u NOT AVAILABLE",

1315 
	`FN_PRI_ARGS
(
ni
), 
	`ù_addr_°r
(
œddr
), ip_addr_°r(
øddr
),

1316 
	`ht⁄s
(
Ω‹t
)));

1318  
a˘ive_wûd
;

1319 
	}
}

1325 
	$ci_√tif_a˘ive_wûd_sh¨î_˛o£d
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
)

1327 
rc
;

1328 
oo_•
 
id
;

1329 
ci_a˘ive_wûd
* 
aw
;

1331 
rc
 = 
	`ci_√tif_fûãr_lookup
(
ni
, 
	`sock_œddr_be32
(
s
), 
	`sock_Õ‹t_be16
(s),

1332 0, 0, 
	`sock_¥Ÿocﬁ
(
s
));

1334 if–
rc
 >= 0 ) {

1335 
id
 = 
	`CI_NETIF_FILTER_ID_TO_SOCK_ID
(
ni
, 
rc
);

1336 
aw
 = 
	`SP_TO_ACTIVE_WILD
(
ni
, 
id
);

1337 
	`ci_as£π
(
aw
->
s
.
b
.
°©e
 =
CI_TCP_STATE_ACTIVE_WILD
);

1338 
aw
->
expúy
 = 
	`ci_ù_time_now
(
ni
Ë+ 
	`NI_CONF
“i).
tc⁄°_2m¶_time
;

1339 
aw
->
œ°_œddr
 = 
	`sock_œddr_be32
(
s
);

1340 
aw
->
œ°_øddr
 = 
	`sock_øddr_be32
(
s
);

1341 
aw
->
œ°_Ω‹t
 = 
	`sock_Ω‹t_be16
(
s
);

1343 
	}
}

	@netif_debug.c

2 ** <
L5_PRIVATE
 
	gL5_SOURCE
>

3 ** 
	gC›yright
: (
c
Ë
Levñ
 5 
Nëw‹ks
 
Limôed
.

4 ** 
Auth‹
: 
djr


5 ** 
Sèπed
: 2005/02/08

6 ** 
Des¸ùti⁄
: 
VÆid©i⁄
 
™d
 
debug
 
›s
 
√tifs
.

7 ** </
L5_PRIVATE
>

11 
	~"ù_öã∫Æ.h
"

12 
	~"uk_ötf_vî.h
"

13 
	~<⁄lﬂd/vîsi⁄.h
>

14 
	~<⁄lﬂd/¶ìp.h
>

15 #ifde‡
_WIN32


16 
	~<ci/öã∫Æ/evít_£À˘.h
>

24 #i‚de‡
NDEBUG


26 
	$ci_√tif_°©e_as£π_vÆid
(
ci_√tif
* 
ni
,

27 c⁄° * 
fûe
, 
löe
)

29 
ci_√tif_°©e
* 
nis
 = 
ni
->
°©e
;

30 
côp_waôabÀ
* 
w
;

31 
ci_t˝_°©e
* 
ts
;

32 
ötf_i
, 
n
;

33 
ci_ni_dŒi°_lök
* 
 k
;

34 
ci_ùtime_t
 
œ°_time
;

35 
oo_pkt_p
 
µ
, 
œ°_µ
;

36 
oo_•
 
sockp
;

37 
oo_p
 
a
;

39 
	`vîify
(
nis
);

42 
	`OO_STACK_FOR_EACH_INTF_I
(
ni
, 
ötf_i
) {

43 
oo_pktq
* 
dmaq
 = &
nis
->
nic
[
ötf_i
].dmaq;

44 if–
	`OO_PP_NOT_NULL
(
dmaq
->
hód
) ) {

45 
	`vîify
–
	`IS_VALID_PKT_ID
(
ni
, 
dmaq
->
hód
) );

46 
	`vîify
–
	`IS_VALID_PKT_ID
(
ni
, 
dmaq
->
èû
) );

47 
	`vîify
–
	`OO_PP_IS_NULL
(
	`PKT
(
ni
, 
dmaq
->
èû
)->
√tif
.
tx
.
dmaq_√xt
) );

48 
n
 = 0;

49  
œ°_µ
 = 
µ
 = 
dmaq
->
hód
; 
	`OO_PP_NOT_NULL
(pp); ) {

50 ++
n
;

51 
œ°_µ
 = 
µ
;

52 
µ
 = 
	`PKT
(
ni
,Öp)->
√tif
.
tx
.
dmaq_√xt
;

54 
	`vîify
(
	`OO_PP_EQ
(
œ°_µ
, 
dmaq
->
èû
));

55 
	`vîify
(
dmaq
->
num
 =
n
);

58 
	`vîify
(
dmaq
->
num
 == 0);

61 
	`vîify
(
ni
->
fûãr_èbÀ
->
èbÀ_size_mask
 > 0u);

69  
n
 = 0;Ç < 
OO_TIMEOUT_Q_MAX
;Ç++ ) {

70 
œ°_time
 = 0;

72  
a
 = 
nis
->
timeout_q
[
n
].
l
.
√xt
;

73 ! 
	`OO_P_EQ
(
a
, 
	`ci_ni_dŒi°_lök_addr
(
ni
,

74 &
nis
->
timeout_q
[
n
].
l
)); ) {

75 
ts
 = 
	`TCP_STATE_FROM_LINK
((
ci_ni_dŒi°_lök
*Ë
	`CI_NETIF_PTR
(
ni
, 
a
));

76 
	`vîify
(
	`IS_VALID_SOCK_P
(
ni
, 
	`S_SP
(
ts
)));

77 if–
n
 =
OO_TIMEOUT_Q_TIMEWAIT
 )

78 
	`vîify
–(
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
) );

80 
	`vîify
–
	`ci_t˝_is_timeout_‹ph™
(
ts
) );

81 i‡(!
œ°_time
Ëœ°_timê
ts
->
t_œ°_£¡
;

82 
	`vîify
–
	`TIME_LE
(
œ°_time
, 
ts
->
t_œ°_£¡
) );

83 
œ°_time
 = 
ts
->
t_œ°_£¡
;

84 
	`vîify
(
	`ci_ù_timî_≥ndög
(
ni
, &
nis
->
timeout_tid
));

85 
a
 = 
ts
->
timeout_q_lök
.
√xt
;

90 
id
;

91 
	`vîify
(
nis
->
n_ï_bufs
 <
	`NI_OPTS
(
ni
).
max_ï_bufs
);

92  
id
 = 0; id < 
nis
->
n_ï_bufs
; ++id ) {

93 
w
 = 
	`ID_TO_WAITABLE
(
ni
, 
id
);

94 
	`vîify
(
w
);

95 
	`vîify
(
	`W_ID
(
w
Ë=
id
);

100  
sockp
 = 
nis
->
‰ì_ïs_hód
; 
	`OO_SP_NOT_NULL
(sockp); ) {

101 
	`vîify
(
	`IS_VALID_SOCK_P
(
ni
, 
sockp
));

102 
w
 = 
	`SP_TO_WAITABLE
(
ni
, 
sockp
);

103 
	`vîify
(
w
);

104 
	`vîify
(
	`OO_SP_EQ
(
	`W_SP
(
w
), 
sockp
));

105 
	`vîify
(
w
->
°©e
 =
CI_TCP_STATE_FREE
);

106 
sockp
 = 
w
->
wt_√xt
;

109  
 k
 = 
	`ci_ni_dŒi°_°¨t
(
ni
, &ni->
°©e
->
po°_pﬁl_li°
);

110 
 k
 !
	`ci_ni_dŒi°_íd
(
ni
, &ni->
°©e
->
po°_pﬁl_li°
); ) {

111 
w
 = 
	`CI_CONTAINER
(
côp_waôabÀ
, 
po°_pﬁl_lök
, 
 k
);

113 if–
w
 =
	`CI_CONTAINER
(
côp_waôabÀ
, 
po°_pﬁl_lök
,

114 (
ci_ni_dŒi°_lök
*Ë
	`CI_NETIF_PTR
(
ni
, 
 k
->
√xt
)) ) {

115 
	`ci_log
("**** POST POLL LOOP DETECTED ****" );

116 
	`ci_log
("Çi:%pÜnk:%p .next:%xÖtr:%p",

117 
ni
, 
 k
, 
	`OO_P_FMT
÷nk->
√xt
), 
	`CI_NETIF_PTR
(ni,Ünk->next));

119 
	`ci_log
("Üist_start:%p _end:%p",

120 
	`ci_ni_dŒi°_°¨t
(
ni
, &ni->
°©e
->
po°_pﬁl_li°
),

121 
	`ci_ni_dŒi°_íd
(
ni
, &ni->
°©e
->
po°_pﬁl_li°
));

123 
	`ci_log
(" %d sèã=%#x", 
	`W_FMT
(
w
), w->
°©e
);

125 
	`ci_log
(" .wk_nd:%xÖost_poll_link.prev:%x .next:%x",

126 (Ë
w
->
wake_ªque°
, 
	`OO_P_FMT
(w->
po°_pﬁl_lök
.
¥ev
),

127 
	`OO_P_FMT
(
w
->
po°_pﬁl_lök
.
√xt
));

128 
	`ci_as£π
(0);

130 
 k
 = (
ci_ni_dŒi°_lök
*Ë
	`CI_NETIF_PTR
(
ni
,Ünk->
√xt
);

133 #i‡
CI_CFG_FULL_IP_ID_HANDLING


134 
	`ci_ùid_as£π_vÆid
(
ni
, 
fûe
, 
löe
);

137 
	`ci_ù_timî_°©e_as£π_vÆid
(
ni
, 
fûe
, 
löe
);

138 
	}
}

141 
	$ci_√tif_as£π_vÆid
(
ci_√tif
* 
ni
, c⁄° * 
fûe
, 
löe
)

143 
	`vîify
(
ni
);

144 #i‚de‡
__KERNEL__


145 
	`CI_MAGIC_CHECK
(
ni
, 
NETIF_MAGIC
);

147 
	`ci_√tif_°©e_as£π_vÆid
(
ni
, 
fûe
, 
löe
);

148 
	}
}

151 
	$ci_√tif_vîify_‰ìpkts
(
ci_√tif
 *
ni
, c⁄° *
fûe
, 
löe
)

153 
ci_ù_pkt_fmt
 *
pkt
;

154 
c1
, 
c2
, 
i
;

156  
c1
 = 0, 
i
 = 0; i < 
ni
->
∑ckës
->
£ts_n
; i++ ) {

157 
	`vîify
–
	`OO_PP_NOT_NULL
(
ni
->
∑ckës
->
£t
[
i
].
‰ì
) ==

158 (
ni
->
∑ckës
->
£t
[
i
].
n_‰ì
 > 0) );

159 
	`vîify
(
ni
->
∑ckës
->
£t
[
i
].
n_‰ì
 >= 0);

160 
c1
 +
ni
->
∑ckës
->
£t
[
i
].
n_‰ì
;

162 if–
ni
->
∑ckës
->
£t
[
i
].
n_‰ì
 > 0 ) {

163 
c2
 = 1;

165 
pkt
 = 
	`PKT
(
ni
,Çi->
∑ckës
->
£t
[
i
].
‰ì
);

166  
	`OO_PP_NOT_NULL
(
pkt
->
√xt
) ) {

167 
	`vîify
(
pkt
->
ªfcou¡
 == 0);

168 
	`vîify
(
pkt
->
n_buf„rs
 == 1);

169 
	`vîify
((
pkt
->
Êags
 & ~ 
CI_PKT_FLAG_NONB_POOL
) == 0);

170 
	`vîify
(
	`OO_PP_IS_NULL
(
pkt
->
‰ag_√xt
));

172 
pkt
 = 
	`PKT
(
ni
,Ökt->
√xt
);

173 ++
c2
;

175 
	`vîify
(
c2
 =
ni
->
∑ckës
->
£t
[
i
].
n_‰ì
);

178 
	}
}

183 
	$__ci_as£π_vÆid_pkt
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

184 c⁄° * 
fûe
, 
löe
)

186 
	`_ci_as£π_gt
(
pkt
->
ªfcou¡
, 0, 
fûe
, 
löe
);

187 
	`_ci_as£π_gt
(
pkt
->
n_buf„rs
, 0, 
fûe
, 
löe
);

188 
	`_ci_as£π_À
(
pkt
->
n_buf„rs
, 
CI_IP_PKT_SEGMENTS_MAX
, 
fûe
, 
löe
);

193 
	`_ci_as£π_im∂
((
pkt
->
n_buf„rs
 > 1), 
	`OO_PP_NOT_NULL
’kt->
‰ag_√xt
),

194 
fûe
, 
löe
);

199 
	`_ci_as£π_im∂
((
pkt
->
n_buf„rs
 == 1),

200 
	`OO_PP_IS_NULL
(
pkt
->
‰ag_√xt
Ë||Ökt->‰ag_√xà=pkt->
√xt
,

201 
fûe
, 
löe
);

202 
	`_ci_as£π_im∂
(
	`OO_PP_IS_NULL
(
pkt
->
‰ag_√xt
),Ökt->
n_buf„rs
 == 1,

203 
fûe
, 
löe
);

204 
	}
}

207 
	$ci_as£π_vÆid_pkt
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

208 
ci_boﬁón_t
 
ni_locked
,

209 c⁄° * 
fûe
, 
löe
)

211 
	`_ci_as£π
(
pkt
, 
fûe
, 
löe
);

212 
	`ASSERT_VALID_PKT_ID
(
ni
, 
	`OO_PKT_P
(
pkt
));

213 
	`_ci_as£π_equÆ
(
pkt
, 
	`__PKT
(
ni
, 
	`OO_PKT_P
’kt)), 
fûe
, 
löe
);

215 if–
ni_locked
 ) {

216 
	`_ci_as£π
(
	`ci_√tif_is_locked
(
ni
), 
fûe
, 
löe
);

217 
	`__ci_as£π_vÆid_pkt
(
ni
, 
pkt
, 
fûe
, 
löe
);

219 
	}
}

226 #i‡(!
deföed
(
__KERNEL__
)Ë|| deföed(
CI_CFG_BUILD_DUMP_CODE_IN_KERNEL
)

228 
	$ci_√tif_dump_sockës
(
ci_√tif
* 
ni
)

230 
	`ci_√tif_dump_sockës_to_loggî
(
ni
, 
ci_log_dump_‚
, 
NULL
);

231 
	}
}

233 
	$ci_√tif_dump_sockës_to_loggî
(
ci_√tif
* 
ni
, 
oo_dump_log_‚_t
 
loggî
,

234 *
log_¨g
)

236 
ci_√tif_°©e
* 
ns
 = 
ni
->
°©e
;

237 
id
;

239  
id
 = 0; id < 
ns
->
n_ï_bufs
; ++id ) {

240 
côp_waôabÀ_obj
* 
wo
 = 
	`ID_TO_WAITABLE_OBJ
(
ni
, 
id
);

241 if–
wo
->
waôabÀ
.
°©e
 !
CI_TCP_STATE_FREE
 ) {

242 
	`côp_waôabÀ_dump_to_loggî
(
ni
, &
wo
->
waôabÀ
, "", 
loggî
, 
log_¨g
);

243 
	`loggî
(
log_¨g
,

247 
	}
}

250 
	$ci_√tif_¥öt_sockës
(
ci_√tif
* 
ni
)

252 
ci_√tif_°©e
* 
ns
 = 
ni
->
°©e
;

253 
id
;

255  
id
 = 0; id < 
ns
->
n_ï_bufs
; ++id ) {

256 
côp_waôabÀ_obj
* 
wo
 = 
	`ID_TO_WAITABLE_OBJ
(
ni
, 
id
);

257 if–
wo
->
waôabÀ
.
°©e
 !
CI_TCP_STATE_FREE
 &&

258 
wo
->
waôabÀ
.
°©e
 !
CI_TCP_CLOSED
 &&

259 
	`CI_TCP_STATE_IS_SOCKET
(
wo
->
waôabÀ
.
°©e
) ) {

260 
	`côp_waôabÀ_¥öt
(&
wo
->
waôabÀ
);

263 
	}
}

266 
	$ci_√tif_dump_pkt_summ¨y
(
ci_√tif
* 
ni
, 
oo_dump_log_‚_t
 
loggî
,

267 * 
log_¨g
)

269 
ötf_i
, 
rx_rög
 = 0, 
tx_rög
 = 0, 
tx_oÊow
 = 0, 
u£d
, 
rx_queued
, 
i
;

270 
ci_√tif_°©e
* 
ns
 = 
ni
->
°©e
;

272 
	`loggî
(
log_¨g
, "Ökt_sets:Ökt_size=%d set_size=%d max=%dálloc=%d",

273 
CI_CFG_PKT_BUF_SIZE
, 
PKTS_PER_SET
, 
ni
->
∑ckës
->
£ts_max
,

274 
ni
->
∑ckës
->
£ts_n
);

276  
i
 = 0; i < 
ni
->
∑ckës
->
£ts_n
; i++ ) {

277 
	`loggî
(
log_¨g
, "Ökt_£t[%d]: fªe=%d%s", 
i
, 
ni
->
∑ckës
->
£t
[i].
n_‰ì
,

278 
i
 =
ni
->
∑ckës
->
id
 ? " current" : "");

281 
rx_rög
 = 0;

282 
tx_rög
 = 0;

283 
	`OO_STACK_FOR_EACH_INTF_I
(
ni
, 
ötf_i
) {

284 
rx_rög
 +
	`ef_vi_ª˚ive_fûl_Àvñ
(
	`ci_√tif_rx_vi
(
ni
, 
ötf_i
));

285 
tx_rög
 +
	`ef_vi_å™smô_fûl_Àvñ
(&
ni
->
nic_hw
[
ötf_i
].
vi
);

286 
tx_oÊow
 +
ns
->
nic
[
ötf_i
].
dmaq
.
num
;

288 
u£d
 = 
ni
->
∑ckës
->
n_pkts_Æloˇãd
 -Çi->∑ckës->
n_‰ì
 - 
ns
->
n_async_pkts
;

289 
rx_queued
 = 
ns
->
n_rx_pkts
 - 
rx_rög
 -Çs->
mem_¥essuª_pkt_poﬁ_n
;

291 
	`loggî
(
log_¨g
, "Ökt_bufs: max=%dálloc=%d free=%dásync=%d%s",

292 
ni
->
∑ckës
->
£ts_max
 * 
PKTS_PER_SET
,

293 
ni
->
∑ckës
->
n_pkts_Æloˇãd
,Çi->∑ckës->
n_‰ì
, 
ns
->
n_async_pkts
,

294 (
ns
->
mem_¥essuª
 & 
OO_MEM_PRESSURE_CRITICAL
) ? " CRITICAL":

295 (
ns
->
mem_¥essuª
 ? " LOW":""));

296 
	`loggî
(
log_¨g
, "Ökt_bufs:Ñx=%dÑx_ring=%dÑx_queued=%dÖressure_pool=%d",

297 
ns
->
n_rx_pkts
, 
rx_rög
, 
rx_queued
,Çs->
mem_¥essuª_pkt_poﬁ_n
);

298 
	`loggî
(
log_¨g
, "Ökt_bufs:Åx=%dÅx_ring=%dÅx_oflow=%d",

299 (
u£d
 - 
ns
->
n_rx_pkts
 -Çs->
n_lo›pkts
), 
tx_rög
, 
tx_oÊow
);

300 
	`loggî
(
log_¨g
, "Ökt_bufs: in_lo›back=%d in_sock=%d", 
ns
->
n_lo›pkts
,

301 
u£d
 - 
ns
->
n_rx_pkts
 -Çs->
n_lo›pkts
 - 
tx_rög
 - 
tx_oÊow
);

302 
	}
}

307 
	#MAX_NO_DIFF_ALLOCS
 32

	)

310 
	mÊags
;

312 
	mno_buf„rs
;

313 } 
	tci_buf„r_Æloc_öfo_t
;

316 
	$ci_√tif_pkt_dump_Æl
(
ci_√tif
* 
ni
)

318 
ci_√tif_°©e
* 
ns
 = 
ni
->
°©e
;

319 
i
, 
j
, 
n_zîo_ªfs
 = 0;

320 
ci_buf„r_Æloc_öfo_t
 * 
Æloc
;

322 #ifde‡
__unix__


323 
	`log
("%s: id=%d "
	`CI_DEBUG
("uid=%dÖid=%d"), 
__FUNCTION__
, 
	`NI_ID
(
ni
)

324 
	`CI_DEBUG_ARG
((Ë
ns
->
uid
ËCI_DEBUG_ARG((Ëns->
pid
));

326 
	`log
("%s: id=%d "
	`CI_DEBUG
("uid=%dÖid=%d"), 
__FUNCTION__
, 
	`NI_ID
(
ni
)

327 
	`CI_DEBUG_ARG
(0) CI_DEBUG_ARG(0));

330 
	`ci_√tif_dump_pkt_summ¨y
(
ni
, 
ci_log_dump_‚
, 
NULL
);

332 
Æloc
 = 
	`CI_ALLOC_ARRAY
(
ci_buf„r_Æloc_öfo_t
, 
MAX_NO_DIFF_ALLOCS
);

333 if–
Æloc
 =
NULL
 ) {

334 
	`ci_log
("%s: ERROR: couldÇŸáŒoˇã mem‹y", 
__FUNCTION__
);

337 
	`CI_ZERO_ARRAY
(
Æloc
, 
MAX_NO_DIFF_ALLOCS
);

339  
i
 = 0; i < 
ni
->
∑ckës
->
n_pkts_Æloˇãd
; i++ ) {

340 
ci_ù_pkt_fmt
* 
pkt
;

341 
oo_pkt_p
 
µ
;

342 
	`OO_PP_INIT
(
ni
, 
µ
, 
i
);

343 
pkt
 = 
	`PKT
(
ni
, 
µ
);

344 if–
pkt
->
ªfcou¡
 == 0 ) {

345 ++
n_zîo_ªfs
;

348  
j
 = 0; j < 
MAX_NO_DIFF_ALLOCS
; j++ )

349 if–
Æloc
[
j
].
Êags
 =
pkt
->flags ) {

350 
Æloc
[
j
].
no_buf„rs
++;

353 if–
Æloc
[
j
].
no_buf„rs
 == 0 ) {

354 
Æloc
[
j
].
Êags
 = 
pkt
->flags;

355 
Æloc
[
j
].
no_buf„rs
 = 1;

359  
j
 = 0; j < 
MAX_NO_DIFF_ALLOCS
; j++ )

360 if–
Æloc
[
j
].
no_buf„rs
 )

361 
	`log
(" %3d: 0x%x "
CI_PKT_FLAGS_FMT
, 
Æloc
[
j
].
no_buf„rs
,

362 
Æloc
[
j
].
Êags
, 
	`__CI_PKT_FLAGS_PRI_ARG
(alloc[j].flags));

363 
	`ci_‰ì
(
Æloc
);

365 
	`log
("Ç_zero_refs=%dÇ_freepkts=%dÉstimated_free_nonb=%d",

366 
n_zîo_ªfs
, 
ni
->
∑ckës
->
id
,Ç_zero_refs -Çi->packets->id);

372 
no_n⁄b
=0, 
√xt
;

373 
ci_ù_pkt_fmt
* 
n⁄b_pkt
;

374 
oo_pkt_p
 
µ
;

376 
√xt
 = 
ns
->
n⁄b_pkt_poﬁ
 & 0xffffffff;

377  
√xt
 != 0xffffffff ) {

378 
	`OO_PP_INIT
(
ni
, 
µ
, 
√xt
);

379 
n⁄b_pkt
 = 
	`PKT
(
ni
, 
µ
);

380 
no_n⁄b
++;

381 
√xt
 = 
	`OO_PP_ID
(
n⁄b_pkt
->next);

383 
	`log
(" fªe_n⁄b=%dÇ⁄b_pkt_poﬁ=%"
CI_PRIx64
, 
no_n⁄b
, 
ns
->
n⁄b_pkt_poﬁ
);

385 
	}
}

388 
	$côp_waôabÀ_f‹˚_wake
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
sb
)

390 
rc
 = 
sb
->
wake_ªque°
 != 0;

391 
	`log
("%s: %d:%d ", 
__FUNCTION__
, 
	`NI_ID
(
ni
), 
	`W_FMT
(
sb
));

392 
	`ci_bô_£t
(&
sb
->
wake_ªque°
, 
CI_SB_FLAG_WAKE_RX_B
);

393 
	`ci_bô_£t
(&
sb
->
wake_ªque°
, 
CI_SB_FLAG_WAKE_TX_B
);

394 
	`côp_waôabÀ_wake_nŸ_ö_pﬁl
(
ni
, 
sb
,
CI_SB_FLAG_WAKE_RX
|
CI_SB_FLAG_WAKE_TX
);

395  
rc
;

396 
	}
}

399 
	$ci_√tif_f‹˚_wake
(
ci_√tif
* 
ni
, 
evîy⁄e
)

401 
ci_√tif_°©e
* 
ns
 = 
ni
->
°©e
;

402 
id
;

403 
rc
 = 0;

407  
id
 = 0; id < 
ns
->
n_ï_bufs
; ++id ) {

408 
côp_waôabÀ
* 
w
 = 
	`ID_TO_WAITABLE
(
ni
, 
id
);

410 if–
w
->
°©e
 !
CI_TCP_STATE_FREE
 ) {

412 if–
evîy⁄e
 || 
w
->
wake_ªque°
 )

413 
rc
 +
	`côp_waôabÀ_f‹˚_wake
(
ni
, 
w
);

417  
rc
;

418 
	}
}

421 
	$ci_√tif_pkt_dump
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
, 
is_ªcv
, 
dump
)

423 if–
pkt
 =
NULL
 ) {

424 
	`ci_log
("%s: ERROR: NULL", 
__FUNCTION__
);

427 
	`ci_log
("%s: id=%d fœgs=%x "
CI_PKT_FLAGS_FMT
,

428 
__FUNCTION__
, 
	`OO_PKT_FMT
(
pkt
),Ökt->
Êags
, 
	`CI_PKT_FLAGS_PRI_ARG
(pkt));

430  
	`oo_ëhî_ty≥_gë
(
pkt
) ) {

431 
CI_ETHERTYPE_IP
:

432  
	`oo_ù_hdr
(
pkt
)->
ù_¥Ÿocﬁ
 ) {

433 
IPPROTO_TCP
:

434 
	`ci_t˝_pkt_dump
(
ni
, 
pkt
, 
is_ªcv
, 
dump
);

437 
	`log
("%s:Ökt=%d unsupported ip_protocol=%d",

438 
__FUNCTION__
, 
	`OO_PKT_FMT
(
pkt
), (Ë
	`oo_ù_hdr
’kt)->
ù_¥Ÿocﬁ
);

443 
	`log
("%s:Ökt=%d unsuµ‹ãdÉthîty≥=%x", 
__FUNCTION__
, 
	`OO_PKT_FMT
(
pkt
),

444 (Ë
	`CI_BSWAP_BE16
(
	`oo_ëhî_ty≥_gë
(
pkt
)));

447 
	}
}

450 
	$ci_√tif_pkt_li°_dump
(
ci_√tif
* 
ni
, 
oo_pkt_p
 
hód
, 
is_ªcv
, 
dump
)

452 
ci_ù_pkt_fmt
* 
pkt
;

453 
oo_pkt_p
 
pkt_id
;

455  
pkt_id
 = 
hód
; 
	`OO_PP_NOT_NULL
’kt_id);Ökt_id = 
pkt
->
√xt
 ) {

456 if–! 
	`IS_VALID_PKT_ID
(
ni
, 
pkt_id
) ) {

457 
	`log
(" invÆidÖkt_id=%d", 
	`OO_PP_FMT
(
pkt_id
));

461 
pkt
 = 
	`PKT
(
ni
, 
pkt_id
);

462 
	`ci_√tif_pkt_dump
(
ni
, 
pkt
, 
is_ªcv
, 
dump
);

464 
	}
}

467 
	$ci_√tif_pkt_queue_dump
(
ci_√tif
* 
ni
, 
ci_ù_pkt_queue
* 
q
,

468 
is_ªcv
, 
dump
)

470 
	`log
("%s: hód=%dÅaû=%dÇ=%d", 
__FUNCTION__
,

471 
	`OO_PP_FMT
(
q
->
hód
), OO_PP_FMT(q->
èû
), q->
num
);

472 
	`ci_√tif_pkt_li°_dump
(
ni
, 
q
->
hód
, 
is_ªcv
, 
dump
);

473 
	}
}

476 
	$ci_√tif_dump_dmaq
(
ci_√tif
* 
ni
, 
dump
)

478 
ötf_i
;

479 
	`OO_STACK_FOR_EACH_INTF_I
(
ni
, 
ötf_i
) {

480 
ci_√tif_°©e_nic_t
* 
nic
 = &
ni
->
°©e
->nic[
ötf_i
];

481 
	`log
("%s: hód=%dÅaû=%dÇum=%d", 
__FUNCTION__
,

482 
	`OO_PP_FMT
(
nic
->
dmaq
.
hód
), OO_PP_FMT“ic->dmaq.
èû
),Çic->dmaq.
num
);

486 
	}
}

489 
	$ci_√tif_dump_timeoutq
(
ci_√tif
* 
ni
)

491 
ci_√tif_°©e
* 
nis
 = 
ni
->
°©e
;

492 
ci_t˝_°©e
 * 
ts
;

493 
oo_p
 
a
;

494 
i
;

496 if–
	`ci_ù_timî_≥ndög
(
ni
, &
nis
->
timeout_tid
) ) {

497 
diff
 = 
nis
->
timeout_tid
.
time
 - 
	`ci_t˝_time_now
(
ni
);

498 
	`log
("timeout due in %umS",

499 
	`ci_ù_time_ticks2ms
(
ni
, 
diff
));

501  
i
 = 0; i < 
OO_TIMEOUT_Q_MAX
; i++ ) {

502 if–
i
 =
OO_TIMEOUT_Q_TIMEWAIT
 )

503 
	`log
("TIME-WAIT queue");

505 
	`log
("FIN-WAIT queue");

506  
a
 = 
nis
->
timeout_q
[
i
].
l
.
√xt
;

507 ! 
	`OO_P_EQ
(
a
, 
	`ci_ni_dŒi°_lök_addr
(
ni
, &
nis
->
timeout_q
[
i
].
l
)); ) {

508 
ts
 = 
	`TCP_STATE_FROM_LINK
((
ci_ni_dŒi°_lök
*Ë
	`CI_NETIF_PTR
(
ni
, 
a
));

509 if–
i
 =
OO_TIMEOUT_Q_TIMEWAIT
 )

510 
	`log
(" %d:Å=0x%08x", 
	`S_FMT
(
ts
),Ås->
t_œ°_£¡
);

512 
	`log
(" %d:Å=0x%08x %s", 
	`S_FMT
(
ts
),Ås->
t_œ°_£¡
, 
	`°©e_°r
(ts));

513 
a
 = 
ts
->
timeout_q_lök
.
√xt
;

516 
	}
}

519 
	$ci_√tif_dump_ª≠_li°
(
ci_√tif
* 
ni
, 
vîbo£
)

521 
ci_ni_dŒi°_lök
* 
 k
;

522 
ci_sock_cmn
* 
s
;

524 
	`ci_log
("%s: sèck=%d", 
__FUNCTION__
, 
	`NI_ID
(
ni
));

525  
 k
 = 
	`ci_ni_dŒi°_°¨t
(
ni
, &ni->
°©e
->
ª≠_li°
);

526 
 k
 !
	`ci_ni_dŒi°_íd
(
ni
, &ni->
°©e
->
ª≠_li°
);

527 
 k
 = (
ci_ni_dŒi°_lök
*Ë
	`CI_NETIF_PTR
(
ni
,Ünk->
√xt
) ) {

528 
s
 = 
	`CI_CONTAINER
(
ci_sock_cmn
, 
ª≠_lök
, 
 k
);

529 if–
vîbo£
 )

530 
	`côp_waôabÀ_dump
(
ni
, &
s
->
b
, "");

532 
	`ci_log
(" "
NS_FMT
, 
	`NS_PRI_ARGS
(
ni
, 
s
));

534 
	}
}

537 
	$ci_√tif_dump_exåa
(
ci_√tif
* 
ni
)

539 
ci_√tif_°©e
* 
ns
 = 
ni
->
°©e
;

540 
hp2i
[
CPLANE_MAX_REGISTER_INTERFACES
 * 10];

541 
i2hp
[
CI_CFG_MAX_INTERFACES
 * 10];

542 
i
, 
off
;

544  
i
 = 0, 
off
 = 0; i < 
CPLANE_MAX_REGISTER_INTERFACES
; ++i )

545 
off
 +
	`•rötf
(
hp2i
+off, "%s%d", 
i
?",":"", (Ë
ns
->
hwp‹t_to_ötf_i
[i]);

546  
i
 = 0, 
off
 = 0; i < 
CI_CFG_MAX_INTERFACES
; ++i )

547 
off
 +
	`•rötf
(
i2hp
+off, "%s%d", 
i
?",":"", (Ë
ns
->
ötf_i_to_hwp‹t
[i]);

549 
	`log
("%s: sèck=%d", 
__FUNCTION__
, 
	`NI_ID
(
ni
));

550 
	`log
(" in_poll=%dÖost_poll_list_empty=%dÖoll_did_wake=%d",

551 
ns
->
ö_pﬁl
, 
	`ci_ni_dŒi°_is_em±y
(
ni
, &ns->
po°_pﬁl_li°
),

552 
ns
->
pﬁl_did_wake
);

553 
	`log
("Ñx_defrag_head=%dÑx_defrag_tail=%d",

554 
	`OO_PP_FMT
(
ns
->
rx_de‰ag_hód
), OO_PP_FMT“s->
rx_de‰ag_èû
));

555 
	`log
("Åx_may_alloc=%d can=%dÇonb_pool=%d send_may_poll=%d is_spinner=%d,%d",

556 
	`ci_√tif_pkt_tx_may_Æloc
(
ni
), 
	`ci_√tif_pkt_tx_ˇn_Æloc_now
(ni),

557 
	`ci_√tif_pkt_n⁄b_poﬁ_nŸ_em±y
(
ni
), 
ns
->
£nd_may_pﬁl
,

558 (Ë
ns
->
is_•ö√r
,Çs->
n_•ö√rs
);

559 
	`log
(" hwp‹t_to_ötf_i=%†ötf_i_to_hwp‹t=%s", 
hp2i
, 
i2hp
);

560 
	`log
(" uk_ötf_vî=%s", 
OO_UK_INTF_VER
);

561 
	`log
(" de„ºed cou¡ %d/%d", 
ns
->
de„r_w‹k_cou¡
, 
	`NI_OPTS
(
ni
).
de„r_w‹k_limô
);

562 
	`log
("ÇumaÇodes: creation=%dÜoad=%d",

563 
ns
->
¸óti⁄_numa_node
,Çs->
lﬂd_numa_node
);

564 
	`log
("ÇumaÇode masks:Öacketálloc=%x sockálloc=%x interrupt=%x",

565 
ns
->
∑ckë_Æloc_numa_nodes
,Çs->
sock_Æloc_numa_nodes
,

566 
ns
->
öãºu±_numa_nodes
);

567 
	}
}

570 
	$ci_√tif_dump_vi
(
ci_√tif
* 
ni
, 
ötf_i
, 
oo_dump_log_‚_t
 
loggî
,

571 * 
log_¨g
)

573 
ci_√tif_°©e_nic_t
* 
nic
 = &
ni
->
°©e
->nic[
ötf_i
];

574 
ef_vi
* 
vi
 = &
ni
->
nic_hw
[
ötf_i
].vi;

576 if–
ötf_i
 < 0 || i¡f_ò>
CI_CFG_MAX_INTERFACES
 ||

577 ! 
	`e‰m_nic_£t_ªad
(&
ni
->
nic_£t
, 
ötf_i
) ) {

578 
	`loggî
(
log_¨g
, "%s: stack=%d intf=%d ***BAD***",

579 
__FUNCTION__
, 
	`NI_ID
(
ni
), 
ötf_i
);

583 
	`loggî
(
log_¨g
, "%s: sèck=%d i¡f=%d dev=%†hw=%d%c%d", 
__FUNCTION__
,

584 
	`NI_ID
(
ni
), 
ötf_i
, 
nic
->
pci_dev
, (Ënic->
vi_¨ch
,

585 
nic
->
vi_v¨ü¡
, (Ënic->
vi_ªvisi⁄
);

586 
	`loggî
(
log_¨g
, " vi=%dÖd_owner=%d channel=%d%s oo_vi_flags=%x",

587 
	`ef_vi_ö°™˚
(
vi
), 
nic
->
pd_ow√r
, (Ënic->
vi_ch™√l
,

588 
ni
->
°©e
->
dump_ötf
[
ötf_i
] ? "Åcpdump" : "",

589 
nic
->
oo_vi_Êags
);

590 
	`loggî
(
log_¨g
, "Évq: cap=%d current=%x is_32_evs=%d is_ev=%d",

591 
	`ef_evítq_ˇ∑côy
(
vi
), (Ë
	`ef_evítq_cuºít
(vi),

592 
	`ef_evítq_has_m™y_evíts
(
vi
, 32), 
	`ef_evítq_has_evít
(vi));

593 
	`loggî
(
log_¨g
, "Ñxq: cap=%dÜim=%d spc=%dÜevel=%dÅotal_desc=%d",

594 
	`ef_vi_ª˚ive_ˇ∑côy
(
vi
), 
ni
->
°©e
->
rxq_limô
,

595 
	`ci_√tif_rx_vi_•a˚
(
ni
, 
vi
), 
	`ef_vi_ª˚ive_fûl_Àvñ
(vi),

596 
vi
->
ï_°©e
->
rxq
.
ªmoved
);

597 
	`loggî
(
log_¨g
, "Åxq: cap=%dÜim=%d spc=%dÜevel=%dÖkts=%d oflow_pkts=%d",

598 
	`ef_vi_å™smô_ˇ∑côy
(
vi
),Éf_vi_transmit_capacity(vi),

599 
	`ef_vi_å™smô_•a˚
(
vi
), 
	`ef_vi_å™smô_fûl_Àvñ
(vi),

600 
nic
->
tx_dmaq_ö£π_£q
 -Çic->
tx_dmaq_d⁄e_£q
 -Çic->
dmaq
.
num
,

601 
nic
->
dmaq
.
num
);

602 
	`loggî
(
log_¨g
, "Åxq:Öio_buf_size=%dÅot_pkts=%d bytes=%d",

603 #i‡
CI_CFG_PIO


604 
nic
->
pio_io_Àn
,

608 
nic
->
tx_dmaq_d⁄e_£q
,Çic->
tx_byãs_added
 -Çic->
tx_byãs_ªmoved
);

609 
	`loggî
(
log_¨g
, " clk: %s%s",

610 (
nic
->
œ°_sync_Êags
 & 
EF_VI_SYNC_FLAG_CLOCK_SET
) ? "SET " : "",

611 (
nic
->
œ°_sync_Êags
 & 
EF_VI_SYNC_FLAG_CLOCK_IN_SYNC
) ? "SYNC" : "");

612 if–
nic
->
nic_îr‹_Êags
 )

613 
	`loggî
(
log_¨g
, " ERRORS: "
CI_NETIF_NIC_ERRORS_FMT
,

614 
	`CI_NETIF_NIC_ERRORS_PRI_ARG
(
nic
->
nic_îr‹_Êags
));

616 #i‚de‡
__KERNEL__


617 #i‡
CI_CFG_SEPARATE_UDP_RXQ


618 if–
	`NI_OPTS
(
ni
).
£∑øã_udp_rxq
 ) {

619 
vi
 = &
ni
->
nic_hw
[
ötf_i
].
udp_rxq_vi
;

620 
	`loggî
(
log_¨g
, " vi=%d", 
	`ef_vi_ö°™˚
(
vi
));

621 
	`loggî
(
log_¨g
, "Évq: cap=%d current=%x is_32_evs=%d is_ev=%d",

622 
	`ef_evítq_ˇ∑côy
(
vi
), (Ë
	`ef_evítq_cuºít
(vi),

623 
	`ef_evítq_has_m™y_evíts
(
vi
, 32), 
	`ef_evítq_has_evít
(vi));

624 
	`loggî
(
log_¨g
, "Ñxq: cap=%dÜim=%d spc=%dÜevel=%dÅotal_desc=%d",

625 
	`ef_vi_ª˚ive_ˇ∑côy
(
vi
), 
ni
->
°©e
->
rxq_limô
,

626 
	`ci_√tif_rx_vi_•a˚
(
ni
, 
vi
), 
	`ef_vi_ª˚ive_fûl_Àvñ
(vi),

627 
vi
->
ï_°©e
->
rxq
.
ªmoved
);

631 
	}
}

633 
	$ci_√tif_dump
(
ci_√tif
* 
ni
)

635 
	`ci_√tif_dump_to_loggî
(
ni
, 
ci_log_dump_‚
, 
NULL
);

636 
	}
}

638 
	$ci_√tif_dump_to_loggî
(
ci_√tif
* 
ni
, 
oo_dump_log_‚_t
 
loggî
,

639 * 
log_¨g
)

641 
ci_√tif_°©e
* 
ns
 = 
ni
->
°©e
;

642 #ifde‡
__KERNEL__


644 
ci_ù_timî_°©e
 
ôs
;

646 
ci_ù_timî_°©e
 
ôs
;

648 
ci_uöt64
 
tmp
;

649 
diff
;

650 
ötf_i
;

652 
	`loggî
(
log_¨g
, "%s: sèck=%dÇame=%s", 
__FUNCTION__
, 
	`NI_ID
(
ni
),

653 
ni
->
°©e
->
«me
);

654 
	`loggî
(
log_¨g
, " vî=%†uid=%dÖid=%dÇs_Êags=%x %†%s", 
ONLOAD_VERSION


655 #ifde‡
__unix__


656 , (Ë
ns
->
uid
, (Ëns->
pid


658 
	`CI_DEBUG_ARG
( 0 ) CI_DEBUG_ARG( 0 )

660 , 
ns
->
Êags


661 , (
ns
->
Êags
 & 
CI_NETIF_FLAG_ONLOAD_UNSUPPORTED
)

663 #i‡
CI_CFG_FD_CACHING


664 , (
ns
->
Êags
 & 
CI_NETIF_FLAG_SOCKCACHE_FORKED
)

671 
tmp
 = 
ni
->
°©e
->
lock
.lock;

672 
	`loggî
(
log_¨g
, "Üock=%Œx "
CI_NETIF_LOCK_FMT
"Çics=%xÖrimed=%x",

673 ()
tmp
,

674 
	`CI_NETIF_LOCK_PRI_ARG
(
tmp
), 
ni
->
nic_£t
.
nics
, 
ns
->
evq_¥imed
);

675 #ifde‡
__KERNEL__


678 
t˝_hñ≥r_ªsour˚_t
* 
ås
 = 
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
);

679 
	`loggî
(
log_¨g
, "Ñef=%dÅrusted_lock=0x%x k_ref=0x%x "

681 
	`oo_©omic_ªad
(&
ås
->
ªf_cou¡
),

682 
ås
->
åu°ed_lock
,Års->
k_ªf_cou¡
,Års->
n_ï_˛osög_ªfs
);

686 
	`loggî
(
log_¨g
, " sock_bufs: max=%uÇ_allocated=%u",

687 
	`NI_OPTS
(
ni
).
max_ï_bufs
, 
ns
->
n_ï_bufs
);

689 
	`loggî
(
log_¨g
, "áux_bufs: max=%uállocated=%u free=%u",

690 
	`NI_OPTS
(
ni
).
t˝_syƒecv_max
 * 2,Çi->
°©e
->
n_aux_bufs
,

691 
ns
->
n_‰ì_aux_bufs
);

692 
	`ci_√tif_dump_pkt_summ¨y
(
ni
, 
loggî
, 
log_¨g
);

694 #ifde‡
_WIN32


695 
	`loggî
(
log_¨g
, " signal_q=[%d,%d] completion_q=%d",

696 
ns
->
async_sig«l_q
.
hód
,Çs->async_sig«l_q.
èû
,

697 
ns
->
async_com∂ëi⁄_q
);

700 
ôs
 = *
	`IPTIMER_STATE
(
ni
);

701 
	`ci_ù_time_ªsync
(&
ôs
);

702 
diff
 = 
ôs
.
ci_ù_time_ªÆ_ticks
 - 
	`ci_ù_time_now
(
ni
);

703 
diff
 = 
	`ci_ù_time_ticks2ms
(
ni
, diff);

705 
	`loggî
(
log_¨g
, "Åime:Çetif=%xÖoll=%xÇow=%x (diff=%ld.%03ldsec)%s",

706 (Ë
	`ci_ù_time_now
(
ni
),

707 (Ë
	`IPTIMER_STATE
(
ni
)->
sched_ticks
,

708 (Ë
ôs
.
ci_ù_time_ªÆ_ticks
, 
diff
 / 1000, diff % 1000,

709 
diff
 > 5000 ? " !! STUCK !!":"");

711 if–
ns
->
îr‹_Êags
 )

712 
	`loggî
(
log_¨g
, " ERRORS: "
CI_NETIF_ERRORS_FMT
,

713 
	`CI_NETIF_ERRORS_PRI_ARG
(
ns
->
îr‹_Êags
));

714 if–
ni
->
°©e
->
dump_wrôe_i
 !ni->°©e->
dump_ªad_i
 )

715 
	`loggî
(
log_¨g
, "Åcpdump: %d/%dÖackets in queue",

716 (
ci_uöt8
)(
ni
->
°©e
->
dump_wrôe_i
 -Çi->°©e->
dump_ªad_i
),

717 
CI_CFG_DUMPQUEUE_LEN
);

719 #i‡
CI_CFG_FD_CACHING


720 
	`loggî
(
log_¨g
, "áctive cache: hit=%dávail=%d cache=%sÖending=%s",

721 
ns
->
°©s
.
a˘iveˇche_hô
,

722 *(
ci_uöt32
*)
	`CI_NETIF_PTR
(
ni
, 
ns
->
a˘ive_ˇche
.
avaû_°ack
),

723 
	`ci_ni_dŒi°_is_em±y
(
ni
, &
ns
->
a˘ive_ˇche
.
ˇche
) ? "EMPTY":"yes",

724 
	`ci_ni_dŒi°_is_em±y
(
ni
, &
ns
->
a˘ive_ˇche
.
≥ndög
) ? "EMPTY":"yes");

728 
	`OO_STACK_FOR_EACH_INTF_I
(
ni
, 
ötf_i
)

729 
	`ci_√tif_dump_vi
(
ni
, 
ötf_i
, 
loggî
, 
log_¨g
);

730 
	}
}

734 
	$ci_√tif_bad_hwp‹t
(
ci_√tif
* 
ni
, 
ci_hwp‹t_id_t
 
hwp‹t
)

737 
⁄˚
;

738 if–! 
⁄˚
 ) {

739 
⁄˚
 = 1;

740 
	`ci_log
(
FN_FMT
 "ERROR: bad hwp‹t=%d", 
	`FN_PRI_ARGS
(
ni
), (Ë
hwp‹t
);

741 
	`ci_backåa˚
();

744 
	}
}

	@netif_event.c

14 
	~"ù_öã∫Æ.h
"

15 
	~"√tif_tx.h
"

16 
	~"t˝_rx.h
"

17 
	~<ci/toﬁs/pktdump.h
>

18 
	~<ëhîÁbric/timî.h
>

19 
	~<ëhîÁbric/vi.h
>

20 
	~<ci/öã∫Æ/pio_buddy.h
>

22 #ifde‡
__KERNEL__


23 
	~<löux/time.h
>

25 
	~<time.h
>

28 
	#SAMPLE
(
n
Ë“)

	)

30 
	#LPF
 "√tif: "

	)

33 
	soo_rx_°©e
 {

35 
ci_ù_pkt_fmt
* 
	mrx_pkt
;

37 
ci_ù_pkt_fmt
* 
	m‰ag_pkt
;

41 
	m‰ag_byãs
;

45 
	$ci_ù_csum_c‹ª˘
(
ci_ù4_hdr
* 
ù
, 
max_ù_Àn
)

47 
csum
;

48 
ù_Àn
;

50 if–
max_ù_Àn
 < 
	`CI_IP4_IHL
(
ù
) )

52 
ù_Àn
 = 
	`CI_BSWAP_BE16
(
ù
->
ù_tŸ_Àn_be16
);

53 if–
max_ù_Àn
 < 
ù_Àn
 )

56 
csum
 = 
	`ci_ù_csum_∑πül
(0, 
ù
, 
	`CI_IP4_IHL
(ip));

57 
csum
 = 
	`ci_ù_hdr_csum_föish
(csum);

58  
csum
 == 0;

59 
	}
}

62 
	$ci_t˝_csum_c‹ª˘
(
ci_ù_pkt_fmt
* 
pkt
, 
ù_∑yÀn
)

64 
ci_ù4_p£udo_hdr
 
ph
;

65 
ci_t˝_hdr
* 
t˝
;

66 
csum
;

67 
t˝_hÀn
;

69 
t˝
 = 
	`PKT_TCP_HDR
(
pkt
);

70 
t˝_hÀn
 = 
	`CI_TCP_HDR_LEN
(
t˝
);

72 if–
t˝_hÀn
 < (
ci_t˝_hdr
) )

74 if–
ù_∑yÀn
 < 
t˝_hÀn
 )

77 
ph
.
ù_ßddr_be32
 = 
	`oo_ù_hdr
(
pkt
)->ip_saddr_be32;

78 
ph
.
ù_daddr_be32
 = 
	`oo_ù_hdr
(
pkt
)->ip_daddr_be32;

79 
ph
.
zîo
 = 0;

80 
ph
.
ù_¥Ÿocﬁ
 = 
IPPROTO_TCP
;

81 
ph
.
Àngth_be16
 = 
	`CI_BSWAP_BE16
((
ci_uöt16
Ë
ù_∑yÀn
);

83 
csum
 = 
	`ci_ù_csum_∑πül
(0, &
ph
, (ph));

84 
csum
 = 
	`ci_ù_csum_∑πül
(csum, 
t˝
, 
ù_∑yÀn
);

85 
csum
 = 
	`ci_ù_hdr_csum_föish
(csum);

86  
csum
 == 0;

87 
	}
}

90 
	$ci_∑r£_rx_vœn
(
ci_ù_pkt_fmt
* 
pkt
)

92 
uöt16_t
* 
p_ëhî_ty≥
;

94 
	`ci_as£π_√quÆ
((
ci_uöt8
Ë
pkt
->
pkt_°¨t_off
, 0xff);

95 
	`ci_as£π_equÆ
(
pkt
->
pkt_ëh_∑ylﬂd_off
, 0xff);

97 
p_ëhî_ty≥
 = &(
	`oo_ëhî_hdr
(
pkt
)->
ëhî_ty≥
);

98 if–*
p_ëhî_ty≥
 !
CI_ETHERTYPE_8021Q
 ) {

99 
pkt
->
pkt_ëh_∑ylﬂd_off
 =Ökt->
pkt_°¨t_off
 + 
ETH_HLEN
;

100 
pkt
->
vœn
 = 0;

103 
pkt
->
pkt_ëh_∑ylﬂd_off
 =Ökt->
pkt_°¨t_off
 + 
ETH_HLEN
 + 
ETH_VLAN_HLEN
;

104 
pkt
->
vœn
 = 
	`CI_BSWAP_BE16
(
p_ëhî_ty≥
[1]) & 0xfff;

106 
	}
}

109 
	$h™dÀ_rx_pkt
(
ci_√tif
* 
√tif
, 
ci_√tif_pﬁl_°©e
* 
ps
,

110 
ci_ù_pkt_fmt
* 
pkt
)

117 
nŸ_Á°
, 
ù_∑yÀn
, 
ù_tŸ_Àn
;

118 
ci_ù4_hdr
 *
ù
;

120 
	`ci_as£π_√quÆ
(
pkt
->
pkt_ëh_∑ylﬂd_off
, 0xff);

122 
ù
 = 
	`oo_ù_hdr
(
pkt
);

123 
	`LOG_NR
(
	`log
(
LPF
 "RX id=%dÉthî_ty≥=0x%04x ip_¥Ÿo=0x%x", 
	`OO_PKT_FMT
(
pkt
),

124 (Ë
	`CI_BSWAP_BE16
(
	`oo_ëhî_ty≥_gë
(
pkt
)),

125 (Ë
ù
->
ù_¥Ÿocﬁ
));

126 
	`LOG_AR
(
	`ci_™Æy£_pkt
(
	`PKT_START
(
pkt
),Ökt->
∑y_Àn
));

128 #i‡
CI_CFG_RANDOM_DROP
 && !
	`deföed
(
__KERNEL__
)

129 if–
	`CI_UNLIKELY
(
	`ønd
(Ë< 
	`NI_OPTS
(
√tif
).
rx_dr›_øã
ËË
dr›
;

134 if(
	`CI_LIKELY
–1 || 
	`oo_ëhî_ty≥_gë
(
pkt
Ë=
CI_ETHERTYPE_IP
 )) {

135 
	`CI_IPV4_STATS_INC_IN_RECVS
–
√tif
 );

138 
ù_tŸ_Àn
 = 
	`CI_BSWAP_BE16
(
ù
->
ù_tŸ_Àn_be16
);

140 
	`LOG_DR
(
	`ci_hex_dump
(
ci_log_‚
, 
	`PKT_START
(
pkt
),

141 
	`ù_pkt_dump_Àn
(
ù_tŸ_Àn
), 0));

143 if–
	`oo_t˝dump_check
(
√tif
, 
pkt
,Ökt->
ötf_i
) )

144 
	`oo_t˝dump_dump_pkt
(
√tif
, 
pkt
);

148 
nŸ_Á°
 = ((
ù
->
ù_ihl_vîsi⁄
-
	`CI_IP4_IHL_VERSION
((*ip))) |

149 (
ù_tŸ_Àn
 > 
pkt
->
∑y_Àn
 - 
	`oo_ëhî_hdr_size
(pkt)));

161 if–
	`CI_LIKELY
(
nŸ_Á°
 == 0) ) {

162 * 
∑ylﬂd
 = (*Ë
ù
 + (
ci_ù4_hdr
);

163 
ci_√tif_°©e_nic_t
* 
n¢
 = &
√tif
->
°©e
->
nic
[
pkt
->
ötf_i
];

164 
time•ec
 
°amp
;

166 
ù_∑yÀn
 = (Ë
ù_tŸ_Àn
 - (
ci_ù4_hdr
);

171 if–
n¢
->
oo_vi_Êags
 & 
OO_VI_FLAGS_RX_HW_TS_EN
 ) {

172 
sync_Êags
;

173 
rc
 = 
ef_vi_ª˚ive_gë_time°amp_wôh_sync_Êags


174 (&
√tif
->
nic_hw
[
pkt
->
ötf_i
].
vi
,

175 
	`PKT_START
(
pkt
Ë- 
n¢
->
rx_¥efix_Àn
, &
°amp
, &
sync_Êags
);

176 if–
rc
 == 0 ) {

177 
tsf
 = (
	`NI_OPTS
(
√tif
).
time°ampög_ªp‹tög
 &

178 
CITP_TIMESTAMPING_RECORDING_FLAG_CHECK_SYNC
) ?

179 
EF_VI_SYNC_FLAG_CLOCK_IN_SYNC
 :

180 
EF_VI_SYNC_FLAG_CLOCK_SET
;

181 
°amp
.
tv_n£c
 =

182 (
°amp
.
tv_n£c
 & ~
CI_IP_PKT_HW_STAMP_FLAG_IN_SYNC
) |

183 ((
sync_Êags
 & 
tsf
Ë? 
CI_IP_PKT_HW_STAMP_FLAG_IN_SYNC
 : 0);

184 
n¢
->
œ°_rx_time°amp
.
tv_£c
 = 
°amp
.tv_sec;

185 
n¢
->
œ°_rx_time°amp
.
tv_n£c
 = 
°amp
.tv_nsec;

186 
n¢
->
œ°_sync_Êags
 = 
sync_Êags
;

188 
	`LOG_NR
(
	`log
(
LPF
 "RX id=%dÅimestamp: %lu.%09lu sync %d",

189 
	`OO_PKT_FMT
(
pkt
), 
°amp
.
tv_£c
, sèmp.
tv_n£c
, 
sync_Êags
));

191 
	`LOG_NR
(
	`log
(
LPF
 "RX id=%d missögÅime°amp", 
	`OO_PKT_FMT
(
pkt
)));

192 
°amp
.
tv_£c
 = 0;

196 
°amp
.
tv_£c
 = 0;

202 if–
ù
->
ù_¥Ÿocﬁ
 =
IPPROTO_TCP
 ) {

203 
pkt
->
pf
.
t˝_rx
.
rx_hw_°amp
.
tv_£c
 = 
°amp
.tv_sec;

204 
pkt
->
pf
.
t˝_rx
.
rx_hw_°amp
.
tv_n£c
 = 
°amp
.tv_nsec;

205 
	`ci_t˝_h™dÀ_rx
(
√tif
, 
ps
, 
pkt
, (
ci_t˝_hdr
*Ë
∑ylﬂd
, 
ù_∑yÀn
);

206 
	`CI_IPV4_STATS_INC_IN_DELIVERS
–
√tif
 );

209 #i‡
CI_CFG_UDP


210 if(
	`CI_LIKELY
–
ù
->
ù_¥Ÿocﬁ
 =
IPPROTO_UDP
 )) {

211 
pkt
->
pf
.
udp
.
rx_hw_°amp
.
tv_£c
 = 
°amp
.tv_sec;

212 
pkt
->
pf
.
udp
.
rx_hw_°amp
.
tv_n£c
 = 
°amp
.tv_nsec;

213 
	`ci_udp_h™dÀ_rx
(
√tif
, 
pkt
, (
ci_udp_hdr
*Ë
∑ylﬂd
, 
ù_∑yÀn
);

214 
	`CI_IPV4_STATS_INC_IN_DELIVERS
–
√tif
 );

219 
	`LOG_U
(
	`log
(
LPF
 "IGNORE IPÖrŸocﬁ=%d", (Ë
ù
->
ù_¥Ÿocﬁ
));

224 
	`LOG_U
(
	`log
(
LPF
 "[%d] IP HARD "

226 
PKT_DBG_FMT
,

227 
√tif
->
°©e
->
°ack_id
,

228 (Ë
ù
->
ù_ihl_vîsi⁄
, (Ë
	`CI_IP4_IHL
(ip),

229 (Ë
ù
->
ù_‰ag_off_be16
,

230 
ù_tŸ_Àn
, 
pkt
->
∑y_Àn
, 
	`PKT_DBG_ARGS
(pkt)));

231 
	`LOG_DU
(
	`ci_hex_dump
(
ci_log_‚
, 
	`PKT_START
(
pkt
), 64, 0));

232 
	`ci_√tif_pkt_ªÀa£_rx_1ªf
(
√tif
, 
pkt
);

236 
	`LOG_U
(
	`log
(
LPF
 "UNEXPECTEDÉthî_ty≥=%04x"
PKT_DBG_FMT
,

237 (Ë
	`CI_BSWAP_BE16
(
	`oo_ëhî_ty≥_gë
(
pkt
)),

238 
	`PKT_DBG_ARGS
(
pkt
));

239 
	`ci_hex_dump
(
ci_log_‚
, 
	`PKT_START
(
pkt
), 64, 0));

240 
	`ci_√tif_pkt_ªÀa£_rx_1ªf
(
√tif
, 
pkt
);

243 #i‡
CI_CFG_RANDOM_DROP
 && !
	`deföed
(
__ci_drivî__
)

244 
dr›
:

245 
	`LOG_NR
(
	`log
(
LPF
 "DROP"));

246 
	`LOG_DR
(
	`ci_hex_dump
(
ci_log_‚
, 
pkt
, 40, 0));

247 
	`ci_√tif_pkt_ªÀa£_rx_1ªf
(
√tif
, 
pkt
);

250 
	}
}

260 
	$h™dÀ_rx_sˇâî_œ°_‰ag
(
ci_√tif
* 
ni
, 
oo_rx_°©e
* 
s
,

261 
ci_ù_pkt_fmt
* 
pkt
)

263 
oo_pkt_p
 
√xt_p
;

266 
	`ci_as£π_gt
(
pkt
->
buf_Àn
, 0);

267 
	`ci_as£π
(
	`OO_PP_IS_NULL
(
pkt
->
‰ag_√xt
));

269 
pkt
->
n_buf„rs
 = 1;

271 
√xt_p
 = 
s
->
‰ag_pkt
->
‰ag_√xt
;

272 
s
->
‰ag_pkt
->
‰ag_√xt
 = 
	`OO_PKT_P
(
pkt
);

273 
s
->
‰ag_pkt
->
n_buf„rs
 = 
pkt
->n_buffers + 1;

274 if–
	`OO_PP_IS_NULL
(
√xt_p
) )

276 
pkt
 = 
s
->
‰ag_pkt
;

277 
s
->
‰ag_pkt
 = 
	`PKT
(
ni
, 
√xt_p
);

279 
s
->
rx_pkt
 = s->
‰ag_pkt
;

280 
s
->
rx_pkt
->
∑y_Àn
 = s->
‰ag_byãs
;

281 
s
->
‰ag_pkt
 = 
NULL
;

282 
	`ASSERT_VALID_PKT
(
ni
, 
s
->
rx_pkt
);

283 
	}
}

291 
	$h™dÀ_rx_sˇâî
(
ci_√tif
* 
ni
, 
oo_rx_°©e
* 
s
,

292 
ci_ù_pkt_fmt
* 
pkt
, 
‰ame_byãs
,

293 
Êags
)

295 
s
->
rx_pkt
 = 
NULL
;

297 if–
Êags
 & 
EF_EVENT_FLAG_SOP
 ) {

299 
	`ci_as£π
(
s
->
‰ag_pkt
 =
NULL
);

300 
	`ci_as£π_À
(
‰ame_byãs
,

301 (Ë(
CI_CFG_PKT_BUF_SIZE
 -

302 
	`CI_MEMBER_OFFSET
(
ci_ù_pkt_fmt
, 
dma_°¨t
)));

303 
s
->
‰ag_pkt
 = 
pkt
;

304 
pkt
->
buf_Àn
 = 
s
->
‰ag_byãs
 = 
‰ame_byãs
;

305 
	`oo_offbuf_öô
(&
pkt
->
buf
, 
	`PKT_START
’kt), 
s
->
‰ag_byãs
);

308 
	`ci_as£π
(
s
->
‰ag_pkt
 !
NULL
);

309 
	`ci_as£π_gt
(
s
->
‰ag_byãs
, 0);

310 
	`ci_as£π_gt
(
‰ame_byãs
, 
s
->
‰ag_byãs
);

311 
pkt
->
buf_Àn
 = 
‰ame_byãs
 - 
s
->
‰ag_byãs
;

312 
	`oo_offbuf_öô
(&
pkt
->
buf
,Ökt->
dma_°¨t
,Ökt->
buf_Àn
);

313 
s
->
‰ag_byãs
 = 
‰ame_byãs
;

314 
	`CI_DEBUG
(
pkt
->
∑y_Àn
 = -1);

315 if–
Êags
 & 
EF_EVENT_FLAG_CONT
 ) {

317 
pkt
->
‰ag_√xt
 = 
	`OO_PKT_P
(
s
->
‰ag_pkt
);

318 
s
->
‰ag_pkt
 = 
pkt
;

322 
	`h™dÀ_rx_sˇâî_œ°_‰ag
(
ni
, 
s
, 
pkt
);

325 
	}
}

335 
	$h™dÀ_rx_sˇâî_mîge
(
ci_√tif
* 
ni
, 
oo_rx_°©e
* 
s
,

336 
ci_ù_pkt_fmt
* 
pkt
, 
¥efix_byãs
,

337 
pkt_byãs
, 
Êags
)

339 
fuŒ_buf„r
 = 
CI_CFG_PKT_BUF_SIZE
 -

340 
	`CI_MEMBER_OFFSET
(
ci_ù_pkt_fmt
, 
dma_°¨t
);

342 
s
->
rx_pkt
 = 
NULL
;

343 if–
Êags
 & 
EF_EVENT_FLAG_SOP
 ) {

345 
	`ci_as£π
(
s
->
‰ag_pkt
 =
NULL
);

346 
	`ci_as£π_gt
(
pkt_byãs
, 
fuŒ_buf„r
 - 
¥efix_byãs
);

349 
pkt
->
buf_Àn
 = 
fuŒ_buf„r
 - 
¥efix_byãs
;

350 
	`oo_offbuf_öô
(&
pkt
->
buf
, 
	`PKT_START
’kt),Ökt->
buf_Àn
);

351 
s
->
‰ag_pkt
 = 
pkt
;

352 
s
->
‰ag_byãs
 = 
pkt_byãs
;

355 
	`ci_as£π
(
s
->
‰ag_pkt
 !
NULL
);

356 
	`ci_as£π_gt
(
pkt_byãs
, 
fuŒ_buf„r
 - 
¥efix_byãs
);

358 if–
Êags
 & 
EF_EVENT_FLAG_CONT
 ) {

361 
pkt
->
buf_Àn
 = 
fuŒ_buf„r
;

362 
	`oo_offbuf_öô
(&
pkt
->
buf
,Ökt->
dma_°¨t
,Ökt->
buf_Àn
);

363 
	`CI_DEBUG
(
pkt
->
∑y_Àn
 = -1);

365 
pkt
->
‰ag_√xt
 = 
	`OO_PKT_P
(
s
->
‰ag_pkt
);

366 
s
->
‰ag_pkt
 = 
pkt
;

373 
pkt
->
buf_Àn
 = (
s
->
‰ag_byãs
 + 
¥efix_byãs
Ë% 
fuŒ_buf„r
;

374 
	`oo_offbuf_öô
(&
pkt
->
buf
,Ökt->
dma_°¨t
,Ökt->
buf_Àn
);

375 
	`CI_DEBUG
(
pkt
->
∑y_Àn
 = -1);

377 
	`h™dÀ_rx_sˇâî_œ°_‰ag
(
ni
, 
s
, 
pkt
);

380 
	}
}

383 
	$h™dÀ_rx_csum_bad
(
ci_√tif
* 
ni
, 
ci_√tif_pﬁl_°©e
* 
ps
,

384 
ci_ù_pkt_fmt
* 
pkt
, 
‰ame_Àn
)

386 
ci_ù4_hdr
 *
ù
;

387 
ù_∑yÀn
;

388 
ù_Àn
;

390 
	`ci_∑r£_rx_vœn
(
pkt
);

395 
	`ci_as£π_equÆ
(
	`oo_ëhî_ty≥_gë
(
pkt
), 
CI_ETHERTYPE_IP
);

397 
pkt
->
∑y_Àn
 = 
‰ame_Àn
;

398 
	`oo_offbuf_öô
(&
pkt
->
buf
, 
	`PKT_START
’kt),Ökt->
∑y_Àn
);

399 if–
pkt
->
∑y_Àn
 <=

400 (
ci_t˝_hdr
Ë+ (
ci_ù4_hdr
Ë+ 
	`oo_ëhî_hdr_size
(
pkt
) ) {

401 
	`CI_IPV4_STATS_INC_IN_HDR_ERRS
(
ni
);

402 
	`LOG_U
(
	`log
(
FN_FMT
 "BAD frame_len=%d",

403 
	`FN_PRI_ARGS
(
ni
), 
pkt
->
∑y_Àn
));

404 
dr›
;

407 
ù
 = 
	`oo_ù_hdr
(
pkt
);

408 
ù_Àn
 = 
	`CI_BSWAP_BE16
(
ù
->
ù_tŸ_Àn_be16
);

409 
ù_∑yÀn
 = 
ù_Àn
 - (
ci_ù4_hdr
);

410 if–
pkt
->
∑y_Àn
 < 
	`oo_ëhî_hdr_size
’ktË+ 
ù_Àn
 ||

411 
ù_∑yÀn
 < (
ci_t˝_hdr
) ) {

412 
	`CI_IPV4_STATS_INC_IN_HDR_ERRS
(
ni
);

413 
	`LOG_U
(
	`log
(
FN_FMT
 "BAD ip_len=%d frame_len=%d",

414 
	`FN_PRI_ARGS
(
ni
), 
ù_Àn
, 
pkt
->
∑y_Àn
));

415 
dr›
;

418 if–! 
	`ci_ù_csum_c‹ª˘
(
ù
, 
pkt
->
∑y_Àn
 - 
	`oo_ëhî_hdr_size
(pkt)) ) {

419 
	`CI_IPV4_STATS_INC_IN_HDR_ERRS
(
ni
);

420 
	`LOG_U
(
	`log
(
FN_FMT
 "IP BAD CHECKSUM", 
	`FN_PRI_ARGS
(
ni
)));

421 
dr›
;

425 if–
ù
->
ù_¥Ÿocﬁ
 =
IPPROTO_TCP
 ) {

426 if–
	`ci_t˝_csum_c‹ª˘
(
pkt
, 
ù_∑yÀn
) ) {

427 
	`h™dÀ_rx_pkt
(
ni
, 
ps
, 
pkt
);

431 
	`LOG_U
(
	`log
(
FN_FMT
 "BAD TCP CHECKSUM %04x "
PKT_DBG_FMT
, 
	`FN_PRI_ARGS
(
ni
),

432 (Ë
	`PKT_TCP_HDR
(
pkt
)->
t˝_check_be16
,

433 
	`PKT_DBG_ARGS
(
pkt
)));

434 
dr›
;

437 #i‡
CI_CFG_UDP


438 if–
ù
->
ù_¥Ÿocﬁ
 =
IPPROTO_UDP
 ) {

439 
ci_udp_hdr
* 
udp
 = 
	`PKT_UDP_HDR
(
pkt
);

440 
pkt
->
pf
.
udp
.
∑y_Àn
 = 
	`CI_BSWAP_BE16
(udp->
udp_Àn_be16
);

441 if–
	`ci_udp_csum_c‹ª˘
(
pkt
, 
udp
) ) {

442 
	`h™dÀ_rx_pkt
(
ni
, 
ps
, 
pkt
);

446 
	`CI_UDP_STATS_INC_IN_ERRS
(
ni
);

447 
	`LOG_U
(
	`log
(
FN_FMT
 "BAD UDP CHECKSUM %04x", 
	`FN_PRI_ARGS
(
ni
),

448 (Ë
udp
->
udp_check_be16
));

449 
dr›
;

454 
dr›
:

455 
	`LOG_DU
(
	`ci_hex_dump
(
ci_log_‚
, 
	`PKT_START
(
pkt
), 
‰ame_Àn
, 0));

456 
	`LOG_NR
(
	`log
(
LPF
 "DROP"));

457 
	`LOG_DR
(
	`ci_hex_dump
(
ci_log_‚
, 
pkt
, 40, 0));

459 
	}
}

462 
	$h™dÀ_rx_no_desc_åunc
(
ci_√tif
* 
ni
,

463 
ci_√tif_pﬁl_°©e
* 
ps
,

464 
ötf_i
,

465 
oo_rx_°©e
* 
s
, 
ef_evít
 
ev
)

467 
	`LOG_U
(
	`log
(
LPF
 "[%d] i¡‡%d RX_NO_DESC_TRUNC "
EF_EVENT_FMT
,

468 
	`NI_ID
(
ni
), 
ötf_i
, 
	`EF_EVENT_PRI_ARG
(
ev
)));

470 if–
s
->
rx_pkt
 !
NULL
 ) {

471 
	`ci_∑r£_rx_vœn
(
s
->
rx_pkt
);

472 
	`h™dÀ_rx_pkt
(
ni
, 
ps
, 
s
->
rx_pkt
);

473 
s
->
rx_pkt
 = 
NULL
;

475 
	`ci_as£π
(
s
->
‰ag_pkt
 !
NULL
);

476 if–
s
->
‰ag_pkt
 !
NULL
 ) {

477 
	`ci_√tif_pkt_ªÀa£_rx_1ªf
(
ni
, 
s
->
‰ag_pkt
);

478 
s
->
‰ag_pkt
 = 
NULL
;

480 
	}
}

483 
	$h™dÀ_rx_disˇrd
(
ci_√tif
* 
ni
, 
ci_√tif_pﬁl_°©e
* 
ps
,

484 
ötf_i
, 
oo_rx_°©e
* 
s
, 
ef_evít
 
ev
)

486 
disˇrd_ty≥
 = 
	`EF_EVENT_RX_DISCARD_TYPE
(
ev
), 
is_‰ag
;

487 
ci_ù_pkt_fmt
* 
pkt
;

488 
oo_pkt_p
 
µ
;

489 
h™dÀd
 = 0;

490 
‰ame_Àn
;

492 
	`LOG_U
(
	`log
(
LPF
 "[%d] i¡‡%d RX_DISCARD %d "
EF_EVENT_FMT
,

493 
	`NI_ID
(
ni
), 
ötf_i
,

494 (Ë
disˇrd_ty≥
, 
	`EF_EVENT_PRI_ARG
(
ev
)));

496 if–
s
->
rx_pkt
 !
NULL
 ) {

497 
	`ci_∑r£_rx_vœn
(
s
->
rx_pkt
);

498 
	`h™dÀ_rx_pkt
(
ni
, 
ps
, 
s
->
rx_pkt
);

499 
s
->
rx_pkt
 = 
NULL
;

508 if–(
is_‰ag
 = (
s
->
‰ag_pkt
 !
NULL
)) ) {

509 
	`ci_√tif_pkt_ªÀa£_rx_1ªf
(
ni
, 
s
->
‰ag_pkt
);

510 
s
->
‰ag_pkt
 = 
NULL
;

513 
	`OO_PP_INIT
(
ni
, 
µ
, 
	`EF_EVENT_RX_DISCARD_RQ_ID
(
ev
));

514 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

516 
‰ame_Àn
 = 
	`EF_EVENT_RX_DISCARD_BYTES
(
ev
) -

517 
ni
->
nic_hw
[
ötf_i
].
vi
.
rx_¥efix_Àn
;

519 if–
	`EF_EVENT_RX_DISCARD_TYPE
(
ev
Ë=
EF_EVENT_RX_DISCARD_CSUM_BAD
 &&

520 !
is_‰ag
 )

521 
h™dÀd
 = 
	`h™dÀ_rx_csum_bad
(
ni
, 
ps
, 
pkt
, 
‰ame_Àn
);

523  
disˇrd_ty≥
 ) {

524 
EF_EVENT_RX_DISCARD_CSUM_BAD
:

525 
	`CITP_STATS_NETIF_INC
(
ni
, 
rx_disˇrd_csum_bad
);

527 
EF_EVENT_RX_DISCARD_MCAST_MISMATCH
:

528 
	`CITP_STATS_NETIF_INC
(
ni
, 
rx_disˇrd_mˇ°_mism©ch
);

530 
EF_EVENT_RX_DISCARD_CRC_BAD
:

531 
	`CITP_STATS_NETIF_INC
(
ni
, 
rx_disˇrd_¸c_bad
);

533 
EF_EVENT_RX_DISCARD_TRUNC
:

534 
	`CITP_STATS_NETIF_INC
(
ni
, 
rx_disˇrd_åunc
);

536 
EF_EVENT_RX_DISCARD_RIGHTS
:

537 
	`CITP_STATS_NETIF_INC
(
ni
, 
rx_disˇrd_rights
);

539 
EF_EVENT_RX_DISCARD_OTHER
:

540 
	`CITP_STATS_NETIF_INC
(
ni
, 
rx_disˇrd_Ÿhî
);

544 if–!
h™dÀd
 ) {

546 if–(
disˇrd_ty≥
 =
EF_EVENT_RX_DISCARD_CSUM_BAD
 ||

547 
disˇrd_ty≥
 =
EF_EVENT_RX_DISCARD_MCAST_MISMATCH
 ||

548 
disˇrd_ty≥
 =
EF_EVENT_RX_DISCARD_CRC_BAD
 ||

549 
disˇrd_ty≥
 =
EF_EVENT_RX_DISCARD_TRUNC
 ||

550 
disˇrd_ty≥
 =
EF_EVENT_RX_DISCARD_OTHER
) &&

551 
	`oo_t˝dump_check
(
ni
, 
pkt
,Ökt->
ötf_i
) ) {

552 
pkt
->
∑y_Àn
 = 
‰ame_Àn
;

553 
	`oo_t˝dump_dump_pkt
(
ni
, 
pkt
);

556 
	`ci_√tif_pkt_ªÀa£_rx_1ªf
(
ni
, 
pkt
);

558 
	}
}

561 
	$ci_sock_put_⁄_ª≠_li°
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
)

563 
	`ci_ni_dŒi°_ªmove
(
ni
, &
s
->
ª≠_lök
);

564 
	`ci_ni_dŒi°_put
(
ni
, &ni->
°©e
->
ª≠_li°
, &
s
->
ª≠_lök
);

565 
s
->
b
.
sb_Êags
 &~
CI_SB_FLAG_RX_DELIVERED
;

566 
	}
}

569 
	$¥o˚ss_po°_pﬁl_li°
(
ci_√tif
* 
ni
)

571 
ci_ni_dŒi°_lök
* 
 k
;

572 
i
, 
√ed_wake
 = 0;

573 
côp_waôabÀ
* 
sb
;

574 
li°s_√ed_wake
 = 0;

576 (Ë
i
;

578  
i
 = 0, 
 k
 = 
	`ci_ni_dŒi°_°¨t
(
ni
, &ni->
°©e
->
po°_pﬁl_li°
);

579 
 k
 !
	`ci_ni_dŒi°_íd
(
ni
, &ni->
°©e
->
po°_pﬁl_li°
); ) {

581 #ifde‡
__KERNEL__


582 if(
	`CI_UNLIKELY
–
i
++ > 
ni
->
ï_tbl_n
 )) {

583 
	`ci_√tif_îr‹_dëe˘ed
(
ni
, 
CI_NETIF_ERROR_POST_POLL_LIST
, 
__FUNCTION__
);

588 
sb
 = 
	`CI_CONTAINER
(
côp_waôabÀ
, 
po°_pﬁl_lök
, 
 k
);

589 
 k
 = (
ci_ni_dŒi°_lök
*Ë
	`CI_NETIF_PTR
(
ni
,Ünk->
√xt
);

591 if–
sb
->
sb_Êags
 & 
CI_SB_FLAG_TCP_POST_POLL
 )

592 
	`ci_t˝_rx_po°_pﬁl
(
ni
, 
	`CI_CONTAINER
(
ci_t˝_°©e
, 
s
.
b
, 
sb
));

593 if–
sb
->
sb_Êags
 & 
CI_SB_FLAG_RX_DELIVERED
 )

594 
	`ci_sock_put_⁄_ª≠_li°
(
ni
, 
	`CI_CONTAINER
(
ci_sock_cmn
, 
b
, 
sb
));

596 if–
sb
->
sb_Êags
 ) {

597 if–
sb
->
sb_Êags
 & 
CI_SB_FLAG_WAKE_RX
 )

598 ++
sb
->
¶ìp_£q
.
rw
.
rx
;

599 if–
sb
->
sb_Êags
 & 
CI_SB_FLAG_WAKE_TX
 )

600 ++
sb
->
¶ìp_£q
.
rw
.
tx
;

601 
	`ci_mb
();

603 
li°s_√ed_wake
 |1 << 
sb
->
ªady_li°_id
;

604 if–! (
sb
->
sb_Êags
 & sb->
wake_ªque°
) ) {

605 
sb
->
sb_Êags
 = 0;

608 #ifde‡
__KERNEL__


611 if–!((
ni
->
Êags
 & 
CI_NETIF_FLAG_IN_DL_CONTEXT
) &&

612 
	`oo_avoid_wakeup_‰om_dl
()) ) {

613 
	`côp_waôabÀ_wakeup
(
ni
, 
sb
);

627 
√ed_wake
 = 1;

632 
	`ci_ni_dŒi°_ªmove_ß„
(
ni
, &
sb
->
po°_pﬁl_lök
);

635 
	`CHECK_NI
(
ni
);

637 #i‚de‡
__KERNEL__


642 if–
√ed_wake
 == 0 ) {

643  
i
 = 1; i < 
CI_CFG_N_READY_LISTS
; i++ ) {

644 if–(
li°s_√ed_wake
 & (1 << 
i
)) &&

645 (
ni
->
°©e
->
ªady_li°_Êags
[
i
] & 
CI_NI_READY_LIST_FLAG_WAKE
) ) {

646 
√ed_wake
 = 1;

653 if–
√ed_wake
 )

654 
	`ef_ïlock_hﬁdî_£t_Êag
(&
ni
->
°©e
->
lock
, 
CI_EPLOCK_NETIF_NEED_WAKE
);

657 
	`ci_as£π_equÆ
(
li°s_√ed_wake
 & ~((1 << (
CI_CFG_N_READY_LISTS
 + 1))-1), 0);

659 #ifde‡
__KERNEL__


664  
i
 = 1; i < 
CI_CFG_N_READY_LISTS
; i++ )

665 if–(
li°s_√ed_wake
 & (1 << 
i
)) &&

666 (
ni
->
°©e
->
ªady_li°_Êags
[
i
] & 
CI_NI_READY_LIST_FLAG_WAKE
) )

667 
	`eÁb_t˝_hñ≥r_ªady_li°_wakeup
(
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
), 
i
);

669 
	}
}

672 #i‡
CI_CFG_UDP


674 #ifde‡
_WIN32


675 
	#UDP_CAN_FREE
(
us
Ë((us)->
tx_cou¡
 == 0 && \

676 
	`ci_ù_queue_is_em±y
(&(
us
)->
async_tx_q
))

	)

678 
	#UDP_CAN_FREE
(
us
Ë((us)->
tx_cou¡
 =0)

	)

681 
	#CI_NETIF_TX_VI
(
ni
, 
nic_i
, 
œbñ
Ë(&“i)->
nic_hw
[nic_i].
vi
)

	)

682 
	#CI_NETIF_RX_VI
(
ni
, 
nic_i
, 
œbñ
Ë(&“i)->
nic_hw
[nic_i].
vi
)

	)

685 
	$ci_√tif_tx_pkt_com∂ëe_udp
(
ci_√tif
* 
√tif
,

686 
ci_√tif_pﬁl_°©e
* 
ps
,

687 
ci_ù_pkt_fmt
* 
pkt
)

689 
ci_udp_°©e
* 
us
;

690 
oo_pkt_p
 
‰ag_√xt
;

691 
n_buf„rs
 = 
pkt
->n_buffers;

693 
	`ci_as£π
(
	`oo_ù_hdr
(
pkt
)->
ù_¥Ÿocﬁ
 =
IPPROTO_UDP
);

695 
us
 = 
	`SP_TO_UDP
(
√tif
, 
pkt
->
pf
.
udp
.
tx_sock_id
);

697 
	`ci_udp_dec_tx_cou¡
(
us
, 
pkt
);

699 if–
	`ci_udp_tx_advîti£_•a˚
(
us
) ) {

700 if–! (
us
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
) ) {

703 
	`ci_udp_wake_possibly_nŸ_ö_pﬁl
(
√tif
, 
us
, 
CI_SB_FLAG_WAKE_TX
);

704 
	`ci_√tif_put_⁄_po°_pﬁl
(
√tif
, &
us
->
s
.
b
);

706 if–
	`UDP_CAN_FREE
(
us
) ) {

707 
	`ci_ni_dŒi°_ªmove_ß„
(
√tif
, &
us
->
s
.
b
.
po°_pﬁl_lök
);

708 
	`ci_udp_°©e_‰ì
(
√tif
, 
us
);

715 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_TIMESTAMPED
 &&

716 
	`ci_udp_time°amp_q_íqueue
(
√tif
, 
us
, 
pkt
) == 0 )

721 
‰ag_√xt
 = 
pkt
->frag_next;

723 if–! 
	`ci_√tif_pkt_ªÀa£_ö_pﬁl
(
√tif
, 
pkt
, 
ps
) ) {

730 if–
	`OO_PP_IS_NULL
(
‰ag_√xt
) )

732 
pkt
 = 
	`PKT_CHK
(
√tif
, 
‰ag_√xt
);

734 if–
n_buf„rs
 == 1 )

735 
n_buf„rs
 = 
pkt
->n_buffers;

737 
n_buf„rs
--;

739 
	}
}

744 
ci_ölöe
 
	$__ci_√tif_tx_pkt_com∂ëe
(
ci_√tif
* 
ni
,

745 
ci_√tif_pﬁl_°©e
* 
ps
,

746 
ci_ù_pkt_fmt
* 
pkt
, 
ef_evít
* 
ev
)

748 
ci_√tif_°©e_nic_t
* 
nic
 = &
ni
->
°©e
->nic[
pkt
->
ötf_i
];

750 
	`ci_as£π
(
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_PENDING
);

751 
nic
->
tx_byãs_ªmoved
 +
	`TX_PKT_LEN
(
pkt
);

752 
	`ci_as£π
((Ë(
nic
->
tx_byãs_added
 -Çic->
tx_byãs_ªmoved
) >=0);

753 #i‡
CI_CFG_PIO


754 if–
pkt
->
pio_addr
 >= 0 ) {

755 
	`ci_pio_buddy_‰ì
(
ni
, &
nic
->
pio_buddy
, 
pkt
->
pio_addr
,Ökt->
pio_‹dî
);

756 
pkt
->
pio_addr
 = -1;

759 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_TIMESTAMPED
 ) {

760 if–
ev
 !
NULL
 && 
	`EF_EVENT_TYPE
(*evË=
EF_EVENT_TYPE_TX_WITH_TIMESTAMP
 ) {

761 
›t_tsf
 = ((
	`NI_OPTS
(
ni
).
time°ampög_ªp‹tög
) &

762 
CITP_TIMESTAMPING_RECORDING_FLAG_CHECK_SYNC
) ?

763 
EF_VI_SYNC_FLAG_CLOCK_IN_SYNC
 :

764 
EF_VI_SYNC_FLAG_CLOCK_SET
;

765 
pkt_tsf
 = 
	`EF_EVENT_TX_WITH_TIMESTAMP_SYNC_FLAGS
(*
ev
);

767 
pkt
->
tx_hw_°amp
.
tv_£c
 = 
	`EF_EVENT_TX_WITH_TIMESTAMP_SEC
(*
ev
);

768 
pkt
->
tx_hw_°amp
.
tv_n£c
 =

769 (
	`EF_EVENT_TX_WITH_TIMESTAMP_NSEC
(*
ev
) &

770 (~
CI_IP_PKT_HW_STAMP_FLAG_IN_SYNC
)) |

771 ((
pkt_tsf
 & 
›t_tsf
) ?

772 
CI_IP_PKT_HW_STAMP_FLAG_IN_SYNC
 : 0);

776 if–
	`CI_NETIF_TX_VI
(
ni
, 
pkt
->
ötf_i
, 
ev
->
tx_time°amp
.
q_id
)->
vi_Êags
 &

777 
EF_VI_TX_TIMESTAMPS
 ) {

778 
	`ci_log
("ERROR: TXÅimestampÑequested, butÇon-timestamped "

781 
pkt
->
Êags
 &~
CI_PKT_FLAG_TX_TIMESTAMPED
;

787 
pkt
->
Êags
 &=~ 
CI_PKT_FLAG_TX_PENDING
;

788 #i‡
CI_CFG_UDP


789 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_UDP
 )

790 
	`ci_√tif_tx_pkt_com∂ëe_udp
(
ni
, 
ps
, 
pkt
);

793 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pkt
);

795 
	}
}

798 
	$ci_√tif_tx_pkt_com∂ëe
(
ci_√tif
* 
ni
, 
ci_√tif_pﬁl_°©e
* 
ps
,

799 
ci_ù_pkt_fmt
* 
pkt
)

801 
	`__ci_√tif_tx_pkt_com∂ëe
(
ni
, 
ps
, 
pkt
, 
NULL
);

802 
	}
}

806 
	$ci_√tif_pﬁl_evq
(
ci_√tif
* 
ni
, 
ci_√tif_pﬁl_°©e
* 
ps
,

807 
ötf_i
)

809 
oo_rx_°©e
 
s
;

810 
ef_vi
* 
evq
 = &
ni
->
nic_hw
[
ötf_i
].
vi
;

811 
tŸÆ_evs
 = 0;

812 
ci_ù_pkt_fmt
* 
pkt
;

813 
ef_evít
 *
ev
 = 
ni
->
evíts
;

814 
i
, 
n_evs
;

815 
oo_pkt_p
 
µ
;

817 
s
.
‰ag_pkt
 = 
NULL
;

818 
s
.
‰ag_byãs
 = 0;

820 if–
	`OO_PP_NOT_NULL
(
ni
->
°©e
->
nic
[
ötf_i
].
rx_‰ags
) ) {

821 
pkt
 = 
	`PKT_CHK
(
ni
,Çi->
°©e
->
nic
[
ötf_i
].
rx_‰ags
);

822 
ni
->
°©e
->
nic
[
ötf_i
].
rx_‰ags
 = 
OO_PP_NULL
;

823 
s
.
‰ag_pkt
 = 
pkt
;

824 
s
.
‰ag_byãs
 = 
pkt
->
∑y_Àn
;

825 
	`CI_DEBUG
(
pkt
->
∑y_Àn
 = -1);

829 
n_evs
 = 
	`ef_evítq_pﬁl
(
evq
, 
ev
, (
ni
->
evíts
) / (ev[0]));

830 if–
n_evs
 == 0 )

833 
s
.
rx_pkt
 = 
NULL
;

834  
i
 = 0; i < 
n_evs
; ++i ) {

836 if–
	`EF_EVENT_TYPE
(
ev
[
i
]Ë=
EF_EVENT_TYPE_RX
 ) {

837 
	`CITP_STATS_NETIF_INC
(
ni
, 
rx_evs
);

838 
	`OO_PP_INIT
(
ni
, 
µ
, 
	`EF_EVENT_RX_RQ_ID
(
ev
[
i
]));

839 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

840 
	`ci_¥e„tch
(
pkt
->
dma_°¨t
);

841 
	`ci_¥e„tch
(
pkt
);

842 
	`ci_as£π_equÆ
(
pkt
->
ötf_i
, intf_i);

843 if–
s
.
rx_pkt
 !
NULL
 ) {

844 
	`ci_∑r£_rx_vœn
(
s
.
rx_pkt
);

845 
	`h™dÀ_rx_pkt
(
ni
, 
ps
, 
s
.
rx_pkt
);

847 if–(
ev
[
i
].
rx
.
Êags
 & (
EF_EVENT_FLAG_SOP
 | 
EF_EVENT_FLAG_CONT
))

848 =
EF_EVENT_FLAG_SOP
 ) {

850 
pkt
->
∑y_Àn
 = 
	`EF_EVENT_RX_BYTES
(
ev
[
i
]Ë- 
evq
->
rx_¥efix_Àn
;

851 
	`oo_offbuf_öô
(&
pkt
->
buf
, 
	`PKT_START
’kt),Ökt->
∑y_Àn
);

852 
s
.
rx_pkt
 = 
pkt
;

855 
	`h™dÀ_rx_sˇâî
(
ni
, &
s
, 
pkt
,

856 
	`EF_EVENT_RX_BYTES
(
ev
[
i
]Ë- 
evq
->
rx_¥efix_Àn
,

857 
ev
[
i
].
rx
.
Êags
);

861 if(
	`CI_LIKELY
–
	`EF_EVENT_TYPE
(
ev
[
i
]Ë=
EF_EVENT_TYPE_TX
 )) {

862 
ef_ªque°_id
 *
ids
 = 
ni
->
tx_evíts
;

863 
n_ids
, 
j
;

864 
ef_vi
* 
vi
 = 
	`CI_NETIF_TX_VI
(
ni
, 
ötf_i
, 
ev
[
i
].
tx
.
q_id
);

865 
	`CITP_STATS_NETIF_INC
(
ni
, 
tx_evs
);

866 
n_ids
 = 
	`ef_vi_å™smô_unbundÀ
(
vi
, &
ev
[
i
], 
ids
);

867 
	`ci_as£π_ge
(
n_ids
, 0);

868 
	`ci_as£π_À
(
n_ids
, (
ni
->
tx_evíts
Ë/ (
ids
[0]));

869  
j
 = 0; j < 
n_ids
; ++j ) {

870 
	`OO_PP_INIT
(
ni
, 
µ
, 
ids
[
j
]);

871 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

872 ++
ni
->
°©e
->
nic
[
ötf_i
].
tx_dmaq_d⁄e_£q
;

873 
	`__ci_√tif_tx_pkt_com∂ëe
(
ni
, 
ps
, 
pkt
, &
ev
[
i
]);

877 if–
	`EF_EVENT_TYPE
(
ev
[
i
]Ë=
EF_EVENT_TYPE_RX_MULTI
 ) {

878 
ef_ªque°_id
 *
ids
 = 
ni
->
rx_evíts
;

879 
n_ids
, 
j
;

880 
uöt16_t
 
Àn
;

881 
ef_vi
* 
vi
 = 
	`CI_NETIF_RX_VI
(
ni
, 
ötf_i
, 
ev
[
i
].
rx
.
q_id
);

882 
	`CITP_STATS_NETIF_INC
(
ni
, 
rx_evs
);

883 
n_ids
 = 
	`ef_vi_ª˚ive_unbundÀ
(
vi
, &
ev
[
i
], 
ids
);

884 
	`ci_as£π_ge
(
n_ids
, 0);

885 
	`ci_as£π_À
(
n_ids
, (
ni
->
rx_evíts
Ë/ (
ids
[0]));

886  
j
 = 0; j < 
n_ids
; ++j ) {

887 
	`OO_PP_INIT
(
ni
, 
µ
, 
ids
[
j
]);

888 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

889 
	`ci_¥e„tch
(
pkt
->
dma_°¨t
);

890 
	`ci_¥e„tch
(
pkt
);

891 
	`ci_as£π_equÆ
(
pkt
->
ötf_i
, intf_i);

892 if–
s
.
rx_pkt
 !
NULL
 ) {

893 
	`ci_∑r£_rx_vœn
(
s
.
rx_pkt
);

894 
	`h™dÀ_rx_pkt
(
ni
, 
ps
, 
s
.
rx_pkt
);

896 
	`ef_vi_ª˚ive_gë_byãs
(
vi
, 
pkt
->
dma_°¨t
, &
Àn
);

897 if–(
ev
[
i
].
rx_mu…i
.
Êags
 & (
EF_EVENT_FLAG_SOP
 | 
EF_EVENT_FLAG_CONT
))

898 =
EF_EVENT_FLAG_SOP
 ) {

900 
pkt
->
∑y_Àn
 = 
Àn
;

901 
	`oo_offbuf_öô
(&
pkt
->
buf
, 
	`PKT_START
’kt),Ökt->
∑y_Àn
);

902 
s
.
rx_pkt
 = 
pkt
;

905 
	`h™dÀ_rx_sˇâî_mîge
(
ni
, &
s
, 
pkt
, 
evq
->
rx_¥efix_Àn
, 
Àn
,

906 
ev
[
i
].
rx_mu…i
.
Êags
);

911 if–
	`EF_EVENT_TYPE
(
ev
[
i
]Ë=
EF_EVENT_TYPE_TX_WITH_TIMESTAMP
 ) {

912 
	`CITP_STATS_NETIF_INC
(
ni
, 
tx_evs
);

913 
	`OO_PP_INIT
(
ni
, 
µ
, 
ev
[
i
].
tx_time°amp
.
rq_id
);

914 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

915 ++
ni
->
°©e
->
nic
[
ötf_i
].
tx_dmaq_d⁄e_£q
;

916 
	`__ci_√tif_tx_pkt_com∂ëe
(
ni
, 
ps
, 
pkt
, &
ev
[
i
]);

919 if–
	`EF_EVENT_TYPE
(
ev
[
i
]Ë=
EF_EVENT_TYPE_RX_NO_DESC_TRUNC
 ) {

920 
	`h™dÀ_rx_no_desc_åunc
(
ni
, 
ps
, 
ötf_i
, &
s
, 
ev
[
i
]);

923 if–
	`EF_EVENT_TYPE
(
ev
[
i
]Ë=
EF_EVENT_TYPE_RX_DISCARD
 ) {

924 
	`h™dÀ_rx_disˇrd
(
ni
, 
ps
, 
ötf_i
, &
s
, 
ev
[
i
]);

927 if–
	`EF_EVENT_TYPE
(
ev
[
i
]Ë=
EF_EVENT_TYPE_TX_ERROR
 ) {

928 
	`LOG_U
(
	`log
(
LPF
 "[%d] i¡‡%d TX_ERROR %d "
EF_EVENT_FMT
,

929 
	`NI_ID
(
ni
), 
ötf_i
,

930 (Ë
	`EF_EVENT_TX_ERROR_TYPE
(
ev
[
i
]),

931 
	`EF_EVENT_PRI_ARG
(
ev
[
i
])));

932 
	`CITP_STATS_NETIF_INC
(
ni
, 
tx_îr‹_evíts
);

935 if–
	`EF_EVENT_TYPE
(
ev
[
i
]Ë=
EF_EVENT_TYPE_OFLOW
 ) {

936 
	`LOG_E
(
	`log
(
LPF
 "***** EVENT QUEUE OVERFLOW *****"));

943 
	`ci_as£π
–
	`EF_EVENT_TYPE
(
ev
[
i
]Ë!
EF_EVENT_TYPE_RX
 );

944 
	`LOG_E
(
	`log
(
LPF
 "***** UNKNOWN EVENT "
EF_EVENT_FMT
" (abstractedÅype:%d)"

946 
	`EF_EVENT_PRI_ARG
(
ev
[
i
]), 
	`EF_EVENT_TYPE
(ev[i])));

950 #i‚de‡
NDEBUG


952 
ef_vi
* 
vi
 = 
	`CI_NETIF_TX_VI
(
ni
, 
ötf_i
, 
ev
[
i
].
tx_time°amp
.
q_id
);

953 
	`ci_as£π_equiv
((
	`ef_vi_å™smô_fûl_Àvñ
(
vi
) == 0 &&

954 
ni
->
°©e
->
nic
[
ötf_i
].
dmaq
.
num
 == 0),

955 (
ni
->
°©e
->
nic
[
ötf_i
].
tx_dmaq_ö£π_£q
 ==

956 
ni
->
°©e
->
nic
[
ötf_i
].
tx_dmaq_d⁄e_£q
));

960 if–
s
.
rx_pkt
 !
NULL
 ) {

961 
	`ci_∑r£_rx_vœn
(
s
.
rx_pkt
);

962 
	`h™dÀ_rx_pkt
(
ni
, 
ps
, 
s
.
rx_pkt
);

965 
tŸÆ_evs
 +
n_evs
;

966 }  
tŸÆ_evs
 < 
	`NI_OPTS
(
ni
).
evs_≥r_pﬁl
 );

968 if–
s
.
‰ag_pkt
 !
NULL
 ) {

969 
s
.
‰ag_pkt
->
∑y_Àn
 = s.
‰ag_byãs
;

970 
ni
->
°©e
->
nic
[
ötf_i
].
rx_‰ags
 = 
	`OO_PKT_P
(
s
.
‰ag_pkt
);

973  
tŸÆ_evs
;

974 
	}
}

977 
	$ci_√tif_tx_¥ogªss
(
ci_√tif
* 
ni
, 
ötf_i
)

979 
ci_√tif_°©e_nic_t
* 
nic
 = &
ni
->
°©e
->nic[
ötf_i
];

980 
ci_t˝_°©e
* 
ts
;

982 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

983 
	`ci_as£π
(
	`ci_ni_dŒi°_nŸ_em±y
(
ni
, &
nic
->
tx_ªady_li°
));

985 if–
nic
->
tx_byãs_added
 -Çic->
tx_byãs_ªmoved
 > 
	`NI_OPTS
(
ni
).
txq_ª°¨t
 )

989 
ts
 = 
	`CI_CONTAINER
(
ci_t˝_°©e
, 
tx_ªady_lök
,

990 
	`ci_ni_dŒi°_hód
(
ni
, &
nic
->
tx_ªady_li°
));

991 
	`LOG_TT
(
	`ci_log
(
FNT_FMT
, 
	`FNT_PRI_ARGS
(
ni
, 
ts
)));

992 
	`ci_t˝_tx_adv™˚
(
ts
, 
ni
);

993 if–
	`ci_ni_dŒi°_is_em±y
(
ni
, &
nic
->
tx_ªady_li°
) )

995 }  
nic
->
tx_byãs_added
 -Çic->
tx_byãs_ªmoved


996 < 
	`NI_OPTS
(
ni
).
txq_limô
 );

997 
	}
}

1000 
	$ci_√tif_pﬁl_ötf
(
ci_√tif
* 
ni
, 
ötf_i
, 
max_evs
)

1002 
ci_√tif_pﬁl_°©e
 
ps
;

1003 
tŸÆ_evs
 = 0;

1004 
rc
;

1006 #i‡
	`deföed
(
__KERNEL__
Ë|| ! deföed(
NDEBUG
)

1007 if–! 
	`ci_√tif_may_pﬁl_ö_kî√l
(
ni
, 
ötf_i
) )

1011 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1012 
ps
.
tx_pkt_‰ì_li°_ö£π
 = &ps.
tx_pkt_‰ì_li°
;

1013 
ps
.
tx_pkt_‰ì_li°_n
 = 0;

1016 
rc
 = 
	`ci_√tif_pﬁl_evq
(
ni
, &
ps
, 
ötf_i
);

1017 if–
rc
 > 0 ) {

1018 
tŸÆ_evs
 +
rc
;

1019 
	`¥o˚ss_po°_pﬁl_li°
(
ni
);

1023 }  
tŸÆ_evs
 < 
max_evs
 );

1025 if–
ps
.
tx_pkt_‰ì_li°_n
 )

1026 
	`ci_√tif_pﬁl_‰ì_pkts
(
ni
, &
ps
);

1031 if–
	`ci_√tif_rx_vi_•a˚
(
ni
, 
	`ci_√tif_rx_vi
“i, 
ötf_i
))

1032 >
CI_CFG_RX_DESC_BATCH
 )

1033 
	`ci_√tif_rx_po°
(
ni
, 
ötf_i
);

1035 if–
	`ci_ni_dŒi°_nŸ_em±y
(
ni
, &ni->
°©e
->
nic
[
ötf_i
].
tx_ªady_li°
) )

1036 
	`ci_√tif_tx_¥ogªss
(
ni
, 
ötf_i
);

1037 if–
	`ci_√tif_dmaq_nŸ_em±y
(
ni
, 
ötf_i
) )

1038 
	`ci_√tif_dmaq_shove1
(
ni
, 
ötf_i
);

1040 #ifde‡
__KERNEL__


1043 if–
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
)->
k_ªf_cou¡
 & 
TCP_HELPER_K_RC_DEAD
 ) {

1044 if–
ni
->
°©e
->
nic
[
ötf_i
].
tx_dmaq_ö£π_£q
 ==

1045 
ni
->
°©e
->
nic
[
ötf_i
].
tx_dmaq_d⁄e_£q
 )

1046 
	`com∂ëe
(&
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
)->
com∂ëe
);

1048 
	`t˝_hñ≥r_ªque°_wakeup_nic
(
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
), 
ötf_i
);

1052  
tŸÆ_evs
;

1053 
	}
}

1056 
	$ci_√tif_pﬁl_ötf_Á°
(
ci_√tif
* 
ni
, 
ötf_i
, 
ci_uöt64
 
now_‰c
)

1058 
ci_√tif_pﬁl_°©e
 
ps
;

1059 
rc
;

1061 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1062 
	`ci_as£π
(
ni
->
°©e
->
ö_pﬁl
 == 0);

1064 if(
	`CI_LIKELY
–
ni
->
°©e
->
pﬁl_w‹k_out°™dög
 == 0 )) {

1065 
	`ci_ù_time_upd©e
(
	`IPTIMER_STATE
(
ni
), 
now_‰c
);

1066 
ps
.
tx_pkt_‰ì_li°_ö£π
 = &ps.
tx_pkt_‰ì_li°
;

1067 
ps
.
tx_pkt_‰ì_li°_n
 = 0;

1068 ++
ni
->
°©e
->
ö_pﬁl
;

1069 if–(
rc
 = 
	`ci_√tif_pﬁl_evq
(
ni
, &
ps
, 
ötf_i
)) ) {

1070 
	`¥o˚ss_po°_pﬁl_li°
(
ni
);

1071 
ni
->
°©e
->
pﬁl_w‹k_out°™dög
 = 1;

1073 --
ni
->
°©e
->
ö_pﬁl
;

1074 if–
ps
.
tx_pkt_‰ì_li°_n
 )

1075 
	`ci_√tif_pﬁl_‰ì_pkts
(
ni
, &
ps
);

1076  
rc
;

1082  
	`ci_√tif_pﬁl_n
(
ni
, 
	`NI_OPTS
“i).
evs_≥r_pﬁl
);

1083 
	}
}

1086 
	$ci_√tif_lo›back_pkts_£nd
(
ci_√tif
* 
ni
)

1088 
ci_ù_pkt_fmt
* 
pkt
;

1089 
oo_pkt_p
 
£nd_li°
 = 
OO_PP_ID_NULL
;

1090 
ci_ù4_hdr
* 
ù
;

1091 #ifde‡
__KERNEL__


1092 
i
 = 0;

1095 
	`CI_BUILD_ASSERT
(

1096 
	`CI_MEMBER_OFFSET
(
ci_ù_pkt_fmt_¥efix
, 
t˝_tx
.
lo
.
rx_sock
) ==

1097 
	`CI_MEMBER_OFFSET
(
ci_ù_pkt_fmt_¥efix
, 
t˝_rx
.
lo
.
rx_sock
) );

1098 
	`CI_BUILD_ASSERT
(

1099 
	`CI_MEMBER_OFFSET
(
ci_ù_pkt_fmt_¥efix
, 
t˝_tx
.
lo
.
tx_sock
) ==

1100 
	`CI_MEMBER_OFFSET
(
ci_ù_pkt_fmt_¥efix
, 
t˝_rx
.
lo
.
tx_sock
) );

1102  
	`OO_PP_NOT_NULL
(
ni
->
°©e
->
lo›pkts
) ) {

1103 #ifde‡
__KERNEL__


1104 if(
	`CI_UNLIKELY
–
i
++ > 
ni
->
pkt_£ts_n
 * 
PKTS_PER_SET
 )) {

1105 
	`ci_√tif_îr‹_dëe˘ed
(
ni
, 
CI_NETIF_ERROR_LOOP_PKTS_LIST
, 
__FUNCTION__
);

1109 
pkt
 = 
	`PKT_CHK
(
ni
,Çi->
°©e
->
lo›pkts
);

1110 
ni
->
°©e
->
lo›pkts
 = 
pkt
->
√xt
;

1111 
pkt
->
√xt
 = 
£nd_li°
;

1112 
£nd_li°
 = 
	`OO_PKT_ID
(
pkt
);

1115  
	`OO_PP_NOT_NULL
(
£nd_li°
) ) {

1116 
pkt
 = 
	`PKT_CHK
(
ni
, 
£nd_li°
);

1117 
£nd_li°
 = 
pkt
->
√xt
;

1118 
ni
->
°©e
->
n_lo›pkts
--;

1120 
	`LOG_NR
(
	`ci_log
(
N_FMT
 "lo›back RXÖkà%d: %d->%d", 
	`N_PRI_ARGS
(
ni
),

1121 
	`OO_PKT_FMT
(
pkt
),

1122 
	`OO_SP_FMT
(
pkt
->
pf
.
t˝_tx
.
lo
.
tx_sock
),

1123 
	`OO_SP_FMT
(
pkt
->
pf
.
t˝_tx
.
lo
.
rx_sock
)));

1125 
ù
 = 
	`oo_ù_hdr
(
pkt
);

1126 
	`oo_offbuf_öô
(&
pkt
->
buf
, 
	`PKT_START
’kt),Ökt->
buf_Àn
);

1127 
pkt
->
ötf_i
 = 
OO_INTF_I_LOOPBACK
;

1128 
pkt
->
Êags
 &
CI_PKT_FLAG_NONB_POOL
;

1129 if–
	`oo_t˝dump_check
(
ni
, 
pkt
, 
OO_INTF_I_LOOPBACK
) )

1130 
	`oo_t˝dump_dump_pkt
(
ni
, 
pkt
);

1131 
pkt
->
√xt
 = 
OO_PP_NULL
;

1132 
	`ci_t˝_h™dÀ_rx
(
ni
, 
NULL
, 
pkt
, (
ci_t˝_hdr
*)(
ù
 + 1),

1133 
	`CI_BSWAP_BE16
(
ù
->
ù_tŸ_Àn_be16
Ë- (
ci_ù4_hdr
));

1135 
	}
}

1138 
	$ci_√tif_pﬁl_n
(
ci_√tif
* 
√tif
, 
max_evs
)

1140 
ötf_i
, 
n_evs_h™dÀd
 = 0;

1142 #i‡
	`deföed
(
__KERNEL__
Ë|| ! deföed(
NDEBUG
)

1143 if–
√tif
->
îr‹_Êags
 )

1147 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

1148 
	`CHECK_NI
(
√tif
);

1150 #ifde‡
__KERNEL__


1151 
	`CITP_STATS_NETIF_INC
(
√tif
, 
k_pﬁls
);

1153 
	`CITP_STATS_NETIF_INC
(
√tif
, 
u_pﬁls
);

1156 
	`ci_ù_time_ªsync
(
	`IPTIMER_STATE
(
√tif
));

1158 #i‡
CI_CFG_HW_TIMER


1159 if–
	`ci_√tif_√ed_timî_¥ime
(
√tif
, 
	`IPTIMER_STATE
“ëif)->
‰c
) ) {

1160 if–
	`NI_OPTS
(
√tif
).
timî_u£c
 != 0 )

1161 
	`OO_STACK_FOR_EACH_INTF_I
(
√tif
, 
ötf_i
)

1162 
	`ef_evítq_timî_¥ime
(&
√tif
->
nic_hw
[
ötf_i
].
vi
,

1163 
	`NI_OPTS
(
√tif
).
timî_u£c
);

1164 
√tif
->
°©e
->
evq_œ°_¥ime
 = 
	`IPTIMER_STATE
“ëif)->
‰c
;

1168 
	`ci_as£π
(
√tif
->
°©e
->
ö_pﬁl
 == 0);

1169 ++
√tif
->
°©e
->
ö_pﬁl
;

1170 
	`OO_STACK_FOR_EACH_INTF_I
(
√tif
, 
ötf_i
) {

1171 
n
 = 
	`ci_√tif_pﬁl_ötf
(
√tif
, 
ötf_i
, 
max_evs
);

1172 
	`ci_as£π
(
n
 >= 0);

1173 
n_evs_h™dÀd
 +
n
;

1176  
	`OO_PP_NOT_NULL
(
√tif
->
°©e
->
lo›pkts
) ) {

1177 
	`ci_√tif_lo›back_pkts_£nd
(
√tif
);

1178 
	`¥o˚ss_po°_pﬁl_li°
(
√tif
);

1180 
	`ci_as£π_equÆ
(
√tif
->
°©e
->
n_lo›pkts
, 0);

1181 --
√tif
->
°©e
->
ö_pﬁl
;

1185 
	`ci_ù_timî_pﬁl
(
√tif
);

1188 
	`ci_as£π
(
	`OO_PP_IS_NULL
(
√tif
->
°©e
->
lo›pkts
));

1190 if(
	`CI_LIKELY
–
√tif
->
°©e
->
rxq_low
 <= 1 ))

1191 
√tif
->
°©e
->
mem_¥essuª
 &~
OO_MEM_PRESSURE_LOW
;

1193 
√tif
->
°©e
->
mem_¥essuª
 |
OO_MEM_PRESSURE_LOW
;

1196 if(
	`CI_UNLIKELY
–
√tif
->
°©e
->
mem_¥essuª
 & 
OO_MEM_PRESSURE_CRITICAL
 ))

1197 if–
	`ci_√tif_mem_¥essuª_åy_exô
(
√tif
) )

1198 
	`CITP_STATS_NETIF_INC
(
√tif
, 
mem‹y_¥essuª_exô_pﬁl
);

1200 
√tif
->
°©e
->
pﬁl_w‹k_out°™dög
 = 0;

1203  
n_evs_h™dÀd
;

1204 
	}
}

	@netif_init.c

10 
	#_GNU_SOURCE


	)

12 
	~"ù_öã∫Æ.h
"

13 
	~"uk_ötf_vî.h
"

14 
	~<ci/öã∫Æ/eÁbcfg.h
>

15 
	~<⁄lﬂd/vîsi⁄.h
>

16 
	~<ëhîÁbric/öã∫Æ/öã∫Æ.h
>

18 #i‚de‡
__KERNEL__


19 
	~<˝œ√/ul.h
>

20 
	~"˝œ√_≠i_vîsi⁄.h
"

21 
	~<√t/if.h
>

22 
	~<ci/öã∫Æ/eÁbcfg.h
>

23 #i‡
CI_CFG_PKTS_AS_HUGE_PAGES


24 
	~<sys/shm.h
>

26 #ifde‡
ONLOAD_OFE


27 
	~"o„/⁄lﬂd.h
"

31 #ifde‡
NDEBUG


32 
	#IS_DEBUG
 0

	)

34 
	#IS_DEBUG
 1

	)

38 #ifde‡
__KERNEL__


39 c⁄° * 
	goo_uk_ötf_vî
 = 
OO_UK_INTF_VER
;

53 #ifde‡
__KERNEL__


55 
	#as£π_zîo
(
x
Ë
	`ci_as£π_equÆ
((x), 0)

	)

57 
	$ci_√tif_°©e_öô
(
ci_√tif
* 
ni
, 
˝u_khz
, c⁄° * 
«me
)

59 
ci_√tif_°©e_nic_t
* 
¬
;

60 
ci_√tif_°©e
* 
nis
 = 
ni
->
°©e
;

61 
nic_i
;

62 
i
;

64 
nis
->
›ts
 = 
ni
->opts;

67 
	`OO_STACK_FOR_EACH_INTF_I
(
ni
, 
nic_i
) {

68 
¬
 = &
nis
->
nic
[
nic_i
];

69 
	`oo_pktq_öô
(&
¬
->
dmaq
);

70 
	`as£π_zîo
(
¬
->
tx_byãs_added
);

71 
	`as£π_zîo
(
¬
->
tx_byãs_ªmoved
);

72 
	`as£π_zîo
(
¬
->
tx_dmaq_ö£π_£q
);

73 
	`as£π_zîo
(
¬
->
tx_dmaq_ö£π_£q_œ°_pﬁl
);

74 
	`as£π_zîo
(
¬
->
tx_dmaq_d⁄e_£q
);

75 
	`ci_ni_dŒi°_öô
(
ni
, &
¬
->
tx_ªady_li°
,

76 
	`oo_±r_to_°©ï
(
ni
, &
¬
->
tx_ªady_li°
), "txrd");

77 
¬
->
rx_‰ags
 = 
OO_PP_NULL
;

81 
	`as£π_zîo
(
ni
->
∑ckës
->
n_‰ì
);

82 
	`as£π_zîo
(
nis
->
n_rx_pkts
);

83 
	`as£π_zîo
(
nis
->
rxq_low
);

84 
	`as£π_zîo
(
nis
->
mem_¥essuª
);

85 
nis
->
mem_¥essuª_pkt_poﬁ
 = 
OO_PP_NULL
;

86 
	`as£π_zîo
(
nis
->
mem_¥essuª_pkt_poﬁ_n
);

87 
nis
->
lo›pkts
 = 
OO_PP_NULL
;

88 
nis
->
n_lo›pkts
 = 0;

91 
	`as£π_zîo
(
nis
->
n_async_pkts
);

92 
nis
->
n⁄b_pkt_poﬁ
 = 
CI_ILL_END
;

102 
	`ci_√tif_fûãr_öô
(
ni
->
fûãr_èbÀ
,

103 
	`ci_log2_À
(
	`NI_OPTS
(
ni
).
max_ï_bufs
) + 1);

105 
	`ci_ni_dŒi°_öô
(
ni
, &
nis
->
timeout_q
[
OO_TIMEOUT_Q_TIMEWAIT
],

106 
	`oo_±r_to_°©ï
(
ni
, &
nis
->
timeout_q
[
OO_TIMEOUT_Q_TIMEWAIT
]),

108 
	`ci_ni_dŒi°_öô
(
ni
, &
nis
->
timeout_q
[
OO_TIMEOUT_Q_FINWAIT
],

109 
	`oo_±r_to_°©ï
(
ni
, &
nis
->
timeout_q
[
OO_TIMEOUT_Q_FINWAIT
]),

111 
	`ci_ù_timî_öô
(
ni
, &
nis
->
timeout_tid
,

112 
	`oo_±r_to_°©ï
(
ni
, &
nis
->
timeout_tid
),

115 
nis
->
timeout_tid
.
∑øm1
 = 
OO_SP_NULL
;

116 
nis
->
timeout_tid
.
‚
 = 
CI_IP_TIMER_NETIF_TIMEOUT
;

118 #i‡
CI_CFG_SUPPORT_STATS_COLLECTION


119 
	`ci_ù_timî_öô
(
ni
, &
nis
->
°©s_tid
,

120 
	`oo_±r_to_°©ï
(
ni
, &
nis
->
°©s_tid
),

122 
nis
->
°©s_tid
.
∑øm1
 = 
OO_SP_NULL
;

123 
nis
->
°©s_tid
.
‚
 = 
CI_IP_TIMER_NETIF_STATS
;

125 
	`ci_ù_°©s_˛ór
(&
nis
->
°©s_¢≠shŸ
);

126 
	`ci_ù_°©s_˛ór
(&
nis
->
°©s_cumuœtive
);

129 
	`ci_ni_dŒi°_öô
(
ni
, &
nis
->
ª≠_li°
,

130 
	`oo_±r_to_°©ï
(
ni
, &
nis
->
ª≠_li°
),

133 
nis
->
‰ì_ïs_hód
 = 
OO_SP_NULL
;

134 
nis
->
de„ºed_‰ì_ïs_hód
 = 
CI_ILL_END
;

135 
	`as£π_zîo
(
nis
->
n_ï_bufs
);

136 
nis
->
max_ï_bufs
 = 
	`NI_OPTS
(
ni
).max_ep_bufs;

138 
	`as£π_zîo
(
ni
->
∑ckës
->
£ts_n
);

139 
ni
->
∑ckës
->
£ts_max
 =Çi->
pkt_£ts_max
;

142 
nis
->
rx_de‰ag_hód
 = 
OO_PP_NULL
;

143 
nis
->
rx_de‰ag_èû
 = 
OO_PP_NULL
;

145 
	`as£π_zîo
(
nis
->
£nd_may_pﬁl
);

147 
	`°∫˝y
(
nis
->
«me
,Çame, 
CI_CFG_STACK_NAME_LEN
);

148 
nis
->
«me
[
CI_CFG_STACK_NAME_LEN
] = '\0';

150 
	`as£π_zîo
(
nis
->
ö_pﬁl
);

151 
	`ci_ni_dŒi°_öô
(
ni
, &
nis
->
po°_pﬁl_li°
,

152 
	`oo_±r_to_°©ï
(
ni
, &
nis
->
po°_pﬁl_li°
),

155 
nis
->
sock_•ö_cy˛es
 =

156 
	`__oo_u£c_to_cy˛es64
(
˝u_khz
, 
	`NI_OPTS
(
ni
).
•ö_u£c
);

157 
nis
->
buzz_cy˛es
 =

158 
	`__oo_u£c_to_cy˛es64
(
˝u_khz
, 
	`NI_OPTS
(
ni
).
buzz_u£c
);

159 
nis
->
timî_¥ime_cy˛es
 =

160 
	`__oo_u£c_to_cy˛es64
(
˝u_khz
, 
	`NI_OPTS
(
ni
).
timî_¥ime_u£c
);

162 
	`ci_ù_timî_°©e_öô
(
ni
, 
˝u_khz
);

163 
nis
->
œ°_•ö_pﬁl_‰c
 = 
	`IPTIMER_STATE
(
ni
)->
‰c
;

164 
nis
->
œ°_¶ìp_‰c
 = 
	`IPTIMER_STATE
(
ni
)->
‰c
;

166 
	`oo_timesync_upd©e
(
eÁb_t˝_drivî
.
timesync
);

168 
	`as£π_zîo
(
nis
->
de„r_w‹k_cou¡
);

170 #ifde‡
_WIN32


171 
nis
->
async_sig«l_q
.
hód
 = 
CI_ILL_END
;

172 
nis
->
async_com∂ëi⁄_q
 = 
CI_ILL_END
;

175 #i‡
CI_CFG_TCPDUMP


176 
nis
->
dump_ªad_i
 = 0;

177 
nis
->
dump_wrôe_i
 = 0;

178 
	`mem£t
(
nis
->
dump_ötf
, 0, (nis->dump_intf));

181 
nis
->
uid
 = 
ni
->uid;

182 
nis
->
pid
 = 
cuºít
->
tgid
;

184 #i‡
CI_CFG_FD_CACHING


185 
nis
->
∑ssive_ˇche_avaû_°ack
 =Çis->
›ts
.
sock_ˇche_max
;

189 
nis
->
max_mss
 = 0;

191 if–
nis
->
›ts
.
t˝_syncookõs
 )

192 
	`gë_øndom_byãs
(&
nis
->
hash_ß…
, (nis->hash_salt));

194 
nis
->
ªady_li°s_ö_u£
 = 1;

195  
i
 = 0; i < 
CI_CFG_N_READY_LISTS
; i++ ) {

196 
	`ci_ni_dŒi°_öô
(
ni
, &
nis
->
ªady_li°s
[
i
],

197 
	`oo_±r_to_°©ï
(
ni
, &
nis
->
ªady_li°s
[
i
]),

199 
nis
->
ªady_li°_Êags
[
i
] = 0;

202 
	`ci_ni_dŒi°_öô
(
ni
, &
nis
->
a˘ive_wûd_poﬁ
,

203 
	`oo_±r_to_°©ï
(
ni
, &
nis
->
a˘ive_wûd_poﬁ
),

205 
nis
->
a˘ive_wûd_n
 = 0;

206 
nis
->
∑ckë_Æloc_numa_nodes
 = 0;

207 
nis
->
sock_Æloc_numa_nodes
 = 0;

208 
nis
->
öãºu±_numa_nodes
 = 0;

209 
nis
->
¸óti⁄_numa_node
 = 
	`numa_node_id
();

210 
nis
->
lﬂd_numa_node
 = 
eÁb_t˝_drivî
.load_numa_node;

212 #i‡
CI_CFG_FD_CACHING


213 
	`ci_ni_dŒi°_öô
(
ni
, &
nis
->
a˘ive_ˇche
.
ˇche
,

214 
	`oo_±r_to_°©ï
(
ni
, &
nis
->
a˘ive_ˇche
.
ˇche
), "ach");

215 
	`ci_ni_dŒi°_öô
(
ni
, &
nis
->
a˘ive_ˇche
.
≥ndög
,

216 
	`oo_±r_to_°©ï
(
ni
, &
nis
->
a˘ive_ˇche
.
≥ndög
), "apd");

217 
	`ci_ni_dŒi°_öô
(
ni
, &
nis
->
a˘ive_ˇche
.
fd_°©es
,

218 
	`oo_±r_to_°©ï
(
ni
, &
nis
->
a˘ive_ˇche
.
fd_°©es
), "afd");

219 
nis
->
a˘ive_ˇche
.
avaû_°ack
 = 
	`oo_±r_to_°©ï
(
ni
,

220 &
nis
->
a˘ive_ˇche_avaû_°ack
);

221 
nis
->
a˘ive_ˇche_avaû_°ack
 =Çis->
›ts
.
sock_ˇche_max
;

223 
	}
}

228 
	gcôp_ù°ack_∑øms_öôed
 = 0;

229 
ci_uöt32
 
	gcôp_t˝_¢dbuf_mö
, 
	gcôp_t˝_¢dbuf_def
, 
	gcôp_t˝_¢dbuf_max
;

230 
ci_uöt32
 
	gcôp_t˝_rcvbuf_mö
, 
	gcôp_t˝_rcvbuf_def
, 
	gcôp_t˝_rcvbuf_max
;

231 
ci_uöt32
 
	gcôp_udp_¢dbuf_max
, 
	gcôp_udp_¢dbuf_def
;

232 
ci_uöt32
 
	gcôp_udp_rcvbuf_max
, 
	gcôp_udp_rcvbuf_def
;

233 
ci_uöt32
 
	gcôp_t˝_backlog_max
, 
	gcôp_t˝_adv_wö_sˇÀ_max
;

234 
ci_uöt32
 
	gcôp_fö_timeout
;

235 
ci_uöt32
 
	gcôp_ªå™smô_thªshﬁd
, 
	gcôp_ªå™smô_thªshﬁd_‹ph™
,

236 
	gcôp_ªå™smô_thªshﬁd_syn
, 
	gcôp_ªå™smô_thªshﬁd_sy«ck
;

237 
ci_uöt32
 
	gcôp_kì∑live_¥obes
, 
	gcôp_kì∑live_time
;

238 
ci_uöt32
 
	gcôp_kì∑live_ötvl
;

239 
ci_uöt32
 
	gcôp_t˝_ßck
, 
	gcôp_t˝_time°amps
, 
	gcôp_t˝_wödow_sˇlög
;

240 
ci_uöt32
 
	gcôp_t˝_dßck
;

243 
	$ci_£tup_ù°ack_∑øms_deÁu…
()

245 
côp_t˝_¢dbuf_mö
 = 
CI_CFG_TCP_SNDBUF_MIN
;

246 
côp_t˝_¢dbuf_def
 = 
CI_CFG_TCP_SNDBUF_DEFAULT
;

247 
côp_t˝_¢dbuf_max
 = 
CI_CFG_TCP_SNDBUF_MAX
;

248 
côp_t˝_rcvbuf_mö
 = 
CI_CFG_TCP_RCVBUF_MIN
;

249 
côp_t˝_rcvbuf_def
 = 
CI_CFG_TCP_RCVBUF_DEFAULT
;

250 
côp_t˝_rcvbuf_max
 = 
CI_CFG_TCP_RCVBUF_MAX
;

251 
côp_udp_¢dbuf_max
 = 
CI_CFG_UDP_SNDBUF_MAX
;

252 
côp_udp_¢dbuf_def
 = 
CI_CFG_UDP_SNDBUF_DEFAULT
;

253 
côp_udp_rcvbuf_max
 = 
CI_CFG_UDP_RCVBUF_MAX
;

254 
côp_udp_rcvbuf_def
 = 
CI_CFG_UDP_RCVBUF_DEFAULT
;

255 
côp_t˝_backlog_max
 = 
CI_TCP_LISTENQ_MAX
;

256 
côp_t˝_adv_wö_sˇÀ_max
 = 
CI_TCP_WSCL_MAX
;

257 
côp_fö_timeout
 = 
CI_CFG_TCP_FIN_TIMEOUT
;

258 
côp_ªå™smô_thªshﬁd
 = 
CI_TCP_RETRANSMIT_THRESHOLD
;

259 
côp_ªå™smô_thªshﬁd_‹ph™
 = 
CI_TCP_RETRANSMIT_THRESHOLD_ORPHAN
;

260 
côp_ªå™smô_thªshﬁd_syn
 = 
CI_TCP_RETRANSMIT_THRESHOLD_SYN
;

261 
côp_ªå™smô_thªshﬁd_sy«ck
 = 
CI_TCP_RETRANSMIT_THRESHOLD_SYN
;

262 
côp_kì∑live_¥obes
 = 
CI_TCP_KEEPALIVE_PROBES
;

263 
côp_kì∑live_time
 = 
CI_TCP_TCONST_KEEPALIVE_TIME
;

264 
côp_kì∑live_ötvl
 = 
CI_TCP_TCONST_KEEPALIVE_INTVL
;

265 
côp_t˝_ßck
 = 
CI_CFG_TCP_SACK
;

266 
côp_t˝_time°amps
 = 
CI_CFG_TCP_TSO
;

267 
côp_t˝_wödow_sˇlög
 = 
CI_TCP_WSCL_DEFAULT
;

268 
côp_t˝_dßck
 = 
CI_CFG_TCP_DSACK
;

270 
	}
}

272 #i‚de‡
__KERNEL__


273 
	$åy_gë_hp_sz
(c⁄° * 
löe
, * 
hp_sz
)

280 
n
;

281 if–
	`ssˇnf
(
löe
, "Hugïagesize: %u kB", &
n
) != 1)

283 *
hp_sz
 = 
n
;

285 
	}
}

287 
	$check_hp
(
ci_√tif_c⁄fig_›ts
* 
›ts
){

288 
FILE
* 
f
;

289 
buf
[80];

290 
hp_sz
;

292 
hp_sz
=0;

293 
f
=
	`f›í
("/proc/meminfo", "r");

294 if–!
f
 ) {

295 
	`CONFIG_LOG
(
›ts
, 
CONFIG_WARNINGS
, "%s failedÅo open /proc/meminfo with "

296 "îr‹ %d. Dißblög hugïagêsuµ‹t", 
__FUNCTION__
, 
î∫o
);

301 if–!
	`fgës
(
buf
, (buf), 
f
) ) {

302 
	`f˛o£
(
f
);

303 
	`CONFIG_LOG
(
›ts
, 
CONFIG_WARNINGS
, "EIO Error: %s failedÅo "

305 "suµ‹t",
__FUNCTION__
);

308 if–
	`åy_gë_hp_sz
(
buf
, &
hp_sz
) ) ;

311 
	`f˛o£
(
f
);

313 if–(
hp_sz
 != 2048) && (hp_sz != 4096) ){

314 
	`CONFIG_LOG
(
›ts
, 
CONFIG_WARNINGS
, "Kernel hugepage size %u kB"

315 "i†nŸ suµ‹ãd. Dißblög hugïagêsuµ‹t", 
hp_sz
);

316 
›ts
->
huge_∑ges
=0;

321 
	}
}

326 #ifde‡
__löux__


327 #i‚de‡
__KERNEL__


329 
ci_ölöe
 
	$ci_sys˘l_gë_vÆues
(*
∑th
, 
ci_uöt32
 *
ªt
, 
n
,

330 
quõt
)

332 
«me
[
CI_CFG_PROC_PATH_LEN_MAX
 + 
	`°æí
(
CI_CFG_PROC_PATH
)];

333 
buf
[
CI_CFG_PROC_LINE_LEN_MAX
];

334 
buÊí
;

335 *
p
 = 
buf
;

336 
fd
;

337 
i
 = 0;

339 
	`°r˝y
(
«me
, 
CI_CFG_PROC_PATH
);

340 
	`°∫˝y
(
«me
 + 
	`°æí
(
CI_CFG_PROC_PATH
), 
∑th
, 
CI_CFG_PROC_PATH_LEN_MAX
);

341 
fd
 = 
	`ci_sys_›í
(
«me
, 
O_RDONLY
);

342 i‡(
fd
 < 0) {

343 #i‚de‡
NDEBUG


345 if–! 
quõt
 )

346 
	`ci_log
("%s: faûedÅÿ›í %s", 
__FUNCTION__
, 
«me
);

348  
fd
;

350 
buÊí
 = 
	`ci_sys_ªad
(
fd
, 
buf
, (buf));

351 
	`ci_sys_˛o£
(
fd
);

352 
buf
[
buÊí
 - 1] = '\0';

353  
i
 = 0; i < 
n
 && 
	`ssˇnf
(
p
, "%u", &
ªt
[i]) > 0; ++i ) {

354  
buf
 + 
buÊí
 > 
p
 &&Ö[0] != '\t' )

355 
p
++;

356 
p
++;

358 if–
i
 < 
n
 ) {

359 
	`ci_log
("%s: faûedÅÿ∑r£ %s: %s", 
__FUNCTION__
, 
«me
, 
buf
);

363 
	}
}

371 
	$ci_£tup_ù°ack_∑øms
()

373 
ci_uöt32
 
›t
[3];

379 i‡(
côp_ù°ack_∑øms_öôed
)

383 
	`ci_£tup_ù°ack_∑øms_deÁu…
();

386 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/ù_f‹w¨d", 
›t
, 1, 1) != 0)

391 if–
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_wmem", 
›t
, 3, 0) != 0 )

393 
côp_t˝_¢dbuf_mö
 = 
CI_CFG_TCP_SNDBUF_MIN
;

394 
côp_t˝_¢dbuf_def
 = 
›t
[1];

395 
côp_t˝_¢dbuf_max
 = 
›t
[2];

396 if–
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_rmem", 
›t
, 3, 0) != 0 )

398 
côp_t˝_rcvbuf_mö
 = 
CI_CFG_TCP_RCVBUF_MIN
;

399 
côp_t˝_rcvbuf_def
 = 
›t
[1];

400 
côp_t˝_rcvbuf_max
 = 
›t
[2];

401 if–
	`ci_sys˘l_gë_vÆues
("√t/c‹e/wmem_max", 
›t
, 1, 0) != 0 )

403 
côp_udp_¢dbuf_max
 = 
›t
[0];

404 if–
	`ci_sys˘l_gë_vÆues
("√t/c‹e/wmem_deÁu…", 
›t
, 1, 0) != 0 )

406 
côp_udp_¢dbuf_def
 = 
›t
[0];

407 if–
	`ci_sys˘l_gë_vÆues
("√t/c‹e/rmem_max", 
›t
, 1, 0) != 0 )

409 
côp_udp_rcvbuf_max
 = 
›t
[0];

410 if–
	`ci_sys˘l_gë_vÆues
("√t/c‹e/rmem_deÁu…", 
›t
, 1, 0) != 0 )

412 
côp_udp_rcvbuf_def
 = 
›t
[0];

414 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_max_syn_backlog", 
›t
, 1, 0) != 0)

416 
côp_t˝_backlog_max
 = 
›t
[0];

419 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_adv_wö_sˇÀ", 
›t
, 1, 0) != 0)

421 
côp_t˝_adv_wö_sˇÀ_max
 = 
	`CI_MIN
(
CI_TCP_WSCL_MAX
, 3 * 
›t
[0]);

424 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_fö_timeout", 
›t
, 1, 0) != 0)

426 
côp_fö_timeout
 = 
›t
[0];

429 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_ªåõs2", 
›t
, 1, 0) != 0)

431 
côp_ªå™smô_thªshﬁd
 = 
›t
[0];

432 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_‹ph™_ªåõs", 
›t
, 1, 0) != 0)

437 if–
›t
[0] > 0 )

438 
côp_ªå™smô_thªshﬁd_‹ph™
 = 
›t
[0];

439 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_syn_ªåõs", 
›t
, 1, 0) != 0)

441 
côp_ªå™smô_thªshﬁd_syn
 = 
›t
[0];

442 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_sy«ck_ªåõs", 
›t
, 1, 0) != 0)

444 
côp_ªå™smô_thªshﬁd_sy«ck
 = 
›t
[0];

447 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_kì∑live_¥obes", 
›t
, 1, 0) != 0)

449 
côp_kì∑live_¥obes
 = 
›t
[0];

451 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_kì∑live_time", 
›t
, 1, 0) != 0)

453 
côp_kì∑live_time
 = 
›t
[0] * 1000;

454 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_kì∑live_ötvl", 
›t
, 1, 0) != 0)

456 
côp_kì∑live_ötvl
 = 
›t
[0] * 1000;

459 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_ßck", 
›t
, 1, 0) != 0)

461 
côp_t˝_ßck
 = 
›t
[0];

462 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_time°amps", 
›t
, 1, 0) != 0)

464 
côp_t˝_time°amps
 = 
›t
[0];

465 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_wödow_sˇlög", 
›t
, 1, 0) != 0)

467 
côp_t˝_wödow_sˇlög
 = 
›t
[0];

469 i‡(
	`ci_sys˘l_gë_vÆues
("√t/ùv4/t˝_dßck", 
›t
, 1, 0) != 0)

471 
côp_t˝_dßck
 = 
›t
[0];

473 
côp_ù°ack_∑øms_öôed
 = 1;

475 
	}
}

480 
	$ci_£tup_ù°ack_∑øms
()

486 
	`ci_£tup_ù°ack_∑øms_deÁu…
();

487 
côp_ù°ack_∑øms_öôed
 = 0;

489 
	}
}

494 #ifde‡
__sun__


496 
	$ci_£tup_ù°ack_∑øms
()

502 
côp_ù°ack_∑øms_öôed
 = 0;

504 
	}
}

507 
	$ci_√tif_c⁄fig_›ts_deÁu…s
(
ci_√tif_c⁄fig_›ts
* 
›ts
)

509 #unde‡
CI_CFG_OPTFILE_VERSION


510 #unde‡
CI_CFG_OPTGROUP


511 #unde‡
CI_CFG_OPT


512 
	#CI_CFG_OPT
(
ív
, 
«me
, 
ty≥
, 
doc
, 
ty≥_modifidî
, 
group
, \

513 , 
möimum
, 
maximum
, 
¥e£¡©i⁄
) \

514 
›ts
->
«me
 = ;

	)

516 
	~<ci/öã∫Æ/›ts_√tif_def.h
>

519 
	`ci_£tup_ù°ack_∑øms
();

520 i‡(
côp_ù°ack_∑øms_öôed
) {

521 
›ts
->
t˝_¢dbuf_mö
 = 
côp_t˝_¢dbuf_mö
;

522 
›ts
->
t˝_¢dbuf_def
 = 
côp_t˝_¢dbuf_def
;

523 
›ts
->
t˝_¢dbuf_max
 = 
côp_t˝_¢dbuf_max
;

524 
›ts
->
t˝_rcvbuf_mö
 = 
côp_t˝_rcvbuf_mö
;

525 
›ts
->
t˝_rcvbuf_def
 = 
côp_t˝_rcvbuf_def
;

526 
›ts
->
t˝_rcvbuf_max
 = 
côp_t˝_rcvbuf_max
;

528 
›ts
->
udp_¢dbuf_max
 = 
côp_udp_¢dbuf_max
;

529 
›ts
->
udp_¢dbuf_def
 = 
côp_udp_¢dbuf_def
;

530 
›ts
->
udp_rcvbuf_max
 = 
côp_udp_rcvbuf_max
;

531 
›ts
->
udp_rcvbuf_def
 = 
côp_udp_rcvbuf_def
;

533 
›ts
->
t˝_backlog_max
 = 
côp_t˝_backlog_max
;

534 
›ts
->
t˝_syƒecv_max
 = 
côp_t˝_backlog_max
 *

535 
CI_CFG_ASSUME_LISTEN_SOCKS
;

536 
›ts
->
t˝_adv_wö_sˇÀ_max
 = 
côp_t˝_adv_wö_sˇÀ_max
;

537 
›ts
->
fö_timeout
 = 
côp_fö_timeout
;

539 
›ts
->
ªå™smô_thªshﬁd
 = 
côp_ªå™smô_thªshﬁd
;

540 
›ts
->
ªå™smô_thªshﬁd_‹ph™
 = 
côp_ªå™smô_thªshﬁd_‹ph™
;

541 
›ts
->
ªå™smô_thªshﬁd_syn
 = 
côp_ªå™smô_thªshﬁd_syn
;

542 
›ts
->
ªå™smô_thªshﬁd_sy«ck
 = 
côp_ªå™smô_thªshﬁd_sy«ck
;

544 
›ts
->
kì∑live_¥obes
 = 
côp_kì∑live_¥obes
;

545 
›ts
->
kì∑live_time
 = 
côp_kì∑live_time
;

546 
›ts
->
kì∑live_ötvl
 = 
côp_kì∑live_ötvl
;

548 
›ts
->
syn_›ts
 = (
côp_t˝_ßck
 ? 
CI_TCPT_FLAG_SACK
 : 0) |

549 (
côp_t˝_time°amps
 ? 
CI_TCPT_FLAG_TSO
 : 0) |

550 (
côp_t˝_wödow_sˇlög
 ? 
CI_TCPT_FLAG_WSCL
 : 0);

551 
›ts
->
u£_dßck
 = 
côp_t˝_dßck
;

552 
›ts
->
öôed
 = 
CI_TRUE
;

554 
	}
}

556 
	$ci_√tif_c⁄fig_›ts_øngecheck
(
ci_√tif_c⁄fig_›ts
* 
›ts
)

558 
ci_uöt64
 
MIN
;

559 
ci_uöt64
 
MAX
;

560 
ci_öt64
 
SMIN
;

561 
ci_öt64
 
SMAX
;

562 
_›tbôs
;

563 
_bôwidth
;

566 ()
MIN
; ()
MAX
; ()
SMIN
; ()
SMAX
;

567 ()
_›tbôs
; ()
_bôwidth
;

569 #unde‡
CI_CFG_OPTFILE_VERSION


570 #unde‡
CI_CFG_OPTGROUP


571 #unde‡
CI_CFG_OPT


573 
	#_CI_CFG_BITVAL
 
_›tbôs


	)

574 
	#_CI_CFG_BITVAL1
 1

	)

575 
	#_CI_CFG_BITVAL2
 2

	)

576 
	#_CI_CFG_BITVAL3
 3

	)

577 
	#_CI_CFG_BITVAL4
 4

	)

578 
	#_CI_CFG_BITVAL8
 8

	)

579 
	#_CI_CFG_BITVAL16
 16

	)

580 
	#_CI_CFG_BITVALA8
 
_CI_CFG_BITVAL


	)

582 #unde‡
MIN


583 #unde‡
MAX


584 #unde‡
SMIN


585 #unde‡
SMAX


587 
	#CI_CFG_REDRESS
(
›t
, 
vÆ
Ë›àvÆ;

	)

588 
	#CI_CFG_MSG
 "ERROR"

	)

590 
	#CI_CFG_OPT
(
ív
, 
«me
, 
ty≥
, 
doc
, 
bôs
, 
group
, , 
möimum
, 
maximum
, 
¥es
) \

591 { 
ty≥
 
_vÆ
 = 
›ts
->
«me
; \

592 
ty≥
 
_max
; \

593 
ty≥
 
_mö
; \

594 
_›tbôs
=(
ty≥
)*8; \

595 
_bôwidth
=
_CI_CFG_BITVAL
##
bôs
; \

596 
MIN
 = 0; \

597 
MAX
 = ((1uŒ<<(
_bôwidth
-1))<<1) - 1ull; \

598 
SMAX
 = 
MAX
 >> 1; 
SMIN
 = -SMAX-1; \

599 
_max
 = (
ty≥
)(
maximum
); \

600 
_mö
 = (
ty≥
)(
möimum
); \

601 i‡(
_vÆ
 > 
_max
) { \

602 
	`ci_log
("c⁄fig: "
CI_CFG_MSG
" - option " #name \

603 " (%"
CI_PRIu64
")ÜargerÅhan maximum " #maximum" (%"CI_PRIu64")", \

604 (
ci_uöt64
)
_vÆ
, (ci_uöt64Ë
_max
); \

605 
	`CI_CFG_REDRESS
(
›ts
->
«me
, 
_max
); \

607 i‡(
_vÆ
 < 
_mö
) { \

608 
	`ci_log
("c⁄fig: "
CI_CFG_MSG
" - option " #name \

609 " (%"
CI_PRIu64
") smallerÅhan minimum " #minimum, \

610 (
ci_uöt64
)
_vÆ
); \

611 
	`CI_CFG_REDRESS
(
›ts
->
«me
, 
_mö
); \

613 }

	)

615 
	~<ci/öã∫Æ/›ts_√tif_def.h
>

616 
	}
}

619 #i‚de‡
__KERNEL__


621 
	s°rög_to_bômask
 {

622 
	m°b_ödex
;

623 c⁄° *c⁄° 
	m°b_°r
;

632 
	$c⁄vît_°rög_to_bômask
(c⁄° * 
°r
,

633 c⁄° 
°rög_to_bômask
* 
›ts
,

634 
›ts_Àn
, 
ci_uöt32
* 
bômask_out
)

636 
Àn
, 
i
, 
›t_found
, 
√g©e
;

638 if–! 
°r
 )

643  *
°r
 == ',' )

644 ++
°r
;

645 
Àn
 = 
	`°rch∫ul
(
°r
, ',') - str;

646 if–
Àn
 == 0 )

650 if–*
°r
 == '-' ) {

651 
√g©e
 = 1;

652 ++
°r
;

653 --
Àn
;

656 
√g©e
 = 0;

660 
›t_found
 = 0;

661  
i
 = 0; i < 
›ts_Àn
; ++i )

662 if–! 
	`°∫cmp
(
°r
, 
›ts
[
i
].
°b_°r
, 
Àn
) ) {

663 if–
√g©e
 )

664 *
bômask_out
 &~(1 << 
›ts
[
i
].
°b_ödex
);

666 *
bômask_out
 |1 << 
›ts
[
i
].
°b_ödex
;

667 ++
›t_found
;

670 if–! 
›t_found
 ) {

671 
buf
[128];

672 
	`°∫˝y
(
buf
, 
°r
, 
Àn
);

673 
buf
[
Àn
] = '\0';

674 
	`ci_log
("InvÆid o±i⁄ dëe˘ed: %s", 
buf
);

676 
°r
 +
Àn
;

678 
	}
}

681 
	$ci_√tif_c⁄fig_›ts_gëív_ef_log
(
ci_√tif_c⁄fig_›ts
* 
›ts
)

683 
°rög_to_bômask
 
›ti⁄s
[
EF_LOG_MAX
] = {

684 {
EF_LOG_BANNER
, "banner"},

685 {
EF_LOG_RESOURCE_WARNINGS
, "resource_warnings"},

686 {
EF_LOG_CONN_DROP
, "conn_drop"},

687 {
EF_LOG_CONFIG_WARNINGS
, "config_warnings"},

688 {
EF_LOG_USAGE_WARNINGS
, "usage_warnings"},

691 
	`c⁄vît_°rög_to_bômask
(
	`gëív
("EF_LOG"), 
›ti⁄s
, 
EF_LOG_MAX
,

692 &
›ts
->
log_ˇãg‹y
);

693 
	}
}

697 
ci_√tif_c⁄fig_›ts_gëív_ef_sˇœbÀ_fûãrs
(
ci_√tif_c⁄fig_›ts
* 
›ts
);

700 
	$ci_√tif_c⁄fig_›ts_gëív
(
ci_√tif_c⁄fig_›ts
* 
›ts
)

702 c⁄° * 
s
;

705 
	`ci_√tif_c⁄fig_›ts_gëív_ef_log
(
›ts
);

712 if–(
s
 = 
	`gëív
("EF_POLL_USEC")) ) {

713 
›ts
->
•ö_u£c
 = 
	`©oi
(
s
);

714 if–
›ts
->
•ö_u£c
 != 0 ) {

716 
›ts
->
buzz_u£c
 = 
	`CI_MIN
(›ts->
•ö_u£c
, 100);

718 
›ts
->
öt_driví
 = 0;

723 
›ts
->
sock_lock_buzz
 = 1;

724 
›ts
->
°ack_lock_buzz
 = 1;

725 
›ts
->
ul_£À˘_•ö
 = 1;

726 
›ts
->
ul_pﬁl_•ö
 = 1;

727 #i‡
CI_CFG_USERSPACE_EPOLL


728 
›ts
->
ul_ïﬁl_•ö
 = 1;

730 #i‡
CI_CFG_UDP


731 
›ts
->
udp_ªcv_•ö
 = 1;

732 
›ts
->
udp_£nd_•ö
 = 1;

734 
›ts
->
t˝_ªcv_•ö
 = 1;

735 
›ts
->
t˝_£nd_•ö
 = 1;

737 
›ts
->
t˝_ac˚±_•ö
 = 1;

738 
›ts
->
t˝_c⁄√˘_•ö
 = 1;

740 
›ts
->
pkt_waô_•ö
 = 1;

743 if–(
s
 = 
	`gëív
("EF_SPIN_USEC")) ) {

744 
›ts
->
•ö_u£c
 = 
	`©oi
(
s
);

746 if–
›ts
->
•ö_u£c
 != 0 )

747 
›ts
->
öt_driví
 = 0;

750 if–(
s
 = 
	`gëív
("EF_INT_DRIVEN")) )

751 
›ts
->
öt_driví
 = 
	`©oi
(
s
);

752 if–
›ts
->
öt_driví
 )

754 
›ts
->
timî_u£c
 = 0;

755 if–(
s
 = 
	`gëív
("EF_HELPER_USEC")) ) {

756 
›ts
->
timî_u£c
 = 
	`©oi
(
s
);

757 if–
›ts
->
timî_u£c
 != 0 )

759 
›ts
->
timî_¥ime_u£c
 = o±s->
timî_u£c
 / 2;

761 if–(
s
 = 
	`gëív
("EF_HELPER_PRIME_USEC")) )

762 
›ts
->
timî_¥ime_u£c
 = 
	`©oi
(
s
);

764 if–(
s
 = 
	`gëív
("EF_BUZZ_USEC")) ) {

765 
›ts
->
buzz_u£c
 = 
	`©oi
(
s
);

766 if–
›ts
->
buzz_u£c
 != 0 ) {

767 
›ts
->
sock_lock_buzz
 = 1;

768 
›ts
->
°ack_lock_buzz
 = 1;

771 if–(
s
 = 
	`gëív
("EF_SOCK_LOCK_BUZZ")) )

772 
›ts
->
sock_lock_buzz
 = 
	`©oi
(
s
);

773 if–(
s
 = 
	`gëív
("EF_STACK_LOCK_BUZZ")) )

774 
›ts
->
°ack_lock_buzz
 = 
	`©oi
(
s
);

775 if–(
s
 = 
	`gëív
("EF_SO_BUSY_POLL_SPIN")) )

776 
›ts
->
so_busy_pﬁl_•ö
 = 
	`©oi
(
s
);

782 #i‡
CI_CFG_POISON_BUFS


783 if–(
s
 = 
	`gëív
("EF_POISON")ËË
›ts
->
pois⁄_rx_buf
 = 
	`©oi
(s);

785 #i‡
CI_CFG_RANDOM_DROP


786 if–(
s
 = 
	`gëív
("EF_RX_DROP_RATE")) ) {

787 
r
 = 
	`©oi
(
s
);

788 if–
r
 ) 
›ts
->
rx_dr›_øã
 = 
RAND_MAX
 /Ñ;

791 if–(
s
 = 
	`gëív
("EF_URG_RFC")) )

792 
›ts
->
urg_rfc
 = 
	`©oi
(
s
);

793 #i‡
CI_CFG_UDP


794 if–(
s
 = 
	`gëív
("EF_MCAST_RECV")) )

795 
›ts
->
mˇ°_ªcv
 = 
	`©oi
(
s
);

796 if–(
s
 = 
	`gëív
("EF_FORCE_SEND_MULTICAST")) )

797 
›ts
->
f‹˚_£nd_mu…iˇ°
 = 
	`©oi
(
s
);

798 if–(
s
 = 
	`gëív
("EF_MCAST_SEND")) )

799 
›ts
->
mˇ°_£nd
 = 
	`©oi
(
s
);

800 if–(
s
 = 
	`gëív
("EF_MULTICAST_LOOP_OFF")) ) {

801 
›ts
->
mu…iˇ°_lo›_off
 = 
	`©oi
(
s
);

802  
›ts
->
mu…iˇ°_lo›_off
 ) {

804 
›ts
->
mˇ°_£nd
 = 
CITP_MCAST_SEND_FLAG_LOCAL
;

807 
›ts
->
mˇ°_£nd
 = 0;

811 if–(
s
 = 
	`gëív
("EF_MCAST_RECV_HW_LOOP")) )

812 
›ts
->
mˇ°_ªcv_hw_lo›
 = 
	`©oi
(
s
);

814 if–(
s
 = 
	`gëív
("EF_EVS_PER_POLL")) )

815 
›ts
->
evs_≥r_pﬁl
 = 
	`©oi
(
s
);

816 if–(
s
 = 
	`gëív
("EF_TCP_TCONST_MSL")) )

817 
›ts
->
m¶_£c⁄ds
 = 
	`©oi
(
s
);

818 if–(
s
 = 
	`gëív
("EF_TCP_FIN_TIMEOUT")) )

819 
›ts
->
fö_timeout
 = 
	`©oi
(
s
);

820 if–(
s
 = 
	`gëív
("EF_TCP_ADV_WIN_SCALE_MAX")) )

821 
›ts
->
t˝_adv_wö_sˇÀ_max
 = 
	`©oi
(
s
);

823 if–(
s
 = 
	`gëív
("EF_TCP_SYN_OPTS")) ) {

824 
v
;

825 
	`ci_vîify
(
	`ssˇnf
(
s
, "%x", &
v
) == 1);

826 
›ts
->
syn_›ts
 = 
v
;

829 i‡–(
s
 = 
	`gëív
("EF_MAX_PACKETS")) ) {

830 
max_∑ckës_rq
 = 
	`©oi
(
s
);

831 
›ts
->
max_∑ckës
 = (
max_∑ckës_rq
 + 
PKTS_PER_SET
 - 1) &

832 ~(
PKTS_PER_SET
 - 1);

833 if–
›ts
->
max_∑ckës
 !
max_∑ckës_rq
 )

836 
›ts
->
max_rx_∑ckës
 = o±s->
max_∑ckës
 * 3 / 4;

837 
›ts
->
max_tx_∑ckës
 = o±s->
max_∑ckës
 * 3 / 4;

839 i‡–(
s
 = 
	`gëív
("EF_MAX_RX_PACKETS")) ) {

840 
›ts
->
max_rx_∑ckës
 = 
	`©oi
(
s
);

841 if–
›ts
->
max_rx_∑ckës
 > o±s->
max_∑ckës
 )

842 
›ts
->
max_rx_∑ckës
 = o±s->
max_∑ckës
;

844 i‡–(
s
 = 
	`gëív
("EF_MAX_TX_PACKETS")) ) {

845 
›ts
->
max_tx_∑ckës
 = 
	`©oi
(
s
);

846 if–
›ts
->
max_tx_∑ckës
 > o±s->
max_∑ckës
 )

847 
›ts
->
max_tx_∑ckës
 = o±s->
max_∑ckës
;

849 i‡–(
s
 = 
	`gëív
("EF_RXQ_MIN")) )

850 
›ts
->
rxq_mö
 = 
	`©oi
(
s
);

851 i‡–(
s
 = 
	`gëív
("EF_MIN_FREE_PACKETS")) )

852 
›ts
->
mö_‰ì_∑ckës
 = 
	`©oi
(
s
);

853 if–(
s
 = 
	`gëív
("EF_PREFAULT_PACKETS")) )

854 
›ts
->
¥eÁu…_∑ckës
 = 
	`©oi
(
s
);

855 #i‡
CI_CFG_PIO


856 i‡–(
s
 = 
	`gëív
("EF_PIO")) )

857 
›ts
->
pio
 = 
	`©oi
(
s
);

859 i‡–(
s
 = 
	`gëív
("EF_MAX_ENDPOINTS")) )

860 
›ts
->
max_ï_bufs
 = 
	`©oi
(
s
);

861 i‡–(
s
 = 
	`gëív
("EF_SHARE_WITH")) )

862 
›ts
->
sh¨e_wôh
 = 
	`©oi
(
s
);

863 #i‡
CI_CFG_PKTS_AS_HUGE_PAGES


864 if–!
	`check_hp
(
›ts
) ){

865 if–(
s
 = 
	`gëív
("EF_USE_HUGE_PAGES")) ) {

866 
›ts
->
huge_∑ges
 = 
	`©oi
(
s
);

868 if–
›ts
->
huge_∑ges
 !0 && o±s->
sh¨e_wôh
 != 0 ) {

869 
	`CONFIG_LOG
(
›ts
, 
CONFIG_WARNINGS
, "Turning hugeÖages off becauseÅhe "

871 
›ts
->
huge_∑ges
 = 0;

875 i‡–(
s
 = 
	`gëív
("EF_COMPOUND_PAGES_MODE")) )

876 
›ts
->
compound_∑ges
 = 
	`©oi
(
s
);

877 i‡–(
s
 = 
	`gëív
("EF_SYNC_CPLANE_AT_CREATE")) ) {

878 
›ts
->
sync_˝œ√
 = 
	`©oi
(
s
);

880 i‡–(
s
 = 
	`gëív
("EF_RXQ_SIZE")) )

881 
›ts
->
rxq_size
 = 
	`©oi
(
s
);

882 i‡–(
s
 = 
	`gëív
("EF_RXQ_LIMIT")) )

883 
›ts
->
rxq_limô
 = 
	`©oi
(
s
);

884 i‡–(
s
 = 
	`gëív
("EF_TXQ_SIZE")) )

885 
›ts
->
txq_size
 = 
	`©oi
(
s
);

886 i‡–(
s
 = 
	`gëív
("EF_TXQ_LIMIT")) )

887 
›ts
->
txq_limô
 = 
	`©oi
(
s
);

888 i‡–(
s
 = 
	`gëív
("EF_SEND_POLL_THRESH")) )

889 
›ts
->
£nd_pﬁl_thªsh
 = 
	`©oi
(
s
);

890 i‡–(
s
 = 
	`gëív
("EF_SEND_POLL_MAX_EVS")) )

891 
›ts
->
£nd_pﬁl_max_evíts
 = 
	`©oi
(
s
);

892 i‡–(
s
 = 
	`gëív
("EF_DEFER_WORK_LIMIT")) )

893 
›ts
->
de„r_w‹k_limô
 = 
	`©oi
(
s
);

894 #i‡
CI_CFG_UDP


895 if–(
s
 = 
	`gëív
("EF_UDP_SEND_UNLOCK_THRESH")) )

896 
›ts
->
udp_£nd_u∆ock_thªsh
 = 
	`©oi
(
s
);

897 if–(
s
 = 
	`gëív
("EF_UDP_PORT_HANDOVER_MIN")) )

898 
›ts
->
udp_p‹t_h™dovî_mö
 = 
	`©oi
(
s
);

899 if–(
s
 = 
	`gëív
("EF_UDP_PORT_HANDOVER_MAX")) )

900 
›ts
->
udp_p‹t_h™dovî_max
 = 
	`©oi
(
s
);

901 if–(
s
 = 
	`gëív
("EF_UDP_PORT_HANDOVER2_MIN")) )

902 
›ts
->
udp_p‹t_h™dovî2_mö
 = 
	`©oi
(
s
);

903 if–(
s
 = 
	`gëív
("EF_UDP_PORT_HANDOVER2_MAX")) )

904 
›ts
->
udp_p‹t_h™dovî2_max
 = 
	`©oi
(
s
);

905 if–(
s
 = 
	`gëív
("EF_UDP_PORT_HANDOVER3_MIN")) )

906 
›ts
->
udp_p‹t_h™dovî3_mö
 = 
	`©oi
(
s
);

907 if–(
s
 = 
	`gëív
("EF_UDP_PORT_HANDOVER3_MAX")) )

908 
›ts
->
udp_p‹t_h™dovî3_max
 = 
	`©oi
(
s
);

910 i‡–(
s
 = 
	`gëív
("EF_DELACK_THRESH")) )

911 
›ts
->
dñack_thªsh
 = 
	`©oi
(
s
);

912 #i‡
CI_CFG_DYNAMIC_ACK_RATE


913 i‡–(
s
 = 
	`gëív
("EF_DYNAMIC_ACK_THRESH")) )

914 
›ts
->
dy«ck_thªsh
 = 
	`©oi
(
s
);

918 
›ts
->
dy«ck_thªsh
 = 
	`CI_MAX
(›ts->dy«ck_thªsh, o±s->
dñack_thªsh
);

920 #i‡
CI_CFG_FD_CACHING


921 i‡–(
s
 = 
	`gëív
("EF_SOCKET_CACHE_MAX")) )

922 
›ts
->
sock_ˇche_max
 = 
	`©oi
(
s
);

923 i‡–(
s
 = 
	`gëív
("EF_PER_SOCKET_CACHE_MAX")) )

924 
›ts
->
≥r_sock_ˇche_max
 = 
	`©oi
(
s
);

925 if–
›ts
->
≥r_sock_ˇche_max
 <= 0 )

926 
›ts
->
≥r_sock_ˇche_max
 = o±s->
sock_ˇche_max
;

929 #i‡
CI_CFG_PORT_STRIPING


931 i‡–(
s
 = 
	`gëív
("EF_STRIPE_NETMASK")) ) {

932 
a1
, 
a2
, 
a3
, 
a4
;

933 
	`ssˇnf
(
s
, "%d.%d.%d.%d", &
a1
, &
a2
, &
a3
, &
a4
);

934 
›ts
->
°rùe_√tmask_be32
 = (
a1
 << 24Ë| (
a2
 << 16Ë| (
a3
 << 8Ë| 
a4
;

935 
›ts
->
°rùe_√tmask_be32
 = 
	`CI_BSWAP_BE32
(opts->stripe_netmask_be32);

937 i‡–(
s
 = 
	`gëív
("EF_STRIPE_DUPACK_THRESH")) ) {

938 
›ts
->
°rùe_du∑ck_thªshﬁd
 = 
	`©oi
(
s
);

939 
›ts
->
°rùe_du∑ck_thªshﬁd
 =

940 
	`CI_MAX
(
›ts
->
°rùe_du∑ck_thªshﬁd
, 
CI_CFG_TCP_DUPACK_THRESH_BASE
);

941 
›ts
->
°rùe_du∑ck_thªshﬁd
 =

942 
	`CI_MIN
(
›ts
->
°rùe_du∑ck_thªshﬁd
, 
CI_CFG_TCP_DUPACK_THRESH_MAX
);

944 if–(
s
 = 
	`gëív
("EF_STRIPE_TCP_OPT")) )

945 
›ts
->
°rùe_t˝_›t
 = 
	`©oi
(
s
);

947 if–(
s
 = 
	`gëív
("EF_TX_PUSH")) )

948 
›ts
->
tx_push
 = 
	`©oi
(
s
);

949 if–
›ts
->
tx_push
 && (
s
 = 
	`gëív
("EF_TX_PUSH_THRESHOLD")) )

950 
›ts
->
tx_push_thªsh
 = 
	`©oi
(
s
);

951 if–(
s
 = 
	`gëív
("EF_PACKET_BUFFER_MODE")) )

952 
›ts
->
∑ckë_buf„r_mode
 = 
	`©oi
(
s
);

953 if–(
s
 = 
	`gëív
("EF_TCP_RST_DELAYED_CONN")) )

954 
›ts
->
r°_dñayed_c⁄n
 = 
	`©oi
(
s
);

955 if–(
s
 = 
	`gëív
("EF_TCP_SNDBUF_MODE")) )

956 
›ts
->
t˝_¢dbuf_mode
 = 
	`©oi
(
s
);

957 if–(
s
 = 
	`gëív
("EF_TCP_SEND_NONBLOCK_NO_PACKETS_MODE")) )

958 
›ts
->
t˝_n⁄block_no_pkts_mode
 = 
	`©oi
(
s
);

959 if–(
s
 = 
	`gëív
("EF_TCP_RCVBUF_STRICT")) )

960 
›ts
->
t˝_rcvbuf_°ri˘
 = 
	`©oi
(
s
);

961 if–(
s
 = 
	`gëív
("EF_TCP_RCVBUF_MODE")) )

962 
›ts
->
t˝_rcvbuf_mode
 = 
	`©oi
(
s
);

963 if–(
s
 = 
	`gëív
("EF_TCP_LISTEN_REPLIES_BACK")) )

964 
›ts
->
t˝_li°í_ª∂õs_back
 = 
	`©oi
(
s
);

965 if–(
s
 = 
	`gëív
("EF_POLL_ON_DEMAND")) )

966 
›ts
->
pﬁl_⁄_dem™d
 = 
	`©oi
(
s
);

967 if–(
s
 = 
	`gëív
("EF_INT_REPRIME")) )

968 
›ts
->
öt_ª¥ime
 = 
	`©oi
(
s
);

969 if–(
s
 = 
	`gëív
("EF_IRQ_MODERATION")) )

970 
›ts
->
úq_u£c
 = 
	`©oi
(
s
);

971 if–(
s
 = 
	`gëív
("EF_NONAGLE_INFLIGHT_MAX")) )

972 
›ts
->
n⁄agÀ_öÊight_max
 = 
	`©oi
(
s
);

973 if–(
s
 = 
	`gëív
("EF_FORCE_TCP_NODELAY")) )

974 
›ts
->
t˝_f‹˚_nodñay
 = 
	`©oi
(
s
);

975 if–(
s
 = 
	`gëív
("EF_IRQ_CORE")) )

976 
›ts
->
úq_c‹e
 = 
	`©oi
(
s
);

977 if–(
s
 = 
	`gëív
("EF_IRQ_CHANNEL")) )

978 
›ts
->
úq_ch™√l
 = 
	`©oi
(
s
);

979 if–(
s
 = 
	`gëív
("EF_TCP_LISTEN_HANDOVER")) )

980 
›ts
->
t˝_li°í_h™dovî
 = 
	`©oi
(
s
);

981 if–(
s
 = 
	`gëív
("EF_TCP_CONNECT_HANDOVER")) )

982 
›ts
->
t˝_c⁄√˘_h™dovî
 = 
	`©oi
(
s
);

983 if–(
s
 = 
	`gëív
("EF_UDP_CONNECT_HANDOVER")) )

984 
›ts
->
udp_c⁄√˘_h™dovî
 = 
	`©oi
(
s
);

985 #i‡
CI_CFG_UDP_SEND_UNLOCK_OPT


986 if–(
s
 = 
	`gëív
("EF_UDP_SEND_UNLOCKED")) )

987 
›ts
->
udp_£nd_u∆ocked
 = 
	`©oi
(
s
);

989 if–(
s
 = 
	`gëív
("EF_UDP_SEND_NONBLOCK_NO_PACKETS_MODE")) )

990 
›ts
->
udp_n⁄block_no_pkts_mode
 = 
	`©oi
(
s
);

991 if–(
s
 = 
	`gëív
("EF_UNCONFINE_SYN")) )

992 
›ts
->
unc⁄föe_syn
 = 
	`©oi
(
s
) != 0;

993 if–(
s
 = 
	`gëív
("EF_BINDTODEVICE_HANDOVER")) )

994 
›ts
->
bödtodevi˚_h™dovî
 = 
	`©oi
(
s
) != 0;

995 if–(
s
 = 
	`gëív
("EF_MCAST_JOIN_BINDTODEVICE")) )

996 
›ts
->
mˇ°_joö_bödtodevi˚
 = 
	`©oi
(
s
) != 0;

997 #i‡
CI_CFG_RATE_PACING


998 if–(
s
 = 
	`gëív
("EF_TX_QOS_CLASS")) ) {

999 
›ts
->
tx_qos_˛ass
 = 
	`©oi
(
s
) != 0;

1000 
›ts
->
tx_mö_ùg_˙é
 = -1;

1003 if–(
s
 = 
	`gëív
("EF_MCAST_JOIN_HANDOVER")) )

1004 
›ts
->
mˇ°_joö_h™dovî
 = 
	`©oi
(
s
);

1006 if–(
s
 = 
	`gëív
("EF_TCP_SERVER_LOOPBACK")) )

1007 
›ts
->
t˝_£rvî_lo›back
 = 
	`©oi
(
s
);

1008 if–(
s
 = 
	`gëív
("EF_TCP_CLIENT_LOOPBACK")) )

1009 
›ts
->
t˝_˛õ¡_lo›back
 = 
	`©oi
(
s
);

1011 if–
›ts
->
t˝_£rvî_lo›back
 =
CITP_TCP_LOOPBACK_OFF
 &&

1012 
›ts
->
t˝_˛õ¡_lo›back
 =
CITP_TCP_LOOPBACK_SAMESTACK
 )

1013 
›ts
->
t˝_˛õ¡_lo›back
 = 
CITP_TCP_LOOPBACK_OFF
;

1015 if–(
s
 = 
	`gëív
("EF_TCP_RX_CHECKS")) ) {

1016 
v
;

1017 
	`ci_vîify
(
	`ssˇnf
(
s
, "%x", &
v
) == 1);

1018 
›ts
->
t˝_rx_checks
 = 
v
;

1019 if–(
s
 = 
	`gëív
("EF_TCP_RX_LOG_FLAGS")) ) {

1020 
	`ci_vîify
(
	`ssˇnf
(
s
, "%x", &
v
) == 1);

1021 
›ts
->
t˝_rx_log_Êags
 = 
v
;

1024 if–(
s
 = 
	`gëív
("EF_SELECT_SPIN")) )

1025 
›ts
->
ul_£À˘_•ö
 = 
	`©oi
(
s
);

1026 if–(
s
 = 
	`gëív
("EF_POLL_SPIN")) )

1027 
›ts
->
ul_pﬁl_•ö
 = 
	`©oi
(
s
);

1028 #i‡
CI_CFG_USERSPACE_EPOLL


1029 if–(
s
 = 
	`gëív
("EF_EPOLL_SPIN")) )

1030 
›ts
->
ul_ïﬁl_•ö
 = 
	`©oi
(
s
);

1032 #i‡
CI_CFG_UDP


1033 if–(
s
 = 
	`gëív
("EF_UDP_RECV_SPIN")) )

1034 
›ts
->
udp_ªcv_•ö
 = 
	`©oi
(
s
);

1035 if–(
s
 = 
	`gëív
("EF_UDP_SEND_SPIN")) )

1036 
›ts
->
udp_£nd_•ö
 = 
	`©oi
(
s
);

1038 if–(
s
 = 
	`gëív
("EF_TCP_RECV_SPIN")) )

1039 
›ts
->
t˝_ªcv_•ö
 = 
	`©oi
(
s
);

1040 if–(
s
 = 
	`gëív
("EF_TCP_SEND_SPIN")) )

1041 
›ts
->
t˝_£nd_•ö
 = 
	`©oi
(
s
);

1042 if–(
s
 = 
	`gëív
("EF_TCP_ACCEPT_SPIN")) )

1043 
›ts
->
t˝_ac˚±_•ö
 = 
	`©oi
(
s
);

1044 if–(
s
 = 
	`gëív
("EF_TCP_CONNECT_SPIN")) )

1045 
›ts
->
t˝_c⁄√˘_•ö
 = 
	`©oi
(
s
);

1046 if–(
s
 = 
	`gëív
("EF_PKT_WAIT_SPIN")) )

1047 
›ts
->
pkt_waô_•ö
 = 
	`©oi
(
s
);

1048 #i‡
CI_CFG_USERSPACE_PIPE


1049 if–(
s
 = 
	`gëív
("EF_PIPE_RECV_SPIN")) )

1050 
›ts
->
pùe_ªcv_•ö
 = 
	`©oi
(
s
);

1051 if–(
s
 = 
	`gëív
("EF_PIPE_SEND_SPIN")) )

1052 
›ts
->
pùe_£nd_•ö
 = 
	`©oi
(
s
);

1053 if–(
s
 = 
	`gëív
("EF_PIPE_SIZE")) )

1054 
›ts
->
pùe_size
 = 
	`©oi
(
s
);

1057 if–(
s
 = 
	`gëív
("EF_ACCEPTQ_MIN_BACKLOG")) )

1058 
›ts
->
ac˚±q_mö_backlog
 = 
	`©oi
(
s
);

1060 i‡–(
s
 = 
	`gëív
("EF_TCP_SNDBUF")) )

1061 
›ts
->
t˝_¢dbuf_u£r
 = 
	`©oi
(
s
);

1062 i‡–(
s
 = 
	`gëív
("EF_TCP_RCVBUF")) )

1063 
›ts
->
t˝_rcvbuf_u£r
 = 
	`©oi
(
s
);

1064 i‡–(
s
 = 
	`gëív
("EF_UDP_SNDBUF")) )

1065 
›ts
->
udp_¢dbuf_u£r
 = 
	`©oi
(
s
);

1066 i‡–(
s
 = 
	`gëív
("EF_UDP_RCVBUF")) )

1067 
›ts
->
udp_rcvbuf_u£r
 = 
	`©oi
(
s
);

1069 if–(
s
 = 
	`gëív
("EF_TCP_SNDBUF_ESTABLISHED_DEFAULT")) )

1070 
›ts
->
t˝_¢dbuf_e°_def
 = 
	`©oi
(
s
);

1071 if–(
s
 = 
	`gëív
("EF_TCP_RCVBUF_ESTABLISHED_DEFAULT")) )

1072 
›ts
->
t˝_rcvbuf_e°_def
 = 
	`©oi
(
s
);

1074 if–
›ts
->
t˝_¢dbuf_u£r
 != 0 ) {

1075 
›ts
->
t˝_¢dbuf_mö
 = o±s->
t˝_¢dbuf_max
 = o±s->
t˝_¢dbuf_u£r
;

1076 
›ts
->
t˝_¢dbuf_def
 = 
	`oo_adju°_SO_XBUF
(›ts->
t˝_¢dbuf_u£r
);

1078 if–
›ts
->
t˝_rcvbuf_u£r
 != 0 ) {

1079 
›ts
->
t˝_rcvbuf_mö
 = o±s->
t˝_rcvbuf_max
 = o±s->
t˝_rcvbuf_u£r
;

1080 
›ts
->
t˝_rcvbuf_def
 = 
	`oo_adju°_SO_XBUF
(›ts->
t˝_rcvbuf_u£r
);

1082 if–
›ts
->
udp_¢dbuf_u£r
 != 0 ) {

1083 
›ts
->
udp_¢dbuf_mö
 = o±s->
udp_¢dbuf_max
 = o±s->
udp_¢dbuf_u£r
;

1084 
›ts
->
udp_¢dbuf_def
 = 
	`oo_adju°_SO_XBUF
(›ts->
udp_¢dbuf_u£r
);

1086 if–
›ts
->
udp_rcvbuf_u£r
 != 0 ) {

1087 
›ts
->
udp_rcvbuf_mö
 = o±s->
udp_rcvbuf_max
 = o±s->
udp_rcvbuf_u£r
;

1088 
›ts
->
udp_rcvbuf_def
 = 
	`oo_adju°_SO_XBUF
(›ts->
udp_rcvbuf_u£r
);

1091 i‡–(
s
 = 
	`gëív
("EF_RETRANSMIT_THRESHOLD_SYNACK")) )

1092 
›ts
->
ªå™smô_thªshﬁd_sy«ck
 = 
	`©oi
(
s
);

1094 i‡–(
s
 = 
	`gëív
("EF_RETRANSMIT_THRESHOLD_SYN")) )

1095 
›ts
->
ªå™smô_thªshﬁd_syn
 = 
	`©oi
(
s
);

1097 i‡–(
s
 = 
	`gëív
("EF_RETRANSMIT_THRESHOLD")) )

1098 
›ts
->
ªå™smô_thªshﬁd
 = 
	`©oi
(
s
);

1100 i‡–(
s
 = 
	`gëív
("EF_TCP_BACKLOG_MAX")) ) {

1101 
›ts
->
t˝_backlog_max
 = 
	`©oi
(
s
);

1102 i‡–
	`gëív
("EF_TCP_SYNRECV_MAX"Ë=
NULL
 ) {

1103 
›ts
->
t˝_syƒecv_max
 = o±s->
t˝_backlog_max
 *

1104 
CI_CFG_ASSUME_LISTEN_SOCKS
;

1107 i‡–(
s
 = 
	`gëív
("EF_TCP_SYNRECV_MAX")) ) {

1108 
›ts
->
t˝_syƒecv_max
 = 
	`©oi
(
s
);

1114 if–
›ts
->
t˝_syƒecv_max
 * 4 > o±s->
max_ï_bufs
 * 7 ) {

1115 
	`CONFIG_LOG
(
›ts
, 
CONFIG_WARNINGS
, "%s: EF_TCP_SYNRECV_MAX=%dánd "

1117 
›ts
->
t˝_syƒecv_max
 * 2 > o±s->
max_ï_bufs
 * 7 ?

1119 
›ts
->
t˝_syƒecv_max
, o±s->
max_ï_bufs
);

1120 if–
	`gëív
("EF_TCP_SYNRECV_MAX"Ë=
NULL
 ) {

1121 
	`CONFIG_LOG
(
›ts
, 
CONFIG_WARNINGS
, "EF_TCP_SYNRECV_MAX is setÅo %d "

1124 
›ts
->
t˝_syƒecv_max
,

1125 
	`gëív
("EF_TCP_BACKLOG_MAX"Ë=
NULL
 ?

1128 
CI_CFG_ASSUME_LISTEN_SOCKS
);

1130 
	`CONFIG_LOG
(
›ts
, 
CONFIG_WARNINGS
, "Too fewÉndpointsÑequested: ~4 "

1134 i‡–(
s
 = 
	`gëív
("EF_TCP_INITIAL_CWND")) )

1135 
›ts
->
öôül_cwnd
 = 
	`©oi
(
s
);

1136 i‡–(
s
 = 
	`gëív
("EF_TCP_LOSS_MIN_CWND")) )

1137 
›ts
->
loss_mö_cwnd
 = 
	`©oi
(
s
);

1138 #i‡
CI_CFG_TCP_FASTSTART


1139 i‡–(
s
 = 
	`gëív
("EF_TCP_FASTSTART_INIT")) )

1140 
›ts
->
t˝_Á°°¨t_öô
 = 
	`©oi
(
s
);

1141 i‡–(
s
 = 
	`gëív
("EF_TCP_FASTSTART_IDLE")) )

1142 
›ts
->
t˝_Á°°¨t_idÀ
 = 
	`©oi
(
s
);

1143 i‡–(
s
 = 
	`gëív
("EF_TCP_FASTSTART_LOSS")) )

1144 
›ts
->
t˝_Á°°¨t_loss
 = 
	`©oi
(
s
);

1147 i‡–(
s
 = 
	`gëív
("EF_RFC_RTO_INITIAL")))

1148 
›ts
->
πo_öôül
 = 
	`©oi
(
s
);

1149 i‡–(
s
 = 
	`gëív
("EF_RFC_RTO_MIN")))

1150 
›ts
->
πo_mö
 = 
	`©oi
(
s
);

1151 i‡–(
s
 = 
	`gëív
("EF_RFC_RTO_MAX")))

1152 
›ts
->
πo_max
 = 
	`©oi
(
s
);

1153 #i‚de‡
NDEBUG


1154 if–(
s
 = 
	`gëív
("EF_TCP_MAX_SEQERR_MSGS")))

1155 
›ts
->
t˝_max_£qîr_msg
 = 
	`©oi
(
s
);

1157 #i‡
CI_CFG_BURST_CONTROL


1158 i‡–(
s
 = 
	`gëív
("EF_BURST_CONTROL_LIMIT")))

1159 
›ts
->
bur°_c⁄åﬁ_limô
 = 
	`©oi
(
s
);

1161 #i‡
CI_CFG_RATE_PACING


1162 i‡–(
s
 = 
	`gëív
("EF_TX_MIN_IPG_CNTL")) )

1163 
›ts
->
tx_mö_ùg_˙é
 = 
	`©oi
(
s
);

1165 #i‡
CI_CFG_CONG_AVOID_NOTIFIED


1166 i‡–(
s
 = 
	`gëív
("EF_CONG_NOTIFY_THRESH")))

1167 
›ts
->
c⁄g_nŸify_thªsh
 = 
	`©oi
(
s
);

1169 #i‡
CI_CFG_TAIL_DROP_PROBE


1170 i‡–(
s
 = 
	`gëív
("EF_TAIL_DROP_PROBE")))

1171 
›ts
->
èû_dr›_¥obe
 = 
	`©oi
(
s
);

1173 #i‡
CI_CFG_CONG_AVOID_SCALE_BACK


1174 i‡–(
s
 = 
	`gëív
("EF_CONG_AVOID_SCALE_BACK")))

1175 
›ts
->
c⁄g_avoid_sˇÀ_back
 = 
	`©oi
(
s
);

1179 i‡(
CITP_OPTS
.
ac˚±_f‹˚_öhîô_n⁄block
)

1180 
›ts
->
ac˚±_öhîô_n⁄block
 = 1;

1182 i‡–(
s
 = 
	`gëív
("EF_FREE_PACKETS_LOW_WATERMARK")) )

1183 
›ts
->
‰ì_∑ckës_low
 = 
	`©oi
(
s
);

1184 if–
›ts
->
‰ì_∑ckës_low
 == 0 )

1185 
›ts
->
‰ì_∑ckës_low
 = o±s->
rxq_size
 / 2;

1187 #i‡
CI_CFG_PIO


1188 if–
›ts
->
pio
 == 0 )

1190 
›ts
->
pio_thªsh
 = 0;

1191 i‡–(
s
 = 
	`gëív
("EF_PIO_THRESHOLD")) )

1192 
›ts
->
pio_thªsh
 = 
	`©oi
(
s
);

1195 if–(
s
 = 
	`gëív
("EF_RX_TIMESTAMPING")) )

1196 
›ts
->
rx_time°ampög
 = 
	`©oi
(
s
);

1198 if–(
s
 = 
	`gëív
("EF_TX_TIMESTAMPING")) )

1199 
›ts
->
tx_time°ampög
 = 
	`©oi
(
s
);

1201 if–(
s
 = 
	`gëív
("EF_TIMESTAMPING_REPORTING")) )

1202 
›ts
->
time°ampög_ªp‹tög
 = 
	`©oi
(
s
);

1204 if–(
s
 = 
	`gëív
("EF_TCP_SYNCOOKIES")) )

1205 
›ts
->
t˝_syncookõs
 = 
	`©oi
(
s
);

1207 if–(
s
 = 
	`gëív
("EF_CLUSTER_IGNORE")) )

1208 
›ts
->
˛u°î_ign‹e
 = 
	`©oi
(
s
);

1210 #ifde‡
ONLOAD_OFE


1211 if–(
s
 = 
	`gëív
("EF_OFE_ENGINE_SIZE")) )

1212 
›ts
->
o„_size
 = 
	`©oi
(
s
);

1214 #i‡
CI_CFG_SEPARATE_UDP_RXQ


1215 if–(
s
 = 
	`gëív
("EF_SEPARATE_UDP_RXQ")) )

1216 
›ts
->
£∑øã_udp_rxq
 = 
	`©oi
(
s
);

1219 if–(
s
 = 
	`gëív
("EF_TCP_SHARED_LOCAL_PORTS")) )

1220 
›ts
->
t˝_sh¨ed_loˇl_p‹ts
 = 
	`©oi
(
s
);

1221 if–(
s
 = 
	`gëív
("EF_TCP_SHARED_LOCAL_PORTS_MAX")) )

1222 
›ts
->
t˝_sh¨ed_loˇl_p‹ts_max
 = 
	`©oi
(
s
);

1224 if–(
s
 = 
	`gëív
("EF_HIGH_THROUGHPUT_MODE")) )

1225 
›ts
->
rx_mîge_mode
 = 
	`©oi
(
s
);

1227 
	`ci_√tif_c⁄fig_›ts_gëív_ef_sˇœbÀ_fûãrs
(
›ts
);

1228 
	}
}

1232 
	$ci_√tif_c⁄fig_›ts_gëív_ef_sˇœbÀ_fûãrs
(
ci_√tif_c⁄fig_›ts
* 
›ts
)

1234 c⁄° * 
s
;

1237 if–(
s
 = 
	`gëív
("EF_SCALABLE_FILTERS")) ) {

1238 
i‚ame
[
IFNAMSIZ
] = {};

1239 c⁄° * 
mode
;

1241 
mode
 = 
	`°rchr
(
s
, '=');

1242 
	`°∫˝y
(
i‚ame
, 
s
, 
	`CI_MIN
(
mode
 - s, (ifname) - 1));

1243 
›ts
->
sˇœbÀ_fûãr_ifödex
 = 
	`if_«mëoödex
(
i‚ame
);

1246 if–
›ts
->
sˇœbÀ_fûãr_ifödex
 > 0 ) {

1250 if–
mode
 =
NULL
 )

1251 
mode
 = 
	`gëív
("EF_SCALABLE_FILTERS_MODE");

1253 ++
mode
;

1256 if–
mode
 && *mode ) {

1257 
mode_vÆue
 = 
CITP_SCALABLE_MODE_NONE
;

1258 
mode_£t
 = 0;

1259 °ru˘ {c⁄° * 
«me
; 
mode
;} 
modes
[] = {

1260 {"å™•¨ít_a˘ive", 
CITP_SCALABLE_MODE_TPROXY_ACTIVE
},

1261 {"∑ssive", 
CITP_SCALABLE_MODE_PASSIVE
},

1262 {"rss", 
CITP_SCALABLE_MODE_RSS
},

1264  *
mode
 ) {

1265 c⁄° * 
mode_íd
 = 
	`°rch∫ul
(
mode
, ':');

1266 
Àn
 = 
mode_íd
 - 
mode
;

1267 
i
;

1268  
i
 = 0; i < (
modes
) / (*modes); ++i )

1269 if–
	`°∫cmp
(
modes
[
i
].
«me
, 
mode
, 
Àn
) == 0 &&

1270 
modes
[
i
].
«me
[
Àn
] == 0 ) {

1271 
mode_vÆue
 |
modes
[
i
].
mode
;

1272 
mode_£t
 |= 3;

1275 if–! (
mode_£t
 & 1) ) {

1276 
	`CONFIG_LOG
(
›ts
, 
CONFIG_WARNINGS
, "config: ErrorÖarsing "

1278 "fûã∏mode", 
mode
);

1279 
›ts
->
sˇœbÀ_fûãr_mode
 = 
CITP_SCALABLE_MODE_NONE
;

1280 
mode_£t
 = 0;

1283 
mode
 = 
mode_íd
;

1284 if–*
mode
 )

1285 ++
mode
;

1286 
mode_£t
 &= ~1;

1289 if–
mode_£t
 ) {

1290 
modes_suµ‹ãd
[] = {

1291 
CITP_SCALABLE_MODE_TPROXY_ACTIVE
,

1292 
CITP_SCALABLE_MODE_PASSIVE
,

1293 
CITP_SCALABLE_MODE_TPROXY_ACTIVE
 | 
CITP_SCALABLE_MODE_PASSIVE
,

1294 
CITP_SCALABLE_MODE_TPROXY_ACTIVE
 | 
CITP_SCALABLE_MODE_RSS
};

1295 
n_modes
 = (
modes_suµ‹ãd
)/(*modes_supported);

1296 
Áû
 = 1;

1297 
i
;

1299 
›ts
->
sˇœbÀ_fûãr_mode
 = 
mode_vÆue
;

1301  
i
 = 0; i < 
n_modes
; ++i) {

1302 if–
›ts
->
sˇœbÀ_fûãr_mode
 =
modes_suµ‹ãd
[
i
] ) {

1303 
Áû
 = 0;

1307 if–
Áû
 ) {

1308 
	`CONFIG_LOG
(
›ts
, 
CONFIG_WARNINGS
, "config: Unsupported scalable "

1310 
›ts
->
sˇœbÀ_fûãr_mode
 = 
CITP_SCALABLE_MODE_NONE
;

1314 
›ts
->
sˇœbÀ_fûãr_mode
 = 
CITP_SCALABLE_MODE_NONE
;

1320 i‡–
›ts
->
sˇœbÀ_fûãr_mode
 < 0 ) {

1321 
›ts
->
sˇœbÀ_fûãr_mode
 = o±s->
sˇœbÀ_fûãr_ifödex
 > 0 ?

1322 (
CITP_SCALABLE_MODE_TPROXY_ACTIVE
 |

1323 
CITP_SCALABLE_MODE_PASSIVE
) :

1324 
CITP_SCALABLE_MODE_NONE
;

1329 
	`CONFIG_LOG
(
›ts
, 
CONFIG_WARNINGS
, "config: CouldÇot determine ifindex "

1330 "‰omÇamê'%s', dißblög sˇœbÀ fûã∏mode.", 
i‚ame
);

1331 
›ts
->
sˇœbÀ_fûãr_mode
 = 
CITP_SCALABLE_MODE_NONE
;

1334 if–
›ts
->
sˇœbÀ_fûãr_mode
 !
CITP_SCALABLE_MODE_NONE
 ) {

1335 if–(
s
 = 
	`gëív
("EF_SCALABLE_FILTERS_ENABLE")) )

1336 
›ts
->
sˇœbÀ_fûãr_íabÀ
 = 
	`©oi
(
s
);

1338 
›ts
->
sˇœbÀ_fûãr_íabÀ
 = 
CITP_SCALABLE_FILTERS_ENABLE
;

1341 
›ts
->
sˇœbÀ_fûãr_íabÀ
 = 
CITP_SCALABLE_FILTERS_DISABLE
;

1345 if–(
s
 = 
	`gëív
("EF_SCALABLE_FILTERS_ENABLE")) )

1346 
	`CONFIG_LOG
(
›ts
, 
CONFIG_WARNINGS
, "config: EF_SCALABLE_FILTERS_ENABLE "

1348 
›ts
->
sˇœbÀ_fûãr_íabÀ
 = 
CITP_SCALABLE_FILTERS_DISABLE
;

1350 
	}
}

1356 
	$ci_√tif_c⁄fig_›ts_dump
(
ci_√tif_c⁄fig_›ts
* 
›ts
)

1358 c⁄° 
ci_√tif_c⁄fig_›ts
 
deÁu…s
 = {

1359 #unde‡
CI_CFG_OPTFILE_VERSION


1360 #unde‡
CI_CFG_OPT


1361 #unde‡
CI_CFG_OPTGROUP


1363 
	#CI_CFG_OPTFILE_VERSION
(
vîsi⁄
)

	)

1364 
	#CI_CFG_OPTGROUP
(
group
, 
ˇãg‹y
, 
ex≥πi£
)

	)

1365 
	#CI_CFG_OPT
(
ív
, 
«me
, 
ty≥
, 
doc
, 
bôs
, 
group
, , 
mö
, 
max
, 
¥e£¡©i⁄
) \

1366 ,

	)

1368 
	~<ci/öã∫Æ/›ts_√tif_def.h
>

1371 #unde‡
CI_CFG_OPTFILE_VERSION


1372 #unde‡
CI_CFG_OPT


1373 #unde‡
CI_CFG_OPTGROUP


1375 
	#ci_uöt32_fmt
 "%u"

	)

1376 
	#ci_uöt16_fmt
 "%u"

	)

1377 
	#ci_öt32_fmt
 "%d"

	)

1378 
	#ci_öt16_fmt
 "%d"

	)

1379 
	#ci_ùtime_t_fmt
 "%u"

	)

1381 
	#CI_CFG_OPTFILE_VERSION
(
vîsi⁄
)

	)

1382 
	#CI_CFG_OPTGROUP
(
group
, 
ˇãg‹y
, 
ex≥πi£
)

	)

1383 
	#CI_CFG_OPT
(
ív
, 
«me
, 
ty≥
, 
doc
, 
bôs
, 
group
, , 
mö
, 
max
, 
¥e£¡©i⁄
) \

1384 if–
	`°æí
(
ív
) != 0 ) { \

1385 if–
›ts
->
«me
 =
deÁu…s
.name ) \

1386 
	`ci_log
("%30s: " 
ty≥
##
_fmt
, 
ív
, 
›ts
->
«me
); \

1388 
	`ci_log
("%30s: " 
ty≥
##
_fmt
 " (deÁu…: "Åy≥##_fmt")", 
ív
, \

1389 
›ts
->
«me
, 
deÁu…s
.name); \

1390 }

	)

1392 
	`ci_log
(" NDEBUG: %d", ! 
IS_DEBUG
);

1393 
	~<ci/öã∫Æ/›ts_√tif_def.h
>

1394 
	}
}

1404 
	$√tif_t˝_hñ≥r_buûd2
(
ci_√tif
* 
ni
)

1406 
ni
->
fûãr_èbÀ
 =

1407 (
ci_√tif_fûãr_èbÀ
*Ë((*Ë
ni
->
°©e
 +Çi->°©e->
èbÀ_ofs
);

1408 
ni
->
∑ckës
 = (
oo_pktbuf_m™agî
*Ë((*Ëni->
°©e
 +Çi->°©e->
buf_ofs
);

1409 
	}
}

1412 #i‚de‡
__KERNEL__


1414 
	$√tif_t˝_hñ≥r_munm≠
(
ci_√tif
* 
ni
)

1416 
rc
;

1418 if–
ni
->
timesync
 !
NULL
 ) {

1419 
rc
 = 
	`oo_ªsour˚_munm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1420 
ni
->
timesync
,Çi->
°©e
->
timesync_byãs
);

1421 if–
rc
 < 0 ) 
	`LOG_NV
(
	`ci_log
("%s: munm≠Åimesyn¯%d", 
__FUNCTION__
,Ñc));

1426 
id
;

1429  
id
 = 0; id < 
ni
->
∑ckës
->
£ts_n
; id++ ) {

1430 if–
	`PKT_BUFSET_U_MMAPPED
(
ni
, 
id
) ) {

1431 #i‡
CI_CFG_PKTS_AS_HUGE_PAGES


1432 if–
ni
->
∑ckës
->
£t
[
id
].
shm_id
 >= 0 )

1433 
rc
 = 
	`shmdt
(
ni
->
pkt_bufs
[
id
]);

1437 
rc
 = 
	`oo_ªsour˚_munm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1438 
ni
->
pkt_bufs
[
id
],

1439 
CI_CFG_PKT_BUF_SIZE
 * 
PKTS_PER_SET
);

1441 if–
rc
 < 0 )

1442 
	`LOG_NV
(
	`ci_log
("%s: munm≠Öackë†%d", 
__FUNCTION__
, 
rc
));

1447 #ifde‡
ONLOAD_OFE


1448 if–
ni
->
o„
 !
NULL
 ) {

1449 
rc
 = 
	`oo_ªsour˚_munm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1450 
ni
->
o„
, 
	`NI_OPTS
“i).
o„_size
);

1451 if–
rc
 < 0 ) 
	`LOG_NV
(
	`ci_log
("%s: munm≠ OFE %d", 
__FUNCTION__
,Ñc));

1455 if–
ni
->
buf_±r
 !
NULL
 ) {

1456 
rc
 = 
	`oo_ªsour˚_munm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1457 
ni
->
buf_±r
,Çi->
°©e
->
buf_mm≠_byãs
);

1458 if–
rc
 < 0 ) 
	`LOG_NV
(
	`ci_log
("%s: munm≠ buf†%d", 
__FUNCTION__
,Ñc));

1461 #i‡
CI_CFG_PIO


1462 if–
ni
->
pio_byãs_m≠≥d
 !0 &&Çi->
pio_±r
 !
NULL
 ) {

1463 
rc
 = 
	`oo_ªsour˚_munm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1464 
ni
->
pio_±r
,Çi->
pio_byãs_m≠≥d
);

1465 if–
rc
 < 0 ) 
	`LOG_NV
(
	`ci_log
("%s: munm≠Öiÿ%d", 
__FUNCTION__
,Ñc));

1469 if–
ni
->
io_±r
 !
NULL
 ) {

1470 
rc
 = 
	`oo_ªsour˚_munm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1471 
ni
->
io_±r
,Çi->
°©e
->
io_mm≠_byãs
);

1472 if–
rc
 < 0 ) 
	`LOG_NV
(
	`ci_log
("%s: munm≠ iÿ%d", 
__FUNCTION__
,Ñc));

1475 
rc
 = 
	`oo_ªsour˚_munm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1476 
ni
->
°©e
,Çi->
mm≠_byãs
);

1477 
ni
->
°©e
 = 
NULL
;

1478 if–
rc
 < 0 ) 
	`LOG_NV
(
	`ci_log
("%s: munm≠ sh¨ed sèã %d", 
__FUNCTION__
,Ñc));

1479 
	}
}

1482 
	$√tif_t˝_hñ≥r_mm≠
(
ci_√tif
* 
ni
)

1484 
ci_√tif_°©e
* 
ns
 = 
ni
->
°©e
;

1485 * 
p
;

1486 
rc
;

1489 
ni
->
timesync
 = 
NULL
;

1490 
ni
->
io_±r
 = 
NULL
;

1491 #i‡
CI_CFG_PIO


1492 
ni
->
pio_±r
 = 
NULL
;

1493 
ni
->
pio_byãs_m≠≥d
 = 0;

1495 
ni
->
buf_±r
 = 
NULL
;

1496 
ni
->
∑ckës
 = 
NULL
;

1497 #ifde‡
ONLOAD_OFE


1498 
ni
->
o„
 = 
NULL
;

1499 
ni
->
o„_ch™√l
 = 
NULL
;

1505 if–
ns
->
timesync_byãs
 != 0 ) {

1506 
rc
 = 
	`oo_ªsour˚_mm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1507 
OO_MMAP_TYPE_NETIF
,

1508 
CI_NETIF_MMAP_ID_TIMESYNC
, 
ns
->
timesync_byãs
,

1509 
OO_MMAP_FLAG_READONLY
, &
p
);

1510 if–
rc
 < 0 ) {

1511 
	`LOG_NV
(
	`ci_log
("%s: oo_ªsour˚_mm≠Åimesyn¯%d", 
__FUNCTION__
, 
rc
));

1512 
Áû1
;

1514 
ni
->
timesync
 = 
p
;

1521 if–
ns
->
io_mm≠_byãs
 != 0 ) {

1522 
rc
 = 
	`oo_ªsour˚_mm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1523 
OO_MMAP_TYPE_NETIF
,

1524 
CI_NETIF_MMAP_ID_IO
, 
ns
->
io_mm≠_byãs
,

1525 
OO_MMAP_FLAG_DEFAULT
, &
p
);

1526 if–
rc
 < 0 ) {

1527 
	`LOG_NV
(
	`ci_log
("%s: oo_ªsour˚_mm≠ iÿ%d", 
__FUNCTION__
, 
rc
));

1528 
Áû1
;

1530 
ni
->
io_±r
 = (*Ë
p
;

1533 #i‡
CI_CFG_PIO


1537 if–
ns
->
pio_mm≠_byãs
 != 0 ) {

1538 
rc
 = 
	`oo_ªsour˚_mm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1539 
OO_MMAP_TYPE_NETIF
,

1540 
CI_NETIF_MMAP_ID_PIO
, 
ns
->
pio_mm≠_byãs
,

1541 
OO_MMAP_FLAG_DEFAULT
, &
p
);

1542 if–
rc
 < 0 ) {

1543 
	`LOG_NV
(
	`ci_log
("%s: oo_ªsour˚_mm≠Öiÿ%d", 
__FUNCTION__
, 
rc
));

1544 
Áû2
;

1546 
ni
->
pio_±r
 = (
uöt8_t
*Ë
p
;

1549 
ni
->
pio_byãs_m≠≥d
 = 
ns
->
pio_mm≠_byãs
;

1556 if–
ns
->
buf_mm≠_byãs
 != 0 ) {

1557 
rc
 = 
	`oo_ªsour˚_mm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1558 
OO_MMAP_TYPE_NETIF
,

1559 
CI_NETIF_MMAP_ID_IOBUFS
, 
ns
->
buf_mm≠_byãs
,

1560 
OO_MMAP_FLAG_DEFAULT
, &
p
);

1561 if–
rc
 < 0 ) {

1562 
	`LOG_NV
(
	`ci_log
("%s: oo_ªsour˚_mm≠ iobuf†%d", 
__FUNCTION__
, 
rc
));

1563 
Áû2
;

1565 
ni
->
buf_±r
 = (*Ë
p
;

1568 #ifde‡
ONLOAD_OFE


1572 if–
	`NI_OPTS
(
ni
).
o„_size
 != 0 ) {

1573 
o„_°©s_ußge
 
°©
;

1574 
o„_°©us
 
‹c
;

1576 
rc
 = 
	`oo_ªsour˚_mm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1577 
OO_MMAP_TYPE_NETIF
,

1578 
CI_NETIF_MMAP_ID_OFE_RO
, 
	`NI_OPTS
(
ni
).
o„_size
,

1579 
OO_MMAP_FLAG_READONLY
, &
p
);

1580 if–
rc
 < 0 ) {

1581 
	`LOG_NV
(
	`ci_log
("%s: oo_ªsour˚_mm≠ OFEÉngöê%d", 
__FUNCTION__
, 
rc
));

1582 
Áû2
;

1584 
ni
->
o„
 = 
p
;

1589 
‹c
 = 
	`o„_°©s_rw_mem
(
p
, &
°©
);

1590 if–
‹c
 =
OFE_OK
 && 
°©
.
max
 != 0 ) {

1591 
p
 = (*Ì + 
	`NI_OPTS
(
ni
).
o„_size
 - 
°©
.
max
;

1592 
rc
 = 
	`oo_ªsour˚_mm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1593 
OO_MMAP_TYPE_NETIF
,

1594 
CI_NETIF_MMAP_ID_OFE_RW
, 
°©
.
max
,

1595 
OO_MMAP_FLAG_FIXED
, &
p
);

1596 if–
rc
 < 0 ) {

1597 
	`LOG_NV
(
	`ci_log
("%s: oo_resource_mmapÑw-part of OFEÉngine %d",

1598 
__FUNCTION__
, 
rc
));

1599 
Áû2
;

1607 
Áû2
:

1608 
	`√tif_t˝_hñ≥r_munm≠
(
ni
);

1609 
Áû1
:

1610  
rc
;

1611 
	}
}

1614 
	$öô_ef_vi
(
ci_√tif
* 
ni
, 
nic_i
, 
vi_°©e_off£t
,

1615 
vi_io_off£t
, * 
vi_mem_off£t
,

1616 
ef_vi
* 
vi
, 
vi_ö°™˚
, 
evq_byãs
,

1617 
txq_size
, 
ef_vi_°©s
* 
vi_°©s
)

1619 
ef_vi_°©e
* 
°©e
 = (*Ë((*Ë
ni
->°©ê+ 
vi_°©e_off£t
);

1620 
ci_√tif_°©e_nic_t
* 
n¢
 = &(
ni
->
°©e
->
nic
[
nic_i
]);

1621 
uöt32_t
* 
ids
 = (*Ë(
°©e
 + 1);

1622 
vi_b¨_off
 = 
vi_ö°™˚
 * 8192;

1624 
	`ef_vi_öô
(
vi
, 
	`ef_vi_¨ch_‰om_efhw_¨ch
(
n¢
->
vi_¨ch
),Ç¢->
vi_v¨ü¡
,

1625 
n¢
->
vi_ªvisi⁄
,Ç¢->
vi_Êags
, 
°©e
);

1626 
	`ef_vi_öô_out_Êags
(
vi
, 
n¢
->
vi_out_Êags
);

1627 
vi_io_off£t
 +
vi_b¨_off
 & (
CI_PAGE_SIZE
 - 1);

1628 
	`ef_vi_öô_io
(
vi
, 
ni
->
io_±r
 + 
vi_io_off£t
);

1629 
	`ef_vi_öô_timî
(
vi
, 
n¢
->
timî_qu™tum_ns
);

1630 
	`ef_vi_öô_evq
(
vi
, 
evq_byãs
 / 8, 
ni
->
buf_±r
 + *
vi_mem_off£t
);

1631 *
vi_mem_off£t
 +(
evq_byãs
 + 
CI_PAGE_SIZE
 - 1Ë& 
CI_PAGE_MASK
;

1632 
	`ef_vi_öô_rxq
(
vi
, 
n¢
->
vi_rxq_size
, 
ni
->
buf_±r
 + *
vi_mem_off£t
, 
ids
,

1633 
n¢
->
rx_¥efix_Àn
);

1634 *
vi_mem_off£t
 +(
	`ef_vi_rx_rög_byãs
(
vi
Ë+ 
CI_PAGE_SIZE
-1Ë& 
CI_PAGE_MASK
;

1635 
ids
 +
n¢
->
vi_rxq_size
;

1636 
	`ef_vi_öô_txq
(
vi
, 
txq_size
, 
ni
->
buf_±r
 + *
vi_mem_off£t
, 
ids
);

1637 
vi
->
vi_i
 = 
vi_ö°™˚
;

1638 
	`ef_vi_öô_rx_time°ampög
(
vi
, 
n¢
->
rx_ts_c‹ª˘i⁄
);

1639 
	`ef_vi_öô_tx_time°ampög
(
vi
, 
n¢
->
tx_ts_c‹ª˘i⁄
);

1640 *
vi_mem_off£t
 +(
	`ef_vi_tx_rög_byãs
(
vi
Ë+ 
CI_PAGE_SIZE
-1Ë& 
CI_PAGE_MASK
;

1641 
	`ef_vi_add_queue
(
vi
, vi);

1642 
	`ef_vi_£t_°©s_buf
(
vi
, 
vi_°©s
);

1643 
	}
}

1646 
	$√tif_t˝_hñ≥r_buûd
(
ci_√tif
* 
ni
)

1653 
ci_√tif_°©e
* 
ns
 = 
ni
->
°©e
;

1654 
rc
, 
nic_i
, 
size
;

1655 
vi_io_off£t
, 
vi_mem_off£t
, 
vi_°©e_off£t
;

1656 
vi_°©e_byãs
;

1657 #i‡
CI_CFG_SEPARATE_UDP_RXQ


1658 
udp_rxq_vi_°©e_byãs
 = 0;

1660 #i‡
CI_CFG_PIO


1661 
pio_io_off£t
, 
pio_buf_off£t
 = 0, 
vi_b¨_off
;

1667 
rc
 = 
	`√tif_t˝_hñ≥r_mm≠
(
ni
);

1668 if–
rc
 < 0 ) Ñc;

1678 
vi_io_off£t
 = 0;

1679 #i‡
CI_CFG_PIO


1680 
pio_io_off£t
 = 0;

1682 
vi_mem_off£t
 = 0;

1683 
vi_°©e_off£t
 = (*
ni
->
°©e
);

1685 
	`OO_STACK_FOR_EACH_INTF_I
(
ni
, 
nic_i
) {

1686 
ci_√tif_°©e_nic_t
* 
n¢
 = &
ns
->
nic
[
nic_i
];

1688 
	`LOG_NV
(
	`ci_log
("%s:Çi->io_ptr=%p io_offset=%d mem_offset=%d "

1689 "°©e_off£t=%d", 
__FUNCTION__
, 
ni
->
io_±r
,

1690 
vi_io_off£t
, 
vi_mem_off£t
, 
vi_°©e_off£t
));

1692 
	`ci_as£π
((
vi_mem_off£t
 & (
CI_PAGE_SIZE
 - 1)) == 0);

1694 
rc
 = 
	`ef_vi_¨ch_‰om_efhw_¨ch
(
n¢
->
vi_¨ch
);

1695 
	`CI_TEST
(
rc
 >= 0);

1697 
	`öô_ef_vi
(
ni
, 
nic_i
, 
vi_°©e_off£t
, 
vi_io_off£t
, &
vi_mem_off£t
,

1698 &
ni
->
nic_hw
[
nic_i
].
vi
, 
n¢
->
vi_ö°™˚
,Ç¢->
vi_evq_byãs
,

1699 
n¢
->
vi_txq_size
, &
ni
->
°©e
->
vi_°©s
);

1700 
vi_°©e_byãs
 = 
	`ef_vi_ˇlc_°©e_byãs
(
n¢
->
vi_rxq_size
,

1701 
n¢
->
vi_txq_size
);

1702 
vi_°©e_off£t
 +
vi_°©e_byãs
;

1703 
vi_io_off£t
 +
n¢
->
vi_io_mm≠_byãs
;

1705 #i‡
CI_CFG_SEPARATE_UDP_RXQ


1706 if–
	`NI_OPTS
(
ni
).
£∑øã_udp_rxq
 ) {

1707 
	`öô_ef_vi
(
ni
, 
nic_i
, 
vi_°©e_off£t
, 
vi_io_off£t
, &
vi_mem_off£t
,

1708 &
ni
->
nic_hw
[
nic_i
].
udp_rxq_vi
, 
n¢
->
udp_rxq_vi_ö°™˚
,

1709 
n¢
->
udp_rxq_vi_evq_byãs
, 0, &
ni
->
°©e
->
udp_rxq_vi_°©s
);

1711 
udp_rxq_vi_°©e_byãs
 = 
	`ef_vi_ˇlc_°©e_byãs
(
n¢
->
vi_rxq_size
, 0);

1712 
vi_°©e_off£t
 +
udp_rxq_vi_°©e_byãs
;

1713 
vi_io_off£t
 +
n¢
->
vi_io_mm≠_byãs
;

1715 
	`ci_as£π
(
vi_°©e_byãs
 + 
udp_rxq_vi_°©e_byãs
 =
ns
->vi_state_bytes);

1717 
	`ci_as£π
(
vi_°©e_byãs
 =
ns
->vi_state_bytes);

1720 if–
	`NI_OPTS
(
ni
).
tx_push
 )

1721 
	`ef_vi_£t_tx_push_thªshﬁd
(&
ni
->
nic_hw
[
nic_i
].
vi
,

1722 
	`NI_OPTS
(
ni
).
tx_push_thªsh
);

1724 #i‡
CI_CFG_PIO


1725 if–
	`NI_OPTS
(
ni
).
pio
 &&

1726 (
ns
->
nic
[
nic_i
].
oo_vi_Êags
 & 
OO_VI_FLAGS_PIO_EN
) ) {

1728 
	`ci_as£π
(
n¢
->
pio_io_mm≠_byãs
 != 0);

1730 
	`ci_as£π_…
(
pio_io_off£t
, 
ns
->
pio_mm≠_byãs
);

1732 
	`ci_as£π_À
(
n¢
->
pio_io_Àn
,Ç¢->
pio_io_mm≠_byãs
);

1736 
ni
->
nic_hw
[
nic_i
].
pio
.
pio_buf„r
 = (
uöt8_t
*)
ns
 +Çs->
pio_bufs_ofs
 +

1737 
pio_buf_off£t
;

1738 
pio_buf_off£t
 +
n¢
->
pio_io_Àn
;

1740 
vi_b¨_off
 = 
n¢
->
vi_ö°™˚
 * 8192;

1741 
ni
->
nic_hw
[
nic_i
].
pio
.
pio_io
 =Çi->
pio_±r
 + 
pio_io_off£t
;

1742 
ni
->
nic_hw
[
nic_i
].
pio
.
pio_io
 +(
vi_b¨_off
 + 4096Ë& (
CI_PAGE_SIZE
 - 1);

1743 
ni
->
nic_hw
[
nic_i
].
pio
.
pio_Àn
 = 
n¢
->
pio_io_Àn
;

1744 
ni
->
nic_hw
[
nic_i
].
vi
.
löked_pio
 = &ni->nic_hw[nic_i].
pio
;

1745 
pio_io_off£t
 +
n¢
->
pio_io_mm≠_byãs
;

1751 
	`ci_ù_timî_°©e_öô_ul
(
ni
);

1754 
	`√tif_t˝_hñ≥r_buûd2
(
ni
);

1755 
ni
->
pkt_bufs
 = 
	`CI_ALLOC_ARRAY
(*,Çi->
∑ckës
->
£ts_max
);

1756 
	`CI_ZERO_ARRAY
(
ni
->
pkt_bufs
,Çi->
∑ckës
->
£ts_max
);

1762 
size
 = 
ns
->
èbÀ_ofs
 -Çs->
buf_ofs
 - (
oo_pktbuf_m™agî
);

1764 if–
ns
->
buf_ofs
 !(
ci_√tif_°©e
) +

1765 
ns
->
vi_°©e_byãs
 * 
	`oo_°ack_ötf_max
(
ni
) ||

1766 
size
 % (
oo_pktbuf_£t
) != 0 ||

1767 
ni
->
∑ckës
->
£ts_max
 < 1 ||

1768 
size
 / (
oo_pktbuf_£t
Ë< 
ni
->
∑ckës
->
£ts_max
 ) {

1773 
	`ci_log
("ERROR: data structureÜayout mismatch between kernelánd "

1775 
	`ci_log
("ns->buf_ofs=%d !%zd + %d * %d", 
ns
->
buf_ofs
,

1776 (
ci_√tif_°©e
), 
ns
->
vi_°©e_byãs
, 
	`oo_°ack_ötf_max
(
ni
));

1777 
	`ci_log
("oo_pktbuf_set=%zd, size=%d, sets_max=%d",

1778 (
oo_pktbuf_£t
), 
size
, 
ni
->
∑ckës
->
£ts_max
);

1779 
	`ci_log
("a: %d !0", 
size
 % (
oo_pktbuf_£t
) != 0);

1780 
	`ci_log
("b: 1 <%zd <%d ", 
size
 / (
oo_pktbuf_£t
),

1781 
ni
->
∑ckës
->
£ts_max
);

1782  -
EINVAL
;

1786 
	}
}

1792 #i‚de‡
__KERNEL__


1795 
	$√tif_t˝_hñ≥r_ª°‹e
(
ci_√tif
* 
ni
, 
√tif_mm≠_byãs
)

1797 * 
p
;

1798 
rc
;

1800 
rc
 = 
	`oo_ªsour˚_mm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1801 
OO_MMAP_TYPE_NETIF
,

1802 
CI_NETIF_MMAP_ID_STATE
, 
√tif_mm≠_byãs
,

1803 
OO_MMAP_FLAG_DEFAULT
, &
p
);

1804 if–
rc
 < 0 ) {

1805 
	`LOG_NV
(
	`ci_log
("√tif_t˝_hñ≥r_ª°‹e: oo_ªsour˚_mm≠ %d", 
rc
));

1806  
rc
;

1808 
ni
->
°©e
 = (
ci_√tif_°©e
*Ë
p
;

1809 
ni
->
mm≠_byãs
 = 
√tif_mm≠_byãs
;

1811 
rc
 = 
	`√tif_t˝_hñ≥r_buûd
(
ni
);

1812 if–
rc
 < 0 ) {

1813 
	`ci_log
("%s:Çëif_t˝_hñ≥r_buûd %d", 
__FUNCTION__
, 
rc
);

1814 
	`oo_ªsour˚_munm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1815 
ni
->
°©e
, 
√tif_mm≠_byãs
);

1816  
rc
;

1819  
rc
;

1820 
	}
}

1825 
ci_ölöe
 
	$√tif_t˝_hñ≥r_‰ì
(
ci_√tif
* 
ni
)

1827 #ifde‡
__KERNEL__


1828 
	`eÁb_thr_ªÀa£
(
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
));

1830 if–
ni
->
°©e
 !
NULL
 )

1831 
	`√tif_t˝_hñ≥r_munm≠
(
ni
);

1833 
	}
}

1836 
	$öô_ªsour˚_Æloc
(
ci_ªsour˚_⁄lﬂd_Æloc_t
* 
ø
,

1837 c⁄° 
ci_√tif_c⁄fig_›ts
* 
›ts
,

1838 
Êags
, c⁄° * 
«me
,

1839 
ci_fixed_des¸ùt‹_t
 
˝œ√_h™dÀ
)

1841 
	`mem£t
(
ø
, 0, (*ra));

1842 
	`CI_USER_PTR_SET
(
ø
->
ö_›ts
, 
›ts
);

1843 
ø
->
ö_Êags
 = (
ci_uöt16
Ë
Êags
;

1847 
	`°∫˝y
(
ø
->
ö_vîsi⁄
, 
ONLOAD_VERSION
, (ra->in_version));

1848 
	`°∫˝y
(
ø
->
ö_uk_ötf_vî
, 
OO_UK_INTF_VER
, (ra->in_uk_intf_ver));

1849 #i‚de‡
__KERNEL__


1850 if–
Êags
 & 
CI_NETIF_FLAG_DO_ALLOCATE_SCALABLE_FILTERS_RSS
 ) {

1851 
ø
->
ö_˛u°î_size
 = 
CITP_OPTS
.
˛u°î_size
;

1852 
ø
->
ö_˛u°î_ª°¨t
 = 
CITP_OPTS
.
˛u°î_ª°¨t_›t
;

1853 
	`°∫˝y
(
ø
->
ö_«me
, 
CITP_OPTS
.
˛u°î_«me
, 
CI_CFG_STACK_NAME_LEN
);

1857 if–
«me
 !
NULL
 )

1858 
	`°∫˝y
(
ø
->
ö_«me
, 
«me
, 
CI_CFG_STACK_NAME_LEN
);

1859 
ø
->
˝œ√_h™dÀ
 = cplane_handle;

1860 
	}
}

1863 #i‚de‡
__KERNEL__


1865 #ifde‡
ONLOAD_OFE


1867 
	$o„_£tup
(
ef_drivî_h™dÀ
 
fd
, 
ci_√tif
* 
ni
, c⁄° * 
o„_c⁄fig_fûe
)

1869 
o„_°©s_ußge
 
°©
;

1870 
o„_°©us
 
‹c
;

1871 
löe
[200];

1872 
FILE
* 
f
;

1873 
rc
;

1875 if–
o„_c⁄fig_fûe
 !
NULL
 ) {

1876 if–(
f
 = 
	`f›í
(
o„_c⁄fig_fûe
, "r")Ë=
NULL
 ) {

1877 
	`ci_log
("[%s] ERROR: failedÅo open filterÉngine configuration file "

1878 "'%s': %s", 
ni
->
°©e
->
¥ëty_«me
, 
o„_c⁄fig_fûe
,

1879 
	`°ªº‹
(
î∫o
));

1882  
	`fgës
(
löe
, ÷öe), 
f
Ë!
NULL
 ) {

1883 
oo_o„_c⁄fig_t
 
›
;

1884 
›
.
Àn
 = 
	`°æí
(
löe
);

1885 
	`CI_USER_PTR_SET
(
›
.
°r
, 
löe
);

1886 
rc
 = 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_OFE_CONFIG
, &
›
);

1887 if–
rc
 != 0 ) {

1888 
	`ci_log
("[%s]Érror in filterÉngine config file '%s': %s",

1889 
ni
->
°©e
->
¥ëty_«me
, 
o„_c⁄fig_fûe
, 
löe
);

1890 if–
	`o„_ígöe_gë_œ°_îr‹
(
ni
->
o„
Ë!
NULL
 ) {

1891 
	`ci_log
("OFE ERROR: %s", 
	`o„_ígöe_gë_œ°_îr‹
(
ni
->
o„
));

1894 
îr
[
CI_LOG_MAX_LINE
];

1895 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_OFE_GET_LAST_ERROR
, 
îr
);

1896 
îr
[
CI_LOG_MAX_LINE
-1] = '\0';

1897 
	`ci_log
("OFE ERROR: %s", 
îr
);

1902 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_OFE_CONFIG_DONE
, 
NULL
);

1905 
ni
->
o„_ch™√l
 = 
	`mÆloc
(
	`o„_ch™√l_byãs
“i->
o„
));

1906 
‹c
 = 
	`o„_ch™√l_öô
(
ni
->
o„_ch™√l
,Çi->
o„
, 0);

1907 if–
‹c
 !
OFE_OK
 ) {

1908 
	`ci_log
("[%s] ERROR: o„_ch™√l_öô faûed: %s", 
ni
->
°©e
->
¥ëty_«me
,

1909 
	`o„_ígöe_gë_œ°_îr‹
(
ni
->
o„
));

1915 
‹c
 = 
	`o„_°©s_rw_mem
(
ni
->
o„
, &
°©
);

1916 if–
‹c
 =
OFE_OK
 && 
°©
.
max
 != 0 ) {

1917 * 
p
 = (*Ë
ni
->
o„
 + 
	`NI_OPTS
“i).
o„_size
 - 
°©
.
max
;

1918 
rc
 = 
	`oo_ªsour˚_mm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

1919 
OO_MMAP_TYPE_NETIF
,

1920 
CI_NETIF_MMAP_ID_OFE_RW
, 
°©
.
max
,

1921 
OO_MMAP_FLAG_FIXED
, &
p
);

1922 if–
rc
 != 0 ) {

1923 
	`ci_log
("[%s] failedÅoÑemapÑead-writeÖart of Onload Filter Engine",

1924 
ni
->
°©e
->
¥ëty_«me
);

1928 
	}
}

1932 
	$√tif_t˝_hñ≥r_Æloc_u
(
ef_drivî_h™dÀ
 
fd
, 
ci_√tif
* 
ni
,

1933 c⁄° 
ci_√tif_c⁄fig_›ts
* 
›ts
, 
Êags
,

1934 c⁄° * 
°ack_«me
)

1936 
ci_ªsour˚_⁄lﬂd_Æloc_t
 
ø
;

1937 
rc
;

1938 
ci_√tif_°©e
* 
ns
;

1939 * 
p
;

1944 
	`öô_ªsour˚_Æloc
(&
ø
, 
›ts
, 
Êags
, 
°ack_«me
, 
ni
->
˝œ√
->
fd
);

1946 
rc
 = 
	`oo_ªsour˚_Æloc
(
fd
, &
ø
);

1947 if–
rc
 < 0 ) {

1948  
rc
 ) {

1949 -
ELIBACC
: {

1950 
⁄˚
;

1951 if–! 
⁄˚
 ) {

1952 
⁄˚
 = 1;

1953 
	`ci_log
("ERROR: Driver/Library version mismatch detected.");

1954 
	`ci_log
("Thisápplication willÇot beáccelerated.");

1955 
	`ci_log
("HINT: MostÜikely youÇeedÅoÑeloadÅhe sfcánd onload "

1960 -
EEXIST
:

1967 -
ENODEV
:

1968 
	`LOG_E
(
	`ci_log
("%s: ENODEV.\n"

1973 
__FUNCTION__
));

1976 
	`LOG_E
(
	`ci_log
("%s: ERROR: FailedÅoállocate stack (rc=%d)\n"

1979 
__FUNCTION__
, 
rc
));

1982  
rc
;

1988 
ni
->
nic_£t
 = 
ø
.
out_nic_£t
;

1989 
	`LOG_NC
(
	`ci_log
("%s:Çi¯£à%" 
EFRM_NIC_SET_FMT
, 
__FUNCTION__
,

1990 
	`e‰m_nic_£t_¥i_¨g
(&
ni
->
nic_£t
)));

1991 
ni
->
mm≠_byãs
 = 
ø
.
out_√tif_mm≠_byãs
;

1996 
rc
 = 
	`oo_ªsour˚_mm≠
(
fd
, 
OO_MMAP_TYPE_NETIF
, 
CI_NETIF_MMAP_ID_STATE
,

1997 
ø
.
out_√tif_mm≠_byãs
, 
OO_MMAP_FLAG_DEFAULT
, &
p
);

1998 if–
rc
 < 0 ) {

1999 
	`LOG_E
(
	`ci_log
("%s: oo_ªsour˚_mm≠ %d", 
__FUNCTION__
, 
rc
));

2001  
rc
;

2004 
ns
 = 
ni
->
°©e
 = (
ci_√tif_°©e
*Ë
p
;

2005 
	`ci_as£π_equÆ
(
ø
.
out_√tif_mm≠_byãs
, 
ns
->
√tif_mm≠_byãs
);

2010 if–!!(
ns
->
Êags
 & 
CI_NETIF_FLAG_DEBUG
Ë!
	`CI_DEBUG
(1+)0 ) {

2011 
	`ci_log
("ERROR: Driver/Library debug build mismatch detected (%d,%d)",

2012 !!(
ns
->
Êags
 & 
CI_NETIF_FLAG_DEBUG
), 
	`CI_DEBUG
(1+)0 );

2013 
rc
 = -
ELIBACC
;

2014 
Áû
;

2017 if–
ns
->
Êags
 & 
CI_NETIF_FLAG_ONLOAD_UNSUPPORTED
 ) {

2018 
	`ci_log
("*** W¨nög: u£ o‡"
ONLOAD_PRODUCT
" withÅhisádapter isÜikely");

2019 
	`ci_log
("***Åo show suboptimalÖerformance foráll cases otherÅhanÅhe");

2020 
	`ci_log
("*** mostÅrivial benchmarks. Please see your Solarflare");

2021 
	`ci_log
("***Ñepresentative/resellerÅo obtainán Onload-capable");

2022 
	`ci_log
("***ádapter.");

2028 
rc
 = 
	`√tif_t˝_hñ≥r_buûd
(
ni
);

2029 if–
rc
 < 0 ) {

2030 
	`LOG_E
(
	`ci_log
("%s:Çëif_t˝_hñ≥r_buûd faûedÑc=%d", 
__FUNCTION__
, 
rc
));

2031 
Áû
;

2034 #ifde‡
ONLOAD_OFE


2035 if–
ni
->
o„
 !
NULL
 )

2036 
	`o„_£tup
(
fd
, 
ni
, 
	`gëív
("EF_OFE_CONFIG_FILE"));

2041 
Áû
:

2042 
	`√tif_t˝_hñ≥r_‰ì
(
ni
);

2043  
rc
;

2044 
	}
}

2049 
	$√tif_t˝_hñ≥r_Æloc_k
(
ci_√tif
** 
ni_out
, c⁄° 
ci_√tif_c⁄fig_›ts
* 
›ts
,

2050 
Êags
, 
ifödi˚s_Àn
)

2052 
ci_ªsour˚_⁄lﬂd_Æloc_t
 
ø
;

2053 
t˝_hñ≥r_ªsour˚_t
* 
ås
;

2054 
ci_√tif
* 
ni
;

2055 
rc
;

2057 
	`öô_ªsour˚_Æloc
(&
ø
, 
›ts
, 
Êags
, 
NULL
, -1);

2058 
rc
 = 
	`t˝_hñ≥r_Æloc_kî√l
(&
ø
, 
›ts
, 
ifödi˚s_Àn
, &
ås
);

2059 if–
rc
 < 0 ) {

2060 
	`ci_log
("%s:Å˝_hñ≥r_Æloc_kî√l(ËÁûed (%d)", 
__FUNCTION__
, 
rc
);

2061  
rc
;

2064 
ni
 = &
ås
->
√tif
;

2065 
ni
->
nic_£t
 = 
ø
.
out_nic_£t
;

2066 
	`√tif_t˝_hñ≥r_buûd2
(
ni
);

2068 *
ni_out
 = 
ni
;

2070 
	}
}

2082 #i‡! 
deföed
(
__KERNEL__
Ë&& deföed(
_WIN32
)

2084 
DWORD
 
WINAPI
 
	$ci_˘x_thªad
(
LPVOID
 
ÕP¨amëî
)

2086 
ci_√tif
* 
ni
 = (ci_√tif*Ë
ÕP¨amëî
;

2087 
DWORD
 
ªsu…
;

2089 
ªsu…
 = 
	`WaôF‹SögÀObje˘Ex
(
ni
->
íd_˘x_thªad
, 
INFINITE
, 
TRUE
);

2090  
ªsu…
 !
WAIT_OBJECT_0
 );

2091 
	`Clo£H™dÀ
(
ni
->
íd_˘x_thªad
);

2093 
	}
}

2096 
	$mk_˘x_thªad
(
ci_√tif
* 
ni
)

2102 if–(
ni
->
íd_˘x_thªad
 = 
	`Cª©eEvít
(
NULL
, 
TRUE
, 
FALSE
, NULL)) == NULL ) {

2103 
îr
 = 
	`GëLa°Eº‹
();

2104 
	`ci_log
("FaûedÅÿ¸óãÉvíà%d", 
îr
);

2105  -
îr
;

2107 
ni
->
˘x_thªad
 = 
	`Cª©eThªad
(
NULL
,0, 
ci_˘x_thªad
,Çi, 0, NULL);

2108 if–
ni
->
˘x_thªad
 =
NULL
 ) {

2109 
îr
 = 
	`GëLa°Eº‹
();

2110 
	`ci_log
("FaûedÅÿ¸óãÅhªad %d", 
îr
);

2111  -
îr
;

2113 
	`SëThªadPri‹ôy
(
ni
->
˘x_thªad
, 
THREAD_PRIORITY_HIGHEST
);

2114 
	}
}

2118 
	$ci_√tif_ßnôy_checks
()

2121 
	`ci_as£π_À
((
côp_waôabÀ_obj
), 
CI_PAGE_SIZE
);

2122 
	`ci_as£π_equÆ
(
EP_BUF_SIZE
 * 
EP_BUF_PER_PAGE
, 
CI_PAGE_SIZE
);

2123 
	`ci_as£π_À
((
côp_waôabÀ_obj
), 
EP_BUF_SIZE
);

2124 
	`ci_as£π_equÆ
((1u << 
CI_SB_FLAG_WAKE_RX_B
), 
CI_SB_FLAG_WAKE_RX
);

2125 
	`ci_as£π_equÆ
((1u << 
CI_SB_FLAG_WAKE_TX_B
), 
CI_SB_FLAG_WAKE_TX
);

2126 
	`ci_as£π_equÆ
((
ci_ni_aux_mem
), 
CI_AUX_MEM_SIZE
);

2130 
	`ci_as£π_equÆ
–
CI_AUX_MEM_SIZE
 * (
AUX_PER_BUF
 + 1), 
EP_BUF_SIZE
);

2132 #i‚de‡
NDEBUG


2134 
i
 = 
	`CI_MEMBER_OFFSET
(
ci_ù_ˇched_hdrs
, 
ù
);

2135 
e
 = 
	`CI_MEMBER_OFFSET
(
ci_ù_ˇched_hdrs
, 
ëhî_hódî
);

2136 
h
 = 
	`CI_MEMBER_OFFSET
(
ci_ù_ˇched_hdrs
, 
hwp‹t
);

2137 
	`ci_as£π_equÆ
(
i
 - 
e
, 
ETH_HLEN
 + 4);

2138 
	`ci_as£π_equÆ
(
i
 - 
h
, 
ETH_HLEN
 + 4 + 2);

2143 if–(
côp_waôabÀ_obj
Ë* 2 <
EP_BUF_SIZE
 )

2144 
	`ci_log
("%s: EP_BUF_SIZE=%dÜ¨gîÅh™Çe˚sßry (%d)", 
__FUNCTION__
,

2145 (Ë(
côp_waôabÀ_obj
), 
EP_BUF_SIZE
);

2146 
	}
}

2149 
	$ci_√tif_pkt_ª£rve
(
ci_√tif
* 
ni
, 
n
, 
oo_pkt_p
* 
p_pkt_li°
)

2151 
ci_ù_pkt_fmt
* 
pkt
;

2152 
i
;

2154  
i
 = 0; i < 
n
; ++i ) {

2155 if–(
pkt
 = 
	`ci_√tif_pkt_Æloc
(
ni
)Ë=
NULL
 )

2157 *
p_pkt_li°
 = 
	`OO_PKT_P
(
pkt
);

2158 
p_pkt_li°
 = &
pkt
->
√xt
;

2160 *
p_pkt_li°
 = 
OO_PP_NULL
;

2161  
i
;

2162 
	}
}

2165 
	$ci_√tif_pkt_ª£rve_‰ì
(
ci_√tif
* 
ni
, 
oo_pkt_p
 
pkt_li°
, 
n
)

2167 
ci_ù_pkt_fmt
* 
pkt
;

2168  
	`OO_PP_NOT_NULL
(
pkt_li°
) ) {

2169 
	`CI_DEBUG
(--
n
);

2170 
pkt
 = 
	`PKT_CHK
(
ni
, 
pkt_li°
);

2171 
pkt_li°
 = 
pkt
->
√xt
;

2172 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pkt
);

2175 
	`ci_as£π_equÆ
(
n
, 0);

2176 
	`ci_as£π
(
	`OO_PP_IS_NULL
(
pkt_li°
));

2177 
	}
}

2180 #i‚de‡
__KERNEL__


2182 
	$ci_√tif_pkt_¥eÁu…
(
ci_√tif
* 
ni
)

2194 
ci_ù_pkt_fmt
* 
pkt
;

2195 
i
, 
n
;

2196 
rc
 = 0;

2198 if–
	`NI_OPTS
(
ni
).
¥eÁu…_∑ckës
 ) {

2199 
n
 = 
ni
->
∑ckës
->
n_pkts_Æloˇãd
;

2200  
i
 = 0; i < 
n
; ++i ) {

2201 
pkt
 = 
	`PKT
(
ni
, 
i
);

2202 
rc
 +*(vﬁ©ûê
ci_öt32
*)(&
pkt
->
ªfcou¡
);

2205  
rc
;

2206 
	}
}

2209 
	$ci_√tif_pkt_¥eÁu…_ª£rve
(
ci_√tif
* 
ni
)

2211 
oo_pkt_p
 
pkt_li°
;

2212 
n
;

2213 
a˘uÆ_max_∑ckës
 = 
ni
->
∑ckës
->
£ts_max
 * 
PKTS_PER_SET
;

2219 
èrgë_Æloˇãd
 = 
	`CI_MIN
–
	`NI_OPTS
(
ni
).
¥eÁu…_∑ckës
,

2220 
	`CI_MAX
(
	`NI_OPTS
(
ni
).
max_∑ckës
,

2221 
a˘uÆ_max_∑ckës
) );

2222 
Æªady_ª£rved
 = (
ni
->
∑ckës
->
n_pkts_Æloˇãd
 -Çi->∑ckës->
n_‰ì
);

2224 if–! 
	`NI_OPTS
(
ni
).
¥eÁu…_∑ckës
 )

2227 
	`ci_√tif_lock
(
ni
);

2229 
n
 = 
	`ci_√tif_pkt_ª£rve
(
ni
, 
èrgë_Æloˇãd
 - 
Æªady_ª£rved
, &
pkt_li°
);

2230 if–
ni
->
∑ckës
->
n_pkts_Æloˇãd
 < 
èrgë_Æloˇãd
 )

2231 
	`LOG_E
(
	`ci_log
("%s: Prefaulting onlyállocated %d of %d (reserved +%d)",

2232 
__FUNCTION__
,

2233 
ni
->
∑ckës
->
n_pkts_Æloˇãd
,

2234 
èrgë_Æloˇãd
,

2235 
n
));

2236 
	`ci_√tif_pkt_ª£rve_‰ì
(
ni
, 
pkt_li°
, 
n
);

2237 
	`ci_√tif_u∆ock
(
ni
);

2238 
	}
}

2241 #i‡
CI_CFG_PIO
 && !
CI_CFG_USE_PIO


2246 
	$check_pio
(
ci_√tif_c⁄fig_›ts
* 
›ts
)

2248 if–
›ts
->
pio
 == 2 ) {

2250 
	`ci_log
("ERROR: PIOÇot supported onÅhis system");

2251  -
EINVAL
;

2254 
	}
}

2258 
	$ci_√tif_˛u°î_¥eÁu…
(
ci_√tif
* 
ni
)

2260 
	`ci_√tif_pkt_¥eÁu…_ª£rve
(
ni
);

2261 
	`ci_√tif_pkt_¥eÁu…
(
ni
);

2262 
	}
}

2264 
	$ci_√tif_öô
(
ci_√tif
* 
ni
, 
ef_drivî_h™dÀ
 
fd
)

2266 
ni
->
drivî_h™dÀ
 = 
fd
;

2267 
	`CI_MAGIC_SET
(
ni
, 
NETIF_MAGIC
);

2268 
ni
->
Êags
 = 0;

2269 
ni
->
îr‹_Êags
 = 0;

2271 
ni
->
˝œ√
 = 
	`ci˝_gë_h™dÀ
(
CPLANE_API_VERSION
, -1, 
CITP_OPTS
.
fd_ba£
);

2272 if–
ni
->
˝œ√
 =
NULL
 ) {

2273 
	`LOG_S
(
	`ci_log
("%s: faûedÅÿgë c⁄åﬁÖœ√ h™dÀ", 
__func__
));

2274  -
EINVAL
;

2278 
	}
}

2280 
	$ci_√tif_˘‹
(
ci_√tif
* 
ni
, 
ef_drivî_h™dÀ
 
fd
, c⁄° * 
°ack_«me
,

2281 
Êags
)

2283 
ci_√tif_c⁄fig_›ts
* 
›ts
;

2284 
oo_≥r_thªad
* 
≥r_thªad
;

2285 
rc
;

2287 
≥r_thªad
 = 
	`oo_≥r_thªad_gë
();

2288 
›ts
 = 
≥r_thªad
->
thªad_loˇl_√tif_›ts
 !
NULL
?

2289 
≥r_thªad
->
thªad_loˇl_√tif_›ts
:

2290 &
ci_cfg_›ts
.
√tif_›ts
;

2292 
	`ci_as£π
(
ni
);

2293 
	`ci_√tif_ßnôy_checks
();

2295 #i‡
CI_CFG_PIO
 && !
CI_CFG_USE_PIO


2296 
rc
 = 
	`check_pio
(
›ts
);

2297 if–
rc
 < 0 ) Ñc;

2300 
rc
 = 
	`ci_√tif_öô
(
ni
, 
fd
);

2301 if–
rc
 < 0 )

2302  
rc
;

2307 if–(
rc
 = 
	`√tif_t˝_hñ≥r_Æloc_u
(
fd
, 
ni
, 
›ts
, 
Êags
, 
°ack_«me
)) < 0 )

2308  
rc
;

2310 
	`ci_√tif_pkt_¥eÁu…_ª£rve
(
ni
);

2311 
	`ci_√tif_pkt_¥eÁu…
(
ni
);

2312 
	`oo_©omic_£t
(&
ni
->
ªf_cou¡
, 0);

2314 
	`NI_LOG
(
ni
, 
BANNER
,

2315 "Usög "
ONLOAD_PRODUCT
" "
ONLOAD_VERSION
" "
ONLOAD_COPYRIGHT
" [%s]",

2316 
ni
->
°©e
->
¥ëty_«me
);

2319 
	}
}

2323 
	$ci_√tif_£t_rxq_limô
(
ci_√tif
* 
ni
)

2325 
ötf_i
, 
n_ötf
, 
max_rög_pkts
, 
fûl_limô
;

2326 
rc
 = 0, 
rxq_ˇp
 = 0;

2332 
n_ötf
 = 0;

2333 
	`OO_STACK_FOR_EACH_INTF_I
(
ni
, 
ötf_i
) {

2334 
ef_vi
* 
vi
 = 
	`ci_√tif_rx_vi
(
ni
, 
ötf_i
);

2335 
rxq_ˇp
 = 
	`ef_vi_ª˚ive_ˇ∑côy
(
vi
);

2336 ++
n_ötf
;

2343 
max_rög_pkts
 = 
	`NI_OPTS
(
ni
).
max_rx_∑ckës
 * 4 / 5;

2344 
fûl_limô
 = 
rxq_ˇp
;

2345 if–
fûl_limô
 * 
n_ötf
 > 
max_rög_pkts
 )

2346 
fûl_limô
 = 
max_rög_pkts
 / 
n_ötf
;

2347 if–
fûl_limô
 < 
	`NI_OPTS
(
ni
).
rxq_limô
 ) {

2348 if–
fûl_limô
 < 
rxq_ˇp
 )

2349 
	`LOG_W
(
	`ci_log
("WARNING: "
N_FMT
 "RXÑing fillÜevelÑeduced from %dÅo %d "

2351 
	`N_PRI_ARGS
(
ni
), 
	`NI_OPTS
“i).
rxq_limô
, 
fûl_limô
,

2352 
max_rög_pkts
, 
rxq_ˇp
, 
n_ötf
));

2353 
ni
->
›ts
.
rxq_limô
 = 
fûl_limô
;

2354 
ni
->
°©e
->
›ts
.
rxq_limô
 = 
fûl_limô
;

2356 if–
ni
->
nic_n
 == 0 ) {

2358 
	`NI_OPTS
(
ni
).
rxq_limô
 = 
CI_CFG_RX_DESC_BATCH
;

2360 if–
	`NI_OPTS
(
ni
).
rxq_limô
 < NI_OPTS“i).
rxq_mö
 ) {

2364 
	`LOG_E
(
	`ci_log
("ERROR: "
N_FMT
 "rxq_limit=%d isÅoo small (rxq_min=%d)",

2365 
	`N_PRI_ARGS
(
ni
), 
	`NI_OPTS
“i).
rxq_limô
, NI_OPTS“i).
rxq_mö
);

2366 
	`ci_log
("HINT: UseáÜarger value for EF_RXQ_LIMIT or "

2368 
rc
 = -
ENOMEM
;

2373 
	`NI_OPTS
(
ni
).
rxq_limô
 = 2 * 
CI_CFG_RX_DESC_BATCH
 + 1;

2375 
ni
->
°©e
->
rxq_limô
 = 
	`NI_OPTS
(ni).rxq_limit;

2376  
rc
;

2377 
	}
}

2380 
	$__ci_√tif_öô_fûl_rx_rögs
(
ci_√tif
* 
ni
)

2385 
ötf_i
, 
rxq_limô
 = 
ni
->
°©e
->rxq_limit;

2386 
	`OO_STACK_FOR_EACH_INTF_I
(
ni
, 
ötf_i
) {

2387 
	`ci_√tif_rx_po°
(
ni
, 
ötf_i
);

2388 if–
	`ef_vi_ª˚ive_fûl_Àvñ
(
	`ci_√tif_rx_vi
(
ni
, 
ötf_i
)Ë< 
rxq_limô
 )

2389  -
ENOMEM
;

2392 
	}
}

2395 
	$ci_√tif_öô_fûl_rx_rögs
(
ci_√tif
* 
ni
)

2397 
oo_pkt_p
 
pkt_li°
;

2398 
lim
, 
rc
, 
n
;

2400 
rc
 = 
	`ci_t˝_hñ≥r_m‹e_bufs
(
ni
);

2401 if–
ni
->
∑ckës
->
n_‰ì
 == 0 ) {

2402 
	`LOG_E
(
	`ci_log
("%s: [%d] ERROR: failedÅoállocate initialÖacket set: %d",

2403 
__func__
, 
	`NI_ID
(
ni
), 
rc
));

2404  -
ENOMEM
;

2406 
ni
->
∑ckës
->
id
 = 0;

2408 
	`ci_√tif_mem_¥essuª_pkt_poﬁ_fûl
(
ni
);

2409 if–(
rc
 = 
	`ci_√tif_£t_rxq_limô
(
ni
)) < 0 )

2410  
rc
;

2413 
n
 = 
	`ci_√tif_pkt_ª£rve
(
ni
, 
	`NI_OPTS
“i).
mö_‰ì_∑ckës
, &
pkt_li°
);

2414 if–
n
 < 
	`NI_OPTS
(
ni
).
mö_‰ì_∑ckës
 ) {

2415 
	`LOG_E
(
	`ci_log
("%s: ERROR: InsufficientÖacket buffersávailable for "

2416 "EF_MIN_FREE_PACKETS=%d", 
__FUNCTION__
,

2417 
	`NI_OPTS
(
ni
).
mö_‰ì_∑ckës
));

2418  -
ENOMEM
;

2425  
lim
 = 
CI_CFG_RX_DESC_BATCH
;Üim <
	`NI_OPTS
(
ni
).
rxq_limô
;

2426 
lim
 +
CI_CFG_RX_DESC_BATCH
 ) {

2427 
ni
->
°©e
->
rxq_limô
 = 
lim
;

2428 if–(
rc
 = 
	`__ci_√tif_öô_fûl_rx_rögs
(
ni
)Ë< 0 ||Çi->
°©e
->
rxq_low
 ) {

2429 
rc
 = -
ENOMEM
;

2430 if–
lim
 < 
	`NI_OPTS
(
ni
).
rxq_mö
 )

2431 
	`LOG_E
(
	`ci_log
("%s: ERROR: InsufficientÖacket buffersÅo fill RXÑings "

2432 "‘xq_limô=%dÑxq_low=%dÑxq_mö=%d)", 
__FUNCTION__
,

2433 
	`NI_OPTS
(
ni
).
rxq_limô
,Çi->
°©e
->
rxq_low
,

2434 
	`NI_OPTS
(
ni
).
rxq_mö
));

2435 #i‡
CI_CFG_PKTS_AS_HUGE_PAGES


2436 if–
	`NI_OPTS
(
ni
).
huge_∑ges
 =
OO_IOBUFSET_FLAG_HUGE_PAGE_FORCE
 )

2437 
	`LOG_E
(
	`ci_log
("%s: ERROR: FailedÅoállocate hugeÖagesÅo fill RX "

2438 "rögs", 
__FUNCTION__
));

2441 
rc
 = 0;

2446 
	`ci_√tif_pkt_ª£rve_‰ì
(
ni
, 
pkt_li°
, 
n
);

2447 
ni
->
°©e
->
rxq_limô
 = 
	`NI_OPTS
(ni).rxq_limit;

2449 #i‡
CI_CFG_PKTS_AS_HUGE_PAGES


2453 if–
	`NI_OPTS
(
ni
).
huge_∑ges
 =
OO_IOBUFSET_FLAG_HUGE_PAGE_FORCE
 )

2454 
	`NI_OPTS
(
ni
).
huge_∑ges
 = 
OO_IOBUFSET_FLAG_HUGE_PAGE_TRY
;

2456  
rc
;

2457 
	}
}

2460 
	$ci_√tif_˘‹
(
ci_√tif
** 
ni_out
, c⁄° 
ci_√tif_c⁄fig_›ts
* 
›ts_ö
,

2461 
Êags
)

2463 
ci_√tif_c⁄fig_›ts
* 
›ts
;

2464 
ci_√tif
* 
ni
;

2466 
	`ci_as£π
(
ni_out
);

2467 
	`ci_√tif_ßnôy_checks
();

2469 
ni
 = *
ni_out
 = 
NULL
;

2471 if–
›ts_ö
 )

2472 
›ts
 = (
ci_√tif_c⁄fig_›ts
*)
›ts_ö
;

2475 if–(
›ts
 = 
	`ci_Æloc
((*›ts))Ë=
NULL
 )

2476  -
ENOMEM
;

2477 
	`ci_√tif_c⁄fig_›ts_deÁu…s
(
›ts
);

2484 
	`CI_TRY_RET
(
	`√tif_t˝_hñ≥r_Æloc_k
(&
ni
, 
›ts
, 
Êags
, 0));

2487 
	`ci_as£π_equÆ
(
ni
->
ï_ofs
,Çi->
°©e
->ep_ofs);

2489 if–!
›ts_ö
 )

2490 
	`ci_‰ì
(
›ts
);

2492 
ni
->
Êags
 |
CI_NETIF_FLAGS_IS_TRUSTED
;

2494 *
ni_out
 = 
ni
;

2496 
	}
}

2501 
	$ci_√tif_dt‹
(
ci_√tif
* 
ni
)

2503 
	`ci_as£π
(
ni
);

2506 #i‡
	`deföed
(
_WIN32
Ë&& ! deföed(
__KERNEL__
)

2508 
	`SëEvít
(
ni
->
íd_˘x_thªad
);

2510 
DWORD
 
ÕExôCode
;

2511 i‡(
	`GëExôCodeThªad
(
ni
->
˘x_thªad
, &
ÕExôCode
)) {

2512 i‡(
ÕExôCode
 !
STILL_ACTIVE
)

2515  -()
	`GëLa°Eº‹
();

2518 
	`Clo£H™dÀ
(
ni
->
˘x_thªad
);

2521 
	`√tif_t˝_hñ≥r_‰ì
(
ni
);

2524 
	}
}

2527 #i‚de‡
__KERNEL__


2529 
	$ö°Æl_°ack_by_id
(
ci_fd_t
 
Â
, 
id
)

2531 
ci_uöt32
 
°ack_id
 = 
id
;

2532  
	`oo_ªsour˚_›
(
Â
, 
OO_IOC_INSTALL_STACK_BY_ID
, &
°ack_id
);

2533 
	}
}

2536 
	$ö°Æl_°ack_by_«me
(
ci_fd_t
 
fd
, c⁄° * 
«me
)

2538 
oo_›_ö°Æl_°ack
 
›
;

2540 
	`°∫˝y
(
›
.
ö_«me
, 
«me
, 
CI_CFG_STACK_NAME_LEN
);

2541  
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_INSTALL_STACK
, &
›
);

2542 
	}
}

2546 
	$ci_√tif_ª°‹e_id
(
ci_√tif
* 
ni
, 
thr_id
)

2548 
ef_drivî_h™dÀ
 
fd
, 
fd2
;

2549 
ci_uöt32
 
m≠_size
;

2550 
rc
;

2552 
	`ci_as£π
(
ni
);

2554 
	`LOG_NV
(
	`ci_log
("%s: %u", 
__FUNCTION__
, 
thr_id
));

2559 
rc
 = 
	`ef_⁄lﬂd_drivî_›í
(&
fd2
, 
OO_STACK_DEV
, 1);

2560 if–
rc
 != 0 ) {

2561  
rc
;

2563 
rc
 = 
	`ö°Æl_°ack_by_id
(
fd2
, 
thr_id
);

2564 if–
rc
 != 0 ) {

2565 
	`CI_TRY
(
	`ef_⁄lﬂd_drivî_˛o£
(
fd2
));

2566  
rc
;

2568 
fd
 = 
	`ci_t˝_hñ≥r_°ack_©èch
(
fd2
, &
ni
->
nic_£t
, &
m≠_size
);

2569 if–
fd
 < 0 )

2570  
fd
;

2571 
	`CI_TRY
(
	`ef_⁄lﬂd_drivî_˛o£
(
fd2
));

2572  
	`ci_√tif_ª°‹e
(
ni
, 
fd
, 
m≠_size
);

2573 
	}
}

2576 
	$ci_√tif_ª°‹e_«me
(
ci_√tif
* 
ni
, c⁄° * 
«me
)

2578 
ef_drivî_h™dÀ
 
fd
, 
fd2
;

2579 
ci_uöt32
 
m≠_size
;

2580 
rc
;

2582 
	`ci_as£π
(
ni
);

2584 
	`LOG_NV
(
	`ci_log
("%s: %s", 
__FUNCTION__
, 
«me
));

2589 if–(
rc
 = 
	`ef_⁄lﬂd_drivî_›í
(&
fd2
, 
OO_STACK_DEV
, 1)) < 0 )

2590 
Áû1
;

2591 if–(
rc
 = 
	`ö°Æl_°ack_by_«me
(
fd2
, 
«me
)) < 0 )

2592 
Áû2
;

2593 if–(
rc
 = 
fd
 = 
	`ci_t˝_hñ≥r_°ack_©èch
(
fd2
,

2594 &
ni
->
nic_£t
, &
m≠_size
)) < 0 )

2595 
Áû3
;

2596 if–(
rc
 = 
	`ci_√tif_ª°‹e
(
ni
, 
fd
, 
m≠_size
)) < 0 )

2597 
Áû4
;

2598 
	`ef_⁄lﬂd_drivî_˛o£
(
fd2
);

2600 
	`NI_LOG
(
ni
, 
BANNER
,

2601 "Sh¨ög "
ONLOAD_PRODUCT
" "
ONLOAD_VERSION
" "
ONLOAD_COPYRIGHT
 " [%s]",

2602 
ni
->
°©e
->
¥ëty_«me
);

2606 
Áû4
:

2607 
	`ef_⁄lﬂd_drivî_˛o£
(
fd
);

2608 
Áû3
:

2609 
Áû2
:

2610 
	`ef_⁄lﬂd_drivî_˛o£
(
fd2
);

2611 
Áû1
:

2612  
rc
;

2613 
	}
}

2620 
	$ci_√tif_ª°‹e
(
ci_√tif
* 
ni
, 
ef_drivî_h™dÀ
 
fd
,

2621 
√tif_mm≠_byãs
)

2623 
rc
 = 0;

2624 
	`ci_as£π
(
ni
);

2626 
	`LOG_NV
(
	`ci_log
("%s: fd=%d", 
__FUNCTION__
, 
fd
));

2629 ()
	`ci_√tif_öô
(
ni
, 
fd
);

2631 
	`CI_TRY_RET
(
	`√tif_t˝_hñ≥r_ª°‹e
(
ni
, 
√tif_mm≠_byãs
));

2633 if–
ni
->
˝œ√
 =
NULL
 ) {

2634 
ci_fixed_des¸ùt‹_t
 
fd
;

2636 
rc
 = 
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

2637 
OO_IOC_GET_CPLANE_FD
, &
fd
);

2638 if–
rc
 < 0 ) {

2639 
	`ci_log
("%s: faûedÅÿª°‹êc⁄åﬁÖœ√ h™dÀ: %d", 
__func__
, 
rc
);

2640 
Áû
;

2643 
ni
->
˝œ√
 = 
	`ci˝_gë_h™dÀ
(
CPLANE_API_VERSION
, 
fd
, 
CITP_OPTS
.
fd_ba£
);

2644 if–
ni
->
˝œ√
 =
NULL
 ) {

2645 
	`ci_log
("%s: faûedÅÿª°‹êc⁄åﬁÖœ√ h™dÀ", 
__func__
);

2646 
Áû
;

2651 
ni
->
Êags
 |
CI_NETIF_FLAGS_DONT_USE_ANON
;

2658  
rc
;

2659 
Áû
:

2660 
	`√tif_t˝_hñ≥r_munm≠
(
ni
);

2661  
rc
;

2662 
	}
}

	@netif_pkt.c

11 
	~"ù_öã∫Æ.h
"

13 #i‡!
deföed
(
__KERNEL__
)

14 
	~<⁄lﬂd/mm≠.h
>

15 
	~<sys/shm.h
>

17 
±hªad_muãx_t
 
	gcôp_pkt_m≠_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

19 
ci_ù_pkt_fmt
* 
	$__ci_√tif_pkt
(
ci_√tif
* 
ni
, 
id
)

21 
rc
;

22 
ci_ù_pkt_fmt
* 
pkt
 = 0;

23 
£tid
 = 
id
 >> 
CI_CFG_PKTS_PER_SET_S
;

24 *
p
;

26 
	`ci_as£π
(
id
 != ()(-1));

28 
	`±hªad_muãx_lock
(&
côp_pkt_m≠_lock
);

30 if–
	`PKT_BUFSET_U_MMAPPED
(
ni
, 
£tid
) )

32 
gŸ_pkt_out
;

34 #i‡
CI_CFG_PKTS_AS_HUGE_PAGES


35 if–
ni
->
∑ckës
->
£t
[
£tid
].
shm_id
 >= 0 ) {

36 
p
 = 
	`shm©
(
ni
->
∑ckës
->
£t
[
£tid
].
shm_id
, 
NULL
, 0);

37 if–
p
 == (*)-1) {

38 if–
î∫o
 =
EACCES
 ) {

39 
	`ci_log
("FailedÅo mmapÖacket buffer for [%s] withÉrrno=EACCES.\n"

44 
ni
->
°©e
->
¥ëty_«me
);

47 
	`ci_log
("%s: shm©(0x%xËÁûed f‹Ökà£à%d (%d)", 
__FUNCTION__
,

48 
ni
->
∑ckës
->
£t
[
£tid
].
shm_id
, sëid, -
î∫o
);

50 
out
;

56 
rc
 = 
	`oo_ªsour˚_mm≠
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

57 
OO_MMAP_TYPE_NETIF
,

58 
	`CI_NETIF_MMAP_ID_PKTSET
(
£tid
),

59 
CI_CFG_PKT_BUF_SIZE
 * 
PKTS_PER_SET
,

60 
OO_MMAP_FLAG_DEFAULT
,

61 &
p
);

62 if–
rc
 < 0 ) {

63 
	`ci_log
("%s: oo_resource_mmap forÖkt set %d failed (%d)",

64 
__FUNCTION__
, 
£tid
, 
rc
);

65 
out
;

68 
	`ci_as£π
(
p
);

69 
ni
->
pkt_bufs
[
£tid
] = 
p
;

71 
gŸ_pkt_out
:

72 
pkt
 = (
ci_ù_pkt_fmt
*Ë
	`__PKT_BUF
(
ni
, 
id
);

74 
out
:

75 
	`±hªad_muãx_u∆ock
(&
côp_pkt_m≠_lock
);

76 if–
	`CI_UNLIKELY
(
pkt
 =
NULL
) )

77 
	`ci_log
("FailedÅo mapÖackets! Crashing...");

78  
pkt
;

79 
	}
}

84 
	$ci_√tif_pkt£t_be°
(
ci_√tif
* 
ni
)

86 
i
, 
ªt
 = -1, 
n_‰ì
 = 0;

88  
i
 = 0; i < 
ni
->
∑ckës
->
£ts_n
; i ++ ) {

89 if–
ni
->
∑ckës
->
£t
[
i
].
n_‰ì
 >Ç_free ) {

90 
n_‰ì
 = 
ni
->
∑ckës
->
£t
[
i
].n_free;

91 
ªt
 = 
i
;

94  
ªt
;

95 
	}
}

98 
ci_ù_pkt_fmt
* 
	$ci_√tif_pkt_Æloc_¶ow
(
ci_√tif
* 
ni
, 
f‹_t˝_tx
, 
u£_n⁄b
)

104 
ci_ù_pkt_fmt
* 
pkt
;

105 
buf£t_id
;

107 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

109 if–
u£_n⁄b
 ||

110 (
ni
->
∑ckës
->
n_‰ì
 == 0 &&

111 
ni
->
∑ckës
->
£ts_n
 =ni->∑ckës->
£ts_max
) )

112 if–(
pkt
 = 
	`ci_√tif_pkt_Æloc_n⁄b
(
ni
)Ë!
NULL
 ) {

113 --
ni
->
°©e
->
n_async_pkts
;

114 
	`CITP_STATS_NETIF_INC
(
ni
, 
pkt_n⁄b_°ól
);

115 
pkt
->
Êags
 &~
CI_PKT_FLAG_NONB_POOL
;

116  
pkt
;

119 if–
f‹_t˝_tx
 )

120 if(
	`CI_UNLIKELY
–! 
	`ci_√tif_pkt_tx_may_Æloc
(
ni
) ))

121  
NULL
;

123 
	`ci_as£π_equÆ
(
ni
->
∑ckës
->
id
, 
	`NI_PKT_SET
(ni));

124 
	`ci_as£π_equÆ
(
ni
->
∑ckës
->
£t
[
	`NI_PKT_SET
“i)].
n_‰ì
, 0);

125 
	`ci_as£π
(
	`OO_PP_IS_NULL
(
ni
->
∑ckës
->
£t
[
	`NI_PKT_SET
“i)].
‰ì
));

126 
agaö
:

127 
buf£t_id
 = 
	`ci_√tif_pkt£t_be°
(
ni
);

128 if–
buf£t_id
 != -1 ) {

129 
	`ci_√tif_pkt_£t_ch™ge
(
ni
, 
buf£t_id
,

130 
	`ci_√tif_pkt_£t_is_undîfûÀd
(
ni
, 
buf£t_id
));

131  
	`ci_√tif_pkt_gë
(
ni
, 
buf£t_id
);

134  
ni
->
∑ckës
->
£ts_n
 <Çi->∑ckës->
£ts_max
 ) {

135 
ﬁd_n_‰ìpkts
 = 
ni
->
∑ckës
->
n_‰ì
;

136 
rc
 = 
	`ci_t˝_hñ≥r_m‹e_bufs
(
ni
);

137 if–
rc
 != 0 )

139 
	`CHECK_FREEPKTS
(
ni
);

140 if–
ﬁd_n_‰ìpkts
 =
ni
->
∑ckës
->
n_‰ì
 )

141 
	`ci_as£π_equÆ
(
ni
->
∑ckës
->
£ts_n
,Çi->∑ckës->
£ts_max
);

142 if–
ni
->
∑ckës
->
n_‰ì
 > 0 )

146 if–
ni
->
∑ckës
->
n_‰ì
 == 0 )

147 
	`ci_√tif_åy_to_ª≠
(
ni
, 1);

148 if–
ni
->
∑ckës
->
n_‰ì
 > 0 )

149 
agaö
;

151  
NULL
;

152 
	}
}

155 
ci_ölöe
 
	$__ci_dbg_pois⁄_hódî
(
ci_ù_pkt_fmt
* 
pkt
, 
ci_uöt32
 
∑âîn
)

157 
i
;

158 
ci_uöt32
* 
pkt_u32
 = (ci_uöt32 *)
	`oo_ëhî_hdr
(
pkt
);

159 
ci_uöt32
 
∑ä_u32
 = 
	`CI_BSWAP_BE32
(
∑âîn
);

160 
ci_uöt32
 
Àn
 = (
ETH_HLEN
 + 
ETH_VLAN_HLEN
 + 2Ë+ (
ci_ù4_hdr
) +

161 (
ci_t˝_hdr
);

162  
i
 = 0; i < 
Àn
/4; i++ ) 
pkt_u32
[i] = 
∑ä_u32
;

163 
	}
}

166 #ifde‡
__KERNEL__


167 
	$ci_√tif_£t_mîge_©omic_Êag
(
ci_√tif
* 
ni
)

169 
ci_uöt64
 
vÆ
;

170 
ôî
 = 1000;

172 
vÆ
 = 
ni
->
°©e
->
lock
.lock;

173 if–
vÆ
 & 
CI_EPLOCK_NETIF_MERGE_ATOMIC_COUNTERS
 )

175 if–
	`ef_ïlock_£t_Êags_if_locked
(

176 &
ni
->
°©e
->
lock
,

177 
CI_EPLOCK_NETIF_MERGE_ATOMIC_COUNTERS
) ) {

180 if–
	`ci_√tif_åylock
(
ni
) ) {

181 
	`ef_ïlock_hﬁdî_£t_Êag
(&
ni
->
°©e
->
lock
,

182 
CI_EPLOCK_NETIF_MERGE_ATOMIC_COUNTERS
);

183 
	`ci_√tif_u∆ock
(
ni
);

186 if–
ôî
-- == 0 ) {

187 
	`ci_log
("%s: [%d] failedÅo set MERGE_ATOMIC_COUNTERS flag, "

189 "o‡thêO∆ﬂd sèck", 
__func__
, 
	`NI_ID
(
ni
));

193 
	}
}

196 
ci_√tif_pkt_‰ì
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt


197 
	$CI_KERNEL_ARG
(* 
p_√tif_is_locked
))

199 
	`ci_as£π
(
pkt
->
ªfcou¡
 == 0);

200 #ifde‡
__KERNEL__


201 
	`ci_as£π
(
p_√tif_is_locked
);

202 
	`ci_as£π
(!*
p_√tif_is_locked
 || 
	`ci_√tif_is_locked
(
ni
));

204 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

207 if–
	`OO_PP_NOT_NULL
(
pkt
->
‰ag_√xt
) ) {

208 #ifde‡
__KERNEL__


209 
	`ci_√tif_pkt_ªÀa£_m∆
(
ni
, 
	`PKT_CHK
“i, 
pkt
->
‰ag_√xt
),

210 
p_√tif_is_locked
);

212 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
	`PKT_CHK
“i, 
pkt
->
‰ag_√xt
));

214 
pkt
->
‰ag_√xt
 = 
OO_PP_NULL
;

217 #ifde‡
__KERNEL__


218 if–
	`CI_UNLIKELY
–(! *
p_√tif_is_locked
) &&

219 (~
pkt
->
Êags
 & 
CI_PKT_FLAG_NONB_POOL
)) ) {

223 if–
	`ci_√tif_åylock
(
ni
) ) {

224 *
p_√tif_is_locked
 = 1;

229 
pkt
->
Êags
 |
CI_PKT_FLAG_NONB_POOL
;

234 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_RX
 )

235 
	`CI_NETIF_STATE_MOD
(
ni
, *
p_√tif_is_locked
, 
n_rx_pkts
, -);

236 
	`__ci_√tif_pkt_˛ón
(
pkt
);

237 #i‡
CI_CFG_POISON_BUFS


238 if–
	`NI_OPTS
(
ni
).
pois⁄_rx_buf
 )

239 
	`__ci_dbg_pois⁄_hódî
(
pkt
, 0xDECEA5ED);

242 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_NONB_POOL
 ) {

243 
	`ci_√tif_pkt_‰ì_n⁄b_li°
(
ni
, 
	`OO_PKT_P
(
pkt
),Ökt);

244 
	`CI_NETIF_STATE_MOD
(
ni
, *
p_√tif_is_locked
, 
n_async_pkts
, +);

247 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

248 
	`ci_√tif_pkt_put
(
ni
, 
pkt
);

251 #ifde‡
__KERNEL__


252 if–
	`CI_UNLIKELY
–! *
p_√tif_is_locked
 ) ) {

253 
	`ci_√tif_£t_mîge_©omic_Êag
(
ni
);

256 
	}
}

259 
	$ci_√tif_pkt_åy_to_‰ì
(
ci_√tif
* 
ni
, 
de•î©i⁄
, 
°›_⁄˚_‰ìd_n
)

261 
id
;

262 
‰ìd
 = 0;

264 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

265 
	`ci_as£π_ge
(
de•î©i⁄
, 0);

266 
	`ci_as£π_À
(
de•î©i⁄
, 
CI_NETIF_PKT_TRY_TO_FREE_MAX_DESP
);

272 
	`ci_as£π
(&
ni
->
°©e
->
°©s
.
pkt_s¸ambÀ2
 - &ni->°©e->°©s.
pkt_s¸ambÀ0


273 =
CI_NETIF_PKT_TRY_TO_FREE_MAX_DESP
);

274 
	`CITP_STATS_NETIF
(++(&
ni
->
°©e
->
°©s
.
pkt_s¸ambÀ0
)[
de•î©i⁄
]);

276  
id
 = 0; id < 
ni
->
°©e
->
n_ï_bufs
; ++id ) {

277 
côp_waôabÀ_obj
* 
wo
 = 
	`ID_TO_WAITABLE_OBJ
(
ni
, 
id
);

278 if–
wo
->
waôabÀ
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
 )

279 
‰ìd
 +
	`ci_t˝_åy_to_‰ì_pkts
(
ni
, &
wo
->
t˝
, 
de•î©i⁄
);

280 #i‡
CI_CFG_UDP


281 if–
wo
->
waôabÀ
.
°©e
 =
CI_TCP_STATE_UDP
 )

282 
‰ìd
 +
	`ci_udp_åy_to_‰ì_pkts
(
ni
, &
wo
->
udp
, 
de•î©i⁄
);

284 if–
‰ìd
 >
°›_⁄˚_‰ìd_n
 )

285  
‰ìd
;

287  
‰ìd
;

288 
	}
}

291 
	$ci_√tif_pkt_Æloc_block
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
,

292 * 
p_√tif_locked
,

293 
ˇn_block
,

294 
ci_ù_pkt_fmt
** 
p_pkt
)

296 
was_locked
 = *
p_√tif_locked
;

297 
ci_ù_pkt_fmt
* 
pkt
;

298 
rc
;

299 
ci_t˝_°©e
* 
ts
 = 
NULL
;

301 
agaö
:

302 if–*
p_√tif_locked
 == 0 ) {

303 if–(
pkt
 = 
	`ci_√tif_pkt_Æloc_n⁄b
(
ni
)) ) {

304 *
p_pkt
 = 
pkt
;

307 if–! 
	`ci_√tif_åylock
(
ni
) ) {

308 
rc
 = 
	`ci_√tif_lock
(
ni
);

309 if(
	`CI_UNLIKELY
–
	`ci_√tif_lock_was_öãºu±ed
(
rc
) ))

310  
rc
;

311 
	`CITP_STATS_NETIF_INC
(
ni
, 
udp_£nd_ni_lock_c⁄ãnds
 );

313 *
p_√tif_locked
 = 1;

316 if–
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
 )

317 
ts
 = 
	`SOCK_TO_TCP
(
s
);

319 if–(
pkt
 = 
	`ci_√tif_pkt_tx_t˝_Æloc
(
ni
, 
ts
)) ) {

320 ++
ni
->
°©e
->
n_async_pkts
;

321 if–! 
was_locked
 ) {

325 
pkt
->
Êags
 = 
CI_PKT_FLAG_NONB_POOL
;

327 *
p_pkt
 = 
pkt
;

331 if–!
ˇn_block
 )

332  -
ENOBUFS
;

334 *
p_√tif_locked
 = 0;

335 
rc
 = 
	`ci_√tif_pkt_waô
(
ni
, 
s
, 
CI_SLEEP_NETIF_LOCKED
);

336 if–
	`ci_√tif_pkt_waô_was_öãºu±ed
(
rc
) )

337  
rc
;

338 
agaö
;

339 
	}
}

	@netif_stats.c

15 
	~"ù_öã∫Æ.h
"

18 #i‡
CI_CFG_SUPPORT_STATS_COLLECTION


27 
ci_ölöe
 

28 
	$ci_√tif_°©s_h™dÀ_timî
(
ci_√tif
* 
ni
, 
ci_ùtime_t
 
timeout
)

30 
ci_ù_timî
* 
ô
;

31 
	`ci_as£π
–
ni
 );

32 
ô
 = &
ni
->
°©e
->
°©s_tid
;

34 
	`LOG_STATS
–
	`ci_log
–"%s–%p, %d)", 
__FUNCTION__
, 
ni
, ()
timeout
));

35 if–
	`ci_ù_timî_≥ndög
(
ni
, 
ô
 ) ) {

36 if–
timeout
 == 0 )

37 
	`ci_ù_timî_˛ór
(
ni
, 
ô
 );

39 
	`ci_ù_timî_modify
(
ni
, 
ô
, 
	`ci_t˝_time_now
“i)+
timeout
);

41 if–
timeout
 != 0 )

42 
	`ci_ù_timî_£t
(
ni
, 
ô
, 
	`ci_t˝_time_now
“i)+
timeout
);

44 
	}
}

49 
	$ci_√tif_°©s_öô
(
ci_√tif
* 
ni
)

51 
vÆ
;

53 
	`ci_as£π
–
ni
 );

54 
	`LOG_STATS
–
	`ci_log
("%s(%p)", 
__FUNCTION__
, 
ni
));

56 
vÆ
 = 
CI_TCONST_STATS
;

58 
	`NI_CONF
(
ni
).
tc⁄°_°©s
 = 
vÆ
 ? 
	`ci_t˝_time_ms2ticks
(ni, val) : 0;

60 
	`LOG_STATS
–
	`ci_log
("Statistics: %uÅicks, %dmS ",

61 
	`NI_CONF
(
ni
).
tc⁄°_°©s
, 
vÆ
 ));

63 
	`ci_ù_°©s_˛ór
(&
ni
->
°©e
->
°©s_cumuœtive
);

64 
	`ci_ù_°©s_˛ór
(&
ni
->
°©e
->
°©s_¢≠shŸ
);

67 if–
vÆ
 )

68 
	`ci_√tif_°©s_a˘i⁄
–
ni
, 
CI_IP_STATS_START
,

69 
CI_IP_STATS_OUTPUT_DEFAULT
, 
NULL
, NULL );

70 
	}
}

75 
	$ci_√tif_°©s_upd©e_√tif
–
ci_√tif
 *
ni
)

77 i‡(
ni
->
°©e
->
°©s_cumuœtive
.
now
 <ni->°©e->
°©s_¢≠shŸ
.now) {

78 
ni
->
°©e
->
°©s_cumuœtive
.
now
 =Çi->°©e->
°©s_¢≠shŸ
.now;

80 
	`LOG_STATS
–
	`ci_log
("Cummulative stats have biggerÅimestampÅhan snaphot") );

82 
	`ci_ù_°©s_upd©e
(&
ni
->
°©e
->
°©s_cumuœtive
, &ni->°©e->
°©s_¢≠shŸ
);

83 
	`ci_ù_°©s_˛ór
(&
ni
->
°©e
->
°©s_¢≠shŸ
);

84 
	}
}

86 
	#__SS
(
√tif
Ë“ëif)->
°©e
->
°©s_¢≠shŸ


	)

87 
	#__CU
(
√tif
Ë“ëif)->
°©e
->
°©s_cumuœtive


	)

89 #i‡
CI_CFG_SEND_STATS_TO_LOG


90 
	#__TEXT_NETIF_COUNT_FMT
 "%†%u/%u"

	)

92 
	#__TEXT_NETIF_COUNT_FMT
 "%†%u/%u\n"

	)

95 
	#__TEXT_NETIF_COUNT
(
s
, 
GΩ
, 
Fld
) \

96 
	`__SS
(
√tif
).
GΩ
.
Fld
, \

97 
	`__CU
(
√tif
).
GΩ
.
Fld


	)

99 #i‡
CI_CFG_SEND_STATS_TO_LOG


100 
	#__TEXT_NETIF_LOG
 
ci_log


	)

102 
	#__TEXT_NETIF_LOG
(
x
...) \

103 i‡(
Àn
 < 
cou¡
) { \

104 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
cou¡
 -Üí, 
x
); \

105 }

	)

108 
	#__TEXT_NETIF_COUNT_LOG
(
«me
, 
group
, 
fõld
) \

109 
	`__TEXT_NETIF_LOG
(
__TEXT_NETIF_COUNT_FMT
, \

110 (
«me
), 
	`__TEXT_NETIF_COUNT
(
√tif
, 
group
, 
fõld
))

	)

115 
	$ci_√tif_°©s_ªp‹t_ãxt
(
ci_√tif
 *
√tif
, *
buf
, 
cou¡
)

117 #i‡
CI_CFG_SEND_STATS_TO_LOG
==0

118 
Àn
 = 0;

120 i‡(
cou¡
 <= 0)

125 
	`__TEXT_NETIF_COUNT_LOG
("In_ªcvs:", 
ùv4
,

126 
ö_ªcvs
);

127 
	`__TEXT_NETIF_COUNT_LOG
("In_hdr_îrs:", 
ùv4
,

128 
ö_hdr_îrs
);

129 
	`__TEXT_NETIF_COUNT_LOG
("In_addr_îrs:", 
ùv4
,

130 
ö_addr_îrs
);

131 
	`__TEXT_NETIF_COUNT_LOG
("F‹w_dgøms:", 
ùv4
,

132 
f‹w_dgøms
);

133 
	`__TEXT_NETIF_COUNT_LOG
("In_unknown_¥Ÿos:", 
ùv4
,

134 
ö_unknown_¥Ÿos
);

135 
	`__TEXT_NETIF_COUNT_LOG
("In_disˇrds:", 
ùv4
,

136 
ö_disˇrds
);

137 
	`__TEXT_NETIF_COUNT_LOG
("In_dñivîs:", 
ùv4
,

138 
ö_dñivîs
);

139 
	`__TEXT_NETIF_COUNT_LOG
("Out_ªque°s:", 
ùv4
,

140 
out_ªque°s
);

141 
	`__TEXT_NETIF_COUNT_LOG
("Out_disˇrds:", 
ùv4
,

142 
out_disˇrds
);

143 
	`__TEXT_NETIF_COUNT_LOG
("Out_no_rouãs:", 
ùv4
,

144 
out_no_rouãs
);

145 
	`__TEXT_NETIF_COUNT_LOG
("Rósm_timeout:", 
ùv4
,

146 
ªasm_timeout
);

147 
	`__TEXT_NETIF_COUNT_LOG
("Rósm_ªqds:", 
ùv4
,

148 
ªasm_ªqds
);

149 
	`__TEXT_NETIF_COUNT_LOG
("Rósm_oks:", 
ùv4
,

150 
ªasm_oks
);

151 
	`__TEXT_NETIF_COUNT_LOG
("Rósm_Áûs:", 
ùv4
,

152 
ªasm_Áûs
);

153 
	`__TEXT_NETIF_COUNT_LOG
("Føg_oks:", 
ùv4
,

154 
‰ag_oks
);

155 
	`__TEXT_NETIF_COUNT_LOG
("Føg_Áûs:", 
ùv4
,

156 
‰ag_Áûs
);

157 
	`__TEXT_NETIF_COUNT_LOG
("Føg_¸óãs:", 
ùv4
,

158 
‰ag_¸óãs
);

161 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_ö_msgs:", 
icmp
,

162 
icmp_ö_msgs
);

163 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_ö_îrs:", 
icmp
,

164 
icmp_ö_îrs
);

165 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_ö_de°_uƒóchs:", 
icmp
,

166 
icmp_ö_de°_uƒóchs
);

167 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_ö_time_excds:", 
icmp
,

168 
icmp_ö_time_excds
);

169 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_ö_∑rm_¥obs:", 
icmp
,

170 
icmp_ö_∑rm_¥obs
);

171 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_ö_§c_quíchs:", 
icmp
,

172 
icmp_ö_§c_quíchs
);

173 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_ö_ªdúe˘s:", 
icmp
,

174 
icmp_ö_ªdúe˘s
);

175 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_ö_echos:", 
icmp
,

176 
icmp_ö_echos
);

177 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_ö_echo_ªps:", 
icmp
,

178 
icmp_ö_echo_ªps
);

179 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_ö_time°amps:", 
icmp
,

180 
icmp_ö_time°amps
);

181 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_ö_time°amp_ªps:", 
icmp
,

182 
icmp_ö_time°amp_ªps
);

183 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_ö_addr_masks:", 
icmp
,

184 
icmp_ö_addr_masks
);

185 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_ö_addr_mask_ªps:", 
icmp
,

186 
icmp_ö_addr_mask_ªps
);

188 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_out_msgs:", 
icmp
,

189 
icmp_out_msgs
);

190 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_out_îrs:", 
icmp
,

191 
icmp_out_îrs
);

192 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_out_de°_uƒóchs:", 
icmp
,

193 
icmp_out_de°_uƒóchs
);

194 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_out_time_excds:", 
icmp
,

195 
icmp_out_time_excds
);

196 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_out_∑rm_¥obs:", 
icmp
,

197 
icmp_out_∑rm_¥obs
);

198 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_out_§c_quíchs:", 
icmp
,

199 
icmp_out_§c_quíchs
);

200 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_out_ªdúe˘s:", 
icmp
,

201 
icmp_out_ªdúe˘s
);

202 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_out_echos:", 
icmp
,

203 
icmp_out_echos
);

204 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_out_echo_ªps:", 
icmp
,

205 
icmp_out_echo_ªps
);

206 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_out_time°amps:", 
icmp
,

207 
icmp_out_time°amps
);

208 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_out_time°amp_ªps:", 
icmp
,

209 
icmp_out_time°amp_ªps
);

210 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_out_addr_masks:", 
icmp
,

211 
icmp_out_addr_masks
);

212 
	`__TEXT_NETIF_COUNT_LOG
("Icmp_out_addr_mask_ªps:", 
icmp
,

213 
icmp_out_addr_mask_ªps
);

216 
	`__TEXT_NETIF_COUNT_LOG
("T˝_a˘ive_›ís:", 
t˝
,

217 
t˝_a˘ive_›ís
);

218 
	`__TEXT_NETIF_COUNT_LOG
("T˝_∑ssive_›ís:", 
t˝
,

219 
t˝_∑ssive_›ís
);

220 
	`__TEXT_NETIF_COUNT_LOG
("T˝_©ãm±_Áûs:", 
t˝
,

221 
t˝_©ãm±_Áûs
);

222 
	`__TEXT_NETIF_COUNT_LOG
("T˝_e°ab_ª£ts:", 
t˝
,

223 
t˝_e°ab_ª£ts
);

224 
	`__TEXT_NETIF_COUNT_LOG
("T˝_cuº_e°ab:", 
t˝
,

225 
t˝_cuº_e°ab
);

226 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ö_£gs:", 
t˝
,

227 
t˝_ö_£gs
);

228 
	`__TEXT_NETIF_COUNT_LOG
("T˝_out_£gs:", 
t˝
,

229 
t˝_out_£gs
);

230 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ªå™_£gs:", 
t˝
,

231 
t˝_ªå™_£gs
);

232 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ö_îrs:", 
t˝
,

233 
t˝_ö_îrs
);

234 
	`__TEXT_NETIF_COUNT_LOG
("T˝_out_r°s:", 
t˝
,

235 
t˝_out_r°s
);

237 
	`__TEXT_NETIF_COUNT_LOG
("Udp_ö_dgøms:", 
udp
,

238 
udp_ö_dgøms
);

239 
	`__TEXT_NETIF_COUNT_LOG
("Udp_no_p‹ts:", 
udp
,

240 
udp_no_p‹ts
);

241 
	`__TEXT_NETIF_COUNT_LOG
("Udp_ö_îrs:", 
udp
,

242 
udp_ö_îrs
);

243 
	`__TEXT_NETIF_COUNT_LOG
("Udp_out_dgøms:", 
udp
,

244 
udp_out_dgøms
);

246 
	`__TEXT_NETIF_COUNT_LOG
("Syncookõs_£¡", 
t˝_ext
,

247 
syncookõs_£¡
);

248 
	`__TEXT_NETIF_COUNT_LOG
("Syncookõs_ªcv", 
t˝_ext
,

249 
syncookõs_ªcv
);

250 
	`__TEXT_NETIF_COUNT_LOG
("Syncookõs_Áûed", 
t˝_ext
,

251 
syncookõs_Áûed
);

252 
	`__TEXT_NETIF_COUNT_LOG
("Embri⁄ic_r°s", 
t˝_ext
,

253 
embri⁄ic_r°s
);

254 
	`__TEXT_NETIF_COUNT_LOG
("Pru√_ˇŒed", 
t˝_ext
,

255 
¥u√_ˇŒed
);

256 
	`__TEXT_NETIF_COUNT_LOG
("Rcv_¥u√d", 
t˝_ext
,

257 
rcv_¥u√d
);

258 
	`__TEXT_NETIF_COUNT_LOG
("Ofo_¥u√d", 
t˝_ext
,

259 
ofo_¥u√d
);

260 
	`__TEXT_NETIF_COUNT_LOG
("Out_of_wödow_icmps", 
t˝_ext
,

261 
out_of_wödow_icmps
);

262 
	`__TEXT_NETIF_COUNT_LOG
("Lock_dr›≥d_icmps", 
t˝_ext
,

263 
lock_dr›≥d_icmps
);

264 
	`__TEXT_NETIF_COUNT_LOG
("AΩ_fûãr", 
t˝_ext
,

265 
¨p_fûãr
);

266 
	`__TEXT_NETIF_COUNT_LOG
("Time_waôed", 
t˝_ext
,

267 
time_waôed
);

268 
	`__TEXT_NETIF_COUNT_LOG
("Time_waô_ªcy˛ed", 
t˝_ext
,

269 
time_waô_ªcy˛ed
);

270 
	`__TEXT_NETIF_COUNT_LOG
("Time_waô_kûÀd", 
t˝_ext
,

271 
time_waô_kûÀd
);

272 
	`__TEXT_NETIF_COUNT_LOG
("Paws_∑ssive_ªje˘ed", 
t˝_ext
,

273 
∑ws_∑ssive_ªje˘ed
);

274 
	`__TEXT_NETIF_COUNT_LOG
("Paws_a˘ive_ªje˘ed", 
t˝_ext
,

275 
∑ws_a˘ive_ªje˘ed
);

276 
	`__TEXT_NETIF_COUNT_LOG
("Paws_e°ab_ªje˘ed", 
t˝_ext
,

277 
∑ws_e°ab_ªje˘ed
);

278 
	`__TEXT_NETIF_COUNT_LOG
("Dñayed_ack", 
t˝_ext
,

279 
dñayed_ack
);

280 
	`__TEXT_NETIF_COUNT_LOG
("Dñayed_ack_locked", 
t˝_ext
,

281 
dñayed_ack_locked
);

282 
	`__TEXT_NETIF_COUNT_LOG
("Dñayed_ack_lo°", 
t˝_ext
,

283 
dñayed_ack_lo°
);

284 
	`__TEXT_NETIF_COUNT_LOG
("Li°í_ovîÊows", 
t˝_ext
,

285 
li°í_ovîÊows
);

286 
	`__TEXT_NETIF_COUNT_LOG
("Li°í_dr›s", 
t˝_ext
,

287 
li°í_dr›s
);

288 
	`__TEXT_NETIF_COUNT_LOG
("T˝_¥equeued", 
t˝_ext
,

289 
t˝_¥equeued
);

290 
	`__TEXT_NETIF_COUNT_LOG
("T˝_dúe˘_c›y_‰om_backlog", 
t˝_ext
,

291 
t˝_dúe˘_c›y_‰om_backlog
);

292 
	`__TEXT_NETIF_COUNT_LOG
("T˝_dúe˘_c›y_‰om_¥equeue", 
t˝_ext
,

293 
t˝_dúe˘_c›y_‰om_¥equeue
);

294 
	`__TEXT_NETIF_COUNT_LOG
("T˝_¥equeue_dr›≥d", 
t˝_ext
,

295 
t˝_¥equeue_dr›≥d
);

296 
	`__TEXT_NETIF_COUNT_LOG
("T˝_hp_hôs", 
t˝_ext
,

297 
t˝_hp_hôs
);

298 
	`__TEXT_NETIF_COUNT_LOG
("T˝_hp_hôs_to_u£r", 
t˝_ext
,

299 
t˝_hp_hôs_to_u£r
);

300 
	`__TEXT_NETIF_COUNT_LOG
("T˝_puª_acks", 
t˝_ext
,

301 
t˝_puª_acks
);

302 
	`__TEXT_NETIF_COUNT_LOG
("T˝_hp_acks", 
t˝_ext
,

303 
t˝_hp_acks
);

304 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ªno_ªcovîy", 
t˝_ext
,

305 
t˝_ªno_ªcovîy
);

306 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ßck_ªcovîy", 
t˝_ext
,

307 
t˝_ßck_ªcovîy
);

308 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ßck_ª√gög", 
t˝_ext
,

309 
t˝_ßck_ª√gög
);

310 
	`__TEXT_NETIF_COUNT_LOG
("T˝_Áck_ª‹dî", 
t˝_ext
,

311 
t˝_Áck_ª‹dî
);

312 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ßck_ª‹dî", 
t˝_ext
,

313 
t˝_ßck_ª‹dî
);

314 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ªno_ª‹dî", 
t˝_ext
,

315 
t˝_ªno_ª‹dî
);

316 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ts_ª‹dî", 
t˝_ext
,

317 
t˝_ts_ª‹dî
);

318 
	`__TEXT_NETIF_COUNT_LOG
("T˝_fuŒ_undo", 
t˝_ext
,

319 
t˝_fuŒ_undo
);

320 
	`__TEXT_NETIF_COUNT_LOG
("T˝_∑πül_undo", 
t˝_ext
,

321 
t˝_∑πül_undo
);

322 
	`__TEXT_NETIF_COUNT_LOG
("T˝_loss_undo", 
t˝_ext
,

323 
t˝_loss_undo
);

324 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ßck_undo", 
t˝_ext
,

325 
t˝_ßck_undo
);

326 
	`__TEXT_NETIF_COUNT_LOG
("T˝_loss", 
t˝_ext
,

327 
t˝_loss
);

328 
	`__TEXT_NETIF_COUNT_LOG
("T˝_lo°_ªå™smô", 
t˝_ext
,

329 
t˝_lo°_ªå™smô
);

330 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ªno_Áûuªs", 
t˝_ext
,

331 
t˝_ªno_Áûuªs
);

332 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ßck_Áûuªs", 
t˝_ext
,

333 
t˝_ßck_Áûuªs
);

334 
	`__TEXT_NETIF_COUNT_LOG
("T˝_loss_Áûuªs", 
t˝_ext
,

335 
t˝_loss_Áûuªs
);

336 
	`__TEXT_NETIF_COUNT_LOG
("T˝_timeouts", 
t˝_ext
,

337 
t˝_timeouts
);

338 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ªno_ªcovîy_Áû", 
t˝_ext
,

339 
t˝_ªno_ªcovîy_Áû
);

340 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ßck_ªcovîy_Áû", 
t˝_ext
,

341 
t˝_ßck_ªcovîy_Áû
);

342 
	`__TEXT_NETIF_COUNT_LOG
("T˝_Á°_ªå™s", 
t˝_ext
,

343 
t˝_Á°_ªå™s
);

344 
	`__TEXT_NETIF_COUNT_LOG
("T˝_f‹w¨d_ªå™s", 
t˝_ext
,

345 
t˝_f‹w¨d_ªå™s
);

346 
	`__TEXT_NETIF_COUNT_LOG
("T˝_¶ow_°¨t_ªå™s", 
t˝_ext
,

347 
t˝_¶ow_°¨t_ªå™s
);

348 
	`__TEXT_NETIF_COUNT_LOG
("T˝_scheduÀr_Áûuªs", 
t˝_ext
,

349 
t˝_scheduÀr_Áûuªs
);

350 
	`__TEXT_NETIF_COUNT_LOG
("T˝_rcv_cﬁœp£d", 
t˝_ext
,

351 
t˝_rcv_cﬁœp£d
);

352 
	`__TEXT_NETIF_COUNT_LOG
("T˝_dßck_ﬁd_£¡", 
t˝_ext
,

353 
t˝_dßck_ﬁd_£¡
);

354 
	`__TEXT_NETIF_COUNT_LOG
("T˝_dßck_ofo_£¡", 
t˝_ext
,

355 
t˝_dßck_ofo_£¡
);

356 
	`__TEXT_NETIF_COUNT_LOG
("T˝_dßck_ªcv", 
t˝_ext
,

357 
t˝_dßck_ªcv
);

358 
	`__TEXT_NETIF_COUNT_LOG
("T˝_dßck_ofo_ªcv", 
t˝_ext
,

359 
t˝_dßck_ofo_ªcv
);

360 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ab‹t_⁄_syn", 
t˝_ext
,

361 
t˝_ab‹t_⁄_syn
);

362 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ab‹t_⁄_d©a", 
t˝_ext
,

363 
t˝_ab‹t_⁄_d©a
);

364 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ab‹t_⁄_˛o£", 
t˝_ext
,

365 
t˝_ab‹t_⁄_˛o£
);

366 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ab‹t_⁄_mem‹y", 
t˝_ext
,

367 
t˝_ab‹t_⁄_mem‹y
);

368 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ab‹t_⁄_timeout", 
t˝_ext
,

369 
t˝_ab‹t_⁄_timeout
);

370 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ab‹t_⁄_lögî", 
t˝_ext
,

371 
t˝_ab‹t_⁄_lögî
);

372 
	`__TEXT_NETIF_COUNT_LOG
("T˝_ab‹t_Áûed", 
t˝_ext
,

373 
t˝_ab‹t_Áûed
);

374 
	`__TEXT_NETIF_COUNT_LOG
("T˝_mem‹y_¥essuªs", 
t˝_ext
,

375 
t˝_mem‹y_¥essuªs
);

377 #i‡
CI_CFG_SEND_STATS_TO_LOG
==0

378 i‡(
Àn
 =
cou¡
)

379 
Àn
--;

381 
buf
[
Àn
++] = '\0';

383  
Àn
;

387 
	}
}

390 
	#__XML_NETIF_DATASTART_FMT
 \

393 " <cumuœtive_time>%u</cumuœtive_time>\n"

	)

395 
	#__XML_NETIF_DATASTART
(
°
) \

396 (
°
)->
°©e
->
°©s_¢≠shŸ
.
now
, (°)->°©e->
°©s_cumuœtive
.
	)
now

398 
	#__XML_NETIF_DATAEND_FMT
 "</ªc‹d>\n"

	)

400 
	#__XML_NETIF_COUNT_FMT
 \

404 " </íåy>\n"

	)

406 
	#__XML_NETIF_COUNT
(
√tif
, 
group
, 
fõld
) \

407 
	`__SS
(
√tif
).
group
.
fõld
, \

408 
	`__CU
(
√tif
).
group
.
fõld


	)

411 
	#__XML_NETIF_RANGE_FMT
 \

415 " </íåy>\n"

	)

417 
	#__XML_NETIF_RANGE
(
«me
, 
√tif
, 
group
, 
fõld
) (name), \

418 
	`__SS
(
√tif
).
group
.
a˘uÆ
.
fõld
, \

419 
	`__SS
(
√tif
).
group
.
mö
.
fõld
, \

420 
	`__SS
(
√tif
).
group
.
max
.
fõld
, \

421 
	`__CU
(
√tif
).
group
.
a˘uÆ
.
fõld
, \

422 
	`__CU
(
√tif
).
group
.
mö
.
fõld
, \

423 
	`__CU
(
√tif
).
group
.
max
.
fõld


	)

425 #i‡
CI_CFG_SEND_STATS_TO_LOG


426 
	#__XML_NETIF_LOG
 
ci_log


	)

428 
	#__XML_NETIF_LOG
(
x
...) \

429 i‡(
Àn
 < 
cou¡
) { \

430 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
cou¡
 -Üí, 
x
); \

431 }

	)

434 
	#__XML_NETIF_COUNT_LOG
(
«me
, 
group
, 
fõld
) \

435 
	`__XML_NETIF_LOG
–
__XML_NETIF_COUNT_FMT
, \

436 (
«me
), 
	`__XML_NETIF_COUNT
(
√tif
, 
group
, 
fõld
))

	)

438 
	#__XML_NETIF_RANGE_LOG
(
«me
, 
group
, 
fõld
) \

439 
	`__XML_NETIF_LOG
–
__XML_NETIF_RANGE_FMT
, \

440 (
«me
), 
	`__XML_NETIF_RANGE
(
√tif
, 
group
, 
fõld
))

	)

445 
	$ci_√tif_°©s_ªp‹t_xml
(
ci_√tif
* 
√tif
, *
buf
, 
cou¡
)

447 
Àn
 = 0;

449 i‡(
cou¡
 <= 0)

452 
	`__XML_NETIF_LOG
–
__XML_NETIF_DATASTART_FMT
, 
	`__XML_NETIF_DATASTART
(
√tif
));

455 
	`__XML_NETIF_COUNT_LOG
("In_ªcvs:", 
ùv4
,

456 
ö_ªcvs
);

457 
	`__XML_NETIF_COUNT_LOG
("In_hdr_îrs:", 
ùv4
,

458 
ö_hdr_îrs
);

459 
	`__XML_NETIF_COUNT_LOG
("In_addr_îrs:", 
ùv4
,

460 
ö_addr_îrs
);

461 
	`__XML_NETIF_COUNT_LOG
("F‹w_dgøms:", 
ùv4
,

462 
f‹w_dgøms
);

463 
	`__XML_NETIF_COUNT_LOG
("In_unknown_¥Ÿos:", 
ùv4
,

464 
ö_unknown_¥Ÿos
);

465 
	`__XML_NETIF_COUNT_LOG
("In_disˇrds:", 
ùv4
,

466 
ö_disˇrds
);

467 
	`__XML_NETIF_COUNT_LOG
("In_dñivîs:", 
ùv4
,

468 
ö_dñivîs
);

469 
	`__XML_NETIF_COUNT_LOG
("Out_ªque°s:", 
ùv4
,

470 
out_ªque°s
);

471 
	`__XML_NETIF_COUNT_LOG
("Out_disˇrds:", 
ùv4
,

472 
out_disˇrds
);

473 
	`__XML_NETIF_COUNT_LOG
("Out_no_rouãs:", 
ùv4
,

474 
out_no_rouãs
);

475 
	`__XML_NETIF_COUNT_LOG
("Rósm_timeout:", 
ùv4
,

476 
ªasm_timeout
);

477 
	`__XML_NETIF_COUNT_LOG
("Rósm_ªqds:", 
ùv4
,

478 
ªasm_ªqds
);

479 
	`__XML_NETIF_COUNT_LOG
("Rósm_oks:", 
ùv4
,

480 
ªasm_oks
);

481 
	`__XML_NETIF_COUNT_LOG
("Rósm_Áûs:", 
ùv4
,

482 
ªasm_Áûs
);

483 
	`__XML_NETIF_COUNT_LOG
("Føg_oks:", 
ùv4
,

484 
‰ag_oks
);

485 
	`__XML_NETIF_COUNT_LOG
("Føg_Áûs:", 
ùv4
,

486 
‰ag_Áûs
);

487 
	`__XML_NETIF_COUNT_LOG
("Føg_¸óãs:", 
ùv4
,

488 
‰ag_¸óãs
);

491 
	`__XML_NETIF_COUNT_LOG
("Icmp_ö_msgs:", 
icmp
,

492 
icmp_ö_msgs
);

493 
	`__XML_NETIF_COUNT_LOG
("Icmp_ö_îrs:", 
icmp
,

494 
icmp_ö_îrs
);

495 
	`__XML_NETIF_COUNT_LOG
("Icmp_ö_de°_uƒóchs:", 
icmp
,

496 
icmp_ö_de°_uƒóchs
);

497 
	`__XML_NETIF_COUNT_LOG
("Icmp_ö_time_excds:", 
icmp
,

498 
icmp_ö_time_excds
);

499 
	`__XML_NETIF_COUNT_LOG
("Icmp_ö_∑rm_¥obs:", 
icmp
,

500 
icmp_ö_∑rm_¥obs
);

501 
	`__XML_NETIF_COUNT_LOG
("Icmp_ö_§c_quíchs:", 
icmp
,

502 
icmp_ö_§c_quíchs
);

503 
	`__XML_NETIF_COUNT_LOG
("Icmp_ö_ªdúe˘s:", 
icmp
,

504 
icmp_ö_ªdúe˘s
);

505 
	`__XML_NETIF_COUNT_LOG
("Icmp_ö_echos:", 
icmp
,

506 
icmp_ö_echos
);

507 
	`__XML_NETIF_COUNT_LOG
("Icmp_ö_echo_ªps:", 
icmp
,

508 
icmp_ö_echo_ªps
);

509 
	`__XML_NETIF_COUNT_LOG
("Icmp_ö_time°amps:", 
icmp
,

510 
icmp_ö_time°amps
);

511 
	`__XML_NETIF_COUNT_LOG
("Icmp_ö_time°amp_ªps:", 
icmp
,

512 
icmp_ö_time°amp_ªps
);

513 
	`__XML_NETIF_COUNT_LOG
("Icmp_ö_addr_masks:", 
icmp
,

514 
icmp_ö_addr_masks
);

515 
	`__XML_NETIF_COUNT_LOG
("Icmp_ö_addr_mask_ªps:", 
icmp
,

516 
icmp_ö_addr_mask_ªps
);

518 
	`__XML_NETIF_COUNT_LOG
("Icmp_out_msgs:", 
icmp
,

519 
icmp_out_msgs
);

520 
	`__XML_NETIF_COUNT_LOG
("Icmp_out_îrs:", 
icmp
,

521 
icmp_out_îrs
);

522 
	`__XML_NETIF_COUNT_LOG
("Icmp_out_de°_uƒóchs:", 
icmp
,

523 
icmp_out_de°_uƒóchs
);

524 
	`__XML_NETIF_COUNT_LOG
("Icmp_out_time_excds:", 
icmp
,

525 
icmp_out_time_excds
);

526 
	`__XML_NETIF_COUNT_LOG
("Icmp_out_∑rm_¥obs:", 
icmp
,

527 
icmp_out_∑rm_¥obs
);

528 
	`__XML_NETIF_COUNT_LOG
("Icmp_out_§c_quíchs:", 
icmp
,

529 
icmp_out_§c_quíchs
);

530 
	`__XML_NETIF_COUNT_LOG
("Icmp_out_ªdúe˘s:", 
icmp
,

531 
icmp_out_ªdúe˘s
);

532 
	`__XML_NETIF_COUNT_LOG
("Icmp_out_echos:", 
icmp
,

533 
icmp_out_echos
);

534 
	`__XML_NETIF_COUNT_LOG
("Icmp_out_echo_ªps:", 
icmp
,

535 
icmp_out_echo_ªps
);

536 
	`__XML_NETIF_COUNT_LOG
("Icmp_out_time°amps:", 
icmp
,

537 
icmp_out_time°amps
);

538 
	`__XML_NETIF_COUNT_LOG
("Icmp_out_time°amp_ªps:", 
icmp
,

539 
icmp_out_time°amp_ªps
);

540 
	`__XML_NETIF_COUNT_LOG
("Icmp_out_addr_masks:", 
icmp
,

541 
icmp_out_addr_masks
);

542 
	`__XML_NETIF_COUNT_LOG
("Icmp_out_addr_mask_ªps:", 
icmp
,

543 
icmp_out_addr_mask_ªps
);

546 
	`__XML_NETIF_COUNT_LOG
("T˝_a˘ive_›ís:", 
t˝
,

547 
t˝_a˘ive_›ís
);

548 
	`__XML_NETIF_COUNT_LOG
("T˝_∑ssive_›ís:", 
t˝
,

549 
t˝_∑ssive_›ís
);

550 
	`__XML_NETIF_COUNT_LOG
("T˝_©ãm±_Áûs:", 
t˝
,

551 
t˝_©ãm±_Áûs
);

552 
	`__XML_NETIF_COUNT_LOG
("T˝_e°ab_ª£ts:", 
t˝
,

553 
t˝_e°ab_ª£ts
);

554 
	`__XML_NETIF_COUNT_LOG
("T˝_cuº_e°ab:", 
t˝
,

555 
t˝_e°ab_ª£ts
);

556 
	`__XML_NETIF_COUNT_LOG
("T˝_ö_£gs:", 
t˝
,

557 
t˝_ö_£gs
);

558 
	`__XML_NETIF_COUNT_LOG
("T˝_out_£gs:", 
t˝
,

559 
t˝_out_£gs
);

560 
	`__XML_NETIF_COUNT_LOG
("T˝_ªå™_£gs:", 
t˝
,

561 
t˝_ªå™_£gs
);

562 
	`__XML_NETIF_COUNT_LOG
("T˝_ö_îrs:", 
t˝
,

563 
t˝_ö_îrs
);

564 
	`__XML_NETIF_COUNT_LOG
("T˝_out_r°s:", 
t˝
,

565 
t˝_out_r°s
);

568 
	`__XML_NETIF_COUNT_LOG
("Udp_ö_dgøms:", 
udp
,

569 
udp_ö_dgøms
);

570 
	`__XML_NETIF_COUNT_LOG
("Udp_no_p‹ts:", 
udp
,

571 
udp_no_p‹ts
);

572 
	`__XML_NETIF_COUNT_LOG
("Udp_ö_îrs:", 
udp
,

573 
udp_ö_îrs
);

574 
	`__XML_NETIF_COUNT_LOG
("Udp_out_dgøms:", 
udp
,

575 
udp_out_dgøms
);

578 
	`__XML_NETIF_COUNT_LOG
("Syncookõs_£¡", 
t˝_ext
,

579 
syncookõs_£¡
);

580 
	`__XML_NETIF_COUNT_LOG
("Syncookõs_ªcv", 
t˝_ext
,

581 
syncookõs_ªcv
);

582 
	`__XML_NETIF_COUNT_LOG
("Syncookõs_Áûed", 
t˝_ext
,

583 
syncookõs_Áûed
);

584 
	`__XML_NETIF_COUNT_LOG
("Embri⁄ic_r°s", 
t˝_ext
,

585 
embri⁄ic_r°s
);

586 
	`__XML_NETIF_COUNT_LOG
("Pru√_ˇŒed", 
t˝_ext
,

587 
¥u√_ˇŒed
);

588 
	`__XML_NETIF_COUNT_LOG
("Rcv_¥u√d", 
t˝_ext
,

589 
rcv_¥u√d
);

590 
	`__XML_NETIF_COUNT_LOG
("Ofo_¥u√d", 
t˝_ext
,

591 
ofo_¥u√d
);

592 
	`__XML_NETIF_COUNT_LOG
("Out_of_wödow_icmps", 
t˝_ext
,

593 
out_of_wödow_icmps
);

594 
	`__XML_NETIF_COUNT_LOG
("Lock_dr›≥d_icmps", 
t˝_ext
,

595 
lock_dr›≥d_icmps
);

596 
	`__XML_NETIF_COUNT_LOG
("AΩ_fûãr", 
t˝_ext
,

597 
¨p_fûãr
);

598 
	`__XML_NETIF_COUNT_LOG
("Time_waôed", 
t˝_ext
,

599 
time_waôed
);

600 
	`__XML_NETIF_COUNT_LOG
("Time_waô_ªcy˛ed", 
t˝_ext
,

601 
time_waô_ªcy˛ed
);

602 
	`__XML_NETIF_COUNT_LOG
("Time_waô_kûÀd", 
t˝_ext
,

603 
time_waô_kûÀd
);

604 
	`__XML_NETIF_COUNT_LOG
("Paws_∑ssive_ªje˘ed", 
t˝_ext
,

605 
∑ws_∑ssive_ªje˘ed
);

606 
	`__XML_NETIF_COUNT_LOG
("Paws_a˘ive_ªje˘ed", 
t˝_ext
,

607 
∑ws_a˘ive_ªje˘ed
);

608 
	`__XML_NETIF_COUNT_LOG
("Paws_e°ab_ªje˘ed", 
t˝_ext
,

609 
∑ws_e°ab_ªje˘ed
);

610 
	`__XML_NETIF_COUNT_LOG
("Dñayed_ack", 
t˝_ext
,

611 
dñayed_ack
);

612 
	`__XML_NETIF_COUNT_LOG
("Dñayed_ack_locked", 
t˝_ext
,

613 
dñayed_ack_locked
);

614 
	`__XML_NETIF_COUNT_LOG
("Dñayed_ack_lo°", 
t˝_ext
,

615 
dñayed_ack_lo°
);

616 
	`__XML_NETIF_COUNT_LOG
("Li°í_ovîÊows", 
t˝_ext
,

617 
li°í_ovîÊows
);

618 
	`__XML_NETIF_COUNT_LOG
("Li°í_dr›s", 
t˝_ext
,

619 
li°í_dr›s
);

620 
	`__XML_NETIF_COUNT_LOG
("T˝_¥equeued", 
t˝_ext
,

621 
t˝_¥equeued
);

622 
	`__XML_NETIF_COUNT_LOG
("T˝_dúe˘_c›y_‰om_backlog", 
t˝_ext
,

623 
t˝_dúe˘_c›y_‰om_backlog
);

624 
	`__XML_NETIF_COUNT_LOG
("T˝_dúe˘_c›y_‰om_¥equeue", 
t˝_ext
,

625 
t˝_dúe˘_c›y_‰om_¥equeue
);

626 
	`__XML_NETIF_COUNT_LOG
("T˝_¥equeue_dr›≥d", 
t˝_ext
,

627 
t˝_¥equeue_dr›≥d
);

628 
	`__XML_NETIF_COUNT_LOG
("T˝_hp_hôs", 
t˝_ext
,

629 
t˝_hp_hôs
);

630 
	`__XML_NETIF_COUNT_LOG
("T˝_hp_hôs_to_u£r", 
t˝_ext
,

631 
t˝_hp_hôs_to_u£r
);

632 
	`__XML_NETIF_COUNT_LOG
("T˝_puª_acks", 
t˝_ext
,

633 
t˝_puª_acks
);

634 
	`__XML_NETIF_COUNT_LOG
("T˝_hp_acks", 
t˝_ext
,

635 
t˝_hp_acks
);

636 
	`__XML_NETIF_COUNT_LOG
("T˝_ªno_ªcovîy", 
t˝_ext
,

637 
t˝_ªno_ªcovîy
);

638 
	`__XML_NETIF_COUNT_LOG
("T˝_ßck_ªcovîy", 
t˝_ext
,

639 
t˝_ßck_ªcovîy
);

640 
	`__XML_NETIF_COUNT_LOG
("T˝_ßck_ª√gög", 
t˝_ext
,

641 
t˝_ßck_ª√gög
);

642 
	`__XML_NETIF_COUNT_LOG
("T˝_Áck_ª‹dî", 
t˝_ext
,

643 
t˝_Áck_ª‹dî
);

644 
	`__XML_NETIF_COUNT_LOG
("T˝_ßck_ª‹dî", 
t˝_ext
,

645 
t˝_ßck_ª‹dî
);

646 
	`__XML_NETIF_COUNT_LOG
("T˝_ªno_ª‹dî", 
t˝_ext
,

647 
t˝_ªno_ª‹dî
);

648 
	`__XML_NETIF_COUNT_LOG
("T˝_ts_ª‹dî", 
t˝_ext
,

649 
t˝_ts_ª‹dî
);

650 
	`__XML_NETIF_COUNT_LOG
("T˝_fuŒ_undo", 
t˝_ext
,

651 
t˝_fuŒ_undo
);

652 
	`__XML_NETIF_COUNT_LOG
("T˝_∑πül_undo", 
t˝_ext
,

653 
t˝_∑πül_undo
);

654 
	`__XML_NETIF_COUNT_LOG
("T˝_loss_undo", 
t˝_ext
,

655 
t˝_loss_undo
);

656 
	`__XML_NETIF_COUNT_LOG
("T˝_ßck_undo", 
t˝_ext
,

657 
t˝_ßck_undo
);

658 
	`__XML_NETIF_COUNT_LOG
("T˝_loss", 
t˝_ext
,

659 
t˝_loss
);

660 
	`__XML_NETIF_COUNT_LOG
("T˝_lo°_ªå™smô", 
t˝_ext
,

661 
t˝_lo°_ªå™smô
);

662 
	`__XML_NETIF_COUNT_LOG
("T˝_ªno_Áûuªs", 
t˝_ext
,

663 
t˝_ªno_Áûuªs
);

664 
	`__XML_NETIF_COUNT_LOG
("T˝_ßck_Áûuªs", 
t˝_ext
,

665 
t˝_ßck_Áûuªs
);

666 
	`__XML_NETIF_COUNT_LOG
("T˝_loss_Áûuªs", 
t˝_ext
,

667 
t˝_loss_Áûuªs
);

668 
	`__XML_NETIF_COUNT_LOG
("T˝_timeouts", 
t˝_ext
,

669 
t˝_timeouts
);

670 
	`__XML_NETIF_COUNT_LOG
("T˝_ªno_ªcovîy_Áû", 
t˝_ext
,

671 
t˝_ªno_ªcovîy_Áû
);

672 
	`__XML_NETIF_COUNT_LOG
("T˝_ßck_ªcovîy_Áû", 
t˝_ext
,

673 
t˝_ßck_ªcovîy_Áû
);

674 
	`__XML_NETIF_COUNT_LOG
("T˝_Á°_ªå™s", 
t˝_ext
,

675 
t˝_Á°_ªå™s
);

676 
	`__XML_NETIF_COUNT_LOG
("T˝_f‹w¨d_ªå™s", 
t˝_ext
,

677 
t˝_f‹w¨d_ªå™s
);

678 
	`__XML_NETIF_COUNT_LOG
("T˝_¶ow_°¨t_ªå™s", 
t˝_ext
,

679 
t˝_¶ow_°¨t_ªå™s
);

680 
	`__XML_NETIF_COUNT_LOG
("T˝_scheduÀr_Áûuªs", 
t˝_ext
,

681 
t˝_scheduÀr_Áûuªs
);

682 
	`__XML_NETIF_COUNT_LOG
("T˝_rcv_cﬁœp£d", 
t˝_ext
,

683 
t˝_rcv_cﬁœp£d
);

684 
	`__XML_NETIF_COUNT_LOG
("T˝_dßck_ﬁd_£¡", 
t˝_ext
,

685 
t˝_dßck_ﬁd_£¡
);

686 
	`__XML_NETIF_COUNT_LOG
("T˝_dßck_ofo_£¡", 
t˝_ext
,

687 
t˝_dßck_ofo_£¡
);

688 
	`__XML_NETIF_COUNT_LOG
("T˝_dßck_ªcv", 
t˝_ext
,

689 
t˝_dßck_ªcv
);

690 
	`__XML_NETIF_COUNT_LOG
("T˝_dßck_ofo_ªcv", 
t˝_ext
,

691 
t˝_dßck_ofo_ªcv
);

692 
	`__XML_NETIF_COUNT_LOG
("T˝_ab‹t_⁄_syn", 
t˝_ext
,

693 
t˝_ab‹t_⁄_syn
);

694 
	`__XML_NETIF_COUNT_LOG
("T˝_ab‹t_⁄_d©a", 
t˝_ext
,

695 
t˝_ab‹t_⁄_d©a
);

696 
	`__XML_NETIF_COUNT_LOG
("T˝_ab‹t_⁄_˛o£", 
t˝_ext
,

697 
t˝_ab‹t_⁄_˛o£
);

698 
	`__XML_NETIF_COUNT_LOG
("T˝_ab‹t_⁄_mem‹y", 
t˝_ext
,

699 
t˝_ab‹t_⁄_mem‹y
);

700 
	`__XML_NETIF_COUNT_LOG
("T˝_ab‹t_⁄_timeout", 
t˝_ext
,

701 
t˝_ab‹t_⁄_timeout
);

702 
	`__XML_NETIF_COUNT_LOG
("T˝_ab‹t_⁄_lögî", 
t˝_ext
,

703 
t˝_ab‹t_⁄_lögî
);

704 
	`__XML_NETIF_COUNT_LOG
("T˝_ab‹t_Áûed", 
t˝_ext
,

705 
t˝_ab‹t_Áûed
);

706 
	`__XML_NETIF_COUNT_LOG
("T˝_mem‹y_¥essuªs", 
t˝_ext
,

707 
t˝_mem‹y_¥essuªs
);

709 
	`__XML_NETIF_LOG
–
__XML_NETIF_DATAEND_FMT
);

711 i‡(
Àn
 =
cou¡
)

712 
Àn
--;

714 
buf
[
Àn
++] = '\0';

716  
Àn
;

717 
	}
}

720 
	$ci_√tif_°©s_ªp‹t
–
ci_√tif
* 
ni
, 
ci_ù_°©s_ouçut_fmt
 
ty≥
, *
buf
, 
cou¡
 )

722 
rc
 = 0;

724 
	`ci_as£π
–
ni
 );

726  
ty≥
 ) {

727 
CI_IP_STATS_OUTPUT_NONE
:

728 #i‡
CI_CFG_SEND_STATS_TO_LOG


729 
rc
 = 
	`ci_√tif_°©s_ªp‹t_ãxt
(
ni
, 
NULL
, 0);

731 
rc
 = 0;

734 
CI_IP_STATS_OUTPUT_TEXT
:

735 
rc
 = 
	`ci_√tif_°©s_ªp‹t_ãxt
(
ni
, 
buf
, 
cou¡
 );

737 
CI_IP_STATS_OUTPUT_XML
:

738 
rc
 = 
	`ci_√tif_°©s_ªp‹t_xml
(
ni
, 
buf
, 
cou¡
 );

741 
rc
 = -1;

744 
	`ci_√tif_°©s_upd©e_√tif
–
ni
 );

745 
	`ci_ù_°©s_˛ór
–&
ni
->
°©e
->
°©s_¢≠shŸ
 );

747  
rc
;

748 
	}
}

762 
	$ci_√tif_°©s_a˘i⁄
(
__NI_STRUCT__
 *
ni
,

763 
ci_ù_°©s_a˘i⁄_ty≥
 
a˘i⁄
,

764 
ci_ù_°©s_ouçut_fmt
 
fmt
,

765 *
d©a
,

766 
sockÀn_t
 *
size
)

768 
ci_ùtime_t
 
ô
;

770 
	`ci_as£π
(
ni
);

771 
	`ci_as£π
–
	`IPTIMER_STATE
(
ni
) );

773 
	`LOG_STATS
–
	`ci_log
–"%s–%p, %d, %d, %∞)", 
__FUNCTION__
, 
ni
,

774 
a˘i⁄
, 
fmt
, 
d©a
));

777 
	`ci_ù_time_gë
(
	`IPTIMER_STATE
(
ni
), &
ô
);

780 #i‚de‡
__KERNEL__


781 
ni
->
°©e
->
°©s_¢≠shŸ
.
now
 = 
	`ci_ù_time_ticks2ms
“i, 
ô
);

784 
a˘i⁄
) {

785 
CI_IP_STATS_START
:

786 
	`ci_ù_°©s_˛ór
–&
ni
->
°©e
->
°©s_¢≠shŸ
);

787 
	`ci_ù_°©s_˛ór
–&
ni
->
°©e
->
°©s_cumuœtive
);

789 
ô
 = 
	`NI_CONF
(
ni
).
tc⁄°_°©s
;

790 
	`ci_√tif_°©s_h™dÀ_timî
–
ni
, 
ô
 );

793 
CI_IP_STATS_GET
:

794 i‡((
d©a
 !
NULL
Ë&& (
size
 !NULLË&& (*sizê>2 * (
ci_ù_°©s
))){

796 
ci_ù_°©s
* 
ii
 = (ci_ù_°©s*)
d©a
;

797 
	`mem˝y
–&
ii
[0], &
ni
->
°©e
->
°©s_¢≠shŸ
, (
ci_ù_°©s
) );

798 
	`mem˝y
–&
ii
[1], &
ni
->
°©e
->
°©s_cumuœtive
, (
ci_ù_°©s
));

799 *
size
 = 2 * (
ci_ù_°©s
);

803 
CI_IP_STATS_REPORT
:

804 #i‡
CI_CFG_SEND_STATS_TO_LOG


805 
	`ci_√tif_°©s_ªp‹t
(
ni
,Çi->
°©e
->
°©s_fmt
, 
NULL
, 0);

807 i‡((
d©a
 !
NULL
Ë&& (
size
 != NULL)) {

808 *
size
 = 
	`ci_√tif_°©s_ªp‹t
(
ni
,Çi->
°©e
->
°©s_fmt
,

809 
d©a
, *
size
);

814 
CI_IP_STATS_END
:

815 
CI_IP_STATS_FLUSH
:

816 
	`ci_√tif_°©s_upd©e_√tif
–
ni
 );

819 
ô
 = 
a˘i⁄
 !
CI_IP_STATS_END
 ? 
	`NI_CONF
(
ni
).
tc⁄°_°©s
 : 0;

820 
	`ci_√tif_°©s_h™dÀ_timî
(
ni
, 
ô
 );

826 
	}
}

	@netif_table.c

14 
	~"ù_öã∫Æ.h
"

17 
	#LPF
 "t˝_èbÀ: "

	)

18 
	#LPFU
 "udp_èbÀ: "

	)

21 
	#TOMBSTONE
 -1

	)

22 
	#EMPTY
 -2

	)

47 
ci_ölöe
 
	$t˝_hash3
(
ci_√tif_fûãr_èbÀ
* 
tbl
,

48 
œddr
, 
Õ‹t
,

49 
øddr
, 
Ω‹t
,

50 
¥Ÿocﬁ
) {

51 
h
 = 
	`CI_BSWAP_BE32
(
øddr
Ë^ 
	`CI_BSWAP_LE32
(
œddr
) ^

52 (
Ω‹t
 << 16 | 
Õ‹t
Ë^ 
¥Ÿocﬁ
;

53 
h
 ^= h >> 16;

54 
h
 ^= h >> 8;

55  
h
;

56 
	}
}

59 
ci_ölöe
 
	$t˝_hash1
(
ci_√tif_fûãr_èbÀ
* 
tbl
,

60 
œddr
, 
Õ‹t
,

61 
øddr
, 
Ω‹t
,

62 
¥Ÿocﬁ
) {

63  
	`t˝_hash3
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
) &

64 
tbl
->
èbÀ_size_mask
;

65 
	}
}

68 
ci_ölöe
 
	$t˝_hash2
(
ci_√tif_fûãr_èbÀ
* 
tbl
,

69 
œddr
, 
Õ‹t
,

70 
øddr
, 
Ω‹t
,

71 
¥Ÿocﬁ
) {

74  (
	`CI_BSWAP_LE32
(
œddr
 ^ 
øddr
Ë^ (
Õ‹t
 << 16 | 
Ω‹t
Ë^ 
¥Ÿocﬁ
) | 1u;

75 
	}
}

78 
	$ci_√tif_fûãr_lookup
(
ci_√tif
* 
√tif
, 
œddr
, 
Õ‹t
,

79 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
)

81 
hash1
, 
hash2
 = 0;

82 
ci_√tif_fûãr_èbÀ
* 
tbl
;

83 
fú°
;

85 
	`ci_as£π
(
√tif
);

86 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

87 
	`ci_as£π
(
√tif
->
fûãr_èbÀ
);

89 
tbl
 = 
√tif
->
fûãr_èbÀ
;

90 
hash1
 = 
	`t˝_hash1
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

91 
fú°
 = 
hash1
;

93 
	`LOG_NV
(
	`log
("tbl_lookup: %s %s:%u->%s:%u hash=%u:%uát=%u",

94 
	`CI_IP_PROTOCOL_STR
(
¥Ÿocﬁ
),

95 
	`ù_addr_°r
(
œddr
), (Ë
	`CI_BSWAP_BE16
(
Õ‹t
),

96 
	`ù_addr_°r
(
øddr
), (Ë
	`CI_BSWAP_BE16
(
Ω‹t
),

97 
fú°
, 
	`t˝_hash2
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
),

98 
hash1
));

101 
id
 = 
tbl
->
èbÀ
[
hash1
].id;

102 if–
	`CI_LIKELY
(
id
 >= 0) ) {

103 
ci_sock_cmn
* 
s
 = 
	`ID_TO_SOCK
(
√tif
, 
id
);

104 if–((
œddr
 - 
tbl
->
èbÀ
[
hash1
].laddr) |

105 (
Õ‹t
 - 
	`sock_Õ‹t_be16
(
s
) ) |

106 (
øddr
 - 
	`sock_øddr_be32
(
s
) ) |

107 (
Ω‹t
 - 
	`sock_Ω‹t_be16
(
s
) ) |

108 (
¥Ÿocﬁ
 - 
	`sock_¥Ÿocﬁ
(
s
) )) == 0 )

109  
hash1
;

111 if–
id
 =
EMPTY
 ) ;

114 if–
hash1
 =
fú°
 )

115 
hash2
 = 
	`t˝_hash2
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

116 
hash1
 = (hash1 + 
hash2
Ë& 
tbl
->
èbÀ_size_mask
;

117 if–
hash1
 =
fú°
 ) {

118 
	`LOG_E
(
	`ci_log
(
FN_FMT
 "ERROR: LOOP %s:%u->%s:%u hash=%u:%u",

119 
	`FN_PRI_ARGS
(
√tif
), 
	`ù_addr_°r
(
œddr
), 
Õ‹t
,

120 
	`ù_addr_°r
(
øddr
), 
Ω‹t
, 
hash1
, 
hash2
));

121  -
ELOOP
;

125  -
ENOENT
;

126 
	}
}

129 
	$ci_√tif_li°íî_lookup
(
ci_√tif
* 
√tif
, 
œddr
, 
Õ‹t
)

131 
rc
 = 
	`ci_√tif_fûãr_lookup
(
√tif
, 
œddr
, 
Õ‹t
, 0, 0, 
IPPROTO_TCP
);

132 if–
rc
 < 0 )

133 
rc
 = 
	`ci_√tif_fûãr_lookup
(
√tif
, 0, 
Õ‹t
, 0, 0, 
IPPROTO_TCP
);

134  
rc
;

135 
	}
}

138 
ci_uöt32


139 
	$ci_√tif_fûãr_hash
(
ci_√tif
* 
ni
, 
œddr
, 
Õ‹t
,

140 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
)

142  
	`t˝_hash3
(
ni
->
fûãr_èbÀ
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

143 
	}
}

146 
ci_ölöe
 
	$ci_sock_ötf_check
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
,

147 
ötf_i
, 
vœn
)

149  ((
s
->
rx_böd2dev_ba£_ifödex
 ==

150 
	`ci_√tif_ötf_i_to_ba£_ifödex
(
ni
, 
ötf_i
)) &&

151 
s
->
rx_böd2dev_vœn
 =
vœn
);

152 
	}
}

155 
ci_√tif_fûãr_f‹_óch_m©ch
(
ci_√tif
* 
ni
, 
œddr
,

156 
Õ‹t
, 
øddr
,

157 
Ω‹t
, 
¥Ÿocﬁ
,

158 
ötf_i
, 
vœn
,

159 (*
ˇŒback
)(
ci_sock_cmn
*, *),

160 * 
ˇŒback_¨g
, 
ci_uöt32
* 
hash_out
)

162 
ci_√tif_fûãr_èbÀ
* 
tbl
;

163 
hash1
, 
hash2
 = 0;

164 
fú°
;

166 
tbl
 = 
ni
->
fûãr_èbÀ
;

167 if–
hash_out
 !
NULL
 )

168 *
hash_out
 = 
	`t˝_hash3
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

169 
hash1
 = 
	`t˝_hash1
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

170 
fú°
 = 
hash1
;

172 
	`LOG_NV
(
	`log
("%s: %s %s:%u->%s:%u hash=%u:%uát=%u",

173 
__FUNCTION__
, 
	`CI_IP_PROTOCOL_STR
(
¥Ÿocﬁ
),

174 
	`ù_addr_°r
(
œddr
), (Ë
	`CI_BSWAP_BE16
(
Õ‹t
),

175 
	`ù_addr_°r
(
øddr
), (Ë
	`CI_BSWAP_BE16
(
Ω‹t
),

176 
fú°
, 
	`t˝_hash2
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
),

177 
hash1
));

180 
id
 = 
tbl
->
èbÀ
[
hash1
].id;

181 if(
	`CI_LIKELY
–
id
 >= 0 )) {

182 
ci_sock_cmn
* 
s
 = 
	`ID_TO_SOCK
(
ni
, 
id
);

183 if–((
œddr
 - 
tbl
->
èbÀ
[
hash1
].laddr) |

184 (
Õ‹t
 - 
	`sock_Õ‹t_be16
(
s
) ) |

185 (
øddr
 - 
	`sock_øddr_be32
(
s
) ) |

186 (
Ω‹t
 - 
	`sock_Ω‹t_be16
(
s
) ) |

187 (
¥Ÿocﬁ
 - 
	`sock_¥Ÿocﬁ
(
s
) )) == 0 )

188 if(
	`CI_LIKELY
–(
s
->
rx_böd2dev_ifödex
 =
CI_IFID_BAD
 ||

189 
	`ci_sock_ötf_check
(
ni
, 
s
, 
ötf_i
, 
vœn
)) ))

190 if–
	`ˇŒback
(
s
, 
ˇŒback_¨g
) != 0 )

193 if–
id
 =
EMPTY
 )

197 if–
hash1
 =
fú°
 )

198 
hash2
 = 
	`t˝_hash2
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

199 
hash1
 = (hash1 + 
hash2
Ë& 
tbl
->
èbÀ_size_mask
;

200 if–
hash1
 =
fú°
 ) {

201 
	`LOG_NV
(
	`ci_log
(
FN_FMT
 "ITERATE FULL %s:%u->%s:%u hash=%u:%u",

202 
	`FN_PRI_ARGS
(
ni
), 
	`ù_addr_°r
(
œddr
), 
Õ‹t
,

203 
	`ù_addr_°r
(
øddr
), 
Ω‹t
, 
hash1
, 
hash2
));

208 
	}
}

212 
	$ci_√tif_fûãr_ö£π
(
ci_√tif
* 
√tif
, 
oo_•
 
t˝_id
,

213 
œddr
, 
Õ‹t
,

214 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
)

216 
ci_√tif_fûãr_èbÀ_íåy
* 
íåy
;

217 
hash1
, 
hash2
;

218 
ci_√tif_fûãr_èbÀ
* 
tbl
;

219 #i‡!
	`deföed
(
NDEBUG
Ë|| 
CI_CFG_STATS_NETIF


220 
h›s
 = 1;

222 
fú°
;

224 
	`ci_as£π
(
√tif
);

225 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

226 
	`ci_as£π
(
√tif
->
fûãr_èbÀ
);

227 
tbl
 = 
√tif
->
fûãr_èbÀ
;

229 
hash1
 = 
	`t˝_hash1
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

230 
hash2
 = 
	`t˝_hash2
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

231 
fú°
 = 
hash1
;

235 
íåy
 = &
tbl
->
èbÀ
[
hash1
];

236 if–
íåy
->
id
 < 0 ) ;

238 ++
íåy
->
rouã_cou¡
;

239 #i‡!
	`deföed
(
NDEBUG
Ë|| 
CI_CFG_STATS_NETIF


240 ++
h›s
;

246 
	`ci_as£π
(

247 !((
íåy
->
id
 =
	`OO_SP_TO_INT
(
t˝_id
)Ë&& (
œddr
 ==Éntry->laddr)) );

249 
hash1
 = (hash1 + 
hash2
Ë& 
tbl
->
èbÀ_size_mask
;

251 if–
hash1
 =
fú°
 ) {

252 
ci_sock_cmn
 *
s
 = 
	`SP_TO_SOCK_CMN
(
√tif
, 
t˝_id
);

253 if–! (
s
->
s_Êags
 & 
CI_SOCK_FLAG_SW_FILTER_FULL
) ) {

254 
	`LOG_E
(
	`ci_log
(
FN_FMT
 "%d FULL %s %s:%u->%s:%u hops=%u",

255 
	`FN_PRI_ARGS
(
√tif
),

256 
	`OO_SP_FMT
(
t˝_id
), 
	`CI_IP_PROTOCOL_STR
(
¥Ÿocﬁ
),

257 
	`ù_addr_°r
(
œddr
), (Ë
	`CI_BSWAP_BE16
(
Õ‹t
),

258 
	`ù_addr_°r
(
øddr
), (Ë
	`CI_BSWAP_BE16
(
Ω‹t
),

259 
h›s
));

260 
s
->
s_Êags
 |
CI_SOCK_FLAG_SW_FILTER_FULL
;

263 
	`CITP_STATS_NETIF_INC
(
√tif
, 
sw_fûãr_ö£π_èbÀ_fuŒ
);

264  -
ENOBUFS
;

269 
	`LOG_TC
(
	`ci_log
(
FN_FMT
 "%d INSERT %s %s:%u->%s:%u hash=%u:%uát=%u "

270 "ovî=%d h›s=%u", 
	`FN_PRI_ARGS
(
√tif
), 
	`OO_SP_FMT
(
t˝_id
),

271 
	`CI_IP_PROTOCOL_STR
(
¥Ÿocﬁ
),

272 
	`ù_addr_°r
(
œddr
), (Ë
	`CI_BSWAP_BE16
(
Õ‹t
),

273 
	`ù_addr_°r
(
øddr
), (Ë
	`CI_BSWAP_BE16
(
Ω‹t
),

274 
fú°
, 
hash2
, 
hash1
, 
íåy
->
id
, 
h›s
));

276 #i‡
CI_CFG_STATS_NETIF


277 if–
h›s
 > 
√tif
->
°©e
->
°©s
.
èbÀ_max_h›s
 )

278 
√tif
->
°©e
->
°©s
.
èbÀ_max_h›s
 = 
h›s
;

280 if–
√tif
->
°©e
->
°©s
.
èbÀ_món_h›s
 == 0 )

281 
√tif
->
°©e
->
°©s
.
èbÀ_món_h›s
 = 1;

282 
√tif
->
°©e
->
°©s
.
èbÀ_món_h›s
 =

283 (
√tif
->
°©e
->
°©s
.
èbÀ_món_h›s
 * 9 + 
h›s
) / 10;

285 if–
íåy
->
id
 =
EMPTY
 )

286 ++
√tif
->
°©e
->
°©s
.
èbÀ_n_¶Ÿs
;

287 ++
√tif
->
°©e
->
°©s
.
èbÀ_n_íåõs
;

290 
íåy
->
id
 = 
	`OO_SP_TO_INT
(
t˝_id
);

291 
íåy
->
œddr
 =Üaddr;

293 
	}
}

297 
	$__ci_√tif_fûãr_ªmove
(
ci_√tif
* 
ni
, 
hash1
,

298 
hash2
, 
h›s
, 
œ°_tbl_i
)

300 
ci_√tif_fûãr_èbÀ
* 
tbl
 = 
ni
->
fûãr_èbÀ
;

301 
ci_√tif_fûãr_èbÀ_íåy
* 
íåy
;

302 
tbl_i
;

303 
i
;

305 
tbl_i
 = 
hash1
;

306  
i
 = 0; i < 
h›s
; ++i ) {

307 
íåy
 = &
tbl
->
èbÀ
[
tbl_i
];

308 
	`ci_as£π
(
íåy
->
id
 !
EMPTY
);

309 
	`ci_as£π
(
íåy
->
rouã_cou¡
 > 0);

310 if–--
íåy
->
rouã_cou¡
 =0 &&É¡ry->
id
 =
TOMBSTONE
 ) {

311 
	`CITP_STATS_NETIF
(--
ni
->
°©e
->
°©s
.
èbÀ_n_¶Ÿs
);

312 
íåy
->
id
 = 
EMPTY
;

314 
tbl_i
 = (tbl_ò+ 
hash2
Ë& 
tbl
->
èbÀ_size_mask
;

316 
	`ci_as£π
(
tbl_i
 =
œ°_tbl_i
);

318 
	`CITP_STATS_NETIF
(--
ni
->
°©e
->
°©s
.
èbÀ_n_íåõs
);

319 
íåy
 = &
tbl
->
èbÀ
[
tbl_i
];

320 if–
íåy
->
rouã_cou¡
 == 0 ) {

321 
	`CITP_STATS_NETIF
(--
ni
->
°©e
->
°©s
.
èbÀ_n_¶Ÿs
);

322 
íåy
->
id
 = 
EMPTY
;

325 
íåy
->
id
 = 
TOMBSTONE
;

327 
	}
}

331 
	$ci_√tif_fûãr_ªmove
(
ci_√tif
* 
√tif
, 
oo_•
 
sock_p
,

332 
œddr
, 
Õ‹t
,

333 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
)

335 
ci_√tif_fûãr_èbÀ_íåy
* 
íåy
;

336 
hash1
, 
hash2
, 
tbl_i
;

337 
ci_√tif_fûãr_èbÀ
* 
tbl
;

338 
h›s
 = 0;

339 
fú°
;

341 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
)

342 #ifde‡
__KERNEL__


345 || (
	`√tif2t˝_hñ≥r_ªsour˚
(
√tif
)->
k_ªf_cou¡
 &

346 
TCP_HELPER_K_RC_DEAD
)

351 
tbl
 = 
√tif
->
fûãr_èbÀ
;

352 
hash1
 = 
	`t˝_hash1
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

353 
hash2
 = 
	`t˝_hash2
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

354 
fú°
 = 
hash1
;

356 
	`LOG_TC
(
	`ci_log
("%s: [%d:%d] REMOVE %s %s:%u->%s:%u hash=%u:%u",

357 
__FUNCTION__
, 
	`NI_ID
(
√tif
), 
	`OO_SP_FMT
(
sock_p
),

358 
	`CI_IP_PROTOCOL_STR
(
¥Ÿocﬁ
),

359 
	`ù_addr_°r
(
œddr
), (Ë
	`CI_BSWAP_BE16
(
Õ‹t
),

360 
	`ù_addr_°r
(
øddr
), (Ë
	`CI_BSWAP_BE16
(
Ω‹t
),

361 
hash1
, 
hash2
));

363 
tbl_i
 = 
hash1
;

365 
íåy
 = &
tbl
->
èbÀ
[
tbl_i
];

366 if–
íåy
->
id
 =
	`OO_SP_TO_INT
(
sock_p
) ) {

367 if–
œddr
 =
íåy
->laddr )

370 if–
íåy
->
id
 =
EMPTY
 ) {

376 
tbl_i
 = (tbl_ò+ 
hash2
Ë& 
tbl
->
èbÀ_size_mask
;

377 ++
h›s
;

378 if–
tbl_i
 =
fú°
 ) {

379 
	`LOG_E
(
	`ci_log
(
FN_FMT
 "ERROR: LOOP [%d] %s %s:%u->%s:%u",

380 
	`FN_PRI_ARGS
(
√tif
), 
	`OO_SP_FMT
(
sock_p
),

381 
	`CI_IP_PROTOCOL_STR
(
¥Ÿocﬁ
),

382 
	`ù_addr_°r
(
œddr
), (Ë
	`CI_BSWAP_BE16
(
Õ‹t
),

383 
	`ù_addr_°r
(
øddr
), (Ë
	`CI_BSWAP_BE16
(
Ω‹t
)));

388 
	`__ci_√tif_fûãr_ªmove
(
√tif
, 
hash1
, 
hash2
, 
h›s
, 
tbl_i
);

389 
	}
}

395 #ifde‡
__ci_drivî__


397 
	$ci_√tif_fûãr_öô
(
ci_√tif_fûãr_èbÀ
* 
tbl
, 
size_lg2
)

399 
i
;

400 
size
 = 
	`ci_pow2
(
size_lg2
);

402 
	`ci_as£π
(
tbl
);

403 
	`ci_as£π_gt
(
size_lg2
, 0);

404 
	`ci_as£π_À
(
size_lg2
, 32);

406 
tbl
->
èbÀ_size_mask
 = 
size
 - 1;

408  
i
 = 0; i < 
size
; ++i ) {

409 
tbl
->
èbÀ
[
i
].
id
 = 
EMPTY
;

410 
tbl
->
èbÀ
[
i
].
rouã_cou¡
 = 0;

411 
tbl
->
èbÀ
[
i
].
œddr
 = 0;

413 
	}
}

417 
ci_sock_cmn
* 
	$__ci_√tif_fûãr_lookup
(
ci_√tif
* 
√tif
, 
œddr
,

418 
Õ‹t
, 
øddr
,

419 
Ω‹t
, 
¥Ÿocﬁ
)

421 
rc
;

424 
rc
 = 
	`ci_√tif_fûãr_lookup
(
√tif
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

425 
	`LOG_NV
(
	`log
(
LPF
 "FULL LOOKUP %s:%u->%s:%uÑc=%d",

426 
	`ù_addr_°r
(
œddr
), (Ë
	`CI_BSWAP_BE16
(
Õ‹t
),

427 
	`ù_addr_°r
(
øddr
), (Ë
	`CI_BSWAP_BE16
(
Ω‹t
),

428 
rc
));

430 if(
	`CI_LIKELY
–
rc
 >= 0 ))

431  
	`ID_TO_SOCK
(
√tif
,Çëif->
fûãr_èbÀ
->
èbÀ
[
rc
].
id
);

434 
øddr
 = 
Ω‹t
 = 0;

435 
rc
 = 
	`ci_√tif_fûãr_lookup
(
√tif
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

436 
	`LOG_NV
(
	`log
(
LPF
 "WILD LOOKUP %s:%u->%s:%uÑc=%d",

437 
	`ù_addr_°r
(
œddr
), (Ë
	`CI_BSWAP_BE16
(
Õ‹t
),

438 
	`ù_addr_°r
(
øddr
), (Ë
	`CI_BSWAP_BE16
(
Ω‹t
),

439 
rc
));

441 if(
	`CI_LIKELY
–
rc
 >= 0 ))

442  
	`ID_TO_SOCK
(
√tif
,Çëif->
fûãr_èbÀ
->
èbÀ
[
rc
].
id
);

445 
	}
}

448 
	$ci_√tif_fûãr_check
(
ci_√tif
* 
√tif
,

449 
œddr
, 
Õ‹t
,

450 
øddr
, 
Ω‹t
,

451 
¥Ÿocﬁ
)

453  
	`ci_√tif_fûãr_lookup
(
√tif
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

454 
	}
}

460 
	$ci_√tif_fûãr_dump
(
ci_√tif
* 
ni
)

462 
id
;

463 
i
;

464 
ci_√tif_fûãr_èbÀ
* 
tbl
;

466 
	`ci_as£π
(
ni
);

467 
tbl
 = 
ni
->
fûãr_èbÀ
;

469 
	`log
("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");

470 #i‡
CI_CFG_STATS_NETIF


471 
	`log
(
FN_FMT
 "size=%dÇ_íåõs=%òn_¶Ÿs=%òmax=%òmón=%i", 
	`FN_PRI_ARGS
(
ni
),

472 
tbl
->
èbÀ_size_mask
 + 1, 
ni
->
°©e
->
°©s
.
èbÀ_n_íåõs
,

473 
ni
->
°©e
->
°©s
.
èbÀ_n_¶Ÿs
,Çi->°©e->°©s.
èbÀ_max_h›s
,

474 
ni
->
°©e
->
°©s
.
èbÀ_món_h›s
);

477  
i
 = 0; i <
tbl
->
èbÀ_size_mask
; ++i ) {

478 
id
 = 
tbl
->
èbÀ
[
i
].id;

479 if–
	`CI_LIKELY
(
id
 >= 0) ) {

480 
ci_sock_cmn
* 
s
 = 
	`ID_TO_SOCK
(
ni
, 
id
);

481 
œddr
 = 
tbl
->
èbÀ
[
i
].laddr;

482 
Õ‹t
 = 
	`sock_Õ‹t_be16
(
s
);

483 
øddr
 = 
	`sock_øddr_be32
(
s
);

484 
Ω‹t
 = 
	`sock_Ω‹t_be16
(
s
);

485 
¥Ÿocﬁ
 = 
	`sock_¥Ÿocﬁ
(
s
);

486 
hash1
 = 
	`t˝_hash1
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

487 
hash2
 = 
	`t˝_hash2
(
tbl
, 
œddr
, 
Õ‹t
, 
øddr
, 
Ω‹t
, 
¥Ÿocﬁ
);

488 
	`log
("%010d id=%-10dÑt_˘=%d %†"
CI_IP_PRINTF_FORMAT
":%d "

489 
CI_IP_PRINTF_FORMAT
":%d %010d:%010d",

490 
i
, 
id
, 
tbl
->
èbÀ
[i].
rouã_cou¡
, 
	`CI_IP_PROTOCOL_STR
(
¥Ÿocﬁ
),

491 
	`CI_IP_PRINTF_ARGS
(&
œddr
), 
	`CI_BSWAP_BE16
(
Õ‹t
),

492 
	`CI_IP_PRINTF_ARGS
(&
øddr
), 
	`CI_BSWAP_BE16
(
Ω‹t
), 
hash1
, 
hash2
);

495 
	`log
("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");

496 
	}
}

	@netif_tx.c

14 
	~"ù_öã∫Æ.h
"

15 
	~"√tif_tx.h
"

16 
	~<ci/toﬁs/pktdump.h
>

17 
	~<ci/öã∫Æ/pio_buddy.h
>

20 
	$__ci_√tif_dmaq_shove
(
ci_√tif
* 
ni
, 
ötf_i
)

22 
oo_pktq
* 
dmaq
 = &
ni
->
°©e
->
nic
[
ötf_i
].dmaq;

23 
ef_vi
* 
vi
 = &
ni
->
nic_hw
[
ötf_i
].vi;

24 
ci_ù_pkt_fmt
* 
pkt
;

25 
rc
;

28 
pkt
 = 
	`PKT_CHK
(
ni
, 
dmaq
->
hód
);

29 
	`ci_as£π
(
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_PENDING
);

30 
	`ci_as£π_equÆ
(
ötf_i
, 
pkt
->intf_i);

32 
ef_iovec
 
iov
[
CI_IP_PKT_SEGMENTS_MAX
];

33 
	`ci_√tif_pkt_to_iovec
(
ni
, 
pkt
, 
iov
, (iov) / (iov[0]));

34 
rc
 = 
	`ef_vi_å™smôv_öô
(
vi
, 
iov
, 
pkt
->
n_buf„rs
, 
	`OO_PKT_ID
(pkt));

35 if–
rc
 >= 0 ) {

36 
	`__oo_pktq_√xt
(
ni
, 
dmaq
, 
pkt
, 
√tif
.
tx
.
dmaq_√xt
);

37 
	`CI_DEBUG
(
pkt
->
√tif
.
tx
.
dmaq_√xt
 = 
OO_PP_NULL
);

41 #i‡
CI_CFG_STATS_NETIF


42 if–(
ci_uöt32
Ë
dmaq
->
num
 > 
ni
->
°©e
->
°©s
.
tx_dma_max
 )

43 
ni
->
°©e
->
°©s
.
tx_dma_max
 = 
dmaq
->
num
;

49  
	`oo_pktq_nŸ_em±y
(
dmaq
) );

51 
	`ef_vi_å™smô_push
(
vi
);

52 
	`CITP_STATS_NETIF_INC
(
ni
, 
tx_dma_do‹bñls
);

53 
	}
}

56 
	$ci_√tif_dmaq_shove1
(
ci_√tif
* 
ni
, 
ötf_i
)

58 
ef_vi
* 
vi
 = &
ni
->
nic_hw
[
ötf_i
].vi;

59 if–
	`ef_vi_å™smô_•a˚
(
vi
Ë>(
	`ef_vi_å™smô_ˇ∑côy
(vi) >> 1) )

60 
	`__ci_√tif_dmaq_shove
(
ni
, 
ötf_i
);

61 
	}
}

64 
	$ci_√tif_dmaq_shove2
(
ci_√tif
* 
ni
, 
ötf_i
)

66 
ef_vi
* 
vi
 = &
ni
->
nic_hw
[
ötf_i
].vi;

67 if–
	`ef_vi_å™smô_•a˚
(
vi
Ë> 
CI_IP_PKT_SEGMENTS_MAX
 )

68 
	`__ci_√tif_dmaq_shove
(
ni
, 
ötf_i
);

69 
	}
}

72 
	$ci_√tif_£nd
(
ci_√tif
* 
√tif
, 
ci_ù_pkt_fmt
* 
pkt
)

74 
ötf_i
, 
rc
;

75 
oo_pktq
* 
dmaq
;

76 
ef_vi
* 
vi
;

77 
ef_iovec
 
iov
[
CI_IP_PKT_SEGMENTS_MAX
];

78 #i‡
CI_CFG_USE_PIO


79 
ci_uöt8
 
‹dî
;

80 
ci_öt32
 
off£t
;

81 
ci_pio_buddy_Æloˇt‹
* 
buddy
;

84 
	`ci_as£π
(
√tif
);

85 
	`ci_as£π
(
pkt
);

86 
	`ci_as£π
(
pkt
->
ötf_i
 >= 0);

87 
	`ci_as£π
(
pkt
->
ötf_i
 < 
CI_CFG_MAX_INTERFACES
);

89 
	`__ci_√tif_dmaq_ö£π_¥ï_pkt
(
√tif
, 
pkt
);

91 
	`LOG_NT
(
	`log
("%s: [%d] id=%dÇ£g=%d 0:["
EF_ADDR_FMT
":%d] dhost="

92 
CI_MAC_PRINTF_FORMAT
, 
__FUNCTION__
, 
	`NI_ID
(
√tif
),

93 
	`OO_PKT_FMT
(
pkt
),Ökt->
n_buf„rs
,Ökt->
dma_addr
[pkt->
ötf_i
],

94 
pkt
->
buf_Àn
, 
	`CI_MAC_PRINTF_ARGS
(
	`oo_ëhî_dho°
(pkt))));

96 
	`ci_check
–! 
	`ci_ëh_addr_is_zîo
((
ci_uöt8
 *)
	`oo_ëhî_dho°
(
pkt
)));

105 
ötf_i
 = 
pkt
->intf_i;

107 
dmaq
 = 
	`ci_√tif_dmaq
(
√tif
, 
ötf_i
);

108 
vi
 = &
√tif
->
nic_hw
[
ötf_i
].vi;

111 
	`ci_as£π_equÆ
(
vi
, &
√tif
->
nic_hw
[
pkt
->
ötf_i
].vi);

113 if–
	`oo_pktq_is_em±y
(
dmaq
) ) {

114 #i‡
CI_CFG_USE_PIO


118 
‹dî
 = 
	`ci_log2_ge
(
pkt
->
∑y_Àn
, 
CI_CFG_MIN_PIO_BLOCK_ORDER
);

119 
buddy
 = &
√tif
->
°©e
->
nic
[
ötf_i
].
pio_buddy
;

120 if–
√tif
->
°©e
->
nic
[
ötf_i
].
oo_vi_Êags
 & 
OO_VI_FLAGS_PIO_EN
 ) {

121 if–
pkt
->
∑y_Àn
 <
	`NI_OPTS
(
√tif
).
pio_thªsh
 &&Ökt->
n_buf„rs
 == 1 ) {

122 if–(
off£t
 = 
	`ci_pio_buddy_Æloc
(
√tif
, 
buddy
, 
‹dî
)) >= 0 ) {

123 
rc
 = 
	`ef_vi_å™smô_c›y_pio
(&
√tif
->
nic_hw
[
pkt
->
ötf_i
].
vi
, 
off£t
,

124 
	`PKT_START
(
pkt
),Ökt->
buf_Àn
,

125 
	`OO_PKT_ID
(
pkt
));

126 if–
rc
 == 0 ) {

127 
	`CITP_STATS_NETIF_INC
(
√tif
, 
pio_pkts
);

128 
	`ci_as£π
(
pkt
->
pio_addr
 == -1);

129 
pkt
->
pio_addr
 = 
off£t
;

130 
pkt
->
pio_‹dî
 = 
‹dî
;

131 
d⁄e
;

134 
	`CITP_STATS_NETIF_INC
(
√tif
, 
no_pio_îr
);

135 
	`ci_pio_buddy_‰ì
(
√tif
, 
buddy
, 
off£t
, 
‹dî
);

140 
	`CI_DEBUG
(
	`CITP_STATS_NETIF_INC
(
√tif
, 
no_pio_busy
));

144 
	`CI_DEBUG
(
	`CITP_STATS_NETIF_INC
(
√tif
, 
no_pio_too_l⁄g
));

148 
	`ci_√tif_pkt_to_iovec
(
√tif
, 
pkt
, 
iov
,

149 (
iov
) / (iov[0]));

150 if–(
rc
 = 
	`ef_vi_å™smôv
(
vi
, 
iov
, 
pkt
->
n_buf„rs
, 
	`OO_PKT_ID
(pkt))) == 0 ) {

151 
	`CITP_STATS_NETIF_INC
(
√tif
, 
tx_dma_do‹bñls
);

152 
	`LOG_AT
(
	`ci_™Æy£_pkt
(
	`oo_ëhî_hdr
(
pkt
),Ökt->
buf_Àn
));

153 
	`LOG_DT
(
	`ci_hex_dump
(
ci_log_‚
, 
	`oo_ëhî_hdr
(
pkt
),Ökt->
buf_Àn
, 0));

154 
d⁄e
;

161 
	`LOG_NT
(
	`log
("%s: ENQ id=%d", 
__FUNCTION__
, 
	`OO_PKT_FMT
(
pkt
)));

162 
	`__ci_√tif_dmaq_put
(
√tif
, 
dmaq
, 
pkt
);

164 
d⁄e
:

170 if–
√tif
->
°©e
->
£nd_may_pﬁl
 ) {

171 
ci_√tif_°©e_nic_t
* 
n¢
 = &
√tif
->
°©e
->
nic
[
ötf_i
];

172 if–
n¢
->
tx_dmaq_ö£π_£q
 -Ç¢->
tx_dmaq_ö£π_£q_œ°_pﬁl
 >

173 
	`NI_OPTS
(
√tif
).
£nd_pﬁl_thªsh
 ) {

174 
n¢
->
tx_dmaq_ö£π_£q_œ°_pﬁl
 =Ç¢->
tx_dmaq_ö£π_£q
;

175 if–
	`ci_√tif_ötf_has_evít
(
√tif
, 
ötf_i
) ) {

179 
√tif
->
°©e
->
£nd_may_pﬁl
 = 0;

180 
	`ci_√tif_pﬁl_n
(
√tif
, 
	`NI_OPTS
“ëif).
£nd_pﬁl_max_evíts
);

181 
√tif
->
°©e
->
£nd_may_pﬁl
 = 1;

185 
	}
}

	@netif_tx.h

1 #i‚de‡
__NETIF_TX_H__


2 
	#__NETIF_TX_H__


	)

9 
ci_ölöe
 
	$ci_√tif_pkt_tx_as£π_Àn
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

10 
n
)

12 #i‚de‡
NDEBUG


13 
ci_ù_pkt_fmt
* 
fú°
 = 
pkt
;

14 
i
, 
t
 = 0;

15  
i
 = 0; ; ) {

16 
t
 +
pkt
->
buf_Àn
;

17 
	`ci_as£π_À
(
t
, 
fú°
->
∑y_Àn
);

18 if–++
i
 =
n
 )

20 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
‰ag_√xt
);

22 
	`ci_as£π_equÆ
(
t
, 
fú°
->
∑y_Àn
);

24 
	}
}

27 
ci_ölöe
 
	$ci_√tif_pkt_to_iovec
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

28 
ef_iovec
* 
iov
, 
iovÀn
)

30 
i
, 
ötf_i
 = 
pkt
->intf_i;

31 
n
 = 
pkt
->
n_buf„rs
;

33 
	`ci_as£π_…
((Ë
ötf_i
, 
CI_CFG_MAX_INTERFACES
);

34 
	`ci_as£π_ge
(
iovÀn
, 
n
);

36 #i‡
CI_CFG_NETIF_HARDEN


37 if–
n
 > 
iovÀn
 )

38 
n
 = 
iovÀn
;

41 
	`ci_√tif_pkt_tx_as£π_Àn
(
ni
, 
pkt
, 
n
);

43  
i
 = 0; ; ) {

44 
iov
[
i
].
iov_ba£
 = 
pkt
->
dma_addr
[
ötf_i
] +Ökt->
pkt_°¨t_off
;

45 
iov
[
i
].
iov_Àn
 = 
pkt
->
buf_Àn
;

46 if–++
i
 =
n
 )

48 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
‰ag_√xt
);

50 
	}
}

60 
ci_√tif_dmaq_shove1
(
ci_√tif
*, 
ötf_i
);

65 
ci_√tif_dmaq_shove2
(
ci_√tif
*, 
ötf_i
);

68 
	#ci_√tif_dmaq
(
ni
, 
nic_i
Ë(&“i)->
°©e
->
nic
[nic_i].
dmaq
)

	)

71 
	#ci_√tif_dmaq_is_em±y
(
ni
, 
nic_i
) \

72 
	`oo_pktq_is_em±y
(
	`ci_√tif_dmaq
((
ni
), (
nic_i
)))

	)

74 
	#ci_√tif_dmaq_nŸ_em±y
(
ni
, 
nic_i
) \

75 
	`oo_pktq_nŸ_em±y
(
	`ci_√tif_dmaq
((
ni
), (
nic_i
)))

	)

78 
	#__ci_√tif_dmaq_put
(
ni
, 
q
, 
pkt
) \

80 
	`__oo_pktq_put
((
ni
), (
q
), (
pkt
), 
√tif
.
tx
.
dmaq_√xt
); \

82 } 0)

	)

85 
ci_ölöe
 
	$ci_√tif_dmaq_™d_vi_f‹_pkt
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

86 
oo_pktq
** 
dmaq
, 
ef_vi
** 
vi
) {

87 *
dmaq
 = &
ni
->
°©e
->
nic
[
pkt
->
ötf_i
].dmaq;

88 *
vi
 = &
ni
->
nic_hw
[
pkt
->
ötf_i
].vi;

89 
	}
}

92 
	#__ci_√tif_dmaq_ö£π_¥ï_pkt
(
ni
, 
pkt
) \

94 
	`ci_as£π
–! ((
pkt
)->
Êags
 & 
CI_PKT_FLAG_TX_PENDING
) ); \

95 (
pkt
)->
Êags
 |
CI_PKT_FLAG_TX_PENDING
; \

96 ++(
ni
)->
°©e
->
nic
[(
pkt
)->
ötf_i
].
tx_dmaq_ö£π_£q
; \

97 (
ni
)->
°©e
->
nic
[(
pkt
)->
ötf_i
].
tx_byãs_added
+=
	`TX_PKT_LEN
(pkt); \

98 if–
	`oo_t˝dump_check
(
ni
, 
pkt
, (pkt)->
ötf_i
) ) \

99 
	`oo_t˝dump_dump_pkt
(
ni
, 
pkt
); \

100 } 0)

	)

103 
	#__ci_√tif_dmaq_ö£π_¥ï_pkt_w¨m_undo
(
ni
, 
pkt
) \

105 (
pkt
)->
Êags
 &=~ 
CI_PKT_FLAG_TX_PENDING
; \

106 --(
ni
)->
°©e
->
nic
[(
pkt
)->
ötf_i
].
tx_dmaq_ö£π_£q
; \

107 (
ni
)->
°©e
->
nic
[(
pkt
)->
ötf_i
].
tx_byãs_added
-=
	`TX_PKT_LEN
(pkt); \

108 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pkt
); \

109 } 0)

	)

	@os_sock.c

10 
	~"ù_öã∫Æ.h
"

11 
	~<⁄lﬂd/comm⁄.h
>

12 
	~<⁄lﬂd/osfûe.h
>

13 #i‚de‡
__KERNEL__


14 
	~<⁄lﬂd/dup2_lock.h
>

22 #ifde‡
__KERNEL__


25 
	$oo_os_sock_gë_‰om_ï
(
t˝_hñ≥r_ídpoöt_t
* 
ï
, 
oo_os_fûe
* 
os_sock_out
)

27 
lock_Êags
;

29 
	`•ö_lock_úqßve
(&
ï
->
lock
, 
lock_Êags
);

30 if–
ï
->
os_sockë
 !
NULL
 ) {

31 *
os_sock_out
 = 
ï
->
os_sockë
->
fûe
;

32 
	`gë_fûe
(*
os_sock_out
);

33 
	`•ö_u∆ock_úqª°‹e
(&
ï
->
lock
, 
lock_Êags
);

34 
	`ci_as£π
(*
os_sock_out
 !
NULL
);

37 
	`•ö_u∆ock_úqª°‹e
(&
ï
->
lock
, 
lock_Êags
);

38 *
os_sock_out
 = 
NULL
;

39  -
EINVAL
;

40 
	}
}

43 
	$oo_os_sock_gë
(
ci_√tif
* 
ni
, 
oo_•
 
sock_p
, 
oo_os_fûe
* 
os_sock_out
)

45 
sock_id
 = 
	`OO_SP_TO_INT
(
sock_p
);

46 
t˝_hñ≥r_ídpoöt_t
* 
ï
;

48 if–
sock_id
 !
	`TRUSTED_SOCK_ID
(
ni
, sock_id) ) {

49 
	`LOG_E
(
	`ci_log
("%s: ERROR: %d:%d bad sock_id",

50 
__FUNCTION__
, 
	`NI_ID
(
ni
), 
sock_id
));

51  -
EINVAL
;

53 
ï
 = 
	`ci_√tif_ï_gë
(
ni
, 
sock_p
);

54 if–
	`oo_os_sock_gë_‰om_ï
(
ï
, 
os_sock_out
) == 0 )

57 
	`LOG_E
(
	`ci_log
("%s: ERROR: %d:%d hasÇo O/S socket",

58 
__FUNCTION__
, 
	`NI_ID
(
ni
), 
sock_id
));

59  -
ENOENT
;

60 
	}
}

64 
	$oo_os_sock_gë
(
ci_√tif
* 
ni
, 
oo_•
 
sock_p
, 
oo_os_fûe
* 
os_sock_out
)

66 
oo_os_sock_fd_gë_t
 
›
;

67 
rc
;

69 
	`oo_rwlock_lock_ªad
(&
côp_dup2_lock
);

70 
›
.
sock_id
 = 
	`OO_SP_TO_INT
(
sock_p
);

71 
rc
 = 
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

72 
OO_IOC_OS_SOCK_FD_GET
, &
›
);

73 if–
rc
 == 0 )

74 *
os_sock_out
 = 
›
.
fd_out
;

76 
	`oo_rwlock_u∆ock_ªad
 (&
côp_dup2_lock
);

77  
rc
;

78 
	}
}

81 
	$oo_os_sock_ªÀa£
(
ci_√tif
* 
ni
, 
oo_os_fûe
 
fd
)

83 
rc
 = 
	`ci_sys_˛o£
(
fd
);

84 
	`oo_rwlock_u∆ock_ªad
(&
côp_dup2_lock
);

85 if–
rc
 != 0 )

86 
	`LOG_E
(
	`ci_log
("%s: [%d] ci_sys_closeÑeturned %d (errno=%d)",

87 
__FUNCTION__
, 
	`NI_ID
(
ni
), 
rc
, 
î∫o
));

88 
	}
}

96 
	$oo_os_sock_io˘l
(
ci_√tif
* 
ni
, 
oo_•
 
sock_p
, 
ªque°
, * 
¨g
,

97 * 
io˘l_rc
)

99 
oo_os_fûe
 
os_sock_fd
;

100 
rc
;

101 if–(
rc
 = 
	`oo_os_sock_gë
(
ni
, 
sock_p
, &
os_sock_fd
)) == 0 ) {

102 
rc
 = 
	`ci_sys_io˘l
(
os_sock_fd
, 
ªque°
, 
¨g
);

103 if–
rc
 < 0 )

104 
rc
 = -
î∫o
;

105 
	`oo_os_sock_ªÀa£
(
ni
, 
os_sock_fd
);

106 if–
io˘l_rc
 !
NULL
 ) {

107 *
io˘l_rc
 = 
rc
;

108 
rc
 = 0;

112 
	`LOG_E
(
	`ci_log
("%s: [%d:%d] ERROR: failedÅo get kernel sock fd "

113 "‘c=%dÑeq=%d)", 
__FUNCTION__
, 
	`NI_ID
(
ni
), 
	`OO_SP_FMT
(
sock_p
),

114 
rc
, 
ªque°
));

116  
rc
;

117 
	}
}

121 
	$oo_os_sock_£ndmsg
(
ci_√tif
* 
ni
, 
oo_•
 
sock_p
,

122 c⁄° 
msghdr
* 
msg
, 
Êags
)

124 
oo_os_sock_£ndmsg_t
 
›
;

126 
›
.
sock_id
 = 
	`OO_SP_TO_INT
(
sock_p
);

127 
›
.
sizeof_±r
 = (*);

128 
›
.
Êags
 = flags;

129 
	`CI_USER_PTR_SET
(
›
.
msg_iov
, 
msg
->msg_iov);

130 
›
.
msg_iovÀn
 = 
msg
->msg_iovlen;

131 
	`CI_USER_PTR_SET
(
›
.
msg_«me
, 
msg
->msg_name);

132 
›
.
msg_«mñí
 = 
msg
->msg_namelen;

133 #ifde‡
__i386__


135 
	`ci_as£π_equÆ
(
msg
->
msg_c⁄åﬁÀn
, 0);

136 
›
.
msg_c⁄åﬁÀn
 = 0;

137 
	`CI_USER_PTR_SET
(
›
.
msg_c⁄åﬁ
, 
NULL
);

139 
	`CI_USER_PTR_SET
(
›
.
msg_c⁄åﬁ
, 
msg
->msg_control);

140 
›
.
msg_c⁄åﬁÀn
 = 
msg
->msg_controllen;

142  
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

143 
OO_IOC_OS_SOCK_SENDMSG
, &
›
);

144 
	}
}

146 
	$oo_os_sock_£ndmsg_øw
(
ci_√tif
* 
ni
, 
oo_•
 
sock_p
,

147 c⁄° 
msghdr
* 
msg
, 
Êags
)

149 
sockëˇŒ_¨gs
[8];

150 
oo_os_sock_£ndmsg_øw_t
 
›
;

151 
rc
;

153 
›
.
sock_id
 = 
	`OO_SP_TO_INT
(
sock_p
);

154 
›
.
sizeof_±r
 = (*);

155 
›
.
Êags
 = flags;

156 
	`CI_USER_PTR_SET
(
›
.
msg
, msg);

157 
	`CI_USER_PTR_SET
(
›
.
sockëˇŒ_¨gs
, socketcall_args);

159 
	`oo_rwlock_lock_ªad
(&
côp_dup2_lock
);

160 
rc
 = 
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

161 
OO_IOC_OS_SOCK_SENDMSG_RAW
, &
›
);

162 
	`oo_rwlock_u∆ock_ªad
 (&
côp_dup2_lock
);

164  
rc
;

165 
	}
}

168 
	$oo_os_sock_ªcvmsg
(
ci_√tif
* 
ni
, 
oo_•
 
sock_p
,

169 
msghdr
* 
msg
, 
Êags
)

171 
oo_os_sock_ªcvmsg_t
 
›
;

172 
rc
;

174 
›
.
sock_id
 = 
	`OO_SP_TO_INT
(
sock_p
);

175 
›
.
sizeof_±r
 = (*);

176 
›
.
Êags
 = flags;

177 
	`CI_USER_PTR_SET
(
›
.
msg_iov
, 
msg
->msg_iov);

178 
›
.
msg_iovÀn
 = 
msg
->msg_iovlen;

179 
	`CI_USER_PTR_SET
(
›
.
msg_«me
, 
msg
->msg_name);

180 
›
.
msg_«mñí
 = 
msg
->msg_namelen;

181 
	`CI_USER_PTR_SET
(
›
.
msg_c⁄åﬁ
, 
msg
->msg_control);

182 
›
.
msg_c⁄åﬁÀn
 = 
msg
->msg_controllen;

183 
rc
 = 
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

184 
OO_IOC_OS_SOCK_RECVMSG
, &
›
);

185 
	`ci_as£π
(
›
.
rc
 >= 0 ||Ñc < 0);

186 if–
rc
 == 0 ) {

187 
msg
->
msg_Êags
 = 
›
.
Êags
;

188 
msg
->
msg_«mñí
 = 
›
.msg_namelen;

189 if–
msg
->
msg_c⁄åﬁÀn
 )

190 
msg
->
msg_c⁄åﬁÀn
 = 
›
.msg_controllen;

191  
›
.
rc
;

193  
rc
;

194 
	}
}

196 
	$oo_os_sock_ac˚±
(
ci_√tif
* 
ni
, 
oo_•
 
sock_p
, 
sockaddr
 *
addr
,

197 
sockÀn_t
 *
addæí
, 
Êags
)

199 
oo_os_sock_ac˚±_t
 
›
;

200 
rc
;

202 
›
.
sock_id
 = 
	`OO_SP_TO_INT
(
sock_p
);

203 
	`CI_USER_PTR_SET
(
›
.
addr
,áddr);

204 
	`CI_USER_PTR_SET
(
›
.
addæí
,áddrlen);

205 
›
.
Êags
 = flags;

207 
rc
 = 
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

208 
OO_IOC_OS_SOCK_ACCEPT
, &
›
);

210  
rc
 =0 ? 
›
.rc :Ñc;

211 
	}
}

	@per_thread.c

12 
	~<ci/öã∫Æ/ù.h
>

13 
	~<⁄lﬂd/ul/≥r_thªad.h
>

16 #ifde‡
HAVE_CC__THREAD


18 #ifde‡
__powîpc__


19 
__thªad
 
oo_≥r_thªad
 oo_≥r_thªad 
__©åibuã__
((
és_modñ
("local-dynamic")));

21 
__thªad
 
oo_≥r_thªad
 
	goo_≥r_thªad
;

26 
±hªad_key_t
 
	goo_≥r_thªad_key
 = 
INVALID_PTHREAD_KEY_ID
;

30 
côp_öô_thªad_ˇŒback
 
	göô_thªad_ˇŒback
;

33 
	$oo_≥r_thªad_öô
()

35 #i‚de‡
HAVE_CC__THREAD


36 
rc
 = 
	`±hªad_key_¸óã
(&
oo_≥r_thªad_key
, 
‰ì
);

37 if–
rc
 != 0) {

38 
	`LOG_E
(
	`log
("%s: ERROR:Öthread_key_create failed (rc=%dÉrrno=%d)",

39 
__FUNCTION__
, 
rc
, 
î∫o
));

44 
	}
}

47 #ifde‡
HAVE_CC__THREAD


49 
	$oo_≥r_thªad_öô_thªad
()

51 if–
öô_thªad_ˇŒback
 ) {

52 
	`öô_thªad_ˇŒback
(&
oo_≥r_thªad
);

53 
oo_≥r_thªad
.
öôüli£d
 = 1;

54 
oo_≥r_thªad
.
ö_vf‹k_chûd
 = 0;

56 
	}
}

60 
oo_≥r_thªad
* 
	$oo_≥r_thªad_öô_™d_gë
()

62 
oo_≥r_thªad
* 
±
 = 
	`±hªad_gë•ecific
(
oo_≥r_thªad_key
);

63 if–
±
 =
NULL
 ) {

64 
±
 = 
	`mÆloc
((*
oo_≥r_thªad_p
));

65 
	`CI_TEST
(
±
 !
NULL
);

66 
	`±hªad_£t•ecific
(
oo_≥r_thªad_key
, 
±
);

67 
	`mem£t
(
±
, 0, (*pt));

69 if–
öô_thªad_ˇŒback
 ) {

70 
	`öô_thªad_ˇŒback
(
±
);

71 
±
->
öôüli£d
 = 1;

72 
±
->
ö_vf‹k_chûd
 = 0;

74  
±
;

75 
	}
}

	@pio_buddy.c

14 
	~<ci/öã∫Æ/ù.h
>

15 
	~<ci/öã∫Æ/pio_buddy.h
>

19 
	#DEBUG_ALLOC
(
x
)

	)

21 
	#DEBUG_ALLOC
(
x
Ë
	)
x

27 
	#FREE_LIST
(
b
,
o
Ë((b)->
‰ì_li°s
 + (o))

	)

29 
	#LINK_TO_ADDR
(
b
,
l
Ë((
ci_uöt32
)(÷Ë- (b)->
löks
))

	)

31 
	#ADDR_TO_LINK
(
b
,
a
Ë((b)->
löks
 + (a))

	)

34 
ölöe
 

35 
	$ci_pio_buddy_‰ì_li°_em±y
(
ci_√tif
* 
ni
, 
ci_pio_buddy_Æloˇt‹
* 
b
,

36 
ci_uöt8
 
‹dî
)

38  
	`ci_ni_dŒi°_is_em±y
(
ni
, 
	`FREE_LIST
(
b
, 
‹dî
));

39 
	}
}

42 
ölöe
 

43 
	$ci_pio_buddy_addr_ö_‰ì_li°
(
ci_√tif
* 
ni
, 
ci_pio_buddy_Æloˇt‹
* 
b
,

44 
ci_öt32
 
addr
)

47  !
	`ci_ni_dŒi°_is_‰ì
(
	`ADDR_TO_LINK
(
b
, 
addr
));

48 
	}
}

51 
ölöe
 

52 
	$ci_pio_buddy_‰ì_li°_add
(
ci_√tif
* 
ni
, 
ci_pio_buddy_Æloˇt‹
* 
b
,

53 
ci_uöt8
 
‹dî
, 
ci_uöt32
 
addr
)

56 
	`ci_as£π
(!
	`ci_pio_buddy_addr_ö_‰ì_li°
(
ni
, 
b
, 
addr
));

58 
	`ci_ni_dŒi°_push
(
ni
, 
	`FREE_LIST
(
b
, 
‹dî
), 
	`ADDR_TO_LINK
(b, 
addr
));

59 
b
->
‹dîs
[
addr
] = 
‹dî
;

60 
	}
}

63 
ölöe
 

64 
	$ci_pio_buddy_‰ì_li°_ªmove
(
ci_√tif
* 
ni
, 
ci_pio_buddy_Æloˇt‹
* 
b
,

65 
ci_uöt32
 
addr
)

68 
	`ci_as£π
(
	`ci_pio_buddy_addr_ö_‰ì_li°
(
ni
, 
b
, 
addr
));

70 
	`ci_ni_dŒi°_ªmove
(
ni
, 
	`ADDR_TO_LINK
(
b
, 
addr
));

71 
	`ci_ni_dŒi°_m¨k_‰ì
(
	`ADDR_TO_LINK
(
b
, 
addr
));

72 
	}
}

75 
ölöe
 
ci_uöt32


76 
	$ci_pio_buddy_‰ì_li°_p›
(
ci_√tif
* 
ni
, 
ci_pio_buddy_Æloˇt‹
* 
b
,

77 
ci_uöt8
 
‹dî
)

79 
ci_ni_dŒi°_lök
* 
l
;

82 
	`ci_as£π
(!
	`ci_pio_buddy_‰ì_li°_em±y
(
ni
, 
b
, 
‹dî
));

84 
l
 = 
	`ci_ni_dŒi°_p›
(
ni
, 
	`FREE_LIST
(
b
, 
‹dî
));

85 
	`ci_ni_dŒi°_m¨k_‰ì
(
l
);

86  
	`LINK_TO_ADDR
(
b
, 
l
);

87 
	}
}

91 
	$ci_pio_buddy_˘‹
(
ci_√tif
* 
ni
, 
ci_pio_buddy_Æloˇt‹
* 
b
, 
pio_Àn
)

93 
ci_uöt8
 
o
;

98 
pio_‹dî
 = 
	`ci_log2_À
(
pio_Àn
);

101 
	`ci_as£π
(
b
);

103 
	`ci_as£π
(
CI_PIO_BUDDY_MAX_ORDER
 < 255);

105 
	`ci_as£π
(
	`CI_IS_POW2
(
pio_Àn
));

106 
	`ci_as£π_ge
(
pio_‹dî
, 
CI_CFG_MIN_PIO_BLOCK_ORDER
);

107 
	`ci_as£π_À
(
pio_‹dî
, 
CI_PIO_BUF_ORDER
);

110  
o
 = 0; o <
CI_PIO_BUDDY_MAX_ORDER
; ++o )

111 
	`ci_ni_dŒi°_öô
(
ni
, 
	`FREE_LIST
(
b
, 
o
),

112 
	`oo_±r_to_°©ï
(
ni
, 
	`FREE_LIST
(
b
, 
o
)), "pio_buddy");

115  
o
 = 0; o < (1u << 
CI_PIO_BUDDY_MAX_ORDER
); ++o ) {

116 
	`ci_ni_dŒi°_lök_öô
(
ni
, 
	`ADDR_TO_LINK
(
b
, 
o
),

117 
	`oo_±r_to_°©ï
(
ni
, 
	`ADDR_TO_LINK
(
b
, 
o
)),

119 
	`ci_ni_dŒi°_m¨k_‰ì
(
	`ADDR_TO_LINK
(
b
, 
o
));

123 
	`ci_pio_buddy_‰ì_li°_add
(
ni
, 
b
, 
pio_‹dî
 - 
CI_CFG_MIN_PIO_BLOCK_ORDER
, 0);

125 
b
->
öôüli£d
 = 1;

126 
	}
}

130 
	$ci_pio_buddy_dt‹
(
ci_√tif
* 
ni
, 
ci_pio_buddy_Æloˇt‹
* 
b
)

132 
b
->
öôüli£d
 = 0;

133 
	}
}

136 
ci_öt32


137 
	$ci_pio_buddy_Æloc
(
ci_√tif
* 
ni
, 
ci_pio_buddy_Æloˇt‹
* 
b
, 
ci_uöt8
 
‹dî
)

139 #i‡
CI_CFG_USE_PIO


140 
ci_uöt8
 
smÆÀ°
;

141 
ci_uöt32
 
addr
;

142 if–
b
->
öôüli£d
 ) {

143 
‹dî
 -
CI_CFG_MIN_PIO_BLOCK_ORDER
;

146 
smÆÀ°
 = 
‹dî
;

147  
smÆÀ°
 <
CI_PIO_BUDDY_MAX_ORDER
 &&

148 
	`ci_pio_buddy_‰ì_li°_em±y
(
ni
, 
b
, 
smÆÀ°
) )

149 ++
smÆÀ°
;

151 if–
smÆÀ°
 > 
CI_PIO_BUDDY_MAX_ORDER
 ) {

152 
	`DEBUG_ALLOC
(
	`ci_log
("buddy -álloc order %d failed - max order %d",

153 
‹dî
, 
CI_PIO_BUDDY_MAX_ORDER
););

154  -
ENOMEM
;

158 
addr
 = 
	`ci_pio_buddy_‰ì_li°_p›
(
ni
, 
b
, 
smÆÀ°
);

160 
	`DEBUG_ALLOC
(
	`ci_log
("buddy -álloc %x order %d cut from order %d",

161 
addr
, 
‹dî
, 
smÆÀ°
););

166  
smÆÀ°
-- > 
‹dî
 )

167 
	`ci_pio_buddy_‰ì_li°_add
(
ni
, 
b
, 
smÆÀ°
, 
addr
 + 
	`ci_pow2
(smallest));

169 
b
->
‹dîs
[
addr
] = (
ci_uöt8
Ë
‹dî
;

172 
	`ci_as£π_ge
((
ci_öt32
Ë
addr
, 0);

173 
	`ci_as£π_…
(
addr
, 1u << 
CI_PIO_BUDDY_MAX_ORDER
);

175  
addr
 * (1u << 
CI_CFG_MIN_PIO_BLOCK_ORDER
);

178  -
ENOSPC
;

179 
	}
}

183 
	$ci_pio_buddy_‰ì
(
ci_√tif
* 
ni
, 
ci_pio_buddy_Æloˇt‹
* 
b
, 
ci_öt32
 
off£t
,

184 
ci_uöt8
 
‹dî
)

186 
ci_uöt32
 
buddy_addr
;

187 
ci_uöt32
 
addr
 = 
off£t
 / (1u << 
CI_CFG_MIN_PIO_BLOCK_ORDER
);

188 
‹dî
 -
CI_CFG_MIN_PIO_BLOCK_ORDER
;

191 
	`ci_as£π_À
(
‹dî
, 
CI_PIO_BUDDY_MAX_ORDER
);

192 
	`ci_as£π_À
(
addr
 + (1u << 
‹dî
), 1u << 
CI_PIO_BUDDY_MAX_ORDER
);

194 
	`ci_as£π
(!
	`ci_pio_buddy_addr_ö_‰ì_li°
(
ni
, 
b
, 
addr
));

196 
	`ci_as£π_equÆ
(
b
->
‹dîs
[
addr
], 
‹dî
);

201  
‹dî
 < 
CI_PIO_BUDDY_MAX_ORDER
) {

202 
buddy_addr
 = 
addr
 ^ 
	`ci_pow2
(
‹dî
);

207 if–!
	`ci_pio_buddy_addr_ö_‰ì_li°
(
ni
, 
b
, 
buddy_addr
) ||

208 
b
->
‹dîs
[
buddy_addr
] !
‹dî
 )

212 
	`ci_pio_buddy_‰ì_li°_ªmove
(
ni
, 
b
, 
buddy_addr
);

217 if–
buddy_addr
 < 
addr
 )

218 
addr
 = 
buddy_addr
;

220 ++
‹dî
;

223 
	`DEBUG_ALLOC
(
	`ci_log
("buddy - fªê%x mîged i¡ÿ‹dî %d", 
addr
, 
‹dî
););

228 
	`ci_pio_buddy_‰ì_li°_add
(
ni
, 
b
, 
‹dî
, 
addr
);

229 
	}
}

	@pipe.c

14 
	~"ù_öã∫Æ.h
"

15 #i‡
CI_CFG_USERSPACE_PIPE


17 
	~<⁄lﬂd/comm⁄.h
>

18 
	~<⁄lﬂd/oo_pùe.h
>

19 
	~<⁄lﬂd/¶ìp.h
>

21 
	#LPF
 "ci_pùe_"

	)

22 
	#LPFIN
 "-> " 
LPF


	)

23 
	#LPFOUT
 "<- " 
LPF


	)

27 
	#OO_PIPE_VERBOSE
 0

	)

29 
	#OO_PIPE_DUMP
 0

	)

31 #i‡
OO_PIPE_VERBOSE


32 
	#LOG_PIPE
(
x
...Ë
	`ci_log
(x)

	)

34 
	#LOG_PIPE
(
x
...)

	)

38 
	$pùe_dump
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
)

40 if–
OO_PIPE_DUMP
 ) {

41 
	`ci_log
("Pùe:Ö=%d", 
p
->
b
.
bufid
);

42 
	`ci_log
(" [%d]Ñód_±r: %d %u", 
p
->
b
.
bufid
,

43 
	`OO_PP_FMT
(
p
->
ªad_±r
.
µ
),Ö->ªad_±r.
off£t
);

44 
	`ci_log
(" [%d] wrôe_±r: %d %d", 
p
->
b
.
bufid
,

45 
	`OO_PP_FMT
(
p
->
wrôe_±r
.
µ
), OO_PP_FMT’->wrôe_±r.
µ_waô
));

46 
	`ci_log
(" [%d]áÊags=%x ", 
p
->
b
.
bufid
,Ö->
aÊags
);

47 
	`ci_log
(" [%d] bufs_num=%u/%u", 
p
->
b
.
bufid
,Ö->
bufs_num
,Ö->
bufs_max
);

48 
	`ci_log
(" [%d] byãs_added=%u byãs_ªmoved=%u", 
p
->
b
.
bufid
,

49 
p
->
byãs_added
,Ö->
byãs_ªmoved
);

50 if–
	`ci_√tif_is_locked
(
ni
Ë&& 
	`OO_PP_NOT_NULL
(
p
->
pùe_bufs
.
µ
) ) {

51 
ci_ù_pkt_fmt
* 
pkt
 = 
	`PKT_CHK
(
ni
, 
p
->
pùe_bufs
.
µ
);

52 
bufs_num
 = 0;

54 
	`ci_log
(" [%d:%d]Ökà%d ba£=%dÖay_Àn=%d", 
p
->
b
.
bufid
, 
bufs_num
,

55 
	`OO_PKT_P
(
pkt
),Ökt->
pf
.
pùe
.
ba£
,Ökt->pf.pùe.
∑y_Àn
);

56 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

57 }  
	`OO_PKT_P
(
pkt
Ë!
p
->
pùe_bufs
.
µ
 &&

58 ++
bufs_num
 < 2 * 
p
->bufs_num );

62 if–
bufs_num
 >
p
->bufs_num )

63 
	`ci_log
(" [%d] WARNING: M‹êth™Ö->bufs_num buf„rs.", 
p
->
b
.
bufid
);

66 
	}
}

69 
ci_ölöe
 
	$oo_pùe_buf_li°_öô
(
oo_pùe_buf_li°_t
* 
li°
)

71 
li°
->
µ
 = 
OO_PP_NULL
;

72 
	}
}

75 
	$oo_pùe_buf_˛ór_°©e
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
)

77 
p
->
ªad_±r
.
µ
 = 
OO_PP_NULL
;

78 
p
->
ªad_±r
.
off£t
 = 0;

79 
p
->
wrôe_±r
.
µ
 = 
OO_PP_NULL
;

80 
p
->
wrôe_±r
.
µ_waô
 = 
OO_PP_NULL
;

81 
	`oo_pùe_buf_li°_öô
(&
p
->
pùe_bufs
);

82 
	}
}

87 
ci_ölöe
 
	$oo_pùe_buf_li°_ö£π_a·î
(
ci_ù_pkt_fmt
* 
li°
,

88 
ci_ù_pkt_fmt
* 
lök
)

90 
lök
->
√xt
 = 
li°
->next;

91 
li°
->
√xt
 = 
	`OO_PKT_P
(
lök
);

92 
	}
}

95 
ci_ölöe
 
	$oo_pùe_buf_li°_push
(
ci_√tif
* 
ni
, 
oo_pùe_buf_li°_t
* 
li°
,

96 
ci_ù_pkt_fmt
* 
lök
)

98 if–
	`OO_PP_NOT_NULL
(
li°
->
µ
) ) {

99 
	`oo_pùe_buf_li°_ö£π_a·î
(
	`PKT_CHK
(
ni
, 
li°
->
µ
), 
lök
);

102 
li°
->
µ
 = 
	`OO_PKT_P
(
lök
);

103 
lök
->
√xt
 = 
	`OO_PKT_P
(link);

105 
	}
}

109 
ci_ölöe
 
ci_ù_pkt_fmt
* 
	$oo_pùe_buf_li°_föd
(
ci_√tif
* 
ni
,

110 
ci_ù_pkt_fmt
* 
li°
,

111 
oo_pkt_p
 
ôem
)

113 
ci_ù_pkt_fmt
* 
pkt
 = 
li°
;

114  
pkt
->
√xt
 !
ôem
 )

115 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

116  
pkt
;

117 
	}
}

120 
ci_ölöe
 
oo_pkt_p
 
	$oo_pùe_buf_li°_°¨t
(
oo_pùe_buf_li°_t
* 
li°
)

122  
li°
->
µ
;

123 
	}
}

126 
ci_ölöe
 
	$oo_pùe_buf_li°_is_œ°
(
ci_ù_pkt_fmt
* 
pkt
)

128  
pkt
->
√xt
 =
	`OO_PKT_P
(pkt);

129 
	}
}

135 
ci_ölöe
 
oo_pkt_p
 
	$oo_pùe_√xt_buf
(
oo_pùe
* 
p
, 
ci_ù_pkt_fmt
* 
pkt
)

137  
pkt
->
√xt
;

138 
	}
}

141 #i‚de‡
__KERNEL__


145 
ci_ölöe
 
ci_ù_pkt_fmt
*

146 
	$oo_pùe_buf_li°_p›_a·î
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
,

147 
ci_ù_pkt_fmt
* 
li°
)

149 
ci_ù_pkt_fmt
* 
pkt
;

150 
	`ci_as£π
(
li°
);

151 
	`ci_as£π
(
	`OO_PP_NOT_NULL
(
p
->
pùe_bufs
.
µ
));

152 
	`ci_as£π
(! 
	`oo_pùe_buf_li°_is_œ°
(
li°
));

153 
pkt
 = 
	`PKT_CHK
(
ni
, 
li°
->
√xt
);

154 if–
p
->
pùe_bufs
.
µ
 =
li°
->
√xt
 )

155 
p
->
pùe_bufs
.
µ
 = 
	`OO_PKT_P
(
li°
);

156 
li°
->
√xt
 = 
pkt
->next;

157  
pkt
;

158 
	}
}

162 
ci_ölöe
 
	$__oo_pùe_wake_≥î
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
,

163 
wake
)

165 
	`ci_wmb
();

166 if–
wake
 & 
CI_SB_FLAG_WAKE_RX
 )

167 ++
p
->
b
.
¶ìp_£q
.
rw
.
rx
;

168 if–
wake
 & 
CI_SB_FLAG_WAKE_TX
 )

169 ++
p
->
b
.
¶ìp_£q
.
rw
.
tx
;

170 
	`ci_mb
();

171 if–
p
->
b
.
wake_ªque°
 & 
wake
 ) {

172 
p
->
b
.
sb_Êags
 |
wake
;

173 
	`côp_waôabÀ_wakeup
(
ni
, &
p
->
b
);

175 
	}
}

178 #ifde‡
__KERNEL__


179 
	$oo_pùe_wake_≥î
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
, 
wake
)

181 
	`__oo_pùe_wake_≥î
(
ni
, 
p
, 
wake
);

182 
	}
}

186 
ci_ölöe
 
ci_uöt8
* 
	$pùe_gë_poöt
(
ci_√tif
* 
ni
, 
oo_pùe
 *
p
,

187 
ci_ù_pkt_fmt
* 
pkt
, 
ci_uöt32
 
off£t
)

189 
	`ci_as£π
(
p
);

190 
	`ci_as£π_…
(
off£t
, 
OO_PIPE_BUF_MAX_SIZE
 - 
pkt
->
pf
.
pùe
.
ba£
);

192  
pkt
->
dma_°¨t
 +Ökt->
pf
.
pùe
.
ba£
 + 
off£t
;

193 
	}
}

200 
ci_ölöe
 
ci_uöt32
 
	$oo_pùe_buf_•a˚
(
ci_ù_pkt_fmt
* 
pkt
)

202 
	`ci_as£π_À
(
pkt
->
pf
.
pùe
.
ba£
 +Ökt->pf.pùe.
∑y_Àn
, 
OO_PIPE_BUF_MAX_SIZE
);

203  
OO_PIPE_BUF_MAX_SIZE
 - (
pkt
->
pf
.
pùe
.
ba£
 +Ökt->pf.pùe.
∑y_Àn
);

204 
	}
}

207 
ci_ölöe
 
	$do_c›y_ªad
(* 
to
, c⁄° * 
‰om
, 
n_byãs
)

209 #ifde‡
__KERNEL__


210  
	`c›y_to_u£r
(
to
, 
‰om
, 
n_byãs
) != 0;

212 
	`mem˝y
(
to
, 
‰om
, 
n_byãs
);

215 
	}
}

218 
ci_ölöe
 
	$do_c›y_wrôe
(* 
to
, c⁄° * 
‰om
, 
n_byãs
)

220 #ifde‡
__KERNEL__


221  
	`c›y_‰om_u£r
(
to
, 
‰om
, 
n_byãs
) != 0;

223 
	`mem˝y
(
to
, 
‰om
, 
n_byãs
);

226 
	}
}

229 
	$oo_pùe_ªad_waô
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
, 
n⁄_block
)

231 
ci_uöt64
 
¶ìp_£q
;

232 
rc
;

234 if–
p
->
aÊags
 & (
CI_PFD_AFLAG_CLOSED
 << 
CI_PFD_AFLAG_WRITER_SHIFT
) ) {

235 
˛o£d_doubÀ_check
:

236 
	`ci_mb
();

237  
	`oo_pùe_d©a_Àn
(
p
) ? 1 : 0;

240 
	`LOG_PIPE
("%s:ÇotÉnough data inÅheÖipe",

241 
__FUNCTION__
);

243 if–
n⁄_block
 ) {

244 
	`LOG_PIPE
("%s: O_NONBLOCK i†£àsÿexô", 
__FUNCTION__
);

245 
	`CI_SET_ERROR
(
rc
, 
EAGAIN
);

246  
rc
;

249 #i‚de‡
__KERNEL__


250 if–
	`oo_≥r_thªad_gë
()->
•ö°©e
 & (1 << 
ONLOAD_SPIN_PIPE_RECV
) ) {

251 
ci_uöt64
 
now_‰c
, 
°¨t_‰c
;

252 
ci_uöt64
 
scheduÀ_‰c
;

253 
côp_sig«l_öfo
* 
si
 = 
	`côp_sig«l_gë_•ecific_öôed
();

254 
ci_uöt64
 
max_•ö_cy˛es
 = 
p
->
b
.
•ö_cy˛es
;

256 
	`ci_‰c64
(&
now_‰c
);

257 
°¨t_‰c
 = 
now_‰c
;

258 
scheduÀ_‰c
 = 
now_‰c
;

260 
rc
 = 
	`OO_SPINLOOP_PAUSE_CHECK_SIGNALS
(
ni
, 
now_‰c
, &
scheduÀ_‰c
,

261 
Ál£
, 
NULL
, 
si
);

262 if–
rc
 < 0 ) {

263 
	`CI_SET_ERROR
(
rc
, -rc);

264  
rc
;

266 if–
	`oo_pùe_d©a_Àn
(
p
) )

268 if–
p
->
aÊags
 & (
CI_PFD_AFLAG_CLOSED
 << 
CI_PFD_AFLAG_WRITER_SHIFT
) )

269 
˛o£d_doubÀ_check
;

270 
	`ci_‰c64
(&
now_‰c
);

271 #i‡
CI_CFG_SPIN_STATS


272 
ni
->
°©e
->
°©s
.
•ö_pùe_ªad
++;

274 }  
now_‰c
 - 
°¨t_‰c
 < 
max_•ö_cy˛es
 );

279 
¶ìp_£q
 = 
p
->
b
.¶ìp_£q.
Æl
;

280 
	`ci_rmb
();

281 if–
	`oo_pùe_d©a_Àn
(
p
) )

283 if–
p
->
aÊags
 & (
CI_PFD_AFLAG_CLOSED
 << 
CI_PFD_AFLAG_WRITER_SHIFT
) )

284 
˛o£d_doubÀ_check
;

286 
	`LOG_PIPE
("%s [%u]: goingÅo sleep seq=(%u, %u) data_len=%dáflags=%x",

287 
__FUNCTION__
, 
p
->
b
.
bufid
,

288 ((
ci_¶ìp_£q_t
 *)(&
¶ìp_£q
))->
rw
.
rx
,

289 ((
ci_¶ìp_£q_t
 *)(&
¶ìp_£q
))->
rw
.
tx
,

290 
	`oo_pùe_d©a_Àn
(
p
),Ö->
aÊags
);

291 
rc
 = 
	`ci_sock_¶ìp
(
ni
, &
p
->
b
, 
CI_SB_FLAG_WAKE_RX
, 0, 
¶ìp_£q
, 0);

292 
	`LOG_PIPE
("%s[%u]: wokêup:Ñc=%d d©a_Àn=%dáÊags=%x", 
__FUNCTION__
,

293 
p
->
b
.
bufid
, 
rc
, ()
	`oo_pùe_d©a_Àn
’),Ö->
aÊags
);

294 if–
rc
 < 0 ) {

295 
	`LOG_PIPE
("%s: sÀïÑ¯%d", 
__FUNCTION__
, 
rc
);

296 
	`CI_SET_ERROR
(
rc
, -rc);

297  
rc
;

299 if–
	`oo_pùe_d©a_Àn
(
p
) )

302 
	}
}

307 
ci_ölöe
 

308 
	$oo_pùe_move_ªad_±r
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
, 
ci_ù_pkt_fmt
** 
pkt
,

309 
ci_uöt32
 *
off£t
, 
°ack_locked
)

311 
moved
 = 0;

315  *
off£t
 >(*
pkt
)->
pf
.
pùe
.
∑y_Àn
 ) {

317 
	`ci_as£π_√quÆ
(
	`OO_PKT_P
(*
pkt
), 
p
->
wrôe_±r
.
µ
);

318 *
pkt
 = 
	`PKT_CHK_NML
(
ni
, 
	`oo_pùe_√xt_buf
(
p
, *pkt), 
°ack_locked
);

319 *
off£t
 = 0;

320 ++
moved
;

322  
moved
;

323 
	}
}

326 
	$ci_pùe_ªad
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
,

327 c⁄° 
iovec
 *
iov
, 
size_t
 
iovÀn
)

329 
byãs_avaûabÀ
;

330 
rc
;

331 
i
;

332 
ci_ù_pkt_fmt
* 
pkt
;

333 
do_wake
 = 0;

334 
ci_uöt32
 
off£t
;

336 
	`ci_as£π
(
p
);

337 
	`ci_as£π
(
ni
);

338 
	`ci_as£π
(
iov
);

339 
	`ci_as£π_gt
(
iovÀn
, 0);

341 
	`LOG_PIPE
("%s[%u]: ENTER data_len=%dáflags=%x",

342 
__FUNCTION__
, 
p
->
b
.
bufid
, 
	`oo_pùe_d©a_Àn
’),Ö->
aÊags
);

343 
	`pùe_dump
(
ni
, 
p
);

345 
agaö
:

346 
byãs_avaûabÀ
 = 
	`oo_pùe_d©a_Àn
(
p
);

347 if–
byãs_avaûabÀ
 == 0 ) {

348 if–(
rc
 = 
	`oo_pùe_ªad_waô
(
ni
, 
p
,

349 
p
->
aÊags
 & (
CI_PFD_AFLAG_NONBLOCK
 <<

350 
CI_PFD_AFLAG_READER_SHIFT
))) != 1 )

351 
out
;

354 
rc
 = 
	`ci_sock_lock
(
ni
, &
p
->
b
);

355 #ifde‡
__KERNEL__


356 if–
rc
 < 0 ) {

357 
	`CI_SET_ERROR
(
rc
, 
ERESTARTSYS
);

358 
out
;

362 if–(
byãs_avaûabÀ
 = 
	`oo_pùe_d©a_Àn
(
p
)) == 0 ) {

363 
	`ci_sock_u∆ock
(
ni
, &
p
->
b
);

364 
agaö
;

367 
rc
 = 0;

368 
pkt
 = 
	`PKT_CHK_NNL
(
ni
, 
p
->
ªad_±r
.
µ
);

369 
off£t
 = 
p
->
ªad_±r
.offset;

370  
i
 = 0; i < 
iovÀn
; i++ ) {

371 * 
°¨t
 = 
iov
[
i
].
iov_ba£
;

372 * 
íd
 = 
°¨t
 + 
iov
[
i
].
iov_Àn
;

373  
íd
 - 
°¨t
 ) {

374 
ci_uöt8
* 
ªad_poöt
;

375 
bur°
;

380 
do_wake
 +
	`oo_pùe_move_ªad_±r
(
ni
, 
p
, &
pkt
, &
off£t
, 0);

382 
ªad_poöt
 = 
	`pùe_gë_poöt
(
ni
, 
p
, 
pkt
, 
off£t
);

383 
bur°
 = 
	`CI_MIN
(
pkt
->
pf
.
pùe
.
∑y_Àn
 - 
off£t
, 
íd
 - 
°¨t
);

384 
bur°
 = 
	`CI_MIN
(bur°, 
byãs_avaûabÀ
 - 
rc
);

385 
	`ci_as£π_…
(
off£t
, 
pkt
->
pf
.
pùe
.
∑y_Àn
);

386 
	`ci_as£π_À
(
off£t
 + 
bur°
, 
pkt
->
pf
.
pùe
.
∑y_Àn
);

388 if(
	`CI_UNLIKELY
–
	`do_c›y_ªad
(
°¨t
, 
ªad_poöt
, 
bur°
) != 0 )) {

389 
	`ci_wmb
();

390 
p
->
byãs_ªmoved
 +
rc
;

391 
	`CI_SET_ERROR
(
rc
, 
EFAULT
);

392 
wake_™d_u∆ock_out
;

395 
rc
 +
bur°
;

396 
°¨t
 +
bur°
;

397 
off£t
 +
bur°
;

399 if–
byãs_avaûabÀ
 =
rc
 )

400 
ªad
;

404 
ªad
:

405 
	`ci_wmb
();

406 
p
->
byãs_ªmoved
 +
rc
;

407 
p
->
ªad_±r
.
µ
 = 
	`OO_PKT_P
(
pkt
);

408 
p
->
ªad_±r
.
off£t
 = offset;

409 
wake_™d_u∆ock_out
:

410 if–
do_wake
 || 
byãs_avaûabÀ
 =
rc
 )

411 
	`__oo_pùe_wake_≥î
(
ni
, 
p
, 
CI_SB_FLAG_WAKE_TX
);

412 
	`ci_sock_u∆ock
(
ni
, &
p
->
b
);

413 
out
:

414 
	`LOG_PIPE
("%s[%u]: EXITÑëu∫ %d", 
__FUNCTION__
, 
p
->
b
.
bufid
, 
rc
);

415  
rc
;

416 
	}
}

419 
ci_ölöe
 
	$oo_pùe_sig«l
(
ci_√tif
* 
ni
)

421 #i‚de‡
__KERNEL__


422 ()
	`ci_sys_io˘l
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

423 
OO_IOC_KILL_SELF_SIGPIPE
,

424 
NULL
);

426 ()
	`£nd_sig
(
SIGPIPE
, 
cuºít
, 0);

428 
	}
}

434 
	$oo_pùe_waô_wrôe
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
, 
Êags
,

435 *
°ack_locked
)

437 
ci_uöt64
 
¶ìp_£q
;

438 
rc
 = 0;

440 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

441 
	`ci_as£π_equÆ
(*
°ack_locked
, 1);

443 i‡–
	`oo_pùe_is_wrôabÀ
(
p
) )

445 
	`ci_√tif_u∆ock
(
ni
);

446 *
°ack_locked
 = 0;

448 #i‚de‡
__KERNEL__


449 if–
	`oo_≥r_thªad_gë
()->
•ö°©e
 & (1 << 
ONLOAD_SPIN_PIPE_SEND
) ) {

450 
ci_uöt64
 
now_‰c
, 
°¨t_‰c
;

451 
ci_uöt64
 
scheduÀ_‰c
;

452 
côp_sig«l_öfo
* 
si
 = 
	`côp_sig«l_gë_•ecific_öôed
();

453 
ci_uöt64
 
max_•ö_cy˛es
 = 
p
->
b
.
•ö_cy˛es
;

455 
	`ci_‰c64
(&
now_‰c
);

456 
°¨t_‰c
 = 
now_‰c
;

457 
scheduÀ_‰c
 = 
now_‰c
;

460 
rc
 = 
	`OO_SPINLOOP_PAUSE_CHECK_SIGNALS
(
ni
, 
now_‰c
, &
scheduÀ_‰c
,

461 
Ál£
, 
NULL
, 
si
);

462 if–
rc
 < 0 ) {

463 
	`CI_SET_ERROR
(
rc
, -rc);

464  
rc
;

467 i‡–
	`oo_pùe_is_wrôabÀ
(
p
) )

470 i‡–
p
->
aÊags
 & (
CI_PFD_AFLAG_CLOSED
 << 
CI_PFD_AFLAG_READER_SHIFT
) ) {

471 
	`CI_SET_ERROR
(
rc
, 
EPIPE
);

472 if–! (
Êags
 & 
MSG_NOSIGNAL
) )

473 
	`oo_pùe_sig«l
(
ni
);

474  
rc
;

477 
	`ci_‰c64
(&
now_‰c
);

478 #i‡
CI_CFG_SPIN_STATS


479 
ni
->
°©e
->
°©s
.
•ö_pùe_wrôe
++;

482 }  
now_‰c
 - 
°¨t_‰c
 < 
max_•ö_cy˛es
 );

487 
¶ìp_£q
 = 
p
->
b
.¶ìp_£q.
Æl
;

488 
	`ci_rmb
();

491 if–
	`oo_pùe_is_wrôabÀ
(
p
) )

495 
	`LOG_PIPE
("%s: goögÅÿ¶ìp", 
__FUNCTION__
);

496 
rc
 = 
	`ci_sock_¶ìp
(
ni
, &
p
->
b
, 
CI_SB_FLAG_WAKE_TX
, 0, 
¶ìp_£q
, 0);

497 i‡–
p
->
aÊags
 & (
CI_PFD_AFLAG_CLOSED
 << 
CI_PFD_AFLAG_READER_SHIFT
) ) {

498 
	`CI_SET_ERROR
(
rc
, 
EPIPE
);

499 if–! (
Êags
 & 
MSG_NOSIGNAL
) )

500 
	`oo_pùe_sig«l
(
ni
);

501  
rc
;

504 
	`LOG_PIPE
("%s[%u]: wokêu∞- %d", 
__FUNCTION__
, 
p
->
b
.
bufid
, 
rc
);

506 if–
rc
 < 0 ) {

507 
	`LOG_PIPE
("%s: sÀïÑ¯%d", 
__FUNCTION__
, 
rc
);

508 
	`CI_SET_ERROR
(
rc
, -rc);

509  
rc
;

511 }  ! 
	`oo_pùe_is_wrôabÀ
(
p
) );

515 
	}
}

519 
ci_ölöe
 
	$oo_pùe_buf_wrôe_öô
(
oo_pùe
* 
p
, 
ci_ù_pkt_fmt
* 
pkt
)

521 
pkt
->
pf
.
pùe
.
ba£
 = 0;

522 
pkt
->
pf
.
pùe
.
∑y_Àn
 = 0;

523 
	}
}

526 #i‚de‡
__KERNEL__


531 
ci_ölöe
 
ci_ù_pkt_fmt
* 
	$oo_pùe_pkt_li°_p›
(
ci_√tif
* 
ni
,

532 
ci_pùe_pkt_li°
* 
pkts
)

534 
ci_ù_pkt_fmt
* 
pkt
;

535 
	`ci_as£π
(
pkts
);

536 if–! 
pkts
->
cou¡
 )

537  
NULL
;

538 
	`ci_as£π
(
pkts
->
hód
);

539 
pkt
 = 
pkts
->
hód
;

540 
pkts
->
hód
 = 
	`PKT_CHK
(
ni
, 
pkt
->
√xt
);

541 --
pkts
->
cou¡
;

542  
pkt
;

543 
	}
}

546 
ci_ölöe
 
	$oo_pùe_pkt_li°_push
(
ci_pùe_pkt_li°
* 
li°
,

547 
ci_ù_pkt_fmt
* 
pkt
)

549 if–
li°
->
cou¡
 ) {

550 
li°
->
èû
->
√xt
 = 
	`OO_PKT_P
(
pkt
);

551 
li°
->
èû
 = 
pkt
;

552 ++
li°
->
cou¡
;

555 
li°
->
hód
 = 
pkt
;

556 
li°
->
èû
 = 
pkt
;

557 
li°
->
cou¡
 = 1;

558 
	}
}

561 
ci_ölöe
 
oo_pkt_p
 
	$oo_pùe_pkt_li°_√xt
(
ci_ù_pkt_fmt
* 
pkt
)

563  
pkt
->
√xt
;

564 
	}
}

582 
	$oo_pùe_m‹e_buf„rs
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
, 
ªque°ed
,

583 
ci_pùe_pkt_li°
* 
pkts
)

586 
ci_uöt32
 
num_Ælo˚d
, 
tŸÆ_to_Æloc
;

587 
ci_ù_pkt_fmt
* 
wrôe_pkt
 = 
NULL
;

589 
	`ci_as£π_ge
(
ªque°ed
, 0);

591 
	`LOG_PIPE
("%s: called forÇi=%dÖ=%d wr=%dÑd=%d",

592 
__FUNCTION__
, 
ni
->
°©e
->
°ack_id
, 
p
->
b
.
bufid
,

593 
	`OO_PP_FMT
(
p
->
wrôe_±r
.
µ
), OO_PP_FMT’->
ªad_±r
.pp));

595 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

597 if–
p
->
bufs_num
 >p->
bufs_max
 )

599 if–
	`OO_PP_NOT_NULL
(
p
->
wrôe_±r
.
µ
) )

600 
wrôe_pkt
 = 
	`PKT_CHK
(
ni
, 
p
->
wrôe_±r
.
µ
);

601 if–
ªque°ed
 )

602 
tŸÆ_to_Æloc
 = 
	`CI_MIN
(
ªque°ed
, 
p
->
bufs_max
 -Ö->
bufs_num
);

604 
tŸÆ_to_Æloc
 = 
p
->
bufs_num
 > 0 ?

605 
	`CI_MIN
(
p
->
bufs_num
,Ö->
bufs_max
 -Ö->bufs_num) :

606 
	`CI_MIN
(
OO_PIPE_INITIAL_BUFS
, 
p
->
bufs_max
);

607  
num_Ælo˚d
 = 0;Çum_Ælo˚d < 
tŸÆ_to_Æloc
; ++num_alloced ) {

608 
ci_ù_pkt_fmt
* 
pkt
;

609 #i‚de‡
__KERNEL__


610 if–
pkts
 !
NULL
 &&Ökts->
cou¡
 )

611 
pkt
 = 
	`oo_pùe_pkt_li°_p›
(
ni
, 
pkts
);

614 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
ni
);

615 if–! 
pkt
 ) {

616 
	`LOG_NV
(
	`ci_log
("FailedÅoállocÖipeÖacket buffer"));

619 
	`oo_pùe_buf_wrôe_öô
(
p
, 
pkt
);

620 if–
wrôe_pkt
 !
NULL
 )

621 
	`oo_pùe_buf_li°_ö£π_a·î
(
wrôe_pkt
, 
pkt
);

623 
	`oo_pùe_buf_li°_push
(
ni
, &
p
->
pùe_bufs
, 
pkt
);

626 if–
num_Ælo˚d
 > 0 ) {

627 if–
wrôe_pkt
 =
NULL
 ) {

628 
p
->
wrôe_±r
.
µ
 = 
	`oo_pùe_buf_li°_°¨t
(&p->
pùe_bufs
);

630 
p
->
ªad_±r
.
µ
 =Ö->
wrôe_±r
.pp;

633 
p
->
wrôe_±r
.
µ
 = 
	`oo_pùe_√xt_buf
’, 
wrôe_pkt
);

634 
p
->
wrôe_±r
.
µ_waô
 = 
OO_PP_NULL
;

635 
p
->
bufs_num
 +
num_Ælo˚d
;

636  
num_Ælo˚d
;

638  -
ENOBUFS
;

639 
	}
}

642 #i‚de‡
__KERNEL__


650 
	$oo_pùe_ö£π_buf„rs
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
,

651 
ci_pùe_pkt_li°
* 
pkts
)

653 
ci_ù_pkt_fmt
* 
wrôe_pkt
 = 
NULL
;

654 
oo_pkt_p
 
µ_ªad
;

656 
	`LOG_PIPE
("%s: called forÇi=%dÖ=%d wr=%dÑd=%d",

657 
__FUNCTION__
, 
ni
->
°©e
->
°ack_id
, 
p
->
b
.
bufid
,

658 
	`OO_PP_FMT
(
p
->
wrôe_±r
.
µ
), OO_PP_FMT’->
ªad_±r
.pp));

660 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

661 
	`ci_as£π_gt
(
pkts
->
cou¡
, 0);

662 
	`ci_as£π
(
pkts
->
hód
);

663 
	`ci_as£π
(
pkts
->
èû
);

665 if–
	`OO_PP_IS_NULL
(
p
->
wrôe_±r
.
µ
) ) {

666 
	`ci_as£π_equÆ
(
p
->
bufs_num
, 0);

667 
p
->
pùe_bufs
.
µ
 = 
	`OO_PKT_P
(
pkts
->
hód
);

668 
pkts
->
èû
->
√xt
 = 
	`OO_PKT_P
’kts->
hód
);

670 
p
->
ªad_±r
.
off£t
 = 0;

671 
p
->
ªad_±r
.
µ
 = 
	`OO_PKT_P
(
pkts
->
hód
);

672 
	`ci_as£π_gt
(
pkts
->
èû
->
pf
.
pùe
.
∑y_Àn
, 0);

675 
wrôe_pkt
 = 
	`PKT_CHK
(
ni
, 
p
->
wrôe_±r
.
µ
);

676 
pkts
->
èû
->
√xt
 = 
	`oo_pùe_√xt_buf
(
p
, 
wrôe_pkt
);

677 
wrôe_pkt
->
√xt
 = 
	`OO_PKT_P
(
pkts
->
hód
);

680 
p
->
wrôe_±r
.
µ
 = 
	`OO_PKT_P
(
pkts
->
èû
);

681 
µ_ªad
 = 
	`OO_ACCESS_ONCE
(
p
->
ªad_±r
.
µ
);

682 if–
pkts
->
èû
->
√xt
 =
µ_ªad
 && 
	`oo_pùe_buf_•a˚
(pkts->tail) == 0 )

683 
p
->
wrôe_±r
.
µ_waô
 = 
µ_ªad
;

684 
p
->
bufs_num
 +
pkts
->
cou¡
;

685 
	}
}

697 
	$oo_pùe_ª≠_em±y_buf„rs
(
ci_√tif
* 
ni
,

698 
oo_pùe
* 
p
,

699 
cou¡
,

700 
ci_pùe_pkt_li°
* 
pkts
)

702 
‰ìd
 = 0;

703 
oo_pkt_p
 
pkt_p
;

704 
ci_ù_pkt_fmt
* 
pkt
;

705 
oo_pkt_p
 
p_íd
;

707 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

708 
	`ci_as£π
(
	`OO_PP_NOT_NULL
(
p
));

709 
	`ci_as£π_ge
(
cou¡
, 0);

711 
pkt_p
 = 
p
->
wrôe_±r
.
µ
;

712 
p_íd
 = 
	`OO_ACCESS_ONCE
(
p
->
ªad_±r
.
µ
);

714 if–
p
->
bufs_num
 == 0 )

716 
p
->
pùe_bufs
.
µ
 = 
pkt_p
;

717 
pkt
 = 
	`PKT_CHK
(
ni
, 
pkt_p
);

718  
‰ìd
 !
cou¡
 || count == 0 ) {

720 
ci_ù_pkt_fmt
* 
Âkt
;

721 
oo_pkt_p
 
µ_√xt
 = 
	`oo_pùe_√xt_buf
(
p
, 
pkt
);

722 if–
µ_√xt
 =
p_íd
 )

724 
Âkt
 = 
	`oo_pùe_buf_li°_p›_a·î
(
ni
, 
p
, 
pkt
);

725 
	`ci_as£π_√quÆ
(
pkt
, 
Âkt
);

726 
	`ci_as£π_√quÆ
(
	`OO_PKT_P
(
Âkt
), 
p_íd
);

727 
	`ci_as£π_equÆ
(
Âkt
->
ªfcou¡
, 1);

728 if–
pkts
 =
NULL
 )

729 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
Âkt
);

731 
	`oo_pùe_buf_wrôe_öô
(
p
, 
Âkt
);

736 
Âkt
->
pf
.
pùe
.
∑y_Àn
 = 
	`oo_pùe_buf_•a˚
(fpkt);

737 
	`oo_pùe_pkt_li°_push
(
pkts
, 
Âkt
);

739 ++
‰ìd
;

741 
p
->
bufs_num
 -
‰ìd
;

742 if–
	`oo_pùe_buf_•a˚
(
pkt
) == 0 ) {

743 
oo_pkt_p
 
µ_√xt
 = 
	`oo_pùe_√xt_buf
(
p
, 
pkt
);

744 
p
->
wrôe_±r
.
µ_waô
 = 
µ_√xt
 =
p_íd
 ?Öp_√xà: 
OO_PP_NULL
;

746 
	`ci_as£π_ge
(
p
->
bufs_num
, 0);

747  
‰ìd
;

748 
	}
}

757 
	$oo_pùe_gøb_pùe_buf„rs
(
ci_√tif
* 
ni
,

758 
oo_pùe
* 
p
,

759 
cou¡
,

760 
ci_pùe_pkt_li°
* 
pkts
)

762 
pùe_buf_•a˚
 = 
	`CI_MAX
(
p
->
bufs_max
 -Ö->
bufs_num
, 0);

763 
buf_num
;

765 
	`ci_as£π_gt
(
cou¡
, 0);

766 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

768 
buf_num
 = 
	`oo_pùe_ª≠_em±y_buf„rs
(
ni
, 
p
, 
cou¡
, 
pkts
);

769 
cou¡
 -
buf_num
;

770 if–! 
cou¡
 )

771  
buf_num
;

772  
cou¡
 = 
	`CI_MIN
(
pùe_buf_•a˚
, count); count; --count ) {

773 
ci_ù_pkt_fmt
* 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
ni
);

774 if–! 
pkt
 ) {

775 
	`LOG_NV
(
	`ci_log
("FailedÅoállocÖipeÖacket buffer"));

778 
	`ci_as£π_equÆ
(
pkt
->
ªfcou¡
, 1);

779 
	`oo_pùe_buf_wrôe_öô
(
p
, 
pkt
);

784 
pkt
->
pf
.
pùe
.
∑y_Àn
 = 
	`oo_pùe_buf_•a˚
(pkt);

785 
	`oo_pùe_pkt_li°_push
(
pkts
, 
pkt
);

786 ++
buf_num
;

788  
buf_num
;

789 
	}
}

800 
	$ci_pùe_zc_Æloc_buf„rs
(
ci_√tif
* 
ni
,

801 
oo_pùe
* 
p
,

802 
cou¡
,

803 
Êags
,

804 
ci_pùe_pkt_li°
* 
pkts_out
)

806 
c
;

807 
rc
 = 0;

808 
°ack_locked
 = 1;

809 
	`ci_√tif_lock
(
ni
);

812 
c
 = 
	`oo_pùe_gøb_pùe_buf„rs
(
ni
, 
p
, 
cou¡
, 
pkts_out
);

813 if–
c
 ) {

814 
ni
->
°©e
->
n_async_pkts
 +
c
;

817 if(
Êags
 & 
MSG_DONTWAIT
 ) {

818 
	`CI_SET_ERROR
(
rc
, 
EAGAIN
);

821 
rc
 = 
	`oo_pùe_waô_wrôe
(
ni
, 
p
, 
Êags
, &
°ack_locked
);

822 if–
rc
 != 0 )

824 if–! 
°ack_locked
 ) {

825 
	`ci_√tif_lock
(
ni
);

826 
°ack_locked
 = 1;

830 if–
°ack_locked
 )

831 
	`ci_√tif_u∆ock
(
ni
);

832  
rc
;

833 
	}
}

836 
	$oo_pùe_‰ì_buf„rs
(
ci_√tif
* 
ni
,

837 
ci_pùe_pkt_li°
* 
pkts
)

839 
ci_ù_pkt_fmt
* 
pkt
 = 
pkts
->
hód
;

840 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

841  ; 
pkts
->
cou¡
; --pkts->count ) {

842 
oo_pkt_p
 
µ
;

843 
	`ci_as£π
(
pkt
);

844 
	`ci_as£π_equÆ
(
pkt
->
ªfcou¡
, 1);

845 
µ
 = 
	`oo_pùe_pkt_li°_√xt
(
pkt
);

846 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pkt
);

847 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

849 
	}
}

857 
	$oo_pùe_zc_ªÀa£_buf„rs
(
ci_√tif
* 
ni
,

858 
oo_pùe
* 
p
,

859 
ci_pùe_pkt_li°
* 
pkts
)

861 
i
;

862 
cou¡
 = 
pkts
->count;

864 
i
 = 
	`oo_pùe_m‹e_buf„rs
(
ni
, 
p
, 
pkts
->
cou¡
,Ökts);

865 (Ë
i
;

866 
	`ci_as£π_À
(0, 
i
);

867 if–
pkts
->
cou¡
 )

869 
	`oo_pùe_‰ì_buf„rs
(
ni
, 
pkts
);

870 
ni
->
°©e
->
n_async_pkts
 -
cou¡
;

872 
	}
}

876 
	$ci_pùe_zc_ªÀa£_buf„rs
(
ci_√tif
* 
ni
,

877 
oo_pùe
* 
p
,

878 
ci_pùe_pkt_li°
* 
pkts
)

880 
rc
;

881 
	`ci_√tif_lock
(
ni
);

882 
rc
 = 
	`oo_pùe_zc_ªÀa£_buf„rs
(
ni
, 
p
, 
pkts
);

883 
	`ci_√tif_u∆ock
(
ni
);

884  
rc
;

885 
	}
}

898 
ci_ölöe
 
	$oo_pùe_li°_±r_move
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
,

899 
ci_ù_pkt_fmt
** 
li°
, *
adv™˚
,

900 
ci_ù_pkt_fmt
** 
¥e_èû
)

902 
cou¡
 = 1;

905 
ci_ù_pkt_fmt
* 
hód
 = *
li°
;

906 (Ë
hód
;

908 
	`ci_as£π_ge
(*
adv™˚
, 0);

909 
	`ci_as£π
(*
li°
);

911 if–
¥e_èû
 !
NULL
 )

912 *
¥e_èû
 = 
NULL
;

914  *
adv™˚
 > (*
li°
)->
pf
.
pùe
.
∑y_Àn
 ) {

915 *
adv™˚
 -(*
li°
)->
pf
.
pùe
.
∑y_Àn
;

916 ++
cou¡
;

917 if–
¥e_èû
 !
NULL
 )

918 *
¥e_èû
 = *
li°
;

919 *
li°
 = 
	`PKT_CHK
(
ni
, 
	`oo_pùe_√xt_buf
(
p
, *list));

920 
	`ci_as£π
(*
li°
);

921 
	`ci_as£π_ge
(*
adv™˚
, 0);

922 if–*
adv™˚
 != 0 )

923 
	`ci_as£π_√quÆ
(
	`OO_PKT_P
(*
li°
), OO_PKT_P(
hód
));

924 
	`ci_as£π_gt
((*
li°
)->
pf
.
pùe
.
∑y_Àn
, 0);

926  
cou¡
;

927 
	}
}

951 
	$ci_pùe_zc_wrôe
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
,

952 
ci_pùe_pkt_li°
* 
pkts
,

953 
Àn
, 
Êags
)

955 
rc
;

956 
byãs_added
;

957 
°ack_locked
;

958 
buf_•a˚
;

959 
cou¡
 = 
pkts
->count;

961 
	`ci_as£π
(
p
);

962 
	`ci_as£π
(
ni
);

963 
	`ci_as£π
(
pkts
);

964 
	`ci_as£π_gt
(
pkts
->
cou¡
, 0);

966 
	`LOG_PIPE
("%s[%u]: ENTERÇonblock=%s bufs=%d wr=%d wr_wait=%dÑd=%d",

967 
__FUNCTION__
,

968 
p
->
b
.
bufid
,

969 (
Êags
 & 
MSG_DONTWAIT
) ?

971 
p
->
bufs_num
,

972 
	`OO_PP_FMT
(
p
->
wrôe_±r
.
µ
),

973 
	`OO_PP_FMT
(
p
->
wrôe_±r
.
µ_waô
),

974 
	`OO_PP_FMT
(
p
->
ªad_±r
.
µ
));

976 
	`ci_√tif_lock
(
ni
);

977 
°ack_locked
 = 1;

979 
	`pùe_dump
(
ni
, 
p
);

981 if–
p
->
aÊags
 & (
CI_PFD_AFLAG_CLOSED
 << 
CI_PFD_AFLAG_READER_SHIFT
) ) {

982 
	`CI_SET_ERROR
(
rc
, 
EPIPE
);

983 
out
;

986 if–
Àn
 == 0 ) {

987 (Ë
	`oo_pùe_zc_ªÀa£_buf„rs
(
ni
, 
p
, 
pkts
);

988 
rc
 = 0;

989 
out
;

994 
adv™˚
 = 
Àn
;

995 
ci_pùe_pkt_li°
 
pkts_to_‰ì
 = *
pkts
;

996 
oo_pkt_p
 
fú°_to_‰ì
;

997 
pkt_˙t
;

999 
pkts
->
èû
 =Ökts->
hód
;

1000 
pkt_˙t
 = 
	`oo_pùe_li°_±r_move
(
ni
, 
p
, &
pkts
->
èû
, &
adv™˚
, 
NULL
);

1001 
pkts
->
èû
->
pf
.
pùe
.
∑y_Àn
 = 
adv™˚
;

1002 
pkts
->
cou¡
 = 
pkt_˙t
;

1003 
pkts_to_‰ì
.
cou¡
 -
pkt_˙t
;

1004 if–
pkts_to_‰ì
.
cou¡
 ) {

1005 
fú°_to_‰ì
 = 
	`oo_pùe_pkt_li°_√xt
(
pkts
->
èû
);

1006 
pkts_to_‰ì
.
hód
 = 
	`PKT_CHK
(
ni
, 
fú°_to_‰ì
);

1007 (Ë
	`oo_pùe_zc_ªÀa£_buf„rs
(
ni
, 
p
, &
pkts_to_‰ì
);

1011 
buf_•a˚
 = 
p
->
bufs_max
 -Ö->
bufs_num
;

1012 if–
buf_•a˚
 < 
cou¡
 ) {

1013 (Ë
	`oo_pùe_ª≠_em±y_buf„rs
(
ni
, 
p
, 
cou¡
 - 
buf_•a˚
, 
NULL
);

1014 
buf_•a˚
 = 
p
->
bufs_max
 -Ö->
bufs_num
;

1016 if–(
Êags
 & 
CI_PIPE_ZC_WRITE_FLAG_FORCE
) == 0 ) {

1017  
buf_•a˚
 <= 0 ) {

1018 if–
Êags
 & 
MSG_DONTWAIT
 ) {

1019 
	`LOG_PIPE
("%s: O_NONBLOCK i†£àsÿexô", 
__FUNCTION__
);

1020 
	`CI_SET_ERROR
(
rc
, 
EAGAIN
);

1021 
out
;

1023 
rc
 = 
	`oo_pùe_waô_wrôe
(
ni
, 
p
, 
MSG_NOSIGNAL
, &
°ack_locked
);

1024 if–
rc
 != 0 )

1025 
out
;

1026 if–! 
°ack_locked
 ) {

1027 
	`ci_√tif_lock
(
ni
);

1028 
°ack_locked
 = 1;

1033 
buf_•a˚
 = 
p
->
bufs_max
 -Ö->
bufs_num
;

1034 if–
buf_•a˚
 < 
pkts
->
cou¡
 ) {

1035 (Ë
	`oo_pùe_ª≠_em±y_buf„rs
(
ni
, 
p
, 
cou¡
 - 
buf_•a˚
, 
NULL
);

1036 
buf_•a˚
 = 
p
->
bufs_max
 -Ö->
bufs_num
;

1041 
	`oo_pùe_ö£π_buf„rs
(
ni
, 
p
, 
pkts
);

1042 
byãs_added
 = 
Àn
;

1044 if–
byãs_added
 > 0 ) {

1045 
	`ci_wmb
();

1046 
p
->
byãs_added
 += bytes_added;

1047 
ni
->
°©e
->
n_async_pkts
 -
cou¡
;

1048 
	`__oo_pùe_wake_≥î
(
ni
, 
p
, 
CI_SB_FLAG_WAKE_RX
);

1050 
rc
 = 
byãs_added
;

1052 
out
:

1053 
	`pùe_dump
(
ni
, 
p
);

1055 if–
°ack_locked
 )

1056 
	`ci_√tif_u∆ock
(
ni
);

1058 
	`LOG_PIPE
("%s[%u]: EXITÑëu∫ %d", 
__FUNCTION__
, 
p
->
b
.
bufid
, 
rc
);

1059  
rc
;

1060 
	}
}

1070 
	$ci_pùe_li°_to_iovec
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
,

1071 
iovec
* 
iov
,

1072 * 
iov_num
,

1073 
ci_pùe_pkt_li°
* 
pkts
,

1074 
Àn
)

1076 
byã_Àn
 = 0;

1077 
i
;

1078 
oo_pkt_p
 
µ
 = 
OO_PP_ID_NULL
;

1079 
ci_ù_pkt_fmt
* 
pkt
;

1080 
cou¡
;

1081 
	`ci_as£π_gt
(
Àn
, 0);

1082 
	`ci_as£π
(
pkts
);

1083 
	`ci_as£π_gt
(
pkts
->
cou¡
, 0);

1084 
pkt
 = 
pkts
->
hód
;

1085 
	`ci_as£π
(
pkt
);

1086 
cou¡
 = 
	`CI_MIN
(*
iov_num
, 
pkts
->count);

1087  
i
 = 0; i < 
cou¡
; ++i ) {

1088 
iov_Àn
;

1089 if–
i
 != 0 )

1090 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

1091 
iov_Àn
 = 
	`CI_MIN
(
pkt
->
pf
.
pùe
.
∑y_Àn
, 
Àn
);

1092 if–
iov_Àn
 == 0 )

1094 
iov
[
i
].
iov_ba£
 = 
	`pùe_gë_poöt
(
ni
, 
p
, 
pkt
, 0);

1095 
iov
[
i
].
iov_Àn
 = iov_len;

1096 
	`ci_as£π
(
iov
[
i
].
iov_ba£
);

1097 
Àn
 -
iov_Àn
;

1098 
byã_Àn
 +
iov_Àn
;

1099 
µ
 = 
	`oo_pùe_pkt_li°_√xt
(
pkt
);

1101 *
iov_num
 = 
i
;

1102 
pkts
->
cou¡
 -
i
;

1103 
pkts
->
hód
 = 
pkt
;

1104  
byã_Àn
;

1105 
	}
}

1108 
	#OO_PIPE_ZC_READ_IOV_IOV_LEN
 64

	)

1109 
	soo_pùe_zc_ªad_iov_˘x
 {

1110 
iovec
 
	miov_⁄_°ack
[
OO_PIPE_ZC_READ_IOV_IOV_LEN
];

1111 
iovec
* 
	miov
;

1112 
ci_pùe_zc_ªad_cb
 
	mcb
;

1113 * 
	mcb_˘x
;

1121 
ci_ölöe
 
	$oo_pùe_zc_ªad_iov_cb
(* 
zc_ªad_iov_˘x
,

1122 
ci_√tif
* 
ni
,

1123 
oo_pùe
* 
p
,

1124 
Êags
,

1125 
ci_ù_pkt_fmt
* 
hód
,

1126 
byãs_avaûabÀ
,

1127 
Àn
,

1128 
ci_ù_pkt_fmt
** 
œ°pkt_ªad_out
,

1129 * 
œ°pkt_∑ylﬂd_ªad_out
,

1130 * 
pkts_ªad_out
)

1132 
oo_pùe_zc_ªad_iov_˘x
* 
˘x
 = 
zc_ªad_iov_˘x
;

1133 
iovec
* 
iov
 = 
˘x
->
iov_⁄_°ack
;

1134 
ci_ù_pkt_fmt
* 
pkt
 = 
hód
;

1135 
byãs_to_ªad
 = 
	`CI_MIN
(
byãs_avaûabÀ
, 
Àn
);

1136 
œ°_pkt_byãs_wrôãn
;

1137 
byãs_wrôãn
;

1138 
size
;

1139 
i
;

1140 
rc
;

1143 
iov
[0].
iov_ba£
 = 
	`pùe_gë_poöt
(
ni
, 
p
, 
pkt
,Ö->
ªad_±r
.
off£t
);

1144 
size
 = 
pkt
->
pf
.
pùe
.
∑y_Àn
 - 
p
->
ªad_±r
.
off£t
;

1145 
iov
[0].
iov_Àn
 = 
size
;

1146  
i
 = 1; 
size
 < 
byãs_to_ªad
; ++i ) {

1147 
oo_pkt_p
 
µ
 = 
	`oo_pùe_√xt_buf
(
p
, 
pkt
);

1149 
	`ci_as£π_√quÆ
(
	`OO_PKT_P
(
pkt
), 
p
->
wrôe_±r
.
µ
);

1150 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

1151 
	`ci_as£π
(
pkt
);

1152 if–
i
 =
OO_PIPE_ZC_READ_IOV_IOV_LEN
 ) {

1153 * 
niov
;

1154 
size2
 = 
byãs_to_ªad
 - 
size
;

1155 
ci_ù_pkt_fmt
* 
pkt2
 = 
pkt
;

1157 
iov_Àn
 = 
i
 + 
	`oo_pùe_li°_±r_move
(
ni
, 
p
, &
pkt2
, &
size2
, 
NULL
) + 1;

1158 
niov
 = 
	`ªÆloc
(
iov
 =
˘x
->
iov_⁄_°ack
 ? 
NULL
 : iov,

1159 (*
iov
Ë* 
OO_PIPE_ZC_READ_IOV_IOV_LEN
);

1160 if–
niov
 =
NULL
 )

1162 
	`mem˝y
(
niov
, 
iov
, (*iovË* 
iov_Àn
);

1163 
iov
 = 
niov
;

1164 
˘x
->
iov
 = 
niov
;

1166 
iov
[
i
].
iov_ba£
 = 
	`pùe_gë_poöt
(
ni
, 
p
, 
pkt
, 0);

1167 
iov
[
i
].
iov_Àn
 = 
	`CI_MIN
(
pkt
->
pf
.
pùe
.
∑y_Àn
,

1168 
byãs_to_ªad
 - 
size
);

1169 
size
 +
iov
[
i
].
iov_Àn
;

1171 
iov
[
i
 - 1].
iov_Àn
 +
	`CI_MIN
(0, 
byãs_to_ªad
 - 
size
);

1173 
rc
 = 
˘x
->
	`cb
(˘x->
cb_˘x
, 
iov
, 
i
, 
Êags
);

1175 if–
rc
 <= 0 )

1176  
rc
;

1178 
byãs_wrôãn
 = 
rc
;

1179 
	`ci_as£π_À
(
byãs_wrôãn
, 
byãs_to_ªad
);

1181 
œ°_pkt_byãs_wrôãn
 = 
byãs_wrôãn
 -

1182 (
byãs_to_ªad
 - 
iov
[
i
 - 1].
iov_Àn
);

1184 if–
œ°_pkt_byãs_wrôãn
 <= 0 ) {

1188 
size2
 = 
byãs_wrôãn
 + 
p
->
ªad_±r
.
off£t
;

1189 
pkt
 = 
hód
;

1190 
i
 = 
	`oo_pùe_li°_±r_move
(
ni
, 
p
, &
pkt
, &
size2
, 
NULL
);

1191 
œ°_pkt_byãs_wrôãn
 = 
size2
;

1194 
	`ci_as£π_À
(
œ°_pkt_byãs_wrôãn
, 
pkt
->
pf
.
pùe
.
∑y_Àn
);

1196 *
œ°pkt_ªad_out
 = 
pkt
;

1197 *
œ°pkt_∑ylﬂd_ªad_out
 = 
œ°_pkt_byãs_wrôãn
;

1198 *
pkts_ªad_out
 = 
i
 - 1;

1199  
byãs_wrôãn
;

1200 
	}
}

1204 (*
	too_pùe_zc_ªad_cb_t
)(* 
	tzc_ªad_iov_˘x
,

1205 
	tci_√tif
* 
	tni
,

1206 
	too_pùe
* 
	tp
,

1207 
	tÊags
,

1208 
	tci_ù_pkt_fmt
* 
	thód
,

1209 
	tbyãs_avaûabÀ
,

1210 
	tÀn
,

1211 
	tci_ù_pkt_fmt
** 
	tœ°pkt_ªad_out
,

1212 * 
	tœ°pkt_∑ylﬂd_ªad_out
,

1213 * 
	tpkts_ªad_out
);

1231 
	#OO_PIPE_ZC_READ_BARE_FLAG_LOCK_STACK
 1

	)

1232 
	#OO_PIPE_ZC_READ_BARE_FLAG_REMOVE_BUFFERS
 2

	)

1233 
ci_ölöe
 
	$oo_pùe_zc_ªad_b¨e
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
,

1234 
Àn
, 
Êags
, 
zc_Êags
,

1235 
oo_pùe_zc_ªad_cb_t
 
cb
, * 
cb_˘x
)

1237 
byãs_avaûabÀ
;

1238 
byãs_ªad_tŸÆ
 = 0;

1239 
bufs_ªad_tŸÆ
 = 0;

1240 
rc
;

1241 
ci_ù_pkt_fmt
* 
pkt
;

1242 
ci_ù_pkt_fmt
* 
¥e_fú°_pkt
;

1243 
oo_pkt_p
 
wrôe_±r_√xt
 = 
OO_PP_NULL
;

1244 
lock_°ack
 = 
zc_Êags
 & 
OO_PIPE_ZC_READ_BARE_FLAG_LOCK_STACK
;

1245 
ªmove_buf„rs
 = 
zc_Êags
 & 
OO_PIPE_ZC_READ_BARE_FLAG_REMOVE_BUFFERS
;

1246 
	`ci_as£π
(
p
);

1247 
	`ci_as£π
(
ni
);

1248 
	`ci_as£π
(! 
ªmove_buf„rs
 || 
lock_°ack
);

1250 
	`LOG_PIPE
("%s[%u]: ENTER data_len=%dáflags=%x",

1251 
__FUNCTION__
, 
p
->
b
.
bufid
, 
	`oo_pùe_d©a_Àn
’),Ö->
aÊags
);

1253 
agaö
:

1254 
rc
 = 
	`ci_sock_lock
(
ni
, &
p
->
b
);

1255 
byãs_avaûabÀ
 = 
	`oo_pùe_d©a_Àn
(
p
);

1257 if–
byãs_avaûabÀ
 == 0 ) {

1258 
	`ci_sock_u∆ock
(
ni
, &
p
->
b
);

1259 
waô_f‹_byãs
;

1262 if–
lock_°ack
 )

1263 
	`ci_√tif_lock
(
ni
);

1265 
	`pùe_dump
(
ni
, 
p
);

1267 
agaö_locked
:

1268 
pkt
 = 
	`PKT_CHK_NML
(
ni
, 
p
->
ªad_±r
.
µ
, 
lock_°ack
);

1269 
¥e_fú°_pkt
 = 
pkt
;

1271 
bufs_ªad_tŸÆ
 +
	`oo_pùe_move_ªad_±r
(
ni
, 
p
, &
pkt
, &p->
ªad_±r
.
off£t
,

1272 
lock_°ack
);

1274 if–
bufs_ªad_tŸÆ
 > 0 ) {

1277 
p
->
ªad_±r
.
µ
 = 
	`OO_PKT_P
(
pkt
);

1278 
	`__oo_pùe_wake_≥î
(
ni
, 
p
, 
CI_SB_FLAG_WAKE_TX
);

1282 
byãs_ªad
;

1283 
ci_ù_pkt_fmt
* 
œ°_pkt
;

1284 
œ°_pkt_byãs_ªad
;

1285 
bufs_ªad
;

1287 if–
ªmove_buf„rs
 ) {

1288 
ci_ù_pkt_fmt
* 
wrôe_±r_pkt
 = 
	`PKT_CHK
(
ni
, 
p
->
wrôe_±r
.
µ
);

1289 if–
¥e_fú°_pkt
 =
pkt
 ) {

1295 
¥e_fú°_pkt
 = 
wrôe_±r_pkt
;

1297 
¥e_fú°_pkt
 = 
	`oo_pùe_buf_li°_föd
(
ni
,Öª_fú°_pkt, 
	`OO_PKT_P
(
pkt
));

1300 
wrôe_±r_√xt
 = 
wrôe_±r_pkt
->
√xt
;

1326 
rc
 = 
	`cb
(
cb_˘x
, 
ni
, 
p
, 
Êags
, 
pkt
, 
byãs_avaûabÀ
, 
Àn
,

1327 &
œ°_pkt
, &
œ°_pkt_byãs_ªad
, &
bufs_ªad
);

1329 if–
rc
 <= 0 ) {

1330 if–
rc
 =-
EINTR
 )

1331 
agaö_locked
;

1332 if–
byãs_ªad_tŸÆ
 ) {

1335 
rc
 = 
byãs_ªad_tŸÆ
;

1340 
byãs_ªad
 = 
rc
;

1342 if–
ªmove_buf„rs
 && 
bufs_ªad
 > 0 ) {

1343 
	`ci_as£π_ge
(
p
->
bufs_num
, 
bufs_ªad
);

1344 
p
->
bufs_num
 -
bufs_ªad
;

1345 if–
p
->
bufs_num
 == 0 ) {

1347 
	`oo_pùe_buf_˛ór_°©e
(
ni
, 
p
);

1348 
œ°_pkt
 = 
NULL
;

1349 
	`ci_as£π_equÆ
(
œ°_pkt_byãs_ªad
, 0);

1353 
¥e_fú°_pkt
->
√xt
 = 
	`OO_PKT_P
(
œ°_pkt
);

1354 if–
wrôe_±r_√xt
 =
	`OO_PKT_P
(
œ°_pkt
) ) {

1357 
p
->
wrôe_±r
.
µ_waô
 = 
OO_PP_NULL
;

1358 
p
->
wrôe_±r
.
µ
 = 
wrôe_±r_√xt
;

1359 
	`oo_pùe_buf_wrôe_öô
(
p
, 
œ°_pkt
);

1363 
p
->
pùe_bufs
.
µ
 = 
	`OO_PKT_P
(
œ°_pkt
);

1367 
bufs_ªad_tŸÆ
 +
bufs_ªad
;

1369 
byãs_ªad_tŸÆ
 +
byãs_ªad
;

1370 
byãs_avaûabÀ
 -
byãs_ªad
;

1372 if–
œ°_pkt
 ) {

1373 
p
->
ªad_±r
.
µ
 = 
	`OO_PKT_P
(
œ°_pkt
);

1374 if–
bufs_ªad
 == 0 )

1375 
p
->
ªad_±r
.
off£t
 +
œ°_pkt_byãs_ªad
;

1377 
p
->
ªad_±r
.
off£t
 = 
œ°_pkt_byãs_ªad
;

1379 if–
bufs_ªad
 > 0 || 
byãs_avaûabÀ
 == 0 )

1380 
	`__oo_pùe_wake_≥î
(
ni
, 
p
, 
CI_SB_FLAG_WAKE_TX
);

1382 
	`ci_as£π_À
(
p
->
ªad_±r
.
off£t
, 
œ°_pkt
->
pf
.
pùe
.
∑y_Àn
);

1389 
	`ci_wmb
();

1390 
p
->
byãs_ªmoved
 +
byãs_ªad_tŸÆ
;

1391 if–
lock_°ack
 )

1392 
	`ci_√tif_u∆ock
(
ni
);

1393 
	`ci_sock_u∆ock
(
ni
, &
p
->
b
);

1394 
out
:

1395 
	`LOG_PIPE
("%s[%u]: EXITÑëu∫ %d", 
__FUNCTION__
, 
p
->
b
.
bufid
, 
rc
);

1396  
rc
;

1398 
waô_f‹_byãs
:

1399 
	`LOG_PIPE
("%s[%u]: waô_f‹_byãs", 
__FUNCTION__
, 
p
->
b
.
bufid
);

1400 if–(
rc
 = 
	`oo_pùe_ªad_waô
(
ni
, 
p
, 
Êags
 & 
MSG_DONTWAIT
)) != 1 )

1401 
out
;

1402 
agaö
;

1403 
	}
}

1418 
	$ci_pùe_zc_ªad
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
, 
Àn
, 
Êags
,

1419 
ci_pùe_zc_ªad_cb
 
cb
, * 
cb_˘x
)

1421 
oo_pùe_zc_ªad_iov_˘x
 
˘x
 = {

1422 .
cb
 = cb,

1423 .
cb_˘x
 = cb_ctx,

1425 
rc
;

1426 
˘x
.
iov
 = ctx.
iov_⁄_°ack
;

1427 
rc
 = 
	`oo_pùe_zc_ªad_b¨e
(
ni
, 
p
, 
Àn
, 
Êags
, 0,

1428 
oo_pùe_zc_ªad_iov_cb
, &
˘x
);

1429 if–
˘x
.
iov
 !˘x.
iov_⁄_°ack
 )

1430 
	`‰ì
(
˘x
.
iov
);

1431  
rc
;

1432 
	}
}

1444 
	$__oo_pùe_zc_move_buf„rs
(
ci_√tif
* 
ni
, 
oo_pùe
* 
pùe_§c
,

1445 
oo_pùe
* 
pùe_de°
, 
Êags
, 
Àn
,

1446 
ci_ù_pkt_fmt
* 
hód
, ci_ù_pkt_fmt** 
√xt_pkt_out
,

1447 * 
n_pkts_out
, * 
œ°_pkt_off£t_out
)

1449 
ci_ù_pkt_fmt
* 
¥e_èû
;

1450 
byãs_ªmaöög
;

1451 
°ack_locked
 = 1;

1452 
ci_pùe_pkt_li°
 
pkts
 = {

1453 .
hód
 = head,

1454 .
èû
 = 
hód
,

1457 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1459  
pùe_de°
->
bufs_num
 >pùe_de°->
bufs_max
 ) {

1460 
	`oo_pùe_ª≠_em±y_buf„rs
(
ni
, 
pùe_de°
, 0, 
NULL
);

1461 if–
pùe_de°
->
bufs_num
 >pùe_de°->
bufs_max
 ) {

1462 
rc
;

1463 
	`LOG_PIPE
("%s[%u,%u]: stillÅoo few buffersÖost-reap (%d/%d)",

1464 
__FUNCTION__
, 
pùe_§c
->
b
.
bufid
, 
pùe_de°
->b.bufid,

1465 
pùe_de°
->
bufs_num
,Öùe_de°->
bufs_max
);

1466 if–
Êags
 & 
MSG_DONTWAIT
 )

1467  -
EAGAIN
;

1468 
rc
 = 
	`oo_pùe_waô_wrôe
(
ni
, 
pùe_de°
, 0, &
°ack_locked
);

1469 if–! 
°ack_locked
 ) {

1470 
	`ci_√tif_lock
(
ni
);

1471 if–
rc
 == 0 )

1472  -
EINTR
;

1474 if–
rc
 < 0 )

1475  
rc
;

1481 
byãs_ªmaöög
 = 
Àn
 + 
pùe_§c
->
ªad_±r
.
off£t
;

1482 
pkts
.
cou¡
 = 
	`oo_pùe_li°_±r_move
(
ni
, 
pùe_§c
, &pkts.
èû
, &
byãs_ªmaöög
,

1483 &
¥e_èû
);

1484 if–
byãs_ªmaöög
 =
pkts
.
èû
->
pf
.
pùe
.
∑y_Àn
 ) {

1486 
byãs_ªmaöög
 = 0;

1487 *
√xt_pkt_out
 = 
	`PKT_CHK
(
ni
, 
	`oo_pùe_√xt_buf
(
pùe_§c
, 
pkts
.
èû
));

1492 *
√xt_pkt_out
 = 
pkts
.
èû
;

1493 
pkts
.
èû
 = 
¥e_èû
;

1494 --
pkts
.
cou¡
;

1497 if–
pkts
.
èû
 !
NULL
 ) {

1498 
	`ci_as£π_gt
(
pkts
.
cou¡
, 0);

1499 
pkts
.
hód
->
pf
.
pùe
.
∑y_Àn
 -
pùe_§c
->
ªad_±r
.
off£t
;

1500 
pkts
.
hód
->
pf
.
pùe
.
ba£
 +
pùe_§c
->
ªad_±r
.
off£t
;

1501 
	`oo_pùe_ö£π_buf„rs
(
ni
, 
pùe_de°
, &
pkts
);

1504 *
œ°_pkt_off£t_out
 = 0;

1508 *
œ°_pkt_off£t_out
 = 
pùe_§c
->
ªad_±r
.
off£t
;

1509 
byãs_ªmaöög
 -*
œ°_pkt_off£t_out
;

1512 *
n_pkts_out
 = 
pkts
.
cou¡
;

1513  
byãs_ªmaöög
;

1514 
	}
}

1518 
	$__oo_pùe_zc_c›y_œ°_buf„r
(
ci_√tif
* 
ni
, 
oo_pùe
* 
pùe_§c
,

1519 
oo_pùe
* 
pùe_de°
, 
Êags
,

1520 
ci_ù_pkt_fmt
* 
pkt_§c
, 
Àn
, 
off£t
,

1521 
byãs_Æªady_•li˚d
)

1523 
°ack_locked
 = 1;

1524 
ci_uöt8
* 
wrôe_poöt
;

1525 
ci_uöt8
* 
ªad_poöt
;

1526 
oo_pkt_p
 
µ_de°_ªad
 = 
	`OO_ACCESS_ONCE
(
pùe_de°
->
ªad_±r
.
µ
);

1527 
ci_ù_pkt_fmt
* 
pkt_de°
 = 
	`OO_PP_NOT_NULL
(
pùe_de°
->
wrôe_±r
.
µ
) ?

1528 
	`PKT_CHK
(
ni
, 
pùe_de°
->
wrôe_±r
.
µ
Ë: 
NULL
;

1529 
de°_buf_•a˚
 = 
pkt_de°
 !
NULL
 ? 
	`oo_pùe_buf_•a˚
(pkt_dest) : 0;

1530 
fú°_p‹ti⁄
 = 
	`CI_MIN
(
de°_buf_•a˚
, 
Àn
);

1531 
byãs_c›õd
;

1533 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1534 
	`ci_as£π_À
(
Àn
, 
pkt_§c
->
pf
.
pùe
.
∑y_Àn
 - 
off£t
);

1539 
ªad_poöt
 = 
	`pùe_gë_poöt
(
ni
, 
pùe_§c
, 
pkt_§c
, 
off£t
);

1540 if–
de°_buf_•a˚
 > 0 ) {

1541 
pkt_de°
 = 
	`PKT_CHK
(
ni
, 
pùe_de°
->
wrôe_±r
.
µ
);

1542 
wrôe_poöt
 =

1543 
	`pùe_gë_poöt
(
ni
, 
pùe_de°
, 
pkt_de°
,Ökt_de°->
pf
.
pùe
.
∑y_Àn
);

1544 
	`do_c›y_wrôe
(
wrôe_poöt
, 
ªad_poöt
, 
fú°_p‹ti⁄
);

1545 
pkt_de°
->
pf
.
pùe
.
∑y_Àn
 +
fú°_p‹ti⁄
;

1546 
Àn
 -
fú°_p‹ti⁄
;

1547 
ªad_poöt
 +
fú°_p‹ti⁄
;

1548 if–
fú°_p‹ti⁄
 =
de°_buf_•a˚
 && 
pkt_de°
->
√xt
 =
µ_de°_ªad
 )

1549 
pùe_de°
->
wrôe_±r
.
µ_waô
 = 
pkt_de°
->
√xt
;

1552 
byãs_c›õd
 = 
fú°_p‹ti⁄
;

1555 if–
Àn
 > 0 ) {

1556 if–
	`CI_UNLIKELY
(! 
	`oo_pùe_has_•a˚
(
pùe_de°
)) ) {

1557 
rc
;

1558 
	`LOG_PIPE
("%s[%u,%u]:Çìd m‹ê•a˚", 
__FUNCTION__
, 
pùe_§c
->
b
.
bufid
,

1559 
pùe_de°
->
b
.
bufid
);

1560 
rc
 = 
	`oo_pùe_m‹e_buf„rs
(
ni
, 
pùe_de°
, 0, 
NULL
);

1564 if–
rc
 <0 && 
byãs_Æªady_•li˚d
 > 0 ) {

1565  
byãs_c›õd
;

1569 if–
rc
 < 0 ) {

1570  -
ENOBUFS
;

1573 if–
rc
 == 0 ) {

1574 if–
Êags
 & 
MSG_DONTWAIT
 )

1575  -
EAGAIN
;

1576 
rc
 = 
	`oo_pùe_waô_wrôe
(
ni
, 
pùe_de°
, 0, &
°ack_locked
);

1577 if–! 
°ack_locked
 ) {

1580 
	`ci_√tif_lock
(
ni
);

1581 
°ack_locked
 = 1;

1582 if–
rc
 == 0 )

1583  -
EINTR
;

1585 if–
rc
 < 0 )

1586  
rc
;

1589 
pùe_de°
->
wrôe_±r
.
µ
 =Öùe_de°->wrôe_±r.
µ_waô
;

1590 
pùe_de°
->
wrôe_±r
.
µ_waô
 = 
OO_PP_NULL
;

1594 
pùe_de°
->
wrôe_±r
.
µ
 = 
pkt_de°
->
√xt
;

1597 
pkt_de°
 = 
	`PKT_CHK
(
ni
, 
pùe_de°
->
wrôe_±r
.
µ
);

1598 
	`oo_pùe_buf_wrôe_öô
(
pùe_de°
, 
pkt_de°
);

1599 
wrôe_poöt
 = 
	`pùe_gë_poöt
(
ni
, 
pùe_de°
, 
pkt_de°
, 0);

1600 
	`do_c›y_wrôe
(
wrôe_poöt
, 
ªad_poöt
, 
Àn
);

1601 
pkt_de°
->
pf
.
pùe
.
∑y_Àn
 = 
Àn
;

1602 
byãs_c›õd
 +
Àn
;

1606 
	`ci_as£π_gt
(
	`oo_pùe_buf_•a˚
(
pkt_de°
), 0);

1609  
byãs_c›õd
;

1610 
	}
}

1613 
	soo_pùe_zc_move_˘x
 {

1614 
oo_pùe
* 
	mpùe_de°
;

1647 
	#PIPE_TO_PIPE_SPLICE_COPY_THRESHOLD
 300

	)

1650 
	$oo_pùe_zc_move_cb
(* 
c
, 
ci_√tif
* 
ni
, 
oo_pùe
* 
pùe_§c
, 
Êags
,

1651 
ci_ù_pkt_fmt
* 
hód
, 
byãs_avaûabÀ
, 
ªad_Àn
,

1652 
ci_ù_pkt_fmt
** 
√xt_pkt_out
, * 
√xt_pkt_∑ylﬂd_out
,

1653 * 
n_pkts_out
)

1655 
oo_pùe_zc_move_˘x
* 
˘x
 = 
c
;

1656 
oo_pùe
* 
pùe_de°
 = 
˘x
->pipe_dest;

1657 
œ°_pkt_byãs
, 
œ°_pkt_off£t
;

1658 
byãs_ˇn_move
 = 
	`CI_MIN
(
byãs_avaûabÀ
, 
ªad_Àn
);

1661 
	`CI_BUILD_ASSERT
(
PIPE_TO_PIPE_SPLICE_COPY_THRESHOLD
 < 
OO_PIPE_BUF_MAX_SIZE
);

1663 
	`LOG_PIPE
("%s[%u,%u]: ENTER", 
__FUNCTION__
, 
pùe_§c
->
b
.
bufid
,

1664 
pùe_de°
->
b
.
bufid
);

1665 
	`pùe_dump
(
ni
, 
pùe_de°
);

1667 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1668 
	`ci_as£π_equÆ
(
	`OO_PKT_P
(
hód
), 
pùe_§c
->
ªad_±r
.
µ
);

1670 *
√xt_pkt_∑ylﬂd_out
 = 0;

1673 if–
byãs_ˇn_move
 == 0 ) {

1674 *
√xt_pkt_out
 = 
hód
;

1675 *
n_pkts_out
 = 0;

1680 if–
byãs_ˇn_move
 =
hód
->
pf
.
pùe
.
∑y_Àn
 - 
pùe_§c
->
ªad_±r
.
off£t
 &&

1681 
byãs_ˇn_move
 <
PIPE_TO_PIPE_SPLICE_COPY_THRESHOLD
 ) {

1682 
œ°_pkt_byãs
 = 
byãs_ˇn_move
;

1683 
œ°_pkt_off£t
 = 
pùe_§c
->
ªad_±r
.
off£t
;

1684 *
√xt_pkt_out
 = 
hód
;

1685 *
n_pkts_out
 = 0;

1689 
œ°_pkt_byãs
 =

1690 
	`__oo_pùe_zc_move_buf„rs
(
ni
, 
pùe_§c
, 
pùe_de°
, 
Êags
, 
byãs_ˇn_move
,

1691 
hód
, 
√xt_pkt_out
, 
n_pkts_out
,

1692 &
œ°_pkt_off£t
);

1693 if–
œ°_pkt_byãs
 < 0 )

1694  
œ°_pkt_byãs
;

1699 
	`LOG_PIPE
("%s[%u,%u]: c›y %d byã†off£à%d/%d", 
__FUNCTION__
,

1700 
pùe_§c
->
b
.
bufid
, 
pùe_de°
->b.bufid, 
œ°_pkt_byãs
,

1701 
œ°_pkt_off£t
, (*
√xt_pkt_out
)->
pf
.
pùe
.
∑y_Àn
);

1702 if–
œ°_pkt_byãs
 > 0 ) {

1703 
byãs_c›õd
;

1704 
	`ci_as£π_…
(*
n_pkts_out
, 
pùe_§c
->
bufs_num
);

1705 
byãs_c›õd
 =

1706 
	`__oo_pùe_zc_c›y_œ°_buf„r
(
ni
, 
pùe_§c
, 
pùe_de°
, 
Êags
,

1707 *
√xt_pkt_out
, 
œ°_pkt_byãs
,

1708 
œ°_pkt_off£t
,

1709 
byãs_ˇn_move
 - 
œ°_pkt_byãs
);

1710 if–
byãs_c›õd
 < 0 )

1711  
byãs_c›õd
;

1712 *
√xt_pkt_∑ylﬂd_out
 = 
byãs_c›õd
;

1713 
byãs_ˇn_move
 -
œ°_pkt_byãs
 - 
byãs_c›õd
;

1716 if–
byãs_ˇn_move
 > 0 ) {

1717 
	`ci_wmb
();

1718 
pùe_de°
->
byãs_added
 +
byãs_ˇn_move
;

1719 
	`__oo_pùe_wake_≥î
(
ni
, 
pùe_de°
, 
CI_SB_FLAG_WAKE_RX
);

1722  
byãs_ˇn_move
;

1723 
	}
}

1726 
	$ci_pùe_zc_move
(
ci_√tif
* 
ni
, 
oo_pùe
* 
pùe_§c
,

1727 
oo_pùe
* 
pùe_de°
, 
æí
, 
Êags
)

1729 
oo_pùe_zc_move_˘x
 
˘x
 = {

1730 .
pùe_de°
 =Öipe_dest,

1732  
	`oo_pùe_zc_ªad_b¨e
(
ni
, 
pùe_§c
, 
æí
, 
Êags
,

1733 
OO_PIPE_ZC_READ_BARE_FLAG_LOCK_STACK
 |

1734 
OO_PIPE_ZC_READ_BARE_FLAG_REMOVE_BUFFERS
,

1735 
oo_pùe_zc_move_cb
, &
˘x
);

1736 
	}
}

1741 
	$ci_pùe_wrôe
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
,

1742 c⁄° 
iovec
 *
iov
,

1743 
size_t
 
iovÀn
)

1745 
tŸÆ_byãs
 = 0, 
rc
;

1746 
i
;

1747 
add
 = 0;

1748 
°ack_locked
 = 0;

1749 
ci_ù_pkt_fmt
* 
pkt
 = 
NULL
;

1750 
oo_pkt_p
 
µ_ªad
;

1752 
	`ci_as£π
(
p
);

1753 
	`ci_as£π
(
ni
);

1754 
	`ci_as£π
(
iov
);

1755 
	`ci_as£π_gt
(
iovÀn
, 0);

1757 
	`LOG_PIPE
("%s[%u]: ENTERÇonblock=%s bufs=%d wr=%d wr_wait=%dÑd=%d",

1758 
__FUNCTION__
,

1759 
p
->
b
.
bufid
,

1760 (
p
->
aÊags
 &

1761 (
CI_PFD_AFLAG_NONBLOCK
 << 
CI_PFD_AFLAG_WRITER_SHIFT
)) ?

1763 
p
->
bufs_num
,

1764 
	`OO_PP_FMT
(
p
->
wrôe_±r
.
µ
),

1765 
	`OO_PP_FMT
(
p
->
wrôe_±r
.
µ_waô
),

1766 
	`OO_PP_FMT
(
p
->
ªad_±r
.
µ
));

1768 
rc
 = 
	`ci_√tif_lock
(
ni
);

1769 #ifde‡
__KERNEL__


1770 if–
rc
 < 0 ) {

1771 
	`CI_SET_ERROR
(
rc
, 
ERESTARTSYS
);

1772 
out
;

1775 
°ack_locked
 = 1;

1777 
	`pùe_dump
(
ni
, 
p
);

1779 if–
p
->
aÊags
 & (
CI_PFD_AFLAG_CLOSED
 << 
CI_PFD_AFLAG_READER_SHIFT
)) {

1782 
	`CI_SET_ERROR
(
rc
, 
EPIPE
);

1783 
	`oo_pùe_sig«l
(
ni
);

1784 
out
;

1787 
µ_ªad
 = 
	`OO_ACCESS_ONCE
(
p
->
ªad_±r
.
µ
);

1788  
i
 = 0; i < 
iovÀn
; i++ ) {

1789 * 
°¨t
 = 
iov
[
i
].
iov_ba£
;

1790 * 
íd
 = 
°¨t
 + 
iov
[
i
].
iov_Àn
;

1793 
ci_uöt8
* 
wrôe_poöt
;

1794 
bur°
;

1795 
	`ci_as£π
(
iov
[
i
].
iov_Àn
 =0 || 
íd
 - 
°¨t
);

1797 if–
pkt
 =
NULL
 && 
	`OO_PP_NOT_NULL
(
p
->
wrôe_±r
.
µ
) )

1798 
pkt
 = 
	`PKT_CHK
(
ni
, 
p
->
wrôe_±r
.
µ
);

1800 if–
pkt
 !
NULL
 && 
	`oo_pùe_buf_•a˚
(pkt) > 0 ) {

1803 if–
pkt
 !
NULL
 &&Ökt->
√xt
 !
µ_ªad
 ) {

1804 
p
->
wrôe_±r
.
µ_waô
 = 
OO_PP_NULL
;

1805 
p
->
wrôe_±r
.
µ
 = 
pkt
->
√xt
;

1806 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

1807 
	`oo_pùe_buf_wrôe_öô
(
p
, 
pkt
);

1810 
out_of_•a˚
;

1812 
	`LOG_PIPE
("%s: ->%d+%u %d %d",

1813 
__FUNCTION__
, 
	`OO_PP_FMT
(
p
->
wrôe_±r
.
µ
), 
pkt
->
pf
.
pùe
.
∑y_Àn
,

1814 ()(
	`oo_pùe_buf_•a˚
(
pkt
)),

1815 ()(
íd
 - 
°¨t
));

1817 
wrôe_poöt
 = 
	`pùe_gë_poöt
(
ni
, 
p
, 
pkt
,Ökt->
pf
.
pùe
.
∑y_Àn
);

1819 
bur°
 = 
	`CI_MIN
(
	`oo_pùe_buf_•a˚
(
pkt
), 
íd
 - 
°¨t
);

1821 if–
bur°
 ) {

1822 if(
	`CI_UNLIKELY
–
	`do_c›y_wrôe
(
wrôe_poöt
, 
°¨t
, 
bur°
) != 0 )) {

1823 
	`CI_SET_ERROR
(
rc
, 
EFAULT
);

1824 if–
add
 > 0 )

1825 
£¡_out
;

1827 
out
;

1831 
add
 +
bur°
;

1832 
°¨t
 +
bur°
;

1833 
pkt
->
pf
.
pùe
.
∑y_Àn
 +
bur°
;

1834 
	`ci_as£π_ge
(
	`oo_pùe_buf_•a˚
(
pkt
), 0);

1836 
	`LOG_PIPE
("%s:Énd-start=%d burst=%dádd=%d",

1837 
__FUNCTION__
, ()(
íd
 - 
°¨t
), 
bur°
, 
add
);

1840 if–! ( 
íd
 - 
°¨t
 ) )

1846 
out_of_•a˚
:

1848 
rc
 = 
	`oo_pùe_m‹e_buf„rs
(
ni
, 
p
, 0, 
NULL
);

1849 if–
rc
 <= 0 ) {

1850 if–
p
->
bufs_num
 == 0 ) {

1851 
	`LOG_PIPE
("%s: Nÿbuf„r†™d faûedÅÿÆloˇã", 
__FUNCTION__
);

1852 
	`CI_SET_ERROR
(
rc
, 
ENOMEM
);

1853 
out
;

1855 
	`ci_as£π_√quÆ
(
pkt
, 
NULL
);

1856 
p
->
wrôe_±r
.
µ_waô
 = 
pkt
->
√xt
;

1857 if–
p
->
aÊags
 &

1858 (
CI_PFD_AFLAG_NONBLOCK
 << 
CI_PFD_AFLAG_WRITER_SHIFT
) ) {

1861 if–
add
 > 0 )

1862 
£¡_suc˚ss
;

1863 
	`CI_SET_ERROR
(
rc
, 
EAGAIN
);

1864 
out
;

1870 
tŸÆ_byãs
 +
add
;

1871 
	`ci_wmb
();

1872 
p
->
byãs_added
 +
add
;

1873 
add
 = 0;

1875 if–
tŸÆ_byãs
 )

1876 
	`__oo_pùe_wake_≥î
(
ni
, 
p
, 
CI_SB_FLAG_WAKE_RX
);

1877 
rc
 = 
	`oo_pùe_waô_wrôe
(
ni
, 
p
, 0, &
°ack_locked
);

1878 i‡(
rc
 != 0) {

1879 if–
tŸÆ_byãs
 ) {

1881 
£¡_suc˚ss
;

1883 
out
;

1885 if–! 
°ack_locked
 ) {

1886 
rc
 = 
	`ci_√tif_lock
(
ni
);

1887 #ifde‡
__KERNEL__


1888 if–
rc
 < 0 ) {

1889 
	`CI_SET_ERROR
(
rc
, 
ERESTARTSYS
);

1890 
out
;

1893 
°ack_locked
 = 1;

1894 
pkt
 = 
NULL
;

1898 
µ_ªad
 = 
	`OO_ACCESS_ONCE
(
p
->
ªad_±r
.
µ
);

1903 if–
pkt
 !
NULL
 && 
	`oo_pùe_buf_•a˚
(pkt) == 0 &&

1904 
pkt
->
√xt
 =
	`OO_ACCESS_ONCE
(
p
->
ªad_±r
.
µ
) )

1905 
p
->
wrôe_±r
.
µ_waô
 = 
pkt
->
√xt
;

1907 
£¡_suc˚ss
:

1908 
rc
 = 
tŸÆ_byãs
 + 
add
;

1909 
£¡_out
:

1910 if–
	`CI_LIKELY
(
add
 > 0) ) {

1911 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1912 
tŸÆ_byãs
 +
add
;

1913 
	`ci_wmb
();

1914 
p
->
byãs_added
 +
add
;

1915 
	`__oo_pùe_wake_≥î
(
ni
, 
p
, 
CI_SB_FLAG_WAKE_RX
);

1917 
out
:

1918 if–
°ack_locked
 )

1919 
	`ci_√tif_u∆ock
(
ni
);

1920 
	`LOG_PIPE
("%s[%u]: EXITÑëu∫ %d", 
__FUNCTION__
, 
p
->
b
.
bufid
, 
rc
);

1921  
rc
;

1922 
	}
}

1925 #ifde‡
__KERNEL__


1926 
	$oo_pùe_‰ì_bufs
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
)

1928 
oo_pkt_p
 
µ
 = 
	`oo_pùe_buf_li°_°¨t
(&
p
->
pùe_bufs
);

1929 
oo_pkt_p
 
µ_íd
 = 
µ
;

1930 if–! 
	`OO_PP_NOT_NULL
(
µ
) )

1933 
ci_ù_pkt_fmt
* 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

1934 
µ
 = 
	`oo_pùe_√xt_buf
(
p
, 
pkt
);

1935 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pkt
);

1936 }  
µ
 !
µ_íd
 );

1937 
	}
}

1940 
	$oo_pùe_‰ì
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
)

1942 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1944 
	`LOG_PIPE
("%s: fªêpùêwaôabÀ id=%d", 
__FUNCTION__
,

1945 
p
->
b
.
bufid
);

1948 
	`côp_waôabÀ_obj_‰ì
(
ni
, &
p
->
b
);

1949 
	}
}

1952 
	$ci_pùe_Æl_fds_g⁄e
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
, 
do_‰ì
)

1954 
	`ci_as£π
(
p
);

1955 
	`ci_as£π
(
ni
);

1956 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1957 
	`ci_as£π
(
do_‰ì
);

1959 
	`pùe_dump
(
ni
, 
p
);

1961 
	`oo_pùe_‰ì_bufs
(
ni
, 
p
);

1962 
	`oo_pùe_‰ì
(
ni
, 
p
);

1964 
	`LOG_PIPE
("%s: d⁄e", 
__FUNCTION__
);

1965 
	}
}

1969 #i‚de‡
__KERNEL__


1970 
	$ci_pùe_£t_size
(
ci_√tif
* 
ni
, 
oo_pùe
* 
pùe
, 
size_t
 
size
)

1973 
bufs
 = 
	`OO_PIPE_SIZE_TO_BUFS
(
size
) + 1;

1977 
	`CI_BUILD_ASSERT
(
OO_PIPE_MIN_BUFS
 > 1);

1979 if–
bufs
 < 
OO_PIPE_MIN_BUFS
 || buf†> 
OO_PIPE_MAX_BUFS
)

1982 
	`ci_√tif_lock
(
ni
);

1984 
pùe
->
bufs_max
 = 
bufs
;

1988 
	`oo_pùe_ª≠_em±y_buf„rs
(
ni
, 
pùe
, 0, 
NULL
);

1990 
	`ci_√tif_u∆ock
(
ni
);

1993 
	}
}

1998 
	$oo_pùe_dump
(
ci_√tif
* 
ni
, 
oo_pùe
* 
p
, c⁄° * 
pf
,

1999 
oo_dump_log_‚_t
 
loggî
, * 
log_¨g
)

2001 
	`loggî
(
log_¨g
, "%†Ñód_p=%d:%u byãs=%u fœgs=%x", 
pf
,

2002 
	`OO_PP_FMT
(
p
->
ªad_±r
.
µ
),Ö->ªad_±r.
off£t
,Ö->
byãs_ªmoved
,

2003 (
p
->
aÊags
 & 
CI_PFD_AFLAG_READER_MASK
 ) >> 
CI_PFD_AFLAG_READER_SHIFT
);

2004 
	`loggî
(
log_¨g
, "%† wrô_p=%d:%u byãs=%u fœgs=%x", 
pf
,

2005 
	`OO_PP_FMT
(
p
->
wrôe_±r
.
µ
),

2006 
	`OO_PP_NOT_NULL
(
p
->
wrôe_±r
.
µ
) ?

2007 
	`PKT_CHK
(
ni
, 
p
->
wrôe_±r
.
µ
)->
pf
.
pùe
.
∑y_Àn
 : 0,

2008 
p
->
byãs_added
,

2009 (
p
->
aÊags
 & 
CI_PFD_AFLAG_WRITER_MASK
 ) >> 
CI_PFD_AFLAG_WRITER_SHIFT
);

2010 
	`loggî
(
log_¨g
, "%†Çum_bufs=%d/%d", 
pf
, 
p
->
bufs_num
,Ö->
bufs_max
);

2011 
	}
}

	@pkt_filler.c

11 
	~"ù_öã∫Æ.h
"

12 
	~<⁄lﬂd/pkt_fûÀr.h
>

15 
	$oo_pkt_fûÀr_‰ì_unu£d_pkts
(
ci_√tif
* 
ni
, * 
p_√tif_locked
,

16 
oo_pkt_fûÀr
* 
pf
)

18 
ci_ù_pkt_fmt
* 
pkt
;

19 
oo_pkt_p
 
√xt
;

21 if–
pf
->
Æloc_pkt
 =
NULL
 )

24 
√xt
 = 
	`OO_PKT_P
(
pf
->
Æloc_pkt
);

25 
pf
->
Æloc_pkt
 = 
NULL
;

28 
pkt
 = 
	`PKT_CHK_NML
(
ni
, 
√xt
, *
p_√tif_locked
);

29 
√xt
 = 
pkt
->next;

30 if–! (
pkt
->
Êags
 & 
CI_PKT_FLAG_NONB_POOL
) ) {

31 if–*
p_√tif_locked
 || (*p_√tif_locked = 
	`ci_√tif_åylock
(
ni
)) ) {

32 
	`ci_√tif_pkt_ªÀa£_1ªf
(
ni
, 
pkt
);

33 --
ni
->
°©e
->
n_async_pkts
;

42 
pkt
->
ªfcou¡
 = 0;

43 
	`__ci_√tif_pkt_˛ón
(
pkt
);

44 
	`ci_√tif_pkt_‰ì_n⁄b_li°
(
ni
, 
	`OO_PKT_P
(
pkt
),Ökt);

45 }  
	`OO_PP_NOT_NULL
(
√xt
) );

46 
	}
}

49 
ci_ölöe
 
oo_pkt_fûl_c›y
(* 
to
, c⁄° * 
‰om
, 
n_byãs


50 
	$CI_KERNEL_ARG
(
ci_addr_•c_t
 
addr_•c
))

52 #ifde‡
__KERNEL__


53 if–
addr_•c
 !
CI_ADDR_SPC_KERNEL
 )

54  
	`c›y_‰om_u£r
(
to
, 
‰om
, 
n_byãs
);

56 
	`mem˝y
(
to
, 
‰om
, 
n_byãs
);

58 
	}
}

61 
oo_pkt_fûl
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
, * 
p_√tif_locked
,

62 
ˇn_block
,

63 
oo_pkt_fûÀr
* 
pf
, 
ci_iovec_±r
* 
piov
,

64 
byãs_to_c›y
 
	$CI_KERNEL_ARG
(
ci_addr_•c_t
 
addr_•c
))

66 
ci_ù_pkt_fmt
* 
√xt_pkt
;

67 
n
;

68 
rc
;

70 
	`ci_as£π_À
(
byãs_to_c›y
, 
	`ci_iovec_±r_byãs_cou¡
(
piov
));

71 
	`ci_as£π_ge
((Ë(
pf
->
buf_íd
 -Öf->
buf_°¨t
), 0);

72 
	`ci_as£π
(
pf
->
buf_°¨t
 >
	`PKT_START
’f->
œ°_pkt
));

73 
	`ci_as£π
(
pf
->
buf_°¨t
 <pf->
buf_íd
);

75 
	`ci_as£π
(
pf
->
buf_íd
 <
	`CI_PTR_ALIGN_FWD
(
	`PKT_START
’f->
œ°_pkt
),

76 
CI_CFG_PKT_BUF_SIZE
));

79 
n
 = (Ë(
pf
->
buf_íd
 -Öf->
buf_°¨t
);

80 
n
 = 
	`CI_MIN
“, 
	`CI_IOVEC_LEN
(&
piov
->
io
));

81 
n
 = 
	`CI_MIN
“, 
byãs_to_c›y
);

82 if(
	`CI_UNLIKELY
–
	`oo_pkt_fûl_c›y
(
pf
->
buf_°¨t
, 
	`CI_IOVEC_BASE
(&
piov
->
io
),

83 
n
 
	`CI_KERNEL_ARG
(
addr_•c
)) != 0 ))

84  -
EFAULT
;

86 
pf
->
buf_°¨t
 +
n
;

87 
pf
->
pkt
->
∑y_Àn
 +
n
;

88 
	`ci_iovec_±r_adv™˚
(
piov
, 
n
);

90 if–
n
 =
byãs_to_c›y
 )

93 
byãs_to_c›y
 -
n
;

95 if–
pf
->
buf_°¨t
 =pf->
buf_íd
 ) {

100 
	`ci_as£π
(
	`CI_IOVEC_LEN
(&
piov
->
io
Ë> 0 ||Öiov->
iovÀn
 > 0);

102 
pf
->
œ°_pkt
->
buf_Àn
 =

103 
pf
->
buf_°¨t
 - 
	`PKT_START
’f->
œ°_pkt
);

105 
√xt_pkt
 = 
	`oo_pkt_fûÀr_√xt_pkt
(
ni
, 
pf
, *
p_√tif_locked
);

106 if–
√xt_pkt
 =
NULL
 ) {

107 
	`ci_as£π
(
p_√tif_locked
);

108 
rc
 = 
	`ci_√tif_pkt_Æloc_block
(
ni
, 
s
, 
p_√tif_locked
, 
ˇn_block
,

109 &
√xt_pkt
);

110 if–
rc
 != 0 )

111  
rc
;

114 
	`oo_tx_pkt_œyout_öô
(
√xt_pkt
);

115 ++
pf
->
pkt
->
n_buf„rs
;

117 
pf
->
œ°_pkt
->
‰ag_√xt
 = 
	`OO_PKT_P
(
√xt_pkt
);

118 
pf
->
œ°_pkt
 = 
√xt_pkt
;

119 
pf
->
buf_°¨t
 = 
	`PKT_START
(
√xt_pkt
);

121 
pf
->
buf_íd
 = 
	`CI_PTR_ALIGN_FWD
’f->
buf_°¨t
, 
CI_CFG_PKT_BUF_SIZE
);

125 
	`ci_as£π_equÆ
(
	`CI_IOVEC_LEN
(&
piov
->
io
), 0);

126 if–
piov
->
iovÀn
 == 0 )

128 
piov
->
io
 = *piov->
iov
++;

129 --
piov
->
iovÀn
;

132 
pf
->
œ°_pkt
->
buf_Àn
 =Öf->
buf_°¨t
 - 
	`PKT_START
(pf->last_pkt);

134 
	}
}

	@pmtu.c

14 
	~"ù_öã∫Æ.h
"

17 
	#LPF
 "ci_pmtu_"

	)

20 c⁄° 
ci_uöt16
 
	gmtu_∂©óu
[] = 
CI_PMTU_PLATEAU_ENTRIES
;

24 
	$ci_pmtu_°©e_öô
(
ci_√tif
* 
ni
, 
ci_sock_cmn
 *
s
, 
ci_pmtu_°©e_t
* 
pmtus
,

25 
func_code
)

27 
pmtus
->
tid
.
∑øm1
 = 
	`SC_SP
(
s
);

28 
pmtus
->
tid
.
‚
 = (
ci_ùtime_ˇŒback_‚_t
)
func_code
;

30 
	`ci_pmtu_°©e_ªöô
(
ni
, 
s
, 
pmtus
);

31 
	}
}

34 
	$ci_pmtu_°©e_ªöô
(
ci_√tif
* 
ni
, 
ci_sock_cmn
 *
s
, 
ci_pmtu_°©e_t
* 
pmtus
)

36 
oo_p
 
•
;

37 
•
 = 
	`oo_sockp_to_°©ï
(
ni
, 
	`SC_SP
(
s
));

38 
	`OO_P_ADD
(
•
, (*Ë&
pmtus
->
tid
 - (*Ë
s
);

39 
	`ci_ù_timî_öô
(
ni
, &
pmtus
->
tid
, 
•
, "pmtu");

40 
	}
}

47 
	$ci_pmtu_£t
(
ci_√tif
 *
ni
, 
ci_pmtu_°©e_t
 *
pmtus
, 
pmtu
)

49 c⁄° 
ci_uöt16
 
∂©óu
[] = 
CI_PMTU_PLATEAU_ENTRIES
;

50 
id
 = 
CI_PMTU_PLATEAU_ENTRY_MAX
;

51 
	`ci_as£π_ge
(
pmtu
, 
CI_CFG_TCP_MINIMUM_MSS
);

53 
pmtu
 = 
	`CI_MIN
(
CI_PMTU_MAX_MTU
,Ömtu);

54 
id
 && 
pmtu
 < 
∂©óu
[id])

55 
id
--;

57 
pmtus
->
pmtu
 = (
ci_uöt16
)pmtu;

58 
pmtus
->
∂©óu_id
 = (
ci_uöt8
)
id
;

59 
	`LOG_PMTU
(
	`ci_log
("%s:Ñeq_pmtu=%dÖmtu=%d id=%d(%d) max_mtu=%d",

60 
__FUNCTION__
, 
pmtu
, 
pmtus
->pmtu,Ömtus->
∂©óu_id
,

61 
∂©óu
[
pmtus
->
∂©óu_id
], 
CI_PMTU_MAX_MTU
));

62 
	}
}

65 
ci_ölöe
 
	$__ci_pmtu_timeout_h™dÀr
(
ci_√tif
* 
ni
, 
ci_pmtu_°©e_t
 *
pmtus
,

66 
ci_ù_ˇched_hdrs
 *
ùˇche
)

68 
	`ci_as£π_À
(
pmtus
->
pmtu
, 
CI_PMTU_MAX_MTU
);

69 
	`ci_as£π_À
(
ùˇche
->
mtu
, 
CI_PMTU_MAX_MTU
);

72 
pmtus
->
pmtu
 = 
mtu_∂©óu
[++pmtus->
∂©óu_id
];

77 if–
pmtus
->
pmtu
 > 
ùˇche
->
mtu
 ) {

78 
pmtus
->
pmtu
 = 
ùˇche
->
mtu
;

79 
pmtus
->
∂©óu_id
--;

80 
	`CI_PMTU_TIMER_KILL
(
ni
, 
pmtus
);

81 
	`LOG_PMTU
(
	`ci_log
("%s: (TCP)Ñeached interface MTU, killedÅimer, mtu=%d",

82 
__FUNCTION__
, 
pmtus
->
pmtu
));

84 
	`CI_PMTU_TIMER_SET_FAST
(
ni
, 
pmtus
);

85 
	`LOG_PMTU
(
	`ci_log
("%s: (TCP) climbedáÖlateau, set fastÅimer, mtu=%d",

86 
__FUNCTION__
, 
pmtus
->
pmtu
));

88 #unde‡
TRAFFIC_TCP


89 #unde‡
TRAFFIC_UDP


90 
	}
}

95 
	$ci_pmtu_timeout_pmtu
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
 *
ts
)

97 
	`__ci_pmtu_timeout_h™dÀr
(
ni
, &
ts
->
pmtus
, &ts->
s
.
pkt
);

98 
	`ci_t˝_tx_ch™ge_mss
(
ni
, 
ts
);

99 
	}
}

106 
	$ci_pmtu_upd©e_¶ow
(
ci_√tif
* 
ni
, 
ci_pmtu_°©e_t
 *
pmtus
,

107 
ci_ù_ˇched_hdrs
 *
ùˇche
,

108 
pmtu
)

110 
	`ci_as£π_ge
(
pmtu
, 
CI_CFG_TCP_MINIMUM_MSS
);

111 
	`ci_as£π_À
(
pmtu
, 
CI_PMTU_MAX_MTU
);

112 
	`ci_as£π_À
(
pmtu
, 
ùˇche
->
mtu
);

114 
	`CI_PMTU_TIMER_KILL
(
ni
, 
pmtus
);

115 
	`ci_pmtu_£t
(
ni
, 
pmtus
, 
pmtu
);

117 i‡(
pmtus
->
pmtu
 < 
ùˇche
->
mtu
)

118 
	`CI_PMTU_TIMER_SET_SLOW
(
ni
, 
pmtus
);

120 
	`LOG_PMTU
(
	`ci_log
("%s:Çew_pmtu=%dÑeq_pmtu=%d if_mtu=%d", 
__FUNCTION__
,

121 
pmtus
->
pmtu
,Ömtu, 
ùˇche
->
mtu
));

122 
	}
}

129 
	$ci_pmtu_upd©e_Á°
(
ci_√tif
* 
ni
, 
ci_pmtu_°©e_t
 *
pmtus
,

130 
ci_ù_ˇched_hdrs
 *
ùˇche
,

131 
pmtu
)

133 
	`ci_as£π_ge
(
pmtu
, 
CI_CFG_TCP_MINIMUM_MSS
);

134 
	`ci_as£π_À
(
pmtu
, 
CI_PMTU_MAX_MTU
);

135 
	`ci_as£π_À
(
pmtu
, 
ùˇche
->
mtu
);

137 
	`CI_PMTU_TIMER_KILL
(
ni
, 
pmtus
);

138 
	`ci_pmtu_£t
(
ni
, 
pmtus
, 
pmtu
);

140 i‡(
pmtus
->
pmtu
 < 
ùˇche
->
mtu
)

141 
	`CI_PMTU_TIMER_SET_FAST
(
ni
, 
pmtus
);

143 
	`LOG_PMTU
(
	`ci_log
("%s:Çew_pmtu=%dÑeq_pmtu=%d if_mtu=%d", 
__FUNCTION__
,

144 
pmtus
->
pmtu
,Ömtu, 
ùˇche
->
mtu
));

145 
	}
}

	@rwlock.c

2 
	~<⁄lﬂd/ul/rwlock.h
>

5 
	$rwlock_nŸ_ªadög
(
oo_rwlock_≥πhªad
 *
p
)

7 
p
->
√xt
->
¥ev
 =Ö->prev;

8 
p
->
¥ev
->
√xt
 =Ö->next;

9 
p
->
l
->
vÆ
--;

10 
	}
}

14 
	$rwlock_°›_ªad
(
oo_rwlock_≥πhªad
 *
p
)

16 
ci_uöt32
 
Êags
;

17 
locked
 = 0;

20 
Êags
 = 
p
->flags;

21 if–~
Êags
 & 
OO_RWLOCK_KEY_IS_READER
 ) {

22 if–
locked
 )

23 
	`CI_TRY
–
	`±hªad_muãx_u∆ock
(&
p
->
l
->
muãx
) );

26 if–! 
locked
 ) {

27 
	`CI_TRY
–
	`±hªad_muãx_lock
(&
p
->
l
->
muãx
) );

28 
locked
 = 1;

30 }  
	`ci_ˇs32u_Áû
(&
p
->
Êags
, flags,

31 
Êags
 &~ 
OO_RWLOCK_KEY_IS_READER
) );

33 
	`rwlock_nŸ_ªadög
(
p
);

34 if–
p
->
l
->
vÆ
 =
OO_RWLOCK_VAL_WRITER
 )

35 
	`±hªad_c⁄d_brﬂdˇ°
(&
p
->
l
->
c⁄d
);

36 
	`CI_TRY
–
	`±hªad_muãx_u∆ock
(&
p
->
l
->
muãx
) );

37 
	}
}

41 
	$rwlock_≥πhªad_dt‹
(*
d©a
)

43 
oo_rwlock_≥πhªad
 *
p
 = 
d©a
;

45 
	`CI_TRY
(
	`±hªad_£t•ecific
(
p
->
l
->
key
, 
NULL
));

47 if–
p
->
Êags
 & 
OO_RWLOCK_KEY_READING_NOW
 ) {

49 
	`ci_log
("%s:Éxô fromáÅhªad whûêhﬁdögÑódÜock", 
__func__
);

54 if–
p
->
Êags
 & 
OO_RWLOCK_KEY_IS_READER
 )

55 
	`rwlock_°›_ªad
(
p
);

57 
	`‰ì
(
p
);

58 
	}
}

62 
	$rwlock_åy_°¨t_ªad
(
oo_rwlock_≥πhªad
 *
p
)

64 
ci_uöt32
 
Êags
;

66 
	`ci_as£π
(~
p
->
Êags
 & 
OO_RWLOCK_KEY_IS_READER
);

69 if–
p
->
l
->
vÆ
 & 
OO_RWLOCK_VAL_WRITER
 )

73 
Êags
 = 
p
->flags;

75 
	`ci_as£π
–~
Êags
 & 
OO_RWLOCK_KEY_IS_READER
 );

76 
	`ci_as£π
–~
Êags
 & 
OO_RWLOCK_KEY_READING_NOW
 );

77 }  
	`ci_ˇs32u_Áû
(&
p
->
Êags
, flags,

78 
Êags


79 | 
OO_RWLOCK_KEY_IS_READER


80 | 
OO_RWLOCK_KEY_READING_NOW
) );

81 
p
->
l
->
thªad_hód
.
√xt
->
¥ev
 =Ö;

82 
p
->
√xt
 =Ö->
l
->
thªad_hód
.next;

83 
p
->
l
->
thªad_hód
.
√xt
 =Ö;

84 
p
->
¥ev
 = &p->
l
->
thªad_hód
;

86 
p
->
l
->
vÆ
++;

88 
	}
}

92 
	$rwlock_˛ór_ªadîs
(
oo_rwlock
 *
l
)

94 
oo_rwlock_≥πhªad
 *
p
;

95 
ci_uöt32
 
Êags
;

99  
p
 = 
l
->
thªad_hód
.
√xt
;Ö != &l->thread_head;Ö =Ö->next ) {

100 
	`ci_as£π
(
p
->
Êags
 & 
OO_RWLOCK_KEY_IS_READER
 );

102 
Êags
 = 
p
->flags;

103 if–
Êags
 & 
OO_RWLOCK_KEY_READING_NOW
 )

105 }  
	`ci_ˇs32u_Áû
(&
p
->
Êags
, flags,

106 
Êags
 &~ 
OO_RWLOCK_KEY_IS_READER
) );

107 if–~
Êags
 & 
OO_RWLOCK_KEY_READING_NOW
 )

108 
	`rwlock_nŸ_ªadög
(
p
);

113 if–
l
->
vÆ
 =
OO_RWLOCK_VAL_WRITER
 )

114 
	`±hªad_c⁄d_brﬂdˇ°
(&
l
->
c⁄d
);

115 
	}
}

119 
	$rwlock_wrôîs_dec
(
oo_rwlock
 *
l
, 
locked
)

121 
ci_uöt64
 
tmp
;

125 
	`ci_as£π
(
l
->
vÆ
 & 
OO_RWLOCK_VAL_WRITER
);

128 
tmp
 = 
l
->
wrôîs
;

129 if–
tmp
 == 1 ) {

130 if–! 
locked
 )

131 
	`CI_TRY
–
	`±hªad_muãx_lock
(&
l
->
muãx
) );

132 
locked
 = 1;

134 if–
locked
 ) {

135 
	`CI_TRY
–
	`±hªad_muãx_u∆ock
(&
l
->
muãx
) );

136 
locked
 = 0;

138 }  
	`ci_ˇs64u_Áû
(&
l
->
wrôîs
, 
tmp
,Åmp - 1) );

139 
	`ci_as£π_equiv
(
locked
, 
tmp
 == 1);

143 if–!
locked
)

148 
	`ci_as£π
(
l
->
vÆ
 & 
OO_RWLOCK_VAL_WRITER
);

149 
l
->
vÆ
 &=~ 
OO_RWLOCK_VAL_WRITER
;

150 
	`±hªad_c⁄d_brﬂdˇ°
(&
l
->
c⁄d
);

151 
	`CI_TRY
–
	`±hªad_muãx_u∆ock
(&
l
->
muãx
) );

152 
	}
}

	@save_fd.c

14 
	~<⁄lﬂd/ul.h
>

15 
	~<⁄lﬂd/ul/t˝_hñ≥r.h
>

16 
	~<ci/öã∫Æ/ù_log.h
>

17 
	~<ci/öã∫Æ/eÁbcfg.h
>

18 #ifde‡
__löux__


19 
	~<⁄lﬂd/ïﬁl.h
>

25 c⁄° * 
	goo_devi˚_«me
[] =

27 #ifde‡
__sun__


28 "/devi˚s/p£udo/" 
EFAB_DEV_NAME
 "@0:ctl"

30 #ifde‡
__löux__


31 "/dev/" 
EFAB_DEV_NAME
,

32 "/dev/" 
OO_EPOLL_DEV_NAME


36 c⁄° 
	g˛⁄e_io˘l
[
OO_MAX_DEV
] =

38 
OO_IOC_CLONE_FD
,

39 #ifde‡
__löux__


40 
OO_EPOLL_IOC_CLONE
,

47 
	gßved_fd
[
OO_MAX_DEV
];

48 
	gfd_is_ßved
[
OO_MAX_DEV
];

51 
	goo_°_rdev
[
OO_MAX_DEV
];

55 
ci_ölöe
 
	$oo_›í
(
ci_fd_t
* 
out
, 
oo_devi˚_ty≥
 
dev_ty≥
, 
Êags
) {

56 
ci_fd_t
 
Â
 = 
	`ci_sys_›í
(
oo_devi˚_«me
[
dev_ty≥
], 
O_RDWR
 | 
Êags
);

57 if–
Â
 < 0 )  -
î∫o
;

58 *
out
 = 
Â
;

60 
	}
}

63 
	$ef_⁄lﬂd_h™dÀ_move_™d_do_˛€xec
(
ef_drivî_h™dÀ
* 
pfd
, 
do_˛€xec
)

65 
fd
;

67 if–
do_˛€xec
 )

68 
fd
 = 
	`oo_f˙é_dupfd_˛€xec
(*
pfd
, 
CITP_OPTS
.
fd_ba£
);

70 
fd
 = 
	`ci_sys_f˙é
(*
pfd
, 
F_DUPFD
, 
CITP_OPTS
.
fd_ba£
);

75 if–
fd
 >= 0 ) {

76 
	`ci_t˝_hñ≥r_˛o£_no_åampﬁöe
(*
pfd
);

77 *
pfd
 = 
fd
;

81 
	`LOG_NV
(
	`ci_log
("%s: FailedÅo move fd from %d,Ñc %d",

82 
__func__
, *
pfd
, 
fd
));

85  
fd
;

86 
	}
}

88 
	$ef_⁄lﬂd_drivî_›í
(
ef_drivî_h™dÀ
* 
pfd
,

89 
oo_devi˚_ty≥
 
dev_ty≥
,

90 
do_˛€xec
)

92 
rc
;

93 
Êags
 = 0;

94 
ßved_î∫o
 = 
î∫o
;

96 #ifde‡
O_CLOEXEC


97 if–
do_˛€xec
 )

98 
Êags
 = 
O_CLOEXEC
;

101 
	`ci_as£π
(
pfd
);

102 
rc
 = 
	`oo_›í
(
pfd
, 
dev_ty≥
, 
Êags
);

103 if–
rc
 !0 && 
î∫o
 !
EMFILE
 && 
fd_is_ßved
[
dev_ty≥
] >= 0 ) {

104 
ci_˛⁄e_fd_t
 
›
;

105 
›
.
do_˛€xec
 = do_cloexec;

106 
	`LOG_NV
(
	`ci_log
("%s: o≥¿Áûed, buà˛⁄ög from saved fd", 
__func__
));

107 
rc
 = 
	`ci_sys_io˘l
((
ci_fd_t
Ë
ßved_fd
[
dev_ty≥
],

108 
˛⁄e_io˘l
[
dev_ty≥
], &
›
);

109 if–
rc
 < 0 )

110  
rc
;

111 
î∫o
 = 
ßved_î∫o
;

112 *
pfd
 = 
›
.
fd
;

115 if–
rc
 != 0 )

116  
rc
;

129 if–*
pfd
 < 
CITP_OPTS
.
fd_ba£
 )

130 if–
	`ef_⁄lﬂd_h™dÀ_move_™d_do_˛€xec
(
pfd
, 
do_˛€xec
) == 0 )

133 if–
do_˛€xec
 ) {

134 #i‡
	`deföed
(
O_CLOEXEC
)

135 
o_˛€xec_Áûs
 = -1;

136 if–
o_˛€xec_Áûs
 < 0 ) {

137 
¨g
;

138 
rc
 = 
	`ci_sys_f˙é
(*(*)
pfd
, 
F_GETFD
, &
¨g
);

139 if–
rc
 =0 && (
¨g
 & 
FD_CLOEXEC
) )

140 
o_˛€xec_Áûs
 = 0;

142 
o_˛€xec_Áûs
 = 1;

145 c⁄° 
o_˛€xec_Áûs
 = 1;

147 if–
o_˛€xec_Áûs
 )

148 
	`CI_DEBUG_TRY
(
	`ci_sys_f˙é
(*(*)
pfd
, 
F_SETFD
, 
FD_CLOEXEC
));

152 
	}
}

155 #ifde‡
__unix__


156 
	$ef_drivî_ßve_fd
()

158 
rc
 = 0;

159 
ef_drivî_h™dÀ
 
fd
;

160 
oo_devi˚_ty≥
 
dev_ty≥
;

162  
dev_ty≥
 = 0; dev_ty≥ < 
OO_MAX_DEV
; dev_type++ ) {

163 if–! 
fd_is_ßved
[
dev_ty≥
] ) {

164 
rc
 = 
	`ef_⁄lﬂd_drivî_›í
(&
fd
, 
dev_ty≥
, 1);

165 if–
rc
 == 0 ) {

166 
ßved_fd
[
dev_ty≥
] = 
fd
;

167 
fd_is_ßved
[
dev_ty≥
] = 1;

168 
	`LOG_NV
(
	`ci_log
("%s: Saved fd %d %s for cloning",

169 
__func__
, ()
fd
, 
oo_devi˚_«me
[
dev_ty≥
]));

170 if–
oo_°_rdev
[
dev_ty≥
] <= 0 ) {

171 
°©
 
°
;

172 
	`f°©
(
fd
, &
°
);

173 
oo_°_rdev
[
dev_ty≥
] = 
°
.
°_rdev
;

176 
	`ci_log
("%s: failedÅo open %s -Ñc=%d",

177 
__func__
, 
oo_devi˚_«me
[
dev_ty≥
], 
rc
);

181 
	}
}

184 
	$oo_gë_°_rdev
(
oo_devi˚_ty≥
 
dev_ty≥
)

186 if–
oo_°_rdev
[
dev_ty≥
] == 0 ) {

187 
°©
 
°
;

188 if–
	`°©
(
oo_devi˚_«me
[
dev_ty≥
], &
°
) == 0 )

189 
oo_°_rdev
[
dev_ty≥
] = 
°
.
°_rdev
;

191 
	`LOG_NV
(
	`ci_log
("%s: ERROR: stats(%s) failedÉrrno=%d",

192 
__func__
, 
oo_devi˚_«me
[
dev_ty≥
], 
î∫o
));

193 
oo_°_rdev
[
dev_ty≥
] = -1;

196  
oo_°_rdev
[
dev_ty≥
];

197 
	}
}

200 
dev_t
 
	$oo_⁄lﬂdfs_dev_t
()

202 
ci_uöt32
 
⁄lﬂdfs_dev_t
 = 0;

204 if–
⁄lﬂdfs_dev_t
 == 0 ) {

205 
fd
;

206 if–
	`ef_⁄lﬂd_drivî_›í
(&
fd
, 
OO_STACK_DEV
, 1) != 0 ) {

207 
	`Ârötf
(
°dîr
, "%s: FaûedÅÿ›í /dev/⁄lﬂd\n", 
__FUNCTION__
);

210 if–
	`ci_sys_io˘l
(
fd
, 
OO_IOC_GET_ONLOADFS_DEV
, &
⁄lﬂdfs_dev_t
) != 0 ) {

211 
	`LOG_E
(
	`ci_log
("%s: FaûedÅÿföd o∆ﬂdf†dev_t", 
__FUNCTION__
));

213 
	`ci_sys_˛o£
(
fd
);

215  
⁄lﬂdfs_dev_t
;

216 
	}
}

	@signal.c

14 #ifde‡
__unix__


15 
	~"ù_öã∫Æ.h
"

16 
	~<ci/öã∫Æ/ù_sig«l.h
>

17 
	~<ci/öã∫Æ/ù_log.h
>

18 
	~<löux/vîsi⁄.h
>

19 
	~<ci/öã∫Æ/å™•‹t_comm⁄.h
>

20 
	~<ci/öã∫Æ/eÁbcfg.h
>

22 #ifde‡
__KERNEL__


28 
oo_siga˘i⁄
 
	gcôp_sig«l_d©a
[
NSIG
];

40 
	$côp_sig«l_run_≠p_h™dÀr
(
sig
, 
sigöfo_t
 *
öfo
, *
c⁄ãxt
)

42 
oo_siga˘i⁄
 *
p_d©a
 = &
côp_sig«l_d©a
[
sig
-1];

43 
oo_siga˘i⁄
 
a˘
;

44 
ci_öt32
 
ty≥1
, 
ty≥2
;

45 
ªt
;

46 
ß_siga˘i⁄_t
 
h™dÀr
;

49 
ty≥1
 = 
p_d©a
->
ty≥
;

50 
a˘
 = *
p_d©a
;

51 
ty≥2
 = 
p_d©a
->
ty≥
;

52 }  
ty≥1
 !
ty≥2
 ||

53 (
ty≥1
 & 
OO_SIGHANGLER_TYPE_MASK
Ë=
OO_SIGHANGLER_BUSY
 );

64 
ªt
 = 
a˘
.
Êags
 & 
SA_RESTART
;

65 
	`LOG_SIG
(
	`log
("%s: signal %dÅype %dÑun handler %p flags %x",

66 
__FUNCTION__
, 
sig
, 
a˘
.
ty≥
, 
	`CI_USER_PTR_GET
◊˘.
h™dÀr
),

67 
a˘
.
Êags
));

69 
h™dÀr
 = 
	`CI_USER_PTR_GET
(
a˘
.handler);

70 
	`ci_as£π
(
h™dÀr
);

71 
	`ci_as£π_√quÆ
(
h™dÀr
, 
côp_sig«l_öãr˚±
);

72 
	`ci_as£π
(
öfo
);

73 
	`ci_as£π
(
c⁄ãxt
);

75 if–(
a˘
.
ty≥
 & 
OO_SIGHANGLER_TYPE_MASK
Ë!
OO_SIGHANGLER_USER
 ||

76 (
a˘
.
Êags
 & 
SA_SIGINFO
) ) {

77 (*
h™dÀr
)(
sig
, 
öfo
, 
c⁄ãxt
);

79 
__sigh™dÀr_t
 
h™dÀr1
 = (*)
h™dÀr
;

80 (*
h™dÀr1
)(
sig
);

82 
	`LOG_SIG
(
	`log
("%s:Ñëu∫ed from h™dÀ∏f‹ sig«»%d:Ñë=%x", 
__FUNCTION__
,

83 
sig
, 
ªt
));

90 if–(
a˘
.
Êags
 & 
SA_ONESHOT
) &&

91 
a˘
.
ty≥
 =
côp_sig«l_d©a
[
sig
-1].type ) {

92 
siga˘i⁄
 
ß
;

93 
	`mem£t
(&
ß
, 0, (sa));

94 
ß
.
ß_h™dÀr
 = 
SIG_DFL
;

95 
ß
.
ß_Êags
 = 
a˘
.
Êags
;

96 
	`siga˘i⁄
(
sig
, &
ß
, 
NULL
);

97 
	`LOG_SIG
(
	`log
("%s: SA_ONESHOT fixup", 
__func__
));

100  
ªt
;

101 
	}
}

107 
	$côp_sig«l_run_≥ndög
(
côp_sig«l_öfo
 *
our_öfo
)

111 
ﬁd_î∫o
 = 
î∫o
;

112 
i
;

114 
	`LOG_SIG
(
	`log
("%s: sèπ", 
__FUNCTION__
));

115 
	`ci_wmb
();

116 
	`ci_as£π_equÆ
(
our_öfo
->
öside_lib
, 0);

117 
	`ci_as£π
(
our_öfo
->
aÊags
 & 
OO_SIGNAL_FLAG_HAVE_PENDING
);

119 
	`ci_©omic32_™d
(&
our_öfo
->
aÊags
, ~
OO_SIGNAL_FLAG_HAVE_PENDING
);

120  
i
 = 0; i < 
OO_SIGNAL_MAX_PENDING
; i++ ) {

121 
sigöfo_t
 
ßved_öfo
;

122 *
ßved_c⁄ãxt
;

123 
signum
;

125 i‡(
our_öfo
->
sig«ls
[
i
].
signum
 == 0)

128 
ßved_c⁄ãxt
 = 
our_öfo
->
sig«ls
[
i
].saved_context;

129 if–
our_öfo
->
sig«ls
[
i
].
ßved_c⁄ãxt
 )

130 
	`mem˝y
(&
ßved_öfo
, &
our_öfo
->
sig«ls
[
i
].saved_info,

131 (
ßved_öfo
));

132 
signum
 = 
our_öfo
->
sig«ls
[
i
].signum;

133 if–
	`ci_ˇs32_Áû
(&
our_öfo
->
sig«ls
[
i
].
signum
, signum, 0) )

136 if–
	`côp_sig«l_run_≠p_h™dÀr
(

137 
signum
,

138 
ßved_c⁄ãxt
 =
NULL
 ? NULL : &
ßved_öfo
,

139 
ßved_c⁄ãxt
) )

140 
	`ci_©omic32_‹
(&
our_öfo
->
aÊags
, 
OO_SIGNAL_FLAG_NEED_RESTART
);

142 
	`ci_©omic32_™d
(&
our_öfo
->
aÊags
, ~
OO_SIGNAL_FLAG_NEED_RESTART
);

144 
	`LOG_SIG
(
	`log
("%s:Énd", 
__FUNCTION__
));

145 
î∫o
 = 
ﬁd_î∫o
;

146 
	}
}

157 
ci_ölöe
 
	$côp_sig«l_£t_≥ndög
(
signum
, 
sigöfo_t
 *
öfo
,

158 *
c⁄ãxt
,

159 
côp_sig«l_öfo
 *
our_öfo
)

161 
i
;

163 
	`ci_as£π
(
our_öfo
->
öside_lib
);

165  
i
 = 0; i < 
OO_SIGNAL_MAX_PENDING
; i++ ) {

166 if–
our_öfo
->
sig«ls
[
i
].
signum
 )

168 if–
	`ci_ˇs32_Áû
(&
our_öfo
->
sig«ls
[
i
].
signum
, 0, signum) )

170 
	`LOG_SIG
(
	`log
("%s: sig«»%dÖídög", 
__FUNCTION__
, 
signum
));

171 
	`ci_as£π
(
öfo
);

172 
	`ci_as£π
(
c⁄ãxt
);

173 
	`mem˝y
(&
our_öfo
->
sig«ls
[
i
].
ßved_öfo
, 
öfo
, (
sigöfo_t
));

174 
our_öfo
->
sig«ls
[
i
].
ßved_c⁄ãxt
 = 
c⁄ãxt
;

179 if–
côp_sig«l_d©a
[
signum
-1].
Êags
 & 
SA_ONESHOT
 )

180 
	`siga˘i⁄
(
signum
, 
NULL
, NULL);

182 
	`ci_©omic32_‹
(&
our_öfo
->
aÊags
, 
OO_SIGNAL_FLAG_HAVE_PENDING
);

186 
	`log
("%s:Çÿem±y slŸÅÿ£à≥ndög sig«»%d", 
__FUNCTION__
, 
signum
);

187 
	}
}

195 
ci_ölöe
 
	$côp_sig«l_run_now
(
signum
, 
sigöfo_t
 *
öfo
,

196 *
c⁄ãxt
,

197 
côp_sig«l_öfo
 *
our_öfo
)

199 
√ed_ª°¨t
;

201 
	`LOG_SIG
(
	`log
("%s: SIGNAL %d -Ñu¿immedüãly", 
__FUNCTION__
, 
signum
));

205 i‡(
our_öfo
 && (our_öfo->
aÊags
 & 
OO_SIGNAL_FLAG_HAVE_PENDING
))

206 
	`côp_sig«l_run_≥ndög
(
our_öfo
);

208 
√ed_ª°¨t
 = 
	`côp_sig«l_run_≠p_h™dÀr
(
signum
, 
öfo
, 
c⁄ãxt
);

213 i‡(
our_öfo
) {

214 
	`LOG_SIG
(
	`log
("%s: SIGNAL %d - sëÇìdÑe°¨àÊagÅÿ%d", 
__FUNCTION__
,

215 
signum
, 
√ed_ª°¨t
));

216 if–
√ed_ª°¨t
 )

217 
	`ci_©omic32_‹
(&
our_öfo
->
aÊags
, 
OO_SIGNAL_FLAG_NEED_RESTART
);

219 
	`ci_©omic32_™d
(&
our_öfo
->
aÊags
, ~
OO_SIGNAL_FLAG_NEED_RESTART
);

221 
	}
}

228 
	$côp_sig«l_öãr˚±
(
signum
, 
sigöfo_t
 *
öfo
, *
c⁄ãxt
)

230 
côp_sig«l_öfo
 *
our_öfo
 = 
	`côp_sig«l_gë_•ecific_öôed
();

231 
	`LOG_SIG
(
	`log
("%s(%d, %p, %p)", 
__func__
, 
signum
, 
öfo
, 
c⁄ãxt
));

239 i‡(
our_öfo
 && our_öfo->
öside_lib
 &&

240 (
CITP_OPTS
.
sig«ls_no_po°p⁄e
 & (1 << (
signum
-1))) == 0)

241 
	`côp_sig«l_£t_≥ndög
(
signum
, 
öfo
, 
c⁄ãxt
, 
our_öfo
);

243 
	`côp_sig«l_run_now
(
signum
, 
öfo
, 
c⁄ãxt
, 
our_öfo
);

244 
	}
}

248 
	$côp_sig«l_ãrmö©e
(
signum
, 
sigöfo_t
 *
öfo
, *
c⁄ãxt
)

250 
fd
;

251 
rc
;

254 
rc
 = 
	`ef_⁄lﬂd_drivî_›í
(&
fd
, 
OO_STACK_DEV
, 1);

259 if–
rc
 == 0 )

260 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_DIE_SIGNAL
, &
signum
);

262 
	`_exô
(128 + 
signum
);

263 
	}
}

266 *
	gcôp_sig«l_ßª°‹î
;

267 
	gcôp_sig«l_ßª°‹î_öôed
 = 0;

269 #i‚de‡
SA_RESTORER


271 
	#SA_RESTORER
 0x04000000

	)

274 *
	$côp_sig«l_ßª°‹î_gë
()

276 
sig
 = 
SIGINT
;

277 
siga˘i⁄
 
a˘
;

278 
rc
;

280 if–
côp_sig«l_ßª°‹î_öôed
 )

281  
côp_sig«l_ßª°‹î
;

283 
	`LOG_SIG
(
	`log
("%s: citp_signal_intercept=%p",

284 
__func__
, 
côp_sig«l_öãr˚±
));

285 
	`LOG_SIG
(
	`log
("%s: côp_sig«l_ãrmö©e=%p", 
__func__
,

286 
côp_sig«l_ãrmö©e
));

287  
sig
 = 1; sig < 
_NSIG
; sig++ ) {

288 
	`LOG_SIG
(
	`log
("föd sa_ª°‹î vü sig«»%d", 
sig
));

290 
rc
 = 
	`siga˘i⁄
(
sig
, 
NULL
, &
a˘
);

291 if–
rc
 != 0 )

293 if–
a˘
.
ß_ª°‹î
 !
NULL
 && (a˘.
ß_Êags
 & 
SA_SIGINFO
) ) {

294 
côp_sig«l_ßª°‹î
 = 
a˘
.
ß_ª°‹î
;

295 
	`LOG_SIG
(
	`ci_log
("%s: inôüŒy côp_sig«l_ßª°‹î=%p", 
__func__
,

296 
côp_sig«l_ßª°‹î
));

297 
côp_sig«l_ßª°‹î_öôed
 = 1;

298  
côp_sig«l_ßª°‹î
;

302 if–
a˘
.
ß_h™dÀr
 !
SIG_IGN
 &&á˘.ß_h™dÀ∏!
SIG_DFL
 )

305 
	`LOG_SIG
(
	`ci_log
("%s:Ç⁄-sigöfÿß_ª°‹î=%p", 
__func__
,

306 
a˘
.
ß_ª°‹î
));

308 
a˘
.
ß_Êags
 |
SA_SIGINFO
;

309 
rc
 = 
	`siga˘i⁄
(
sig
, &
a˘
, 
NULL
);

310 if–
rc
 != 0 )

313 
rc
 = 
	`siga˘i⁄
(
sig
, 
NULL
, &
a˘
);

314 if–
rc
 == 0 ) {

315 
côp_sig«l_ßª°‹î_öôed
 = 1;

316 
	`LOG_SIG
(
	`ci_log
("%s: set/get flags %x citp_signal_sarestorer=%p",

317 
__func__
, 
a˘
.
ß_Êags
,á˘.
ß_ª°‹î
));

318 if–!(
a˘
.
ß_Êags
 & 
SA_RESTORER
) )

319  
NULL
;

320 
côp_sig«l_ßª°‹î
 = 
a˘
.
ß_ª°‹î
;

321  
côp_sig«l_ßª°‹î
;

325  
NULL
;

326 
	}
}

329 
ß_siga˘i⁄_t
 
	gcôp_sig«l_h™dÀrs
[
OO_SIGHANGLER_DFL_MAX
+1] = {

330 
côp_sig«l_ãrmö©e
 ,

331 
NULL
, NULL

336 
	$oo_•ölo›_run_≥ndög_sigs
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
,

337 
côp_sig«l_öfo
* 
si
, 
have_timeout
)

339 
öside_lib
;

340 if–
have_timeout
 )

341  -
EINTR
;

342 if–
w
 )

343 
	`ci_sock_u∆ock
(
ni
, 
w
);

344 
öside_lib
 = 
si
->inside_lib;

345 
si
->
öside_lib
 = 0;

346 
	`ci_compûî_b¨rõr
();

347 
	`côp_sig«l_run_≥ndög
(
si
);

348 
si
->
öside_lib
 = inside_lib;

349 
	`ci_compûî_b¨rõr
();

350 if–
w
 )

351 
	`ci_sock_lock
(
ni
, 
w
);

352 if–~
si
->
aÊags
 & 
OO_SIGNAL_FLAG_NEED_RESTART
 )

354  -
EINTR
;

356 
	}
}

	@sockerr.c

14 
	~"ù_öã∫Æ.h
"

19 
	$ci_îrq_udp_dump
–
ci_udp_°©e
* 
us
 )

21 
˘r
;

22 
	`ci_log
–"Dum∞o‡îrqÉ¡rõ†°‹ed i¿UDP sèã %p", 
us
 );

23 
	`ci_log
–"Rd:%d Wr:%d En:%d OÊ:%u (Fl:%d Emp:%d)", 
us
->
îrq
.
rd
, us->îrq.
wr
,

24 
us
->
îrq
.
íabÀd
, us->îrq.
oÊow
,

25 
	`CI_UDP_ERRQ_IS_FULL
–&
us
->
îrq
 ),

26 
	`CI_UDP_ERRQ_IS_EMPTY
–&
us
->
îrq
 ));

27  
˘r
 = 0; cå < 
CI_ERRQ_UDP_ERR_MAX
; ctr++ ) {

28 
	`ci_log
("%02u: Rdy:%u %s%s", 
˘r
, 
us
->
îrq
.
îr
[˘r].
ªady
,

29 
˘r
 =
us
->
îrq
.
rd
 ? "R" : "", cå =us->îrq.
wr
 ? "W" : "" );

30 if–
us
->
îrq
.
îr
[
˘r
].
ªady
 ) {

31 
	`ci_log
(" Err:%u Org:%u Typ:%u Cod:%u",

32 
us
->
îrq
.
îr
[
˘r
].
£e
.îr, us->îrq.îr[˘r].£e.
‹igö
,

33 
us
->
îrq
.
îr
[
˘r
].
£e
.
ty≥
, us->îrq.îr[˘r].£e.
code
 );

34 
	`ci_log
(" Pad:%u Inf:%u Dat:%u",

35 
us
->
îrq
.
îr
[
˘r
].
£e
.
∑d
, us->îrq.îr[˘r].£e.
öfo
,

36 
us
->
îrq
.
îr
[
˘r
].
£e
.
d©a
 );

37 
	`ci_log
(" sa: %x:%u",

38 
us
->
îrq
.
îr
[
˘r
].
£e
.
ß_addr
,

39 
us
->
îrq
.
îr
[
˘r
].
£e
.
ß_p‹t
);

42 
	}
}

44 
	$ci_îrq_t˝_dump
–
ci_t˝_°©e
* 
ts
 )

46 
˘r
;

47 
	`ci_log
–"Dum∞o‡îrqÉ¡rõ†°‹ed i¿TCP sèã %p", 
ts
 );

48 
	`ci_log
–"Rd:%d Wr:%d OÊ:%u (Fl:%d Emp:%d)", 
ts
->
îrq
.
rd
,Ås->îrq.
wr
,

49 
ts
->
îrq
.
oÊow
, 
	`CI_TCP_ERRQ_IS_FULL
( &ts->errq ),

50 
	`CI_TCP_ERRQ_IS_EMPTY
–&
ts
->
îrq
 ));

51  
˘r
 = 0; cå < 
CI_ERRQ_TCP_ERR_MAX
; ctr++ ) {

52 
	`ci_log
("%02u: Rdy:%u %s%s", 
˘r
, 
ts
->
îrq
.
îr
[˘r].
ªady
,

53 
˘r
 =
ts
->
îrq
.
rd
 ? "R" : "", cå =ts->îrq.
wr
 ? "W" : "" );

54 if–
ts
->
îrq
.
îr
[
˘r
].
ªady
 ) {

55 
	`ci_log
(" Seq:%u Org:%u Err:%u",

56 
ts
->
îrq
.
îr
[
˘r
].
£q_be32
,Ås->îrq.îr[˘r].
‹igö
,

57 
ts
->
îrq
.
îr
[
˘r
].err );

60 
	}
}

62 
	$ci_îrq_dump
–
ci_udp_°©e
* 
us
 ) {

63 
	`ci_as£π
–
us
 );

64 
	`LOG_IPP
–
	`ci_îrq_t˝_dump
–
us
 );

65 
	`ci_îrq_udp_dump
–
us
 ) );

66 
	}
}

	@socket.c

13 
	~"ù_öã∫Æ.h
"

16 
	$ci_sock_cmn_ªöô
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
)

18 
s
->
so_îr‹
 = 0;

20 #i‡
	`deföed
(
__löux__
Ë|| deföed(
_WIN32
)

21 
s
->
tx_î∫o
 = 
EPIPE
;

22 #ñi‡
	`deföed
(
__sun__
)

23 
s
->
tx_î∫o
 = 
ENOTCONN
;

28 
s
->
rx_î∫o
 = 
ENOTCONN
;

29 
s
->
pkt
.
ëhî_ty≥
 = 
CI_ETHERTYPE_IP
;

30 
	`ci_ù_ˇche_öô
(&
s
->
pkt
);

32 
s
->
s_Êags
 &~(
CI_SOCK_FLAG_FILTER
 | 
CI_SOCK_FLAG_MAC_FILTER
);

33 
	}
}

36 #ifde‡
_WIN32


37 
	$ci_sock_cmn_öô_wö32
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
)

39 
ödex
;

40 
ödex
 = 0; index < 
CI_SOCK_NUM_EVENT_TRIGGERS
; index++)

41 
	`oo_©omic_£t
(&
s
->
åiggî_¨med_mask
[
ödex
], 
CI_EV_NONE
);

42 
s
->
ev£l_mask
 = 
CI_EV_NONE
;

43 
s
->
ev£l_¨med_mask
 = 
CI_EV_NONE
;

44 
s
->
ev£l_dißbÀd_mask
 = 
CI_EV_NONE
;

45 
s
->
os_ªgi°îed
 = 
CI_OS_NOT_REGISTERED
;

46 
	}
}

50 
	$oo_sock_˝œ√_öô
(
oo_sock_˝œ√
* 
˝
)

52 
˝
->
ù_œddr_be32
 = 0;

53 
˝
->
Õ‹t_be16
 = 0;

54 
˝
->
so_bödtodevi˚
 = 
CI_IFID_BAD
;

55 
˝
->
ù_mu…iˇ°_if
 = 
CI_IFID_BAD
;

56 
˝
->
ù_mu…iˇ°_if_œddr_be32
 = 0;

57 
˝
->
ù_âl
 = 
CI_IP_DFLT_TTL
;

58 
˝
->
ù_mˇ°_âl
 = 1;

59 
˝
->
sock_˝_Êags
 = 0;

60 
	}
}

63 
	$ci_sock_cmn_öô
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
, 
ˇn_pois⁄
)

65 
oo_p
 
•
;

68 
	`CI_DEBUG
(

69 if–
ˇn_pois⁄
 )

70 
	`mem£t
(&
s
->
b
 + 1, 0xf0, (*) (s + 1) - (*) (&s->b + 1));

73 
	`côp_waôabÀ_ªöô
(
ni
, &
s
->
b
);

74 
	`oo_sock_˝œ√_öô
(&
s
->
˝
);

76 
s
->
s_Êags
 = 
CI_SOCK_FLAG_CONNECT_MUST_BIND
 | 
CI_SOCK_FLAG_PMTU_DO
;

77 
s
->
s_aÊags
 = 0u;

79 
	`ci_as£π_equÆ
–0, 
CI_IP_DFLT_TOS
 );

80 
s
->
so_¥i‹ôy
 = 0;

85 
	`mem£t
(&
s
->
so
, 0, (s->so));

86 
s
->
so
.
¢dbuf
 = 
	`NI_OPTS
(
ni
).
t˝_¢dbuf_def
;

87 
s
->
so
.
rcvbuf
 = 
	`NI_OPTS
(
ni
).
t˝_rcvbuf_def
;

89 
s
->
rx_böd2dev_ifödex
 = 
CI_IFID_BAD
;

94 
s
->
rx_böd2dev_ba£_ifödex
 = 0;

95 
s
->
rx_böd2dev_vœn
 = 0;

97 
s
->
cmsg_Êags
 = 0u;

98 
s
->
time°ampög_Êags
 = 0u;

99 
s
->
os_sock_°©us
 = 
OO_OS_STATUS_TX
;

101 #ifde‡
_WIN32


102 
	`ci_sock_cmn_öô_wö32
(
ni
, 
s
);

105 
	`ci_sock_cmn_ªöô
(
ni
, 
s
);

107 
•
 = 
	`oo_sockp_to_°©ï
(
ni
, 
	`SC_SP
(
s
));

108 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
ci_sock_cmn
, 
ª≠_lök
));

109 
	`ci_ni_dŒi°_lök_öô
(
ni
, &
s
->
ª≠_lök
, 
•
, "reap");

110 
	`ci_ni_dŒi°_£lf_lök
(
ni
, &
s
->
ª≠_lök
);

113 
	`sock_œddr_be32
(
s
Ë
	`sock_øddr_be32
(s) = 0;

114 
	`sock_Õ‹t_be16
(
s
Ë
	`sock_Ω‹t_be16
(s) = 0;

115 
	}
}

118 #ifde‡
_WIN32


119 
	$ci_sock_cmn_dump_wö32
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
,

120 c⁄° * 
pf
,

121 
oo_dump_log_‚_t
 
loggî
, * 
log_¨g
)

123 
tmp
;

124 
i
;

126 
tmp
 = 
	`ci_sock_cmn_gë_cuºít_evít_mask
(
ni
, 
s
);

127 
	`loggî
(
log_¨g
, "%†Évíts:á˘ive="
CI_EVMASK_FMT
, 
pf
,

128 
	`CI_EVMASK_PRI_ARG
(
tmp
));

129 
i
 = 0; i < 
CI_SOCK_NUM_EVENT_TRIGGERS
; i++) {

130 
tmp
 = 
	`oo_©omic_ªad
(&
s
->
åiggî_¨med_mask
[
i
]);

131 i‡(
tmp
Ë
	`loggî
(
log_¨g
, "%†Årg[%d]="
CI_EVMASK_FMT
, 
pf
, 
i
,

132 
	`CI_EVMASK_PRI_ARG
(
tmp
));

134 
tmp
 = 
s
->
ev£l_mask
;

135 i‡(
tmp
)

136 
	`loggî
(
log_¨g
, "%†Évsmsk="
CI_EVMASK_FMT
,

137 
pf
, 
	`CI_EVMASK_PRI_ARG
(
tmp
));

138 
tmp
 = 
s
->
ev£l_¨med_mask
;

139 i‡(
tmp
)

140 
	`loggî
(
log_¨g
, "%†ármmsk="
CI_EVMASK_FMT
,

141 
pf
, 
	`CI_EVMASK_PRI_ARG
(
tmp
));

142 
tmp
 = 
s
->
ev£l_dißbÀd_mask
;

143 i‡(
tmp
)

144 
	`loggî
(
log_¨g
, "%† dismsk="
CI_EVMASK_FMT
,

145 
pf
, 
	`CI_EVMASK_PRI_ARG
(
tmp
));

146 
	}
}

150 
	$ci_sock_cmn_dump
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
, c⁄° * 
pf
,

151 
oo_dump_log_‚_t
 
loggî
, * 
log_¨g
)

153 #ifde‡
_WIN32


154 
	`ci_sock_cmn_dump_wö32
(
ni
, 
s
, 
pf
, 
loggî
, 
log_¨g
);

156 
	`loggî
(
log_¨g
, "%† uid=%d"
	`CI_DEBUG
("Öid=%d")

157 " s_Êags: "
CI_SOCK_FLAGS_FMT
, 
pf
,

158 (Ë
s
->
uid
 
	`CI_DEBUG_ARG
(()s->
pid
),

159 
	`CI_SOCK_FLAGS_PRI_ARG
(
s
));

160 
	`loggî
(
log_¨g
, "%†Ñcvbuf=%d sndbuf=%d bödtodev=%d(%d,%d:%dËâl=%d", 
pf
,

161 
s
->
so
.
rcvbuf
, s->so.
¢dbuf
, s->
˝
.
so_bödtodevi˚
,

162 
s
->
rx_böd2dev_ifödex
, s->
rx_böd2dev_ba£_ifödex
,

163 
s
->
rx_böd2dev_vœn
, s->
˝
.
ù_âl
);

164 
	`loggî
(
log_¨g
, "%sÑcvtimeo_ms=%d sndtimeo_ms=%d sigown=%d "

165 "cmsg="
OO_CMSG_FLAGS_FMT
"%s",

166 
pf
, 
s
->
so
.
rcvtimeo_m£c
, s->so.
¢dtimeo_m£c
, s->
b
.
sigown
,

167 
	`OO_CMSG_FLAGS_PRI_ARG
(
s
->
cmsg_Êags
),

168 (
s
->
˝
.
sock_˝_Êags
 & 
OO_SCP_NO_MULTICAST
) ? " NO_MCAST_TX":"");

169 
	`loggî
(
log_¨g
, "%†Ñx_î∫o=%xÅx_î∫o=%x so_îr‹=%d os_sock=%u%s%s", 
pf
,

170 
s
->
rx_î∫o
, s->
tx_î∫o
, s->
so_îr‹
,

171 
s
->
os_sock_°©us
 >> 
OO_OS_STATUS_SEQ_SHIFT
,

172 (
s
->
os_sock_°©us
 & 
OO_OS_STATUS_RX
) ? ",RX":"",

173 (
s
->
os_sock_°©us
 & 
OO_OS_STATUS_TX
) ? ",TX":"");

175 if–
s
->
b
.
ªady_li°_id
 > 0 )

176 
	`loggî
(
log_¨g
, "%sÉpoll3:Ñeady_list_id %dÉpoll_pid %d",

177 
pf
, 
s
->
b
.
ªady_li°_id
, s->b.
eôem_pid
);

179 
	`loggî
(
log_¨g
, "%†Épﬁl3:Ñódy_li°_id %d", 
pf
, 
s
->
b
.
ªady_li°_id
);

180 
	}
}

	@syscall.c

16 
	#_GNU_SOURCE


	)

17 #i‡
deföed
 
__unix__


18 
	~<aio.h
>

21 
	~<ci/toﬁs.h
>

22 
	~<ci/öã∫Æ/å™•‹t_c⁄fig_›t.h
>

26 #i‡
deföed
(
__unix__
)

27 
	~<⁄lﬂd/sysˇŒ_unix.h
>

29 
	#CI_MK_DECL
(
ªt
, 
‚
, 
¨gs
Ë
	`ªt
 (*
ci_sys_
##‚Ë¨g†
	)
fn

30 
	~<⁄lﬂd/de˛¨e_sysˇŒs.h.tm∂
>

	@tcp_close.c

15 
	~"ù_öã∫Æ.h
"

16 #i‡
deföed
(
__löux__
Ë&& deföed(
__KERNEL__
)

17 
	~<⁄lﬂd/löux_⁄lﬂd.h
>

19 
	~<⁄lﬂd/¶ìp.h
>

20 
	~<⁄lﬂd/tm∂.h
>

22 
	#LPF
 "t˝_˛o£: "

	)

27 
	$__ci_t˝_li°í_to_n‹mÆ
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
)

29 
côp_waôabÀ_obj
* 
wo
 = 
	`SOCK_TO_WAITABLE_OBJ
(&
és
->
s
);

31 
	`ci_as£π
(
és
->
n_li°íq
 == 0);

32 
	`ci_as£π_equÆ
(
	`ci_t˝_ac˚±q_n
(
és
), 0);

33 
	`ci_as£π_equÆ
(
	`ci_t˝_ac˚±q_nŸ_em±y
(
és
), 0);

35 if–~
és
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_BOUND_ALIEN
 )

36 
	`ci_ù_timî_˛ór
(
√tif
, &
és
->
li°íq_tid
);

37 
	`ci_ni_dŒi°_ªmove_ß„
(
√tif
, &
és
->
s
.
b
.
po°_pﬁl_lök
);

38 
	`ci_t˝_°©e_ªöô
(
√tif
, &
wo
->
t˝
);

39 
	}
}

42 
	$ci_t˝_add_fö
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
)

44 
ci_ù_pkt_queue
* 
£ndq
 = &
ts
->
£nd
;

45 
ci_ù_pkt_fmt
* 
pkt
;

46 
ci_t˝_hdr
 *
t˝_hdr
;

48 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

50 
	`LOG_TC
(
	`log
(
FNTS_FMT
 "£ndq_num=%d c‹k=%d", 
	`FNTS_PRI_ARGS
(
√tif
, 
ts
),

51 
£ndq
->
num
, !!(
ts
->
s
.
s_aÊags
 & 
CI_SOCK_AFLAG_CORK
)));

53 if–
£ndq
->
num
 ) {

55 
pkt
 = 
	`PKT_CHK
(
√tif
, 
£ndq
->
èû
);

56 
t˝_hdr
 = 
	`TX_PKT_TCP
(
pkt
);

57 
t˝_hdr
->
t˝_Êags
 |
CI_TCP_FLAG_FIN
;

58 
	`t˝_íq_nxt
(
ts
) += 1;

59 
pkt
->
pf
.
t˝_tx
.
íd_£q
 = 
	`t˝_íq_nxt
(
ts
);

60 if–
	`SEQ_LE
(
pkt
->
pf
.
t˝_tx
.
íd_£q
, 
ts
->
¢d_max
) )

64 
	`ci_t˝_tx_adv™˚
(
ts
, 
√tif
);

68 #ifde‡
__KERNEL__


75 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
√tif
);

78 
is_locked
 = 1;

79 
rc
 = 
	`ci_√tif_pkt_Æloc_block
(
√tif
, &
ts
->
s
, &
is_locked
,

80 
CI_TRUE
 , &
pkt
);

82 ()
rc
;

83 
	`ci_as£π_equÆ
(
rc
, 0);

84 --
√tif
->
°©e
->
n_async_pkts
;

85 i‡(
is_locked
 == 0)

86 
	`ci_√tif_lock
(
√tif
);

87 
	`ci_as£π
(
pkt
 !
NULL
);

91 if–
pkt
 )

92 
	`ci_t˝_íqueue_no_d©a
(
ts
, 
√tif
, 
pkt
);

94 
	`LOG_U
(
	`log
(
LNTS_FMT
 "%s: out ofÖkt bufs",

95 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
), 
__FUNCTION__
));

96  
ENOBUFS
;

99 
	}
}

102 
	$__ci_t˝_shutdown
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
, 
how
)

104 
rc
;

113 
	`ci_as£π
(
√tif
);

114 
	`ci_as£π
(
ts
);

115 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

117 #i‡
CI_CFG_PIO


119 if–
how
 =
SHUT_WR
 || how =
SHUT_RDWR
 )

120 
	`ci_t˝_tm∂_‰ì_Æl
(
√tif
, 
ts
);

126 if–
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_NOT_CONNECTED
 ) {

127  
ts
->
s
.
b
.
°©e
 ) {

128 
CI_TCP_SYN_SENT
:

129 
	`ci_t˝_dr›
(
√tif
, 
ts
, 
ECONNRESET
);

130 
ts
->
s
.
rx_î∫o
 = 
ENOTCONN
;

133 
CI_TCP_CLOSING
:

134 
CI_TCP_LAST_ACK
:

139  -
ENOTCONN
;

144 if–
how
 =
SHUT_RD
 ) {

145 
ts
->
s
.
rx_î∫o
 = 
CI_SHUT_RD
;

146 
	`ci_t˝_wake_nŸ_ö_pﬁl
(
√tif
, 
ts
, 
CI_SB_FLAG_WAKE_RX
);

152 if–
ts
->
s
.
tx_î∫o
 != 0 ) {

153 if–
how
 =
SHUT_RDWR
 ) {

154 
ts
->
s
.
rx_î∫o
 = 
CI_SHUT_RD
;

155 
	`ci_t˝_wake_nŸ_ö_pﬁl
(
√tif
, 
ts
, 
CI_SB_FLAG_WAKE_RX
);

163 
	`ci_t˝_£t_Êags
(
ts
, 
CI_TCP_FLAG_FIN
 | 
CI_TCP_FLAG_ACK
);

164 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSE_WAIT
 )

165 
	`ci_t˝_£t_¶ow_°©e
(
√tif
, 
ts
, 
CI_TCP_LAST_ACK
);

167 
	`ci_t˝_£t_¶ow_°©e
(
√tif
, 
ts
, 
CI_TCP_FIN_WAIT1
);

169 #i‡
CI_CFG_FD_CACHING


170 if–
ts
->
s
.
b
.
sb_aÊags
 & (
CI_SB_AFLAG_ORPHAN
 | 
CI_SB_AFLAG_IN_CACHE
) )

172 if–
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
 )

174 
	`ci_√tif_fö_timeout_íãr
(
√tif
, 
ts
);

176 if–
how
 =
SHUT_RDWR
 )

177 
ts
->
s
.
rx_î∫o
 = 
CI_SHUT_RD
;

178 
ts
->
s
.
tx_î∫o
 = 
EPIPE
;

181 if–(
rc
 = 
	`ci_t˝_add_fö
(
ts
, 
√tif
)) != 0 ) {

182 
	`LOG_E
(
	`ci_log
("%s: faûedÅÿíqueuêFIN,Éº‹ %d", 
__FUNCTION__
, 
rc
));

192 
	`ci_t˝_dr›
(
√tif
, 
ts
, 0);

193 
	`CITP_STATS_NETIF_INC
(
√tif
, 
t˝_dr›_ˇ¡_fö
);

196 
	`ci_t˝_wake_nŸ_ö_pﬁl
(
√tif
, 
ts
,

197 
CI_SB_FLAG_WAKE_TX
 |

198 (
how
 =
SHUT_RDWR
 ? 
CI_SB_FLAG_WAKE_RX
 : 0));

200 
	}
}

203 #i‡
CI_CFG_FD_CACHING


204 #ifde‡
__KERNEL__


205 
	~<⁄lﬂd/löux_⁄lﬂd_öã∫Æ.h
>

209 
	$unˇche_fd
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

211 
fd
 = 
ts
->
ˇched_⁄_fd
;

212 
pid
 = 
ts
->
ˇched_⁄_pid
;

213 
	`LOG_EP
(
	`ci_log
("Unˇchög fd %d o¿pid %dÑu¬ögÖid %d:%s", 
fd
,

214 
pid
, 
cuºít
->
tgid
, cuºít->
comm
));

216 
	`ci_as£π
(
cuºít
);

217 if–!(
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_IN_CACHE_NO_FD
) &&

218 (~
cuºít
->
Êags
 & 
PF_EXITING
) ) {

231 
fûe
* 
fûp
;

233 if–
cuºít
->
fûes
 !
NULL
 ) {

234 if–
pid
 !
cuºít
->
tgid
 ) {

235 
	`NI_LOG
(
ni
, 
RESOURCE_WARNINGS
,

236 "%s:Öid mism©ch: cached_⁄_pid=%d cuºít=%d:%s", 
__func__
,

237 
pid
, 
cuºít
->
tgid
, cuºít->
comm
);

239 if–(
fûp
 = 
	`fgë
(
fd
)Ë=
NULL
 ) {

240 
	`NI_LOG
(
ni
, 
RESOURCE_WARNINGS
,

242 
__func__
, 
fd
, 
pid
);

244 if–
fûp
->
f_›
 !&
löux_t˝_hñ≥r_f›s_t˝
 ) {

245 
	`NI_LOG
(
ni
, 
RESOURCE_WARNINGS
,

247 
__func__
, 
fd
, 
pid
);

248 
	`Âut
(
fûp
);

251 
	`Âut
(
fûp
);

252 
	`eÁb_löux_sys_˛o£
(
fd
);

257 
	`ci_log
("%s: called from workqueue - cannot close file descriptor %d.",

258 
__func__
, 
fd
);

259 
	`ci_as£π
(0);

262 
	}
}

264 
ci_ölöe
 
	$˛ór_ˇched_°©e
(
ci_t˝_°©e
 *
ts
)

266 
	`ci_©omic32_™d
(&
ts
->
s
.
b
.
sb_aÊags
,

267 ~(
CI_SB_AFLAG_IN_CACHE
|
CI_SB_AFLAG_IN_PASSIVE_CACHE
));

268 
ts
->
ˇched_⁄_fd
 = -1;

269 
ts
->
ˇched_⁄_pid
 = -1;

270 
	}
}

288 
	$unˇche_ï
(
ci_√tif
 *
√tif
, 
ci_t˝_sockë_li°í
* 
és
,

289 
ci_t˝_°©e
 *
ts
)

291 
	`LOG_EP
(
	`ci_log
("UnˇchögÉ∞%d", 
	`S_FMT
(
ts
)));

292 
	`ci_as£π
–
	`ci_t˝_is_ˇched
(
ts
) );

294 
	`ci_ni_dŒi°_lök_as£π_vÆid
(
√tif
, &
ts
->
ïˇche_lök
);

295 
	`ci_ni_dŒi°_ªmove_ß„
(
√tif
, &
ts
->
ïˇche_lök
);

305 i‡(
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSED
)

306 
	`ci_t˝_ï_˛ór_fûãrs
(
√tif
, 
	`S_SP
(
ts
), 0);

311 i‡–
	`ci_t˝_is_timeout_‹ph™
(
ts
) )

312 
	`ci_√tif_timeout_ªmove
(
√tif
, 
ts
);

314 
	`˛ór_ˇched_°©e
(
ts
);

325 if–
	`ci_bô_ã°_™d_£t
(&
ts
->
s
.
b
.
sb_aÊags
, 
CI_SB_AFLAG_IN_CACHE_NO_FD_BIT
) )

326 
	`eÁb_t˝_hñ≥r_˛o£_ídpoöt
(
	`√tif2t˝_hñ≥r_ªsour˚
(
√tif
), 
	`S_SP
(
ts
));

328 if–
és
 ) {

329 
	`ci_©omic32_öc
((vﬁ©ûê
ci_uöt32
*)

330 
	`CI_NETIF_PTR
(
√tif
, 
és
->
ïˇche
.
avaû_°ack
));

331 
	`ci_©omic32_öc
(&
és
->
ˇche_avaû_sock
);

333 
	`ci_as£π_À
(
√tif
->
°©e
->
∑ssive_ˇche_avaû_°ack
,

334 
√tif
->
°©e
->
›ts
.
sock_ˇche_max
);

335 
	`ci_as£π_À
(
és
->
ˇche_avaû_sock
,

336 
√tif
->
°©e
->
›ts
.
≥r_sock_ˇche_max
);

339 
ci_√tif_°©e
* 
ns
 = 
√tif
->
°©e
;

340 
	`ci_©omic32_öc
(&
ns
->
a˘ive_ˇche_avaû_°ack
);

341 
	`ci_as£π_À
(
ns
->
a˘ive_ˇche_avaû_°ack
,Çs->
›ts
.
sock_ˇche_max
);

343 
	}
}

351 
	$unˇche_ï_li°
(
ci_√tif
 *
√tif
, 
ci_t˝_sockë_li°í
* 
és
,

352 
ci_ni_dŒi°_t
 *
thñi°
)

354 
ci_ni_dŒi°_lök
* 
l
 = 
	`ci_ni_dŒi°_°¨t
(
√tif
, 
thñi°
);

355 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

356  
l
 !
	`ci_ni_dŒi°_íd
(
√tif
, 
thñi°
) ) {

357 
ci_t˝_°©e
* 
ˇched_°©e
 = 
	`CI_CONTAINER
(ci_t˝_°©e, 
ïˇche_lök
, 
l
);

358 
	`ci_ni_dŒi°_ôî
(
√tif
, 
l
);

359 
	`ci_as£π
(
ˇched_°©e
);

360 
	`ci_as£π
(
	`ci_t˝_is_ˇched
(
ˇched_°©e
));

361 
	`ci_ni_dŒi°_lök_as£π_vÆid
(
√tif
, &
ˇched_°©e
->
ïˇche_lök
);

362 
	`unˇche_ï
(
√tif
, 
és
, 
ˇched_°©e
);

364 
	}
}

374 
	$ci_t˝_li°í_unˇche_fds
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
)

376 
ci_ni_dŒi°_lök
* 
l
 = 
	`ci_ni_dŒi°_c⁄cuºít_°¨t
(
√tif
,

377 &
és
->
ïˇche
.
fd_°©es
);

378  
l
 !
	`ci_ni_dŒi°_íd
(
√tif
, &
és
->
ïˇche
.
fd_°©es
) ) {

379 
ci_t˝_°©e
* 
ˇched_°©e
 = 
	`CI_CONTAINER
(ci_t˝_°©e, 
ïˇche_fd_lök
, 
l
);

380 
	`ci_ni_dŒi°_ôî
(
√tif
, 
l
);

389 
	`ci_as£π
(
ˇched_°©e
);

390 
	`ci_as£π
(
	`ci_t˝_is_ˇched
(
ˇched_°©e
));

391 
	`unˇche_fd
(
√tif
, 
ˇched_°©e
);

393 
	}
}

397 
	$ci_t˝_ïˇche_dr›_ˇche
(
ci_√tif
* 
ni
)

399 
id
;

400 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

401  
id
 = 0; id < 
ni
->
°©e
->
n_ï_bufs
; ++id ) {

402 
côp_waôabÀ_obj
* 
wo
 = 
	`ID_TO_WAITABLE_OBJ
(
ni
, 
id
);

403 if–
wo
->
waôabÀ
.
°©e
 =
CI_TCP_LISTEN
 ) {

404 
côp_waôabÀ
* 
w
 = &
wo
->
waôabÀ
;

405 
ci_sock_cmn
* 
s
 = 
	`CI_CONTAINER
(ci_sock_cmn, 
b
, 
w
);

406 
ci_t˝_sockë_li°í
* 
és
 = 
	`SOCK_TO_TCP_LISTEN
(
s
);

407 
	`ci_t˝_li°í_unˇche_fds
(
ni
, 
és
);

408 
	`unˇche_ï_li°
(
ni
, 
és
, &és->
ïˇche
.
≥ndög
);

409 
	`unˇche_ï_li°
(
ni
, 
és
, &és->
ïˇche
.
ˇche
);

412 
	}
}

415 
	$ci_t˝_a˘ive_ˇche_dr›_ˇche
(
ci_√tif
* 
ni
)

417 
ci_√tif_°©e
* 
ns
 = 
ni
->
°©e
;

418 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

419 
	`unˇche_ï_li°
(
ni
, 
NULL
, &
ns
->
a˘ive_ˇche
.
≥ndög
);

420 
	`unˇche_ï_li°
(
ni
, 
NULL
, &
ns
->
a˘ive_ˇche
.
ˇche
);

421 
	}
}

427 #i‡
CI_CFG_FD_CACHING
 || 
deföed
(
__KERNEL__
)

429 #i‚de‡
__KERNEL__


434 
	$ci_t˝_lögî
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

442 
ci_uöt64
 
¶ìp_£q
;

443 
rc
 = 0;

444 
ci_uöt32
 
timeout
 = 
ts
->
s
.
so
.
lögî
 * 1000;

445 
Êags
 = 
CI_SLEEP_NETIF_LOCKED
;

447 
	`LOG_TC
(
	`log
("%s: "
NTS_FMT
, 
__FUNCTION__
, 
	`NTS_PRI_ARGS
(
ni
, 
ts
)));

449 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

450 #i‚de‡
__KERNEL__


451 
	`ci_as£π
(
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_IN_CACHE
);

453 
	`ci_as£π
(
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_LINGER
);

454 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 !
CI_TCP_LISTEN
);

457 
¶ìp_£q
 = 
ts
->
s
.
b
.¶ìp_£q.
Æl
;

458 
	`ci_rmb
();

459 if–
	`SEQ_EQ
(
	`t˝_íq_nxt
(
ts
), 
	`t˝_¢d_u«
(ts)) ) {

462 
rc
 = 
	`ci_sock_¶ìp
(
ni
, &
ts
->
s
.
b
, 
CI_SB_FLAG_WAKE_TX
, 
Êags
,

463 
¶ìp_£q
, &
timeout
);

464 
Êags
 = 0;

465 if–
rc
 )

468 if–
Êags
 )

469 
	`ci_√tif_u∆ock
(
ni
);

470 
	}
}

472 #i‡
deföed
(
__KERNEL__
)

475 
	$ci_t˝_˛o£
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

477 
	`ci_as£π
(
√tif
);

478 
	`ci_as£π
(
ts
);

479 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

480 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 !
CI_TCP_LISTEN
);

482 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSED
 ) {

483 
	`LOG_TV
(
	`ci_log
(
LPF
 "%d CLOSEáÃódy clo£d", 
	`S_FMT
(
ts
)));

485 
	`ci_t˝_ï_˛ór_fûãrs
(
√tif
, 
	`S_SP
(
ts
), 0);

486 if–
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
 )

487 
	`ci_t˝_°©e_‰ì
(
√tif
, 
ts
);

491 if–(
ts
->
s
.
b
.
sb_Êags
 & 
CI_SB_FLAG_MOVED
) )

492 
dr›
;

494 if–
	`t˝_rcv_u§
(
ts
) != 0 ) {

498 
	`CI_TCP_EXT_STATS_INC_TCP_ABORT_ON_CLOSE
(
√tif
);

499 
	`LOG_TV
(
	`log
(
LPF
 "%d CLOSE sent RST,ásÑx dataÖresentádded %u "

500 "dñivîed %uÅ˝_rcv_u§=%u", 
	`S_FMT
(
ts
),Ås->
rcv_added
,

501 
ts
->
rcv_dñivîed
, 
	`t˝_rcv_u§
(ts)));

502 
	`ci_t˝_£nd_r°
(
√tif
, 
ts
);

503 
dr›
;

505 if–
ts
->
¢d_dñeg©ed
 != 0 ) {

506 
	`CI_TCP_EXT_STATS_INC_TCP_ABORT_ON_DELEGATED_SEND
(
√tif
);

507 
	`ci_t˝_£nd_r°
(
√tif
, 
ts
);

508 
dr›
;

510 if–(
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_LINGER
Ë&&Ås->s.
so
.
lögî
 == 0 ) {

514 
	`CI_TCP_EXT_STATS_INC_TCP_ABORT_ON_DATA
(
√tif
);

515 if–! (
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_NOT_CONNECTED
) ) {

516 
	`LOG_TV
(
	`log
(
LPF
 "%d ABORT síàª£t", 
	`S_FMT
(
ts
)));

517 
	`ci_t˝_£nd_r°
(
√tif
, 
ts
);

519 
dr›
;

522 if–(
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
) ||

523 (
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSING
) ||

524 (
ts
->
s
.
b
.
°©e
 =
CI_TCP_LAST_ACK
) )

527 if–! (
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_NOT_CONNECTED
) ) {

528 
rc
;

530 if–
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_TCP_IN_ACCEPTQ
 ) {

531 
	`ci_t˝_£nd_r°
(
√tif
, 
ts
);

532 
	`ci_t˝_ï_˛ór_fûãrs
(
√tif
, 
	`S_SP
(
ts
), 0);

533 
	`ci_t˝_°©e_‰ì
(
√tif
, 
ts
);

537 
rc
 = 
	`__ci_t˝_shutdown
(
√tif
, 
ts
, 
SHUT_RDWR
);

539 if–(
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
) &&

540 
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSED
 ) {

541 
	`ci_t˝_°©e_‰ì
(
√tif
, 
ts
);

543 #i‚de‡
__KERNEL__


546 if–(
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_IN_CACHE
) &&

547 (
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_LINGER
) &&

548 ! 
	`SEQ_EQ
(
	`t˝_íq_nxt
(
ts
), 
	`t˝_¢d_u«
(ts))

550 
	`ci_as£π
(
ts
->
s
.
so
.
lögî
 != 0);

551 
	`ci_t˝_lögî
(
√tif
, 
ts
);

552 
	`ci_√tif_lock
(
√tif
);

555  
rc
;

558 
dr›
:

559 
	`LOG_TC
(
	`log
(
LPF
 "%d dr› c⁄√˘i⁄ i¿%†°©e", 
	`S_FMT
(
ts
),

560 
	`ci_t˝_°©e_°r
(
ts
->
s
.
b
.
°©e
)));

564 
	`ci_bô_˛ór
(&
ts
->
s
.
b
.
sb_aÊags
, 
CI_SB_AFLAG_TCP_IN_ACCEPTQ_BIT
);

565 
	`ci_t˝_dr›
(
√tif
, 
ts
, 
ECONNRESET
);

567 
	}
}

571 #ifde‡
__KERNEL__


572 
	$ci_t˝_li°í_shutdown_queues
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
)

574 
syƒecvs
;

578 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

581 
	`LOG_TV
(
	`ci_log
("%s: %d cÀ¨ ouàsyƒecv queue", 
__FUNCTION__
,

582 
	`S_FMT
(
és
)));

583 if–
és
->
n_li°íq
 != 0 &&

584 (~
és
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_BOUND_ALIEN
) )

585 
	`ci_ù_timî_˛ór
(
√tif
, &
és
->
li°íq_tid
);

586 
syƒecvs
 = 
	`ci_t˝_li°íq_dr›_Æl
(
√tif
, 
és
);

587 
	`ci_as£π_equÆ
(
és
->
n_li°íq
, 
syƒecvs
);

588 
	`ci_as£π_À
(
és
->
n_li°íq_√w
, 
syƒecvs
);

589 
és
->
n_li°íq
 -
syƒecvs
;

590 
és
->
n_li°íq_√w
 = 0;

596 
	`LOG_TV
(
	`log
("%s: %d cÀ¨ ouàac˚± queuê(%dÉ¡rõs)", 
__FUNCTION__
,

597 
	`S_FMT
(
és
), 
	`ci_t˝_ac˚±q_n
(tls)));

599  
	`ci_t˝_ac˚±q_nŸ_em±y
(
és
) ) {

600 
côp_waôabÀ
* 
w
;

601 
ci_t˝_°©e
* 
©s
;

602 
t˝_hñ≥r_ªsour˚_t
 *
thr
 = 
NULL
;

604 
w
 = 
	`ci_t˝_ac˚±q_gë
(
√tif
, 
és
);

606 if–
w
->
sb_aÊags
 & 
CI_SB_AFLAG_MOVED_AWAY
 ) {

607 
oo_•
 
•
;

608 
ci_uöt32
 
°ack_id
;

609 
ci_√tif
 *
™i
;

611 #ifde‡
NDEBUG


612 if–
	`ö_öãºu±
() ) {

613 
	`LOG_U
(
	`log
("%s: invÆidác˚±q membî", 
__FUNCTION__
));

614 
	`côp_waôabÀ_obj_‰ì
(
√tif
, 
w
);

618 
	`ci_as£π
(!
	`ö_öãºu±
());

621 
•
 = 
w
->
moved_to_sock_id
;

622 
°ack_id
 = 
w
->
moved_to_°ack_id
;

623 
	`côp_waôabÀ_obj_‰ì
(
√tif
, 
w
);

626 
	`LOG_TV
(
	`log
("%s:álõ¿sockë %d:%d i¿ac˚± queuê%d:%d", 
__FUNCTION__
,

627 
°ack_id
, 
	`OO_SP_FMT
(
•
), 
	`NI_ID
(
√tif
), 
	`S_FMT
(
és
)));

629 if–
	`eÁb_thr_èbÀ_lookup
(
NULL
, 
°ack_id
,

630 
EFAB_THR_TABLE_LOOKUP_CHECK_USER
,

631 &
thr
) != 0 ) {

632 
	`LOG_U
(
	`log
("%s:Üistening socket %d:%d can't find "

633 "ac˚±q memebî %d:%d", 
__FUNCTION__
,

634 
√tif
->
°©e
->
°ack_id
, 
és
->
s
.
b
.
bufid
, sèck_id, 
•
));

637 
™i
 = &
thr
->
√tif
;

639 if–!(
	`SP_TO_WAITABLE
(
™i
, 
•
)->
°©e
 & 
CI_TCP_STATE_TCP
) ||

640 
	`SP_TO_WAITABLE
(
™i
, 
•
)->
°©e
 =
CI_TCP_LISTEN
 ) {

641 
	`LOG_U
(
	`log
("%s:Üistening socket %d:%d hasÇon-TCP "

642 "ac˚±q memebî %d:%d", 
__FUNCTION__
,

643 
√tif
->
°©e
->
°ack_id
, 
és
->
s
.
b
.
bufid
, sèck_id, 
•
));

646 
©s
 = 
	`SP_TO_TCP
(
™i
, 
•
);

650 
	`ci_bô_˛ór
(&
©s
->
s
.
b
.
sb_aÊags
, 
CI_SB_AFLAG_ORPHAN_BIT
);

651 
	`eÁb_t˝_hñ≥r_˛o£_ídpoöt
(
thr
, 
•
);

652 
	`eÁb_thr_ªÀa£
(
thr
);

656 
©s
 = &
	`CI_CONTAINER
(
côp_waôabÀ_obj
, 
waôabÀ
, 
w
)->
t˝
;

658 
	`ci_as£π
(
	`ci_t˝_is_ˇched
(
©s
) ||

659 (
©s
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
));

660 
	`ci_as£π
(
©s
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_TCP_IN_ACCEPTQ
);

662 #i‡
CI_CFG_FD_CACHING


666 if–!
	`ci_t˝_is_ˇched
(
©s
) )

669 
	`ci_bô_˛ór
(&
©s
->
s
.
b
.
sb_aÊags
, 
CI_SB_AFLAG_TCP_IN_ACCEPTQ_BIT
);

671 if–
©s
->
s
.
b
.
°©e
 !
CI_TCP_CLOSED
 &&

672 
©s
->
s
.
b
.
°©e
 !
CI_TCP_TIME_WAIT
 ) {

673 
	`LOG_TV
(
	`log
("%s: sídÑe£àtÿac˚±ed c⁄√˘i⁄", 
__FUNCTION__
));

674 
	`ci_t˝_£nd_r°
(
√tif
, 
©s
);

677 
	`ci_t˝_dr›
(
√tif
, 
©s
, 
ECONNRESET
);

679 #i‡
CI_CFG_FD_CACHING


680 if–
	`ci_t˝_is_ˇched
(
©s
) ) {

681 
	`LOG_EP
(
	`ci_log
 ("listen_shutdown - uncache fromácceptq"));

682 
	`unˇche_ï
(
√tif
, 
és
, 
©s
);

685 
	`ci_bô_˛ór
(&
©s
->
s
.
b
.
sb_aÊags
, 
CI_SB_AFLAG_TCP_IN_ACCEPTQ_BIT
);

690 
	`ci_as£π_equÆ
(
	`ci_t˝_ac˚±q_n
(
és
), 0);

692 #i‡
CI_CFG_FD_CACHING


698 
	`LOG_EP
(
	`ci_log
("listen_shutdown - uncacheáll on cacheÜist"));

699 
	`unˇche_ï_li°
(
√tif
, 
és
, &és->
ïˇche
.
ˇche
);

700 
	`LOG_EP
(
	`ci_log
("listen_shutdown - uncacheáll onÖendingÜist"));

701 
	`unˇche_ï_li°
(
√tif
, 
és
, &és->
ïˇche
.
≥ndög
);

703 
	}
}

705 #i‡
CI_CFG_FD_CACHING


706 
	$ci_t˝_li°í_upd©e_ˇched
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
)

708 
t˝_hñ≥r_ídpoöt_t
 * 
ˇched_ï
;

709 
ci_ni_dŒi°_lök
 *
l
;

710 
ci_t˝_°©e
 *
ˇched_°©e
;

719  (
l
 = 
	`ci_ni_dŒi°_åy_p›
(
√tif
, &
és
->
ïˇche_c⁄√˘ed
)) ) {

720 
ˇched_°©e
 = 
	`CI_CONTAINER
(
ci_t˝_°©e
, 
ïˇche_lök
, 
l
);

721 
	`ci_ni_dŒi°_£lf_lök
(
√tif
, &
ˇched_°©e
->
ïˇche_lök
);

723 
ˇched_ï
 = 
	`ci_√tif_ï_gë
(
√tif
, 
ˇched_°©e
->
s
.
b
.
bufid
);

724 
	`t˝_hñ≥r_ídpoöt_upd©e_fûãr_dëaûs
(
ˇched_ï
);

726 
	`ci_as£π
(
	`ci_ni_dŒi°_is_vÆid
(
√tif
, &
és
->
ïˇche_c⁄√˘ed
.
l
));

727 
	`ci_as£π
(
	`ci_ni_dŒi°_is_em±y
(
√tif
, &
és
->
ïˇche_c⁄√˘ed
));

732 
l
 = 
	`ci_ni_dŒi°_°¨t
(
√tif
, &
és
->
ïˇche
.
≥ndög
);

733  
l
 !
	`ci_ni_dŒi°_íd
(
√tif
, &
és
->
ïˇche
.
≥ndög
) ) {

734 
ˇched_°©e
 = 
	`CI_CONTAINER
(
ci_t˝_°©e
, 
ïˇche_lök
, 
l
);

735 
ˇched_ï
 = 
	`ci_√tif_ï_gë
(
√tif
, 
ˇched_°©e
->
s
.
b
.
bufid
);

737 
	`t˝_hñ≥r_ídpoöt_upd©e_fûãr_dëaûs
(
ˇched_ï
);

738 
	`ci_ni_dŒi°_ôî
(
√tif
, 
l
);

740 
	`ci_as£π
(
	`ci_ni_dŒi°_is_vÆid
(
√tif
, &
és
->
ïˇche
.
≥ndög
.
l
));

741 
	}
}

747 
	$__ci_t˝_li°í_shutdown
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
,

748 
ci_fd_t
 
fd
)

750 
rc
;

752 
	`ci_as£π
(
√tif
);

753 
	`ci_as£π
(
és
);

754 
	`ci_as£π
(
és
->
s
.
b
.
°©e
 =
CI_TCP_LISTEN
);

756 
	`ci_as£π
(
	`ci_sock_is_locked
(
√tif
, &
és
->
s
.
b
) ||

757 (
és
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
));

759 
	`LOG_TV
(
	`ci_log
("%s: S_FMT=%d", 
__FUNCTION__
, 
	`S_FMT
(
és
)));

761 #i‚de‡
__unix__


763 
	`ci_t˝_ï_˛ór_fûãrs
(
√tif
, 
	`S_SP
(
és
));

764 
és
->
s
.
s_Êags
 &~(
CI_SOCK_FLAG_BOUND
 | 
CI_SOCK_FLAG_ADDR_BOUND
);

768 if–! (
és
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_PORT_BOUND
) )

769 
és
->
s
.
s_Êags
 &~
CI_SOCK_FLAG_BOUND
;

771 #ifde‡
__KERNEL__


772 
rc
 = 
	`t˝_hñ≥r_ídpoöt_shutdown
(
	`√tif2t˝_hñ≥r_ªsour˚
(
√tif
),

773 
	`S_SP
(
és
), 
SHUT_RDWR
, 
CI_TCP_LISTEN
);

774 if–
rc
 =-
EINVAL
 )

779 
rc
 = 0;

781 
rc
 = 
	`ci_t˝_hñ≥r_ídpoöt_shutdown
(
fd
, 
SHUT_RDWR
, 
CI_TCP_LISTEN
);

783 if–
rc
 < 0 )

784 
	`LOG_E
(
	`ci_log
("%s: [%d:%d] shutdown(os_sock) failed %d",

785 
__FUNCTION__
, 
	`NI_ID
(
√tif
), 
	`S_FMT
(
és
), 
rc
));

787 
	}
}

790 
	$ci_t˝_Æl_fds_g⁄e_comm⁄
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

799 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

800 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_TCP
);

803 if–(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_TIMEOUT_ORPHAN
) &&

804 !(
ts
->
s
.
b
.
sb_Êags
 & 
CI_SB_FLAG_MOVED
) )

805 
	`ci_√tif_fö_timeout_íãr
(
ni
, 
ts
);

808 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_KALIVE
 ) {

809 
ts
->
s
.
s_Êags
 &=~ 
CI_SOCK_FLAG_KALIVE
;

810 
	`ci_t˝_kÆive_check_™d_˛ór
(
ni
, 
ts
);

811 
ts
->
ka_¥obes
 = 0;

813 
	}
}

815 #ifde‡
__KERNEL__


816 
	$ci_t˝_li°í_Æl_fds_g⁄e
(
ci_√tif
* 
ni
, 
ci_t˝_sockë_li°í
* 
és
,

817 
do_‰ì
)

826 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

827 
	`ci_as£π_equÆ
(
és
->
s
.
b
.
°©e
, 
CI_TCP_LISTEN
);

829 
	`__ci_t˝_li°í_shutdown
(
ni
, 
és
, 
NULL
);

830 
	`__ci_t˝_li°í_to_n‹mÆ
(
ni
, 
és
);

831 if–
do_‰ì
 )

832 
	`côp_waôabÀ_obj_‰ì
(
ni
, &
és
->
s
.
b
);

833 
	}
}

836 
	$ci_t˝_Æl_fds_g⁄e
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
, 
do_‰ì
)

838 
	`ci_t˝_Æl_fds_g⁄e_comm⁄
(
ni
, 
ts
);

841 if–
do_‰ì
 )

842 
	`ci_t˝_˛o£
(
ni
, 
ts
);

843 
	}
}

	@tcp_connect.c

16 
	~"ù_öã∫Æ.h
"

17 
	~<⁄lﬂd/comm⁄.h
>

18 
	~<⁄lﬂd/¶ìp.h
>

20 #ifde‡
ONLOAD_OFE


21 
	~"o„/⁄lﬂd.h
"

24 #i‚de‡
__KERNEL__


25 
	~<ci/öã∫Æ/eÁbcfg.h
>

28 
	#VERB
(
x
)

	)

30 
	#LPF
 "t˝_c⁄√˘: "

	)

32 #i‚de‡
__KERNEL__


36 
	$ci_t˝_vÆid©e_ß
–
ß_Ámûy_t
 
domaö
,

37 c⁄° 
sockaddr
* 
ß
, 
sockÀn_t
 
ß_Àn
 )

39 #ifde‡
__löux__


45 if–!
ß
 ) {

46 
	`LOG_U
(
	`ci_log
(
LPF
 "invalid sockaddr : sa = %lx, sa_len = %d",

47 (Ë
ß
, 
ß_Àn
));

48 if–
ß_Àn
 == 0 )

49 
	`RET_WITH_ERRNO
–
EINVAL
 );

51 
	`RET_WITH_ERRNO
–
EFAULT
 );

58 if–!
ß
 ) {

59 
	`LOG_U
(
	`ci_log
(
LPF
 "övÆid sockadd∏: s®%p, sa_À¿%d", 
ß
, 
ß_Àn
));

60 
	`RET_WITH_ERRNO
–
EDESTADDRREQ
 );

64 if–
ß_Àn
 < (
sockaddr_ö
)

65 #i‡
CI_CFG_FAKE_IPV6


66 || (
domaö
 =
AF_INET6
 && 
ß_Àn
 < 
SIN6_LEN_RFC2133
)

69 
	`LOG_U
–
	`ci_log
(
LPF
 "structÅoo shortÅo be sockaddr_in(6)" ));

70 
	`RET_WITH_ERRNO
–
EINVAL
 );

75 i‡(
	`CI_SIN
(
ß
)->
sö_Ámûy
 !
domaö
 &&

76 
	`CI_SIN
(
ß
)->
sö_Ámûy
 !
AF_UNSPEC
) {

77 
	`LOG_U
(
	`ci_log
(
LPF
 "address family %d doesÇot match "

78 "wôh sockë domaö %d", 
	`CI_SIN
(
ß
)->
sö_Ámûy
, 
domaö
));

79 
	`RET_WITH_ERRNO
(
EAFNOSUPPORT
);

82 #i‡
CI_CFG_FAKE_IPV6


83 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
 && !
	`ci_t˝_ùv6_is_ùv4
(sa)) {

84 
	`LOG_TC
(
	`ci_log
(
LPF
 "Pure IPv6áddress isÇot supported"));

85 
	`RET_WITH_ERRNO
(
EAFNOSUPPORT
);

89 
	}
}

96 
ölöe
 
	$ci_t˝_böd_Êags_as£π_vÆid
(
ci_sock_cmn
* 
s
)

98 if–
s
->
s_Êags
 & 
CI_SOCK_FLAG_DEFERRED_BIND
 ) {

100 
	`ci_as£π
–
s
->
s_Êags
 & 
CI_SOCK_FLAG_CONNECT_MUST_BIND
 );

105 
	`ci_as£π
–
s
->
s_Êags
 & ~
CI_SOCK_FLAG_PORT_BOUND
 );

107 
	}
}

120 
	$__ci_t˝_böd
(
ci_√tif
 *
ni
, 
ci_sock_cmn
 *
s
, 
ci_fd_t
 
fd
,

121 
ci_uöt32
 
ù_addr_be32
, 
ci_uöt16
* 
p‹t_be16
, 
may_de„r
)

123 
rc
 = 0;

124 
ci_uöt16
 
u£r_p‹t
;

126 
ci_sockaddr_u
 
ß_u
;

128 
	`ci_as£π
(
s
->
domaö
 =
AF_INET
 || s->domaö =
AF_INET6
);

129 
	`ci_as£π
–
p‹t_be16
 );

130 
	`ci_as£π
(
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
 ||

131 
s
->
b
.
°©e
 =
CI_TCP_STATE_ACTIVE_WILD
);

132 
	`ci_t˝_böd_Êags_as£π_vÆid
(
s
);

134 
u£r_p‹t
 = *
p‹t_be16
;

136 if–!(
s
->
s_Êags
 & 
CI_SOCK_FLAG_TPROXY
) ) {

138 if–!
may_de„r
 || !
	`NI_OPTS
(
ni
).
t˝_sh¨ed_loˇl_p‹ts
 || 
u£r_p‹t
 != 0 ) {

139 #i‡
CI_CFG_FAKE_IPV6


140 
	`ci_as£π
(
s
->
domaö
 =
AF_INET
 || s->domaö =
AF_INET6
);

141 if–
s
->
domaö
 =
AF_INET
 )

142 
	`ci_make_sockaddr
(&
ß_u
.
sö
, 
s
->
domaö
, 
u£r_p‹t
, 
ù_addr_be32
);

144 
	`ci_make_sockaddr6
(&
ß_u
.
sö6
, 
s
->
domaö
, 
u£r_p‹t
, 
ù_addr_be32
);

146 
	`ci_as£π
(
s
->
domaö
 =
AF_INET
);

147 
	`ci_make_sockaddr
(&
ß_u
.
sö
, 
s
->
domaö
, 
u£r_p‹t
, 
ù_addr_be32
);

150 #ifde‡
__ci_drivî__


151 
rc
 = 
	`eÁb_t˝_hñ≥r_böd_os_sock_kî√l
(
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
),

152 
	`SC_SP
(
s
), &
ß_u
.
ß
,

153 (
ß_u
), 
p‹t_be16
);

155 
rc
 = 
	`ci_t˝_hñ≥r_böd_os_sock
(
fd
, &
ß_u
.
ß
, (ß_u), 
p‹t_be16
);

157 if–
rc
 == 0 )

158 
s
->
s_Êags
 &~(
CI_SOCK_FLAG_CONNECT_MUST_BIND
 |

159 
CI_SOCK_FLAG_DEFERRED_BIND
);

164 if–
s
->
s_Êags
 & 
CI_SOCK_FLAG_DEFERRED_BIND
 ||

165 ! (
s
->
s_Êags
 & 
CI_SOCK_FLAG_CONNECT_MUST_BIND
) ) {

167 
	`CI_SET_ERROR
(
rc
, 
EINVAL
);

175 
ci_t˝_°©e
* 
c
 = &
	`SOCK_TO_WAITABLE_OBJ
(
s
)->
t˝
;

176 
	`ci_as£π_equÆ
(
s
->
b
.
°©e
, 
CI_TCP_CLOSED
);

177 
	`ci_as£π
(~
c
->
t˝Êags
 & 
CI_TCPT_FLAG_WAS_ESTAB
);

178 (Ë
c
;

180 
s
->
s_Êags
 |
CI_SOCK_FLAG_DEFERRED_BIND
;

181 
rc
 = 0;

188 
	`ci_as£π_nÊags
(
s
->
s_Êags
, 
CI_SOCK_FLAG_DEFERRED_BIND
);

189 
s
->
s_Êags
 &~
CI_SOCK_FLAG_CONNECT_MUST_BIND
;

194 if–
rc
 != 0 )

195  
rc
;

196 if–
u£r_p‹t
 != 0 )

197 
s
->
s_Êags
 |
CI_SOCK_FLAG_PORT_BOUND
;

198 if–
ù_addr_be32
 !
INADDR_ANY
 )

199 
s
->
s_Êags
 |
CI_SOCK_FLAG_ADDR_BOUND
;

201 #i‚de‡
__ci_drivî__


203 if–! (
s
->
s_Êags
 & 
CI_SOCK_FLAG_TPROXY
Ë&& 
ù_addr_be32
 !
INADDR_ANY
 &&

204 ! 
	`ci˝_u£r_addr_is_loˇl_eÁb
(
	`CICP_HANDLE
(
ni
), &
ù_addr_be32
) )

205 
s
->
s_Êags
 |
CI_SOCK_FLAG_BOUND_ALIEN
;

208 
	`ci_t˝_böd_Êags_as£π_vÆid
(
s
);

209  
rc
;

210 
	}
}

213 
oo_•
 
	$ci_t˝_c⁄√˘_föd_loˇl_≥î
(
ci_√tif
 *
ni
,

214 
ci_ù_addr_t
 
d°_be32
, 
dp‹t_be16
)

216 
i
;

218  
i
 = 0; i < ()
ni
->
°©e
->
n_ï_bufs
; ++i ) {

219 
côp_waôabÀ_obj
* 
wo
 = 
	`ID_TO_WAITABLE_OBJ
(
ni
, 
i
);

220 
ci_t˝_sockë_li°í
* 
és
;

221 if–
wo
->
waôabÀ
.
°©e
 !
CI_TCP_LISTEN
 ) ;

222 if–
wo
->
waôabÀ
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
 ) ;

223 
és
 = 
	`SOCK_TO_TCP_LISTEN
(&
wo
->
sock
);

224 if–
és
->
s
.
˝
.
Õ‹t_be16
 !
dp‹t_be16
 ) ;

225 if–
és
->
s
.
˝
.
ù_œddr_be32
 !
INADDR_ANY
 &&

226 
és
->
s
.
˝
.
ù_œddr_be32
 !
d°_be32
) ;

227 if–
és
->
s
.
˝
.
so_bödtodevi˚
 !
CI_IFID_BAD
 ) ;

230 if–()
	`ci_t˝_ac˚±q_n
(
és
Ë<Åls->
ac˚±q_max
 )

231  
és
->
s
.
b
.
bufid
;

233  
OO_SP_INVALID
;

235  
OO_SP_NULL
;

236 
	}
}

241 #i‚de‡
__KERNEL__


243 
	$ci_t˝_c⁄√˘_check_de°
(
côp_sockë
* 
ï
, 
ci_ù_addr_t
 
d°_be32
,

244 
dp‹t_be16
)

246 
ci_ù_ˇched_hdrs
* 
ùˇche
 = &
ï
->
s
->
pkt
;

248 
ùˇche
->
ù
.
ù_daddr_be32
 = 
d°_be32
;

249 
ùˇche
->
dp‹t_be16
 = dport_be16;

250 
	`ci˝_u£r_ªåõve
(
ï
->
√tif
, 
ùˇche
, &ï->
s
->
˝
);

252 if(
	`CI_LIKELY
–
ùˇche
->
°©us
 =
ªårc_suc˚ss
 ||

253 
ùˇche
->
°©us
 =
ªårc_nomac
 ||

254 
ùˇche
->
°©us
 < 0 )) {

256 if–
ùˇche
->
íˇp
.
ty≥
 & 
CICP_LLAP_TYPE_XMIT_HASH_LAYER4
 )

260 
	`ci_ù_ˇche_övÆid©e
(
ùˇche
);

261 if–
ùˇche
->
ù
.
ù_ßddr_be32
 == 0 ) {

263 
ùˇche
->
ù
.
ù_ßddr_be32
 = ipcache->ip_saddr_be32;

264 
ï
->
s
->
˝
.
ù_œddr_be32
 = 
ùˇche
->
ù_ßddr_be32
;

268 if–
ùˇche
->
°©us
 =
ªårc_loˇÃouã
 ) {

269 
ci_t˝_°©e
* 
ts
 = 
	`SOCK_TO_TCP
(
ï
->
s
);

271 if–
	`NI_OPTS
(
ï
->
√tif
).
t˝_˛õ¡_lo›back
 =
CITP_TCP_LOOPBACK_OFF
)

272  
CI_SOCKET_HANDOVER
;

274 
ï
->
s
->
s_Êags
 |
CI_SOCK_FLAG_BOUND_ALIEN
;

275 if–
	`NI_OPTS
(
ï
->
√tif
).
t˝_£rvî_lo›back
 !
CITP_TCP_LOOPBACK_OFF
 )

276 
ts
->
loˇl_≥î
 = 
	`ci_t˝_c⁄√˘_föd_loˇl_≥î
(
ï
->
√tif
, 
d°_be32
,

277 
dp‹t_be16
);

279 
ts
->
loˇl_≥î
 = 
OO_SP_NULL
;

281 if–
	`OO_SP_NOT_NULL
(
ts
->
loˇl_≥î
) ||

282 
	`NI_OPTS
(
ï
->
√tif
).
t˝_˛õ¡_lo›back
 !=

283 
CITP_TCP_LOOPBACK_SAMESTACK
 ) {

284 
ùˇche
->
Êags
 |
CI_IP_CACHE_IS_LOCALROUTE
;

285 if–
ùˇche
->
ù
.
ù_ßddr_be32
 == 0 ) {

286 
ùˇche
->
ù
.
ù_ßddr_be32
 = 
d°_be32
;

287 
ï
->
s
->
˝
.
ù_œddr_be32
 = 
d°_be32
;

289 
ùˇche
->
ëhî_off£t
 = 4;

290 
ùˇche
->
ù_ßddr_be32
 = 
d°_be32
;

291 
ùˇche
->
dp‹t_be16
 = dport_be16;

294  
CI_SOCKET_HANDOVER
;

297  
CI_SOCKET_HANDOVER
;

298 
	}
}

303 
	$ci_t˝_u£_mac_fûãr
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
, 
ci_ifid_t
 
ifödex
,

304 
oo_•
 
‰om_t˝_id
)

306 
u£_mac_fûãr
 = 0;

307 
mode
;

309 if–
	`NI_OPTS
(
ni
).
sˇœbÀ_fûãr_íabÀ
 !
CITP_SCALABLE_FILTERS_ENABLE
 )

312 
mode
 = 
	`NI_OPTS
(
ni
).
sˇœbÀ_fûãr_mode
;

313 if–
mode
 & 
CITP_SCALABLE_MODE_TPROXY_ACTIVE
 ) {

317 
u£_mac_fûãr
 |(
s
->
s_Êags
 & 
CI_SOCK_FLAG_TPROXY
);

320 if–! 
u£_mac_fûãr
 && (
mode
 & 
CITP_SCALABLE_MODE_PASSIVE
) ) {

324 
u£_mac_fûãr
 |
	`OO_SP_NOT_NULL
(
‰om_t˝_id
) &&

325 (
	`SP_TO_SOCK
(
ni
, 
‰om_t˝_id
)->
s_Êags
 & 
CI_SOCK_FLAG_MAC_FILTER
);

331 if–(
u£_mac_fûãr
 =0Ë&& (
s
->
b
.
°©e
 =
CI_TCP_LISTEN
) &&

332 ! (
s
->
s_Êags
 & 
CI_SOCK_FLAG_REUSEPORT
) ) {

334 if–
ifödex
 < 0 ) {

336 
	`ci˝_u£r_föd_home
(
	`CICP_HANDLE
(
ni
), &
	`sock_œddr_be32
(
s
),

337 
NULL
, &
ifödex
, NULL, NULL, NULL);

339 
u£_mac_fûãr
 |(
	`NI_OPTS
(
ni
).
sˇœbÀ_fûãr_ifödex
 =
ifödex
);

343 if–
u£_mac_fûãr
 ) {

345 
	`ci_as£π_Êags
(
s
->
b
.
°©e
, 
CI_TCP_STATE_TCP
);

350 
	`ci_as£π
(
s
->
b
.
°©e
 =
CI_TCP_LISTEN
 ||

351 
	`OO_SP_IS_NULL
(
	`SOCK_TO_TCP
(
s
)->
loˇl_≥î
));

354  
u£_mac_fûãr
;

355 
	}
}

358 #i‚de‡
__KERNEL__


359 
	$ci_t˝_ˇn_£t_fûãr_ö_ul
(
ci_√tif
 *
ni
, 
ci_sock_cmn
* 
s
)

361 if–(
s
->
s_Êags
 & 
CI_SOCK_FLAG_TPROXY
) == 0 )

363 
	`ci_as£π_nÊags
(
s
->
s_Êags
, 
CI_SOCK_FLAG_FILTER
);

364 
	`ci_as£π_Êags
(
s
->
b
.
°©e
, 
CI_TCP_STATE_TCP
);

365 
	`ci_as£π_√quÆ
(
s
->
b
.
°©e
, 
CI_TCP_LISTEN
);

366 
	`ci_as£π_nÊags
(
	`SOCK_TO_TCP
(
s
)->
t˝Êags
, 
CI_TCPT_FLAG_PASSIVE_OPENED
);

367 
	`ci_as£π
(
	`OO_SP_IS_NULL
(
	`SOCK_TO_TCP
(
s
)->
loˇl_≥î
));

368 
	`ci_as£π_√quÆ
(
	`sock_œddr_be32
(
s
), 0);

369 
	`ci_as£π_√quÆ
(
	`sock_Õ‹t_be16
(
s
), 0);

371 
	}
}

375 
	$ci_t˝_sock_£t_sˇœbÀ_fûãr
(
ci_√tif
 *
ni
, 
ci_t˝_°©e
* 
ts
)

377 
rc
;

378 
	`LOG_TC
(
	`log
–
LNT_FMT
 " %s", 
	`LNT_PRI_ARGS
(
ni
, 
ts
), 
__FUNCTION__
));

379 
	`ci_as£π
((
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_MAC_FILTER
) == 0);

381 
rc
 = 
	`ci_√tif_fûãr_lookup
(
ni
, 
	`t˝_œddr_be32
(
ts
),

382 
	`t˝_Õ‹t_be16
(
ts
), 
	`t˝_øddr_be32
(ts),

383 
	`t˝_Ω‹t_be16
(
ts
), 
	`t˝_¥Ÿocﬁ
(ts));

385 if–
rc
 >= 0 )

386  -
EADDRINUSE
;

388 
rc
 = 
	`ci_√tif_fûãr_ö£π
(
ni
, 
	`S_ID
(
ts
), 
	`t˝_œddr_be32
(ts),

389 
	`t˝_Õ‹t_be16
(
ts
), 
	`t˝_øddr_be32
(ts),

390 
	`t˝_Ω‹t_be16
(
ts
), 
	`t˝_¥Ÿocﬁ
(ts));

391 if–
rc
 == 0 )

392 
ts
->
s
.
s_Êags
 |
CI_SOCK_FLAG_MAC_FILTER
;

393  
rc
;

394 
	}
}

397 
	$ci_t˝_sock_˛ór_sˇœbÀ_fûãr
(
ci_√tif
 *
ni
, 
ci_t˝_°©e
* 
ts
)

399 
	`LOG_TC
(
	`log
–
LNT_FMT
 " %s", 
	`LNT_PRI_ARGS
(
ni
, 
ts
), 
__FUNCTION__
));

400 
	`ci_as£π
((
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_MAC_FILTER
) != 0);

401 
	`ci_√tif_fûãr_ªmove
(
ni
, 
	`S_ID
(
ts
), 
	`t˝_œddr_be32
(ts),

402 
	`t˝_Õ‹t_be16
(
ts
), 
	`t˝_øddr_be32
(ts),

403 
	`t˝_Ω‹t_be16
(
ts
), 
	`t˝_¥Ÿocﬁ
(ts));

404 
ts
->
s
.
s_Êags
 &~
CI_SOCK_FLAG_MAC_FILTER
;

405 
	}
}

410 
	#CI_CONNECT_UL_OK
 0

	)

411 
	#CI_CONNECT_UL_FAIL
 -1

	)

412 
	#CI_CONNECT_UL_START_AGAIN
 -2

	)

413 
	#CI_CONNECT_UL_LOCK_DROPPED
 -3

	)

416 
	$ci_t˝_c⁄√˘_ul_°¨t
(
ci_√tif
 *
ni
, 
ci_t˝_°©e
* 
ts
, 
ci_fd_t
 
fd
,

417 
ci_uöt32
 
d°_be32
, 
dp‹t_be16
,

418 * 
Áû_rc
)

420 
ci_ù_pkt_fmt
* 
pkt
;

421 
rc
 = 0;

422 
oo_•
 
a˘ive_wûd
 = 
OO_SP_NULL
;

423 
ci_uöt32
 
¥ev_£q
 = 0;

425 
	`ci_as£π
(
ts
->
s
.
pkt
.
mtu
);

427 
ts
->
t˝Êags
 &=~ 
CI_TCPT_FLAG_FIN_RECEIVED
;

433 
ts
->
amss
 =Ås->
s
.
pkt
.
mtu
 - (
ci_t˝_hdr
Ë- (
ci_ù4_hdr
);

434 #i‡
CI_CFG_LIMIT_AMSS


435 
ts
->
amss
 = 
	`ci_t˝_limô_mss
—s->amss, 
ni
, 
__FUNCTION__
);

439 
ts
->
smss
 = 
CI_CFG_TCP_DEFAULT_MSS
;

442 
	`ci_pmtu_£t
(
ni
, &
ts
->
pmtus
,Ås->
s
.
pkt
.
mtu
);

443 
	`ci_t˝_£t_eff_mss
(
ni
, 
ts
);

444 
	`ci_t˝_£t_öôülcwnd
(
ni
, 
ts
);

449 
ts
->
so_¢dbuf_pkts
 = 0;

453 
ts
->
ka_¥obes
 = 0;

459 
	`ci_as£π_√quÆ
(
ts
->
s
.
pkt
.
ù
.
ù_ßddr_be32
, 
INADDR_ANY
);

461 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_CONNECT_MUST_BIND
 ) {

462 
ci_uöt16
 
sour˚_be16
 = 0;

463 
ci_sock_cmn
* 
s
 = &
ts
->s;

465 #i‚de‡
__KERNEL__


466 
a˘ive_wûd
 = 
	`ci_√tif_a˘ive_wûd_gë
(
ni
, 
	`sock_œddr_be32
(&
ts
->
s
),

467 
	`sock_øddr_be32
(&
ts
->
s
),

468 
dp‹t_be16
, &
sour˚_be16
, &
¥ev_£q
);

471 if–
a˘ive_wûd
 !
OO_SP_NULL
 ) {

472 
ts
->
s
.
s_Êags
 &~(
CI_SOCK_FLAG_DEFERRED_BIND
 |

473 
CI_SOCK_FLAG_CONNECT_MUST_BIND
);

474 
rc
 = 0;

476 if–
s
->
s_Êags
 & 
CI_SOCK_FLAG_ADDR_BOUND
 )

477 
rc
 = 
	`__ci_t˝_böd
(
ni
, &
ts
->
s
, 
fd
,Ås->s.
pkt
.
ù
.
ù_ßddr_be32
,

478 &
sour˚_be16
, 0);

480 
rc
 = 
	`__ci_t˝_böd
(
ni
, &
ts
->
s
, 
fd
, 
INADDR_ANY
, &
sour˚_be16
, 0);

481 if(
	`CI_LIKELY
–
rc
 == 0 )) {

482 
	`TS_TCP
(
ts
)->
t˝_sour˚_be16
 = 
sour˚_be16
;

483 
ts
->
s
.
˝
.
Õ‹t_be16
 = 
sour˚_be16
;

484 
	`LOG_TC
(
	`log
(
LNT_FMT
 "connect: our bindÑeturned %s:%u",

485 
	`LNT_PRI_ARGS
(
ni
, 
ts
),

486 
	`ù_addr_°r
(
INADDR_ANY
),

487 (Ë
	`CI_BSWAP_BE16
(
	`TS_TCP
(
ts
)->
t˝_sour˚_be16
)));

490 
	`LOG_U
(
	`ci_log
("__ci_t˝_bödÑëu∫ed %dáà%s:%d", 
	`CI_GET_ERROR
(
rc
),

491 
__FILE__
, 
__LINE__
));

492 *
Áû_rc
 = 
rc
;

493  
CI_CONNECT_UL_FAIL
;

495 if(
	`CI_UNLIKELY
–
ts
->
s
.
pkt
.
ù
.
ù_ßddr_be32
 == 0 )) {

496 
	`CI_SET_ERROR
(*
Áû_rc
, 
EINVAL
);

497  
CI_CONNECT_UL_FAIL
;

501 
	`ci_t˝_£t_≥î
(
ts
, 
d°_be32
, 
dp‹t_be16
);

504 
pkt
 = 
	`ci_√tif_pkt_tx_t˝_Æloc
(
ni
, 
ts
);

505 if–
	`CI_UNLIKELY
(! 
pkt
) ) {

507 if–
	`NI_OPTS
(
ni
).
t˝_n⁄block_no_pkts_mode
 &&

508 (
ts
->
s
.
b
.
sb_aÊags
 & (
CI_SB_AFLAG_O_NONBLOCK
 | 
CI_SB_AFLAG_O_NDELAY
)) ) {

509 
	`CI_SET_ERROR
(*
Áû_rc
, 
ENOBUFS
);

510  
CI_CONNECT_UL_FAIL
;

513 
rc
 = 
	`ci_√tif_pkt_waô
(
ni
, &
ts
->
s
, 
CI_SLEEP_NETIF_LOCKED
|
CI_SLEEP_NETIF_RQ
);

514 if–
	`ci_√tif_pkt_waô_was_öãºu±ed
(
rc
) ) {

515 
	`CI_SET_ERROR
(*
Áû_rc
, -
rc
);

516  
CI_CONNECT_UL_LOCK_DROPPED
;

523  
CI_CONNECT_UL_START_AGAIN
;

526 #ifde‡
ONLOAD_OFE


527 if–
ni
->
o„_ch™√l
 !
NULL
 )

528 
ts
->
s
.
o„_code_°¨t
 = 
	`o„_socktbl_föd
(

529 
ni
->
o„
, 
OFE_SOCKTYPE_TCP_ACTIVE
,

530 
	`t˝_œddr_be32
(
ts
), 
	`t˝_øddr_be32
(ts),

531 
	`t˝_Õ‹t_be16
(
ts
), 
	`t˝_Ω‹t_be16
(ts));

533 
ts
->
s
.
o„_code_°¨t
 = 
OFE_ADDR_NULL
;

536 
rc
 = 
	`ci_t˝_ï_£t_fûãrs
(
ni
, 
	`S_SP
(
ts
),Ås->
s
.
˝
.
so_bödtodevi˚
,

537 
a˘ive_wûd
);

538 if–
rc
 < 0 ) {

542 
	`ci_as£π_√quÆ
(
rc
, -
EFILTERSSOME
);

543 if–
rc
 !-
EBUSY
 || ! 
	`ci_√tif_timewaô_åy_to_‰ì_fûãr
(
ni
) ||

544 (
rc
 = 
	`ci_t˝_ï_£t_fûãrs
(
ni
, 
	`S_SP
(
ts
),

545 
ts
->
s
.
˝
.
so_bödtodevi˚
,

546 
a˘ive_wûd
)) < 0 ) {

547 
	`ci_as£π_√quÆ
(
rc
, -
EFILTERSSOME
);

551 if–! (
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_ADDR_BOUND
) ) {

552 
ts
->
s
.
pkt
.
ù
.
ù_ßddr_be32
 = 0;

553 
ts
->
s
.
˝
.
ù_œddr_be32
 = 0;

555 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pkt
);

556 
	`CI_SET_ERROR
(*
Áû_rc
, -
rc
);

557  
CI_CONNECT_UL_FAIL
;

561 
	`LOG_TC
(
	`log
(
LNT_FMT
 "CONNECT %s:%u->%s:%u", 
	`LNT_PRI_ARGS
(
ni
, 
ts
),

562 
	`ù_addr_°r
(
ts
->
s
.
pkt
.
ù
.
ù_ßddr_be32
),

563 (Ë
	`CI_BSWAP_BE16
(
	`TS_TCP
(
ts
)->
t˝_sour˚_be16
),

564 
	`ù_addr_°r
(
ts
->
s
.
pkt
.
ù
.
ù_daddr_be32
),

565 (Ë
	`CI_BSWAP_BE16
(
	`TS_TCP
(
ts
)->
t˝_de°_be16
)));

568 if–
a˘ive_wûd
 !
OO_SP_NULL
 )

569 
ts
->
t˝Êags
 |
CI_TCPT_FLAG_ACTIVE_WILD
;

571 
	`t˝_¢d_nxt
(
ts
Ë
	`ci_t˝_öôül_£qno
(
ni
);

572 if–
¥ev_£q
 )

577 
	`t˝_¢d_nxt
(
ts
Ë—˝_¢d_nxt—sË& 0x3fffffffË| (~
¥ev_£q
 & 0xc0000000);

578 
	`t˝_¢d_u«
(
ts
Ë
	`t˝_íq_nxt
—sË
	`t˝_¢d_up
—sË
	`t˝_¢d_nxt
(ts);

579 
ts
->
¢d_max
 = 
	`t˝_¢d_nxt
(ts) + 1;

582 
	`ci_t˝_˛ór_πt_timög
(
ts
);

583 
	`ci_t˝_£t_Êags
(
ts
, 
CI_TCP_FLAG_SYN
);

584 
ts
->
t˝Êags
 &=~ 
CI_TCPT_FLAG_OPT_MASK
;

585 
ts
->
t˝Êags
 |
	`NI_OPTS
(
ni
).
syn_›ts
;

587 if–(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_WSCL
) ) {

588 if–
	`NI_OPTS
(
ni
).
t˝_rcvbuf_mode
 == 1 )

589 
ts
->
rcv_ws˛
 =

590 
	`ci_t˝_ws˛_by_buff
(
ni
, 
	`ci_t˝_max_rcvbuf
“i, 
ts
->
amss
));

592 
ts
->
rcv_ws˛
 =

593 
	`ci_t˝_ws˛_by_buff
(
ni
, 
	`ci_t˝_rcvbuf_e°ablished
“i, &
ts
->
s
));

594 
	`CI_IP_SOCK_STATS_VAL_RXWSCL
(
ts
,Ås->
rcv_ws˛
);

597 
ts
->
rcv_ws˛
 = 0;

598 
	`CI_IP_SOCK_STATS_VAL_RXWSCL
(
ts
, 0);

600 
	`ci_t˝_£t_rcvbuf
(
ni
, 
ts
);

601 
	`ci_t˝_öô_rcv_wnd
(
ts
, "CONNECT");

604 if–! (
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
) )

605 
ts
->
outgoög_hdrs_Àn
 = (
ci_ù4_hdr
)+(
ci_t˝_hdr
);

606 if–
	`ci_t˝_ˇn_°rùe
(
ni
, 
ts
->
s
.
pkt
.
ù
.
ù_ßddr_be32
,

607 
ts
->
s
.
pkt
.
ù
.
ù_daddr_be32
) )

608 
ts
->
t˝Êags
 |
CI_TCPT_FLAG_STRIPE
;

609 
	`ci_t˝_£t_¶ow_°©e
(
ni
, 
ts
, 
CI_TCP_SYN_SENT
);

622 
	`ci_as£π
(
ts
->
¢d_max
 =
	`t˝_¢d_nxt
(ts) + 1);

623 
ts
->
s
.
rx_î∫o
 = 0;

624 
ts
->
s
.
tx_î∫o
 = 0;

625 
	`ci_t˝_íqueue_no_d©a
(
ts
, 
ni
, 
pkt
);

626 
	`ci_t˝_£t_Êags
(
ts
, 
CI_TCP_FLAG_ACK
);

628 if–
ts
->
s
.
b
.
sb_aÊags
 & (
CI_SB_AFLAG_O_NONBLOCK
 | 
CI_SB_AFLAG_O_NDELAY
) ) {

629 
ts
->
t˝Êags
 |
CI_TCPT_FLAG_NONBLOCK_CONNECT
;

630 
	`LOG_TC
(
	`log
–
LNT_FMT
 "Non-blocking connect -Ñeturn EINPROGRESS",

631 
	`LNT_PRI_ARGS
(
ni
, 
ts
)));

632 #i‚de‡
_WIN32


633 
	`CI_SET_ERROR
(*
Áû_rc
, 
EINPROGRESS
);

635 
	`CI_SET_ERROR
(*
Áû_rc
, 
EAGAIN
);

637  
CI_CONNECT_UL_FAIL
;

640  
CI_CONNECT_UL_OK
;

641 
	}
}

643 
ci_ölöe
 
	$ci_t˝_c⁄√˘_h™dÀ_so_îr‹
(
ci_sock_cmn
 *
s
)

645 
ci_öt32
 
rc
 = 
	`ci_gë_so_îr‹
(
s
);

646 if–
rc
 == 0 )

648 #i‡
	`deföed
(
__löux__
Ë|| deföed(
_WIN32
)

649 
s
->
rx_î∫o
 = 
ENOTCONN
;

650 #ñi‡
	`deföed
(
__sun__
)

651 
s
->
rx_î∫o
 = 
CI_SHUT_RD
;

653  
rc
;

654 
	}
}

656 
	$ci_t˝_c⁄√˘_ul_syn_£¡
(
ci_√tif
 *
ni
, 
ci_t˝_°©e
 *
ts
)

658 
rc
 = 0;

660 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_SYN_SENT
 ) {

661 
ci_uöt32
 
timeout
 = 
ts
->
s
.
so
.
¢dtimeo_m£c
;

663 
	`ci_√tif_pﬁl
(
ni
);

664 if–
	`OO_SP_NOT_NULL
(
ts
->
loˇl_≥î
) ) {

667 
	`ci_t˝_dr›
(
ni
, 
ts
, 
EBUSY
);

668 
	`RET_WITH_ERRNO
(
EBUSY
);

671 #i‚de‡
__KERNEL__


672 if–
	`oo_≥r_thªad_gë
()->
•ö°©e
 & (1 << 
ONLOAD_SPIN_TCP_CONNECT
) ) {

673 
ci_uöt64
 
°¨t_‰c
, 
now_‰c
, 
scheduÀ_‰c
;

674 
côp_sig«l_öfo
* 
si
 = 
	`côp_sig«l_gë_•ecific_öôed
();

675 
ci_uöt64
 
max_•ö
 = 
ts
->
s
.
b
.
•ö_cy˛es
;

676 
°ack_locked
 = 1;

678 if–
ts
->
s
.
so
.
¢dtimeo_m£c
 ) {

679 
ci_uöt64
 
max_so_•ö
 = (ci_uöt64)
ts
->
s
.
so
.
¢dtimeo_m£c
 *

680 
	`IPTIMER_STATE
(
ni
)->
khz
;

681 if–
max_so_•ö
 <
max_•ö
 )

682 
max_•ö
 = 
max_so_•ö
;

685 
	`ci_‰c64
(&
°¨t_‰c
);

686 
scheduÀ_‰c
 = 
°¨t_‰c
;

687 
now_‰c
 = 
°¨t_‰c
;

690 if–
	`ci_√tif_may_pﬁl
(
ni
) ) {

691 if–
	`ci_√tif_√ed_pﬁl_•önög
(
ni
, 
now_‰c
) ) {

692 if–
°ack_locked
 || 
	`ci_√tif_åylock
(
ni
) ) {

693 
	`ci_√tif_pﬁl_n
(
ni
, 
	`NI_OPTS
“i).
evs_≥r_pﬁl
);

694 
	`ci_√tif_u∆ock
(
ni
);

695 
°ack_locked
 = 0;

698 if–! 
ni
->
°©e
->
is_•ö√r
 )

699 
ni
->
°©e
->
is_•ö√r
 = 1;

701 if–
ts
->
s
.
b
.
°©e
 !
CI_TCP_SYN_SENT
 ) {

702 
ni
->
°©e
->
is_•ö√r
 = 0;

703 
	`ci_√tif_lock
(
ni
);

704 
rc
 = 0;

705 
out
;

709 if–
°ack_locked
 ) {

710 
	`ci_√tif_u∆ock
(
ni
);

711 
°ack_locked
 = 0;

714 
	`ci_‰c64
(&
now_‰c
);

715 
rc
 = 
	`OO_SPINLOOP_PAUSE_CHECK_SIGNALS
(
ni
, 
now_‰c
, &
scheduÀ_‰c
,

716 
ts
->
s
.
so
.
¢dtimeo_m£c
, 
NULL
, 
si
);

717 if–
rc
 != 0 ) {

718 
ni
->
°©e
->
is_•ö√r
 = 0;

719 
	`ci_√tif_lock
(
ni
);

720 
out
;

722 #i‡
CI_CFG_SPIN_STATS


723 
ni
->
°©e
->
°©s
.
•ö_t˝_c⁄√˘
++;

725 }  
now_‰c
 - 
°¨t_‰c
 < 
max_•ö
 );

727 
ni
->
°©e
->
is_•ö√r
 = 0;

728 
	`ci_√tif_lock
(
ni
);

730 if–
timeout
 ) {

731 
ci_uöt32
 
•ö_ms
 = (
°¨t_‰c
 - 
now_‰c
Ë/ 
	`IPTIMER_STATE
(
ni
)->
khz
;

732 if–
•ö_ms
 < 
timeout
 )

733 
timeout
 -
•ö_ms
;

735 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_SYN_SENT
 )

736 
rc
 = -
EAGAIN
;

737 
out
;

743 
	`CI_TCP_SLEEP_WHILE
(
ni
, 
ts
, 
CI_SB_FLAG_WAKE_RX
,

744 
timeout
,

745 
ts
->
s
.
b
.
°©e
 =
CI_TCP_SYN_SENT
, &
rc
);

748 #i‚de‡
__KERNEL__


749 
out
:

751 if–
rc
 =-
EAGAIN
 ) {

752 
	`LOG_TC
(
	`log
–
LNT_FMT
 "timeout on sleep: %d",

753 
	`LNT_PRI_ARGS
(
ni
, 
ts
), -
rc
));

754 if–! (
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_NONBLOCK_CONNECT
) ) {

755 
ts
->
t˝Êags
 |
CI_TCPT_FLAG_NONBLOCK_CONNECT
;

756 
	`CI_SET_ERROR
(
rc
, 
EINPROGRESS
);

759 
	`CI_SET_ERROR
(
rc
, 
EALREADY
);

760  
rc
;

762 if–
rc
 =-
EINTR
 ) {

763 
	`LOG_TC
(
	`log
(
LNT_FMT
 "connect() was interrupted byá signal",

764 
	`LNT_PRI_ARGS
(
ni
, 
ts
)));

765 
ts
->
t˝Êags
 |
CI_TCPT_FLAG_NONBLOCK_CONNECT
;

766 
	`CI_SET_ERROR
(
rc
, 
EINTR
);

767  
rc
;

772 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSED
 ) {

773 #i‡
	`deföed
(
__löux__
)

777 if–
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_OS_BACKED
 ) {

778 #ifde‡
__ci_drivî__


779 
	`CI_TRY
(
	`eÁb_t˝_hñ≥r_£t_t˝_˛o£_os_sock
(

780 
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
),

781 
	`S_SP
(
ts
)));

783 
	`CI_TRY
(
	`ci_t˝_hñ≥r_£t_t˝_˛o£_os_sock
(
ni
, 
	`S_SP
(
ts
)));

790 if–! (
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_PORT_BOUND
) )

791 
ts
->
s
.
s_Êags
 |
CI_SOCK_FLAG_CONNECT_MUST_BIND
;

797 if–(
rc
 = 
	`ci_t˝_c⁄√˘_h™dÀ_so_îr‹
(&
ts
->
s
)) == 0)

798 
rc
 = 
	`TCP_RX_ERRNO
(
ts
Ë? TCP_RX_ERRNO—sË: 
ECONNABORTED
;

799 
	`CI_SET_ERROR
(
rc
,Ñc);

801 if–! (
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_ADDR_BOUND
) ) {

802 
ts
->
s
.
pkt
.
ù
.
ù_ßddr_be32
 = 0;

803 
ts
->
s
.
˝
.
ù_œddr_be32
 = 0;

805  
rc
;

809 
	}
}

812 #i‚de‡
__KERNEL__


823 
	$ci_t˝_c⁄√˘
(
côp_sockë
* 
ï
, c⁄° 
sockaddr
* 
£rv_addr
,

824 
sockÀn_t
 
addæí
, 
ci_fd_t
 
fd
, *
p_moved
)

827 
sockaddr_ö
* 
öaddr
 = (sockaddr_ö*Ë
£rv_addr
;

828 
ci_sock_cmn
* 
s
 = 
ï
->s;

829 
ci_t˝_°©e
* 
ts
 = &
	`SOCK_TO_WAITABLE_OBJ
(
s
)->
t˝
;

830 
rc
 = 0, 
¸c
;

831 
ci_uöt32
 
d°_be32
;

833 if–
	`NI_OPTS
(
ï
->
√tif
).
t˝_c⁄√˘_h™dovî
 )

834  
CI_SOCKET_HANDOVER
;

837 
	`ci_√tif_lock
(
ï
->
√tif
);

838 
	`CHECK_TEP
(
ï
);

839 
	`ci_√tif_pﬁl
(
ï
->
√tif
);

845 
°¨t_agaö
:

847 if–(
rc
 = 
	`ci_t˝_c⁄√˘_h™dÀ_so_îr‹
(
s
)) != 0) {

848 
	`CI_SET_ERROR
(
rc
,Ñc);

849 
u∆ock_out
;

852 if–
s
->
b
.
°©e
 !
CI_TCP_CLOSED
 ) {

855 if–
s
->
b
.
°©e
 & 
CI_TCP_STATE_SYNCHRONISED
 ) {

856 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_NONBLOCK_CONNECT
 ) {

857 
ts
->
t˝Êags
 &~
CI_TCPT_FLAG_NONBLOCK_CONNECT
;

858 #ifde‡
__löux__


859 
rc
 = 0;

861 
	`CI_SET_ERROR
(
rc
, 
EISCONN
);

863 
u∆ock_out
;

865 if–
£rv_addr
->
ß_Ámûy
 =
AF_UNSPEC
 )

866 
	`LOG_E
(
	`ci_log
("Onload doesÇot support TCP disconnect via "

869 
	`CI_SET_ERROR
(
rc
, 
EISCONN
);

871 if–
s
->
b
.
°©e
 =
CI_TCP_LISTEN
 ) {

872 #i‡
CI_CFG_POSIX_CONNECT_AFTER_LISTEN


873 
	`CI_SET_ERROR
(
rc
, 
EOPNOTSUPP
);

875 #ifde‡
__unix__


876 if–
	`ci_t˝_vÆid©e_ß
(
s
->
domaö
, 
£rv_addr
, 
addæí
) ) {

878 
rc
 = 
CI_SOCKET_HANDOVER
;

879 
u∆ock_out
;

881 if–
£rv_addr
->
ß_Ámûy
 =
AF_UNSPEC
 ) {

883 
	`ci_√tif_u∆ock
(
ï
->
√tif
);

884 
rc
 = 
	`ci_t˝_shutdown
(
ï
, 
SHUT_RD
, 
fd
);

885 
out
;

888 
	`CI_SET_ERROR
(
rc
, 
EISCONN
);

892 
	`CI_SET_ERROR
(
rc
, 
EINVAL
);

898 
	`ci_as£π_equÆ
(
s
->
b
.
°©e
, 
CI_TCP_SYN_SENT
);

899 #i‡
	`deföed
(
__sun__
)

900 
	`CI_SET_ERROR
(
rc
, 
EALREADY
);

902 if–
s
->
b
.
sb_aÊags
 & (
CI_SB_AFLAG_O_NONBLOCK
 | 
CI_SB_AFLAG_O_NDELAY
) )

903 
	`CI_SET_ERROR
(
rc
, 
EALREADY
);

905 
syn_£¡
;

908 
u∆ock_out
;

912 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_WAS_ESTAB
 ) {

913 
	`CI_SET_ERROR
(
rc
, 
EISCONN
);

914 
u∆ock_out
;

925 
	`ci_t˝_vÆid©e_ß
(
s
->
domaö
, 
£rv_addr
, 
addæí
)

928 || (
d°_be32
 = 
	`ci_gë_ù4_addr
(
öaddr
->
sö_Ámûy
, 
£rv_addr
)) == 0

930 || 
öaddr
->
sö_p‹t
 == 0 )

932 
rc
 = 
CI_SOCKET_HANDOVER
;

933 
u∆ock_out
;

937 
rc
 = 
	`ci_t˝_c⁄√˘_check_de°
(
ï
, 
d°_be32
, 
öaddr
->
sö_p‹t
);

938 if–
rc
 ) 
u∆ock_out
;

940 if–(
ts
->
s
.
pkt
.
Êags
 & 
CI_IP_CACHE_IS_LOCALROUTE
) &&

941 
	`OO_SP_IS_NULL
(
ts
->
loˇl_≥î
) ) {

943 
oo_›_lo›back_c⁄√˘
 
›
;

944 
›
.
d°_p‹t
 = 
öaddr
->
sö_p‹t
;

945 
›
.
d°_addr
 = 
d°_be32
;

947 
rc
 = 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_TCP_LOOPBACK_CONNECT
, &
›
);

948 if–
rc
 < 0)

949  
CI_SOCKET_HANDOVER
;

950 if–
›
.
out_moved
 )

951 *
p_moved
 = 1;

952 if–
›
.
out_rc
 =-
EINPROGRESS
 )

953 
	`RET_WITH_ERRNO
–
EINPROGRESS
 );

954 if–
›
.
out_rc
 =-
EAGAIN
 )

955  -
EAGAIN
;

956 if–
›
.
out_rc
 != 0 )

957  
CI_SOCKET_HANDOVER
;

962 if–(
s
->
s_Êags
 & 
CI_SOCK_FLAG_BOUND_ALIEN
) &&

963 ! (
ts
->
s
.
pkt
.
Êags
 & 
CI_IP_CACHE_IS_LOCALROUTE
 ||

964 
s
->
s_Êags
 & 
CI_SOCK_FLAG_TPROXY
) ) {

965 
rc
 = 
CI_SOCKET_HANDOVER
;

966 
u∆ock_out
;

969 
¸c
 = 
	`ci_t˝_c⁄√˘_ul_°¨t
(
ï
->
√tif
, 
ts
, 
fd
, 
d°_be32
, 
öaddr
->
sö_p‹t
,

970 &
rc
);

971 if–
¸c
 !
CI_CONNECT_UL_OK
 ) {

972  
¸c
 ) {

973 
CI_CONNECT_UL_FAIL
:

974 
u∆ock_out
;

975 
CI_CONNECT_UL_LOCK_DROPPED
:

976 
out
;

977 
CI_CONNECT_UL_START_AGAIN
:

978 
°¨t_agaö
;

981 
	`CI_TCP_STATS_INC_ACTIVE_OPENS
–
ï
->
√tif
 );

983 #i‡!
	`deföed
(
__sun__
)

984 
syn_£¡
:

986 
rc
 = 
	`ci_t˝_c⁄√˘_ul_syn_£¡
(
ï
->
√tif
, 
ts
);

988 
u∆ock_out
:

989 
	`ci_√tif_u∆ock
(
ï
->
√tif
);

990 
out
:

991  
rc
;

992 
	}
}

995 
	$ci_t˝_li°í_öô
(
ci_√tif
 *
ni
, 
ci_t˝_sockë_li°í
 *
és
)

997 
i
;

998 
oo_p
 
•
;

1000 
és
->
ac˚±q_n_ö
 =Åls->
ac˚±q_n_out
 = 0;

1001 
és
->
ac˚±q_put
 = 
CI_ILL_END
;

1002 
és
->
ac˚±q_gë
 = 
OO_SP_NULL
;

1003 
és
->
n_li°íq
 = 0;

1004 
és
->
n_li°íq_√w
 = 0;

1007 
és
->
buckë
 = 
	`ci_ni_aux_Æloc_buckë
(
ni
);

1008 if–
	`OO_P_IS_NULL
(
és
->
buckë
) )

1009  -
ENOBUFS
;

1010 
és
->
n_buckës
 = 1;

1013  
i
 = 0; i <
CI_CFG_TCP_SYNACK_RETRANS_MAX
; ++i ) {

1014 
•
 = 
	`TS_OFF
(
ni
, 
és
);

1015 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
ci_t˝_sockë_li°í
, 
li°íq
[
i
]));

1016 
	`ci_ni_dŒi°_öô
(
ni
, &
és
->
li°íq
[
i
], 
•
, "lstq");

1022 
	`LOG_EP
 (
	`log
 ("Initialise cacheándÖendingÜist for id %d",

1023 
	`S_FMT
(
és
)));

1025 #i‡
CI_CFG_FD_CACHING


1026 
•
 = 
	`TS_OFF
(
ni
, 
és
);

1027 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
ci_t˝_sockë_li°í
, 
ïˇche
.
ˇche
));

1028 
	`ci_ni_dŒi°_öô
(
ni
, &
és
->
ïˇche
.
ˇche
, 
•
, "epch");

1030 
•
 = 
	`TS_OFF
(
ni
, 
és
);

1031 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
ci_t˝_sockë_li°í
, 
ïˇche
.
≥ndög
));

1032 
	`ci_ni_dŒi°_öô
(
ni
, &
és
->
ïˇche
.
≥ndög
, 
•
, "eppd");

1034 
•
 = 
	`TS_OFF
(
ni
, 
és
);

1035 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
ci_t˝_sockë_li°í
, 
ïˇche_c⁄√˘ed
));

1036 
	`ci_ni_dŒi°_öô
(
ni
, &
és
->
ïˇche_c⁄√˘ed
, 
•
, "epco");

1038 
•
 = 
	`TS_OFF
(
ni
, 
és
);

1039 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
ci_t˝_sockë_li°í
, 
ïˇche
.
fd_°©es
));

1040 
	`ci_ni_dŒi°_öô
(
ni
, &
és
->
ïˇche
.
fd_°©es
, 
•
, "ecfd");

1042 
és
->
ïˇche
.
avaû_°ack
 = 
oo_±r_to_°©ï


1043 (
ni
, &ni->
°©e
->
∑ssive_ˇche_avaû_°ack
);

1045 
és
->
ˇche_avaû_sock
 = 
ni
->
°©e
->
›ts
.
≥r_sock_ˇche_max
;

1049 
	}
}

1052 #ifde‡
__KERNEL__


1053 
	$ci_t˝_c⁄√˘_lo_ßme°ack
(
ci_√tif
 *
ni
, 
ci_t˝_°©e
 *
ts
, 
oo_•
 
és_id
)

1055 
¸c
, 
rc
 = 0;

1057 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1059 
ts
->
loˇl_≥î
 = 
és_id
;

1060 
¸c
 = 
	`ci_t˝_c⁄√˘_ul_°¨t
(
ni
, 
ts
, 
CI_FD_BAD
,Ås->
s
.
pkt
.
ù_ßddr_be32
,

1061 
ts
->
s
.
pkt
.
dp‹t_be16
, &
rc
);

1065 if–
¸c
 =
CI_CONNECT_UL_OK
 )

1066 
rc
 = 
	`ci_t˝_c⁄√˘_ul_syn_£¡
(
ni
, 
ts
);

1067  
rc
;

1068 
	}
}

1072 
	$ci_t˝_c⁄√˘_lo_toc⁄n
(
ci_√tif
 *
c_ni
, 
oo_•
 
c_id
, 
ci_uöt32
 
d°
,

1073 
ci_√tif
 *
l_ni
, 
oo_•
 
l_id
)

1075 
ci_t˝_°©e
 *
ts
;

1076 
ci_t˝_sockë_li°í
 *
és
, *
Æõn_és
;

1077 
côp_waôabÀ_obj
 *
wo
;

1078 
côp_waôabÀ
 *
w
;

1079 
rc
;

1081 
	`ci_as£π
(
	`ci_√tif_is_locked
(
c_ni
));

1082 
	`ci_as£π
(
	`OO_SP_NOT_NULL
(
c_id
));

1083 
	`ci_as£π
(
	`OO_SP_NOT_NULL
(
l_id
));

1085 
	`LOG_TC
(
	`log
("%s: c⁄√˘ %d:%dÅÿ%d:%d", 
__FUNCTION__
,

1086 
c_ni
->
°©e
->
°ack_id
, 
	`OO_SP_TO_INT
(
c_id
),

1087 
l_ni
->
°©e
->
°ack_id
, 
	`OO_SP_TO_INT
(
l_id
)));

1089 
Æõn_és
 = 
	`SP_TO_TCP_LISTEN
(
l_ni
, 
l_id
);

1090 if–()
	`ci_t˝_ac˚±q_n
(
Æõn_és
Ë>Æõn_és->
ac˚±q_max
 ) {

1091 
	`ci_√tif_u∆ock
(
c_ni
);

1092  -
EBUSY
;

1096 
ts
 = 
	`ci_t˝_gë_°©e_buf
(
c_ni
);

1097 if–
ts
 =
NULL
 ) {

1098 
	`ci_√tif_u∆ock
(
c_ni
);

1099 
	`LOG_E
(
	`ci_log
("%s: [%d] ouào‡sockë buf„rs", 
__FUNCTION__
, 
	`NI_ID
(
c_ni
)));

1100  -
ENOMEM
;

1104 
ts
->
s
.
so
 = 
Æõn_és
->s.so;

1105 
ts
->
s
.
˝
.
ù_âl
 = 
Æõn_és
->s.cp.ip_ttl;

1106 
	`S_TCP_HDR
(&
ts
->
s
)->
t˝_sour˚_be16
 =

1107 
	`S_TCP_HDR
(&
Æõn_és
->
s
)->
t˝_sour˚_be16
;

1108 
ts
->
s
.
domaö
 = 
Æõn_és
->s.domain;

1109 
ts
->
c
 = 
Æõn_és
->c;

1110 
ts
->
c
.
t˝_de„r_ac˚±
 = 
OO_TCP_DEFER_ACCEPT_OFF
;

1114 
	`ci_bô_£t
(&
ts
->
s
.
b
.
sb_aÊags
, 
CI_SB_AFLAG_ORPHAN_BIT
);

1116 
	`ci_t˝_£t_¶ow_°©e
(
c_ni
, 
ts
, 
CI_TCP_LISTEN
);

1117 
és
 = 
	`SOCK_TO_TCP_LISTEN
(&
ts
->
s
);

1119 
és
->
s
.
s_Êags
 = 
Æõn_és
->s.s_Êag†| 
CI_SOCK_FLAG_BOUND_ALIEN
;

1121 
és
->
ac˚±q_max
 = 1;

1122 
rc
 = 
	`ci_t˝_li°í_öô
(
c_ni
, 
és
);

1123 if–
rc
 != 0 ) {

1124 
	`côp_waôabÀ_obj_‰ì
(
c_ni
, &
és
->
s
.
b
);

1125  
rc
;

1129 
ts
 = 
	`SP_TO_TCP
(
c_ni
, 
c_id
);

1130 
rc
 = 
	`ci_t˝_c⁄√˘_lo_ßme°ack
(
c_ni
, 
ts
, 
és
->
s
.
b
.
bufid
);

1133 if–!
	`ci_t˝_ac˚±q_nŸ_em±y
(
és
) ) {

1136 
	`ci_t˝_li°íq_dr›_Æl
(
c_ni
, 
és
);

1137 
	`côp_waôabÀ_obj_‰ì
(
c_ni
, &
és
->
s
.
b
);

1138 
	`ci_√tif_u∆ock
(
c_ni
);

1139  -
EBUSY
;

1141 
w
 = 
	`ci_t˝_ac˚±q_gë
(
c_ni
, 
és
);

1142 
	`ci_as£π
(
w
);

1143 
	`LOG_TV
(
	`ci_log
("%s: %d:%dÅo %d:%d shadow %d:%dáccepted %d:%d",

1144 
__FUNCTION__
,

1145 
c_ni
->
°©e
->
°ack_id
, 
	`OO_SP_TO_INT
(
c_id
),

1146 
l_ni
->
°©e
->
°ack_id
, 
	`OO_SP_TO_INT
(
l_id
),

1147 
c_ni
->
°©e
->
°ack_id
, 
és
->
s
.
b
.
bufid
,

1148 
c_ni
->
°©e
->
°ack_id
, 
w
->
bufid
));

1150 
	`ci_as£π
(
w
->
°©e
 & 
CI_TCP_STATE_TCP
);

1151 
	`ci_as£π
(
w
->
°©e
 !
CI_TCP_LISTEN
);

1157 
	`ci_as£π_equÆ
(
	`ci_t˝_ac˚±q_n
(
és
), 0);

1158 
	`ci_t˝_li°íq_dr›_Æl
(
c_ni
, 
és
);

1159 
	`côp_waôabÀ_obj_‰ì
(
c_ni
, &
és
->
s
.
b
);

1160 
	`ci_√tif_u∆ock
(
c_ni
);

1164 
t˝_hñ≥r_ídpoöt_t
 *
l_ï
, *
a_ï
;

1165 
oo_fûe_ªf
* 
os_sock_ªf
;

1166 
lock_Êags
;

1168 
l_ï
 = 
	`ci_ås_ï_gë
(
	`√tif2t˝_hñ≥r_ªsour˚
(
l_ni
), 
l_id
);

1169 
a_ï
 = 
	`ci_ås_ï_gë
(
	`√tif2t˝_hñ≥r_ªsour˚
(
c_ni
), 
	`W_SP
(
w
));

1170 
	`•ö_lock_úqßve
(&
l_ï
->
lock
, 
lock_Êags
);

1171 
os_sock_ªf
 = 
l_ï
->
os_sockë
;

1172 
	`ci_as£π_equÆ
(
a_ï
->
os_p‹t_kì≥r
, 
NULL
);

1173 if–
os_sock_ªf
 !
NULL
 ) {

1174 
os_sock_ªf
 = 
	`oo_fûe_ªf_add
(os_sock_ref);

1175 
os_sock_ªf
 = 
	`oo_fûe_ªf_xchg
(&
a_ï
->
os_p‹t_kì≥r
, os_sock_ref);

1176 
	`•ö_u∆ock_úqª°‹e
(&
l_ï
->
lock
, 
lock_Êags
);

1177 if–
os_sock_ªf
 !
NULL
 )

1178 
	`oo_fûe_ªf_dr›
(
os_sock_ªf
);

1181 
	`•ö_u∆ock_úqª°‹e
(&
l_ï
->
lock
, 
lock_Êags
);

1182 
˛ónup
;

1188 if–
	`ci_√tif_lock
(
l_ni
) != 0 )

1189 
˛ónup
;

1190 if–
Æõn_és
->
s
.
b
.
°©e
 !
CI_TCP_LISTEN
 ||

1191 (
Æõn_és
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
) ||

1192 
	`S_TCP_HDR
(&
Æõn_és
->
s
)->
t˝_sour˚_be16
 !
	`TS_TCP
(
ts
)->
t˝_de°_be16
 ||

1193 (
Æõn_és
->
s
.
pkt
.
ù
.
ù_ßddr_be32
 !
INADDR_ANY
 &&

1194 
Æõn_és
->
s
.
pkt
.
ù
.
ù_ßddr_be32
 !
ts
->s.pkt.ù.
ù_daddr_be32
) ) {

1195 
	`ci_√tif_u∆ock
(
l_ni
);

1196 
˛ónup
;

1199 
	`ci_bô_mask_£t
(&
w
->
sb_aÊags
,

1200 
CI_SB_AFLAG_TCP_IN_ACCEPTQ
 | 
CI_SB_AFLAG_ORPHAN
);

1202 
wo
 = 
	`côp_waôabÀ_obj_Æloc
(
l_ni
);

1203 if–
wo
 =
NULL
 ) {

1204 
	`ci_√tif_u∆ock
(
l_ni
);

1205 
˛ónup
;

1207 
wo
->
waôabÀ
.
°©e
 = 
CI_TCP_CLOSED
;

1208 
wo
->
waôabÀ
.
sb_aÊags
 |
CI_SB_AFLAG_MOVED_AWAY
;

1209 
wo
->
waôabÀ
.
moved_to_°ack_id
 = 
c_ni
->
°©e
->
°ack_id
;

1210 
wo
->
waôabÀ
.
moved_to_sock_id
 = 
	`W_SP
(
w
);

1211 
	`LOG_TC
(
	`log
("%s:Öuàtÿac˚±q %d:%dÑe„ªncög %d:%d", 
__func__
,

1212 
l_ni
->
°©e
->
°ack_id
, 
	`OO_SP_TO_INT
(
	`W_SP
(&
wo
->
waôabÀ
)),

1213 
c_ni
->
°©e
->
°ack_id
, 
	`OO_SP_TO_INT
(
	`W_SP
(
w
))));

1215 
	`ci_t˝_ac˚±q_put
(
l_ni
, 
Æõn_és
, &
wo
->
waôabÀ
);

1216 
	`côp_waôabÀ_wake_nŸ_ö_pﬁl
(
l_ni
, &
Æõn_és
->
s
.
b
, 
CI_SB_FLAG_WAKE_RX
);

1217 
	`ci_√tif_u∆ock
(
l_ni
);

1219  
rc
;

1221 
˛ónup
:

1222 
	`ci_as£π
(
w
->
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
);

1223 
	`ci_bô_mask_˛ór
(&
w
->
sb_aÊags
,

1224 
CI_SB_AFLAG_TCP_IN_ACCEPTQ
 | 
CI_SB_AFLAG_ORPHAN
);

1225 
	`eÁb_t˝_hñ≥r_˛o£_ídpoöt
(
	`√tif2t˝_hñ≥r_ªsour˚
(
c_ni
), 
w
->
bufid
);

1229  -
EBUSY
;

1230 
	}
}

1235 #i‚de‡ 
__KERNEL__


1239 
	$ci_t˝_ªu£p‹t_böd
(
ci_sock_cmn
* 
sock
, 
ci_fd_t
 
fd
)

1241 
rc
;

1246 
	`ci_as£π
(((
sock
->
s_Êags
 & 
CI_SOCK_FLAG_PORT_BOUND
) != 0));

1247 
	`ci_as£π_√quÆ
(
sock
->
s_Êags
 & 
CI_SOCK_FLAG_REUSEPORT
, 0);

1248 i‡–(
rc
 = 
	`ci_t˝_ï_ªu£p‹t_böd
(
fd
, 
CITP_OPTS
.
˛u°î_«me
,

1249 
CITP_OPTS
.
˛u°î_size
,

1250 
CITP_OPTS
.
˛u°î_ª°¨t_›t
,

1251 
	`sock_œddr_be32
(
sock
),

1252 
	`sock_Õ‹t_be16
(
sock
))) != 0 ) {

1253 
î∫o
 = -
rc
;

1257 
	}
}

1263 
	$ci_t˝_böd
(
côp_sockë
* 
ï
, c⁄° 
sockaddr
* 
my_addr
,

1264 
sockÀn_t
 
addæí
, 
ci_fd_t
 
fd
 )

1266 
sockaddr_ö
* 
my_addr_ö
;

1267 
ci_uöt16
 
√w_p‹t
;

1268 
ci_uöt32
 
addr_be32
;

1269 
ci_sock_cmn
* 
s
 = 
ï
->s;

1270 
ci_t˝_°©e
* 
c
 = &
	`SOCK_TO_WAITABLE_OBJ
(
s
)->
t˝
;

1271 
rc
 = 0;

1273 
	`CHECK_TEP
(
ï
);

1274 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ï
->
√tif
));

1276 
my_addr_ö
 = (
sockaddr_ö
*Ë
my_addr
;

1281 i‡(
my_addr
 =
NULL
)

1282 
	`RET_WITH_ERRNO
–
EINVAL
 );

1284 #ifde‡
__sun__


1285 i‡(
s
->
s_Êags
 & 
CI_SOCK_FLAG_BOUND
)

1286 
	`RET_WITH_ERRNO
–
EINVAL
 );

1289 i‡(
s
->
b
.
°©e
 !
CI_TCP_CLOSED
)

1290 
	`RET_WITH_ERRNO
–
EINVAL
 );

1292 i‡(
c
->
t˝Êags
 & 
CI_TCPT_FLAG_WAS_ESTAB
)

1293 
	`RET_WITH_ERRNO
–
EINVAL
 );

1295 if–
my_addr
->
ß_Ámûy
 !
s
->
domaö
 )

1296 
	`RET_WITH_ERRNO
–
s
->
domaö
 =
PF_INET
 ? 
EAFNOSUPPORT
 : 
EINVAL
 );

1298 #i‚de‡
__sun__


1301 i‡(
s
->
domaö
 =
PF_INET
 && 
addæí
 < (
sockaddr_ö
))

1302 
	`RET_WITH_ERRNO
–
EINVAL
 );

1304 i‡(
s
->
domaö
 =
PF_INET
 && 
addæí
 !(
sockaddr_ö
))

1305 
	`RET_WITH_ERRNO
–
EINVAL
 );

1308 #i‡
CI_CFG_FAKE_IPV6


1309 i‡(
s
->
domaö
 =
PF_INET6
 && 
addæí
 < 
SIN6_LEN_RFC2133
)

1310 
	`RET_WITH_ERRNO
–
EINVAL
 );

1312 if–
s
->
domaö
 =
PF_INET6
 && !
	`ci_t˝_ùv6_is_ùv4
(
my_addr
) ) {

1313 if–!(
ï
->
s
->
b
.
sb_aÊags
 & 
CI_SB_AFLAG_OS_BACKED
) ) {

1314 
rc
 = 
	`ci_t˝_hñ≥r_os_sock_¸óã_™d_£t
(
ï
->
√tif
, 
fd
, 
s
, -1, 0, 
NULL
,

1316 if–
rc
 < 0 )

1317 
	`RET_WITH_ERRNO
(
î∫o
);

1319  
CI_SOCKET_HANDOVER
;

1323 if–((
s
->
s_Êags
 & 
CI_SOCK_FLAG_TPROXY
) != 0) &&

1324 (
my_addr_ö
->
sö_p‹t
 == 0) ) {

1325 
	`NI_LOG
(
ï
->
√tif
, 
USAGE_WARNINGS
, "Sockets with IP_TRANSPARENT set must "

1327 if–!(
ï
->
s
->
b
.
sb_aÊags
 & 
CI_SB_AFLAG_OS_BACKED
) ) {

1328 
rc
 = 
	`ci_t˝_hñ≥r_os_sock_¸óã_™d_£t
(
ï
->
√tif
, 
fd
, 
s
, -1, 0, 
NULL
,

1330 if–
rc
 < 0 )

1331 
	`RET_WITH_ERRNO
(
î∫o
);

1333  
CI_SOCKET_HANDOVER
;

1336 
addr_be32
 = 
	`ci_gë_ù4_addr
(
s
->
domaö
, 
my_addr
);

1338 if–((
s
->
s_Êags
 & 
CI_SOCK_FLAG_TPROXY
Ë!0Ë&& (
addr_be32
 == 0) ) {

1339 
	`NI_LOG
(
ï
->
√tif
, 
USAGE_WARNINGS
, "Sockets with IP_TRANSPARENT set must "

1341 if–!(
ï
->
s
->
b
.
sb_aÊags
 & 
CI_SB_AFLAG_OS_BACKED
) ) {

1342 
rc
 = 
	`ci_t˝_hñ≥r_os_sock_¸óã_™d_£t
(
ï
->
√tif
, 
fd
, 
s
, -1, 0, 
NULL
,

1344 if–
rc
 < 0 )

1345 
	`RET_WITH_ERRNO
(
î∫o
);

1347  
CI_SOCKET_HANDOVER
;

1351 
√w_p‹t
 = 
my_addr_ö
->
sö_p‹t
;

1353 if–
CITP_OPTS
.
t˝_ªu£p‹ts
 !0 && 
√w_p‹t
 != 0 ) {

1354 
ci_p‹t_li°
 *
f‹˚_ªu£p‹t
;

1355 
	`CI_DLLIST_FOR_EACH2
(
ci_p‹t_li°
, 
f‹˚_ªu£p‹t
, 
lök
,

1356 (
ci_dŒi°
*)(
ci_uöçå_t
)
CITP_OPTS
.
t˝_ªu£p‹ts
) {

1357 if–
f‹˚_ªu£p‹t
->
p‹t
 =
√w_p‹t
 ) {

1358 
⁄e
 = 1;

1359 if–
ï
->
s
->
b
.
sb_aÊags
 & 
CI_SB_AFLAG_OS_BACKED
 ) {

1360 
ci_fd_t
 
os_sock
 = 
	`ci_gë_os_sock_fd
(
fd
);

1361 
	`ci_as£π
(
	`CI_IS_VALID_SOCKET
(
os_sock
));

1362 
rc
 = 
	`ci_sys_£tsock›t
(
os_sock
, 
SOL_SOCKET
, 
SO_REUSEPORT
, &
⁄e
,

1363 (
⁄e
));

1364 
	`ci_ªl_os_sock_fd
(
os_sock
);

1367 if–(
s
->
s_Êags
 & 
CI_SOCK_FLAG_TPROXY
) == 0 ) {

1368 
rc
 = 
	`ci_t˝_hñ≥r_os_sock_¸óã_™d_£t
(
ï
->
√tif
, 
fd
, 
s
,

1369 
SOL_SOCKET
, 
SO_REUSEPORT
,

1370 (*)&
⁄e
, (one));

1372 if–
rc
 != 0 ) {

1373 
	`log
("%s: failedÅo set SO_REUSEPORT on OS socket: "

1374 "rc=%dÉºno=%d", 
__func__
, 
rc
, 
î∫o
);

1376 
ï
->
s
->
s_Êags
 |
CI_SOCK_FLAG_REUSEPORT
;

1377 
	`LOG_TC
(
	`log
("%†"
SF_FMT
",áppliedÜegacy SO_REUSEPORT flag forÖort %u",

1378 
__FUNCTION__
, 
	`SF_PRI_ARGS
(
ï
, 
fd
), 
√w_p‹t
));

1383 
	`CI_LOGLEVEL_TRY_RET
(
LOG_TV
,

1384 
	`__ci_t˝_böd
(
ï
->
√tif
,Ép->
s
, 
fd
, 
addr_be32
,

1385 &
√w_p‹t
, 1));

1386 
ï
->
s
->
s_Êags
 |
CI_SOCK_FLAG_BOUND
;

1387 
	`sock_Õ‹t_be16
(
s
Ë
√w_p‹t
;

1388 
	`sock_œddr_be32
(
s
Ë
addr_be32
;

1389 if–
	`CI_IP_IS_MULTICAST
(
addr_be32
) )

1390 
s
->
˝
.
ù_œddr_be32
 = 0;

1392 
s
->
˝
.
ù_œddr_be32
 = 
addr_be32
;

1393 
s
->
˝
.
Õ‹t_be16
 = 
√w_p‹t
;

1394 
	`sock_Ω‹t_be16
(
s
Ë
	`sock_øddr_be32
(s) = 0;

1396 
	`LOG_TC
(
	`log
(
LPF
 "bödÅÿ%s:%uÇ_p:%uÜp:%u", 
	`ù_addr_°r
(
addr_be32
),

1397 (Ë
	`CI_BSWAP_BE16
(
my_addr_ö
->
sö_p‹t
),

1398 
	`CI_BSWAP_BE16
(
√w_p‹t
), CI_BSWAP_BE16(
	`sock_Õ‹t_be16
(
s
))));

1401 
	}
}

1411 
	$ci_t˝_li°í
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
, 
backlog
)

1421 
ci_t˝_°©e
* 
ts
;

1422 
ci_t˝_sockë_li°í
* 
és
;

1423 
ci_√tif
* 
√tif
 = 
ï
->netif;

1424 
ci_sock_cmn
* 
s
 = 
ï
->s;

1425 
ul_backlog
 = 
backlog
;

1426 
rc
;

1427 
oo_p
 
•
;

1429 
	`LOG_TC
(
	`log
("%†"
SK_FMT
"Üi°í backlog=%d", 
__FUNCTION__
, 
	`SK_PRI_ARGS
(
ï
),

1430 
backlog
));

1431 
	`CHECK_TEP
(
ï
);

1433 if–
	`NI_OPTS
(
√tif
).
t˝_li°í_h™dovî
 )

1434  
CI_SOCKET_HANDOVER
;

1435 if–!
	`NI_OPTS
(
√tif
).
t˝_£rvî_lo›back
) {

1437 if–
s
->
s_Êags
 & 
CI_SOCK_FLAG_BOUND_ALIEN
 )

1438  
CI_SOCKET_HANDOVER
;

1441 if–
ul_backlog
 < 0 )

1442 
ul_backlog
 = 
	`NI_OPTS
(
√tif
).
max_ï_bufs
;

1443 if–
ul_backlog
 < 
	`NI_OPTS
(
√tif
).
ac˚±q_mö_backlog
 )

1444 
ul_backlog
 = 
	`NI_OPTS
(
√tif
).
ac˚±q_mö_backlog
;

1446 if–
s
->
b
.
°©e
 =
CI_TCP_LISTEN
 ) {

1447 
és
 = 
	`SOCK_TO_TCP_LISTEN
(
s
);

1448 
	`ci_√tif_lock
(
ï
->
√tif
);

1449 
és
->
ac˚±q_max
 = 
ul_backlog
;

1450 
	`ci_t˝_hñ≥r_li°í_os_sock
(
fd
, 
ul_backlog
);

1451 
	`ci_√tif_u∆ock
(
ï
->
√tif
);

1455 if–
s
->
b
.
°©e
 !
CI_TCP_CLOSED
 ) {

1456 
	`CI_SET_ERROR
(
rc
, 
EINVAL
);

1457  
rc
;

1460 #ifde‡
_WIN32


1462 if–! 
	`S_TCP_HDR
(
s
)->
t˝_sour˚_be16
 ) {

1463 
	`CI_SET_ERROR
(
rc
, 
EINVAL
);

1464  
rc
;

1466 
	`ci_as£π
(
s
->
s_Êags
 & 
CI_SOCK_FLAG_BOUND
);

1469 
ts
 = 
	`SOCK_TO_TCP
(
s
);

1476 #ifde‡
__löux__


1477 
ts
->
s
.
tx_î∫o
 = 
EPIPE
;

1480 #ifde‡
_WIN32


1481 
ts
->
s
.
tx_î∫o
 = 
EPIPE
;

1484 #ifde‡
__sun__


1485 
ts
->
s
.
tx_î∫o
 = 
ENOTCONN
;

1488 
ts
->
s
.
rx_î∫o
 = 
ENOTCONN
;

1490 
	`ci_sock_lock
(
√tif
, &
ts
->
s
.
b
);

1491 
	`ci_√tif_lock
(
ï
->
√tif
);

1492 #i‚de‡
_WIN32


1494 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_CONNECT_MUST_BIND
 ) {

1495 
ci_uöt16
 
sour˚_be16
;

1500 
sour˚_be16
 = 0;

1501 
rc
 = 
	`__ci_t˝_böd
(
ï
->
√tif
,Ép->
s
, 
fd
, 
ts
->s.
pkt
.
ù
.
ù_ßddr_be32
,

1502 &
sour˚_be16
, 0);

1503 i‡(
	`CI_LIKELY
–
rc
==0 )) {

1504 
	`TS_TCP
(
ts
)->
t˝_sour˚_be16
 = 
sour˚_be16
;

1505 
ts
->
s
.
˝
.
Õ‹t_be16
 = 
sour˚_be16
;

1506 
	`LOG_TC
(
	`log
(
LNT_FMT
 "listen: our bindÑeturned %s:%u",

1507 
	`LNT_PRI_ARGS
(
ï
->
√tif
, 
ts
),

1508 
	`ù_addr_°r
(
ts
->
s
.
pkt
.
ù
.
ù_ßddr_be32
),

1509 (Ë
	`CI_BSWAP_BE16
(
	`TS_TCP
(
ts
)->
t˝_sour˚_be16
)));

1512 
	`LOG_U
(
	`ci_log
("__ci_t˝_bödÑëu∫ed %dáà%s:%d", 
	`CI_GET_ERROR
(
rc
),

1513 
__FILE__
, 
__LINE__
));

1514 
	`ci_√tif_u∆ock
(
ï
->
√tif
);

1515 
	`ci_sock_u∆ock
(
√tif
, &
ts
->
s
.
b
);

1516  
rc
;

1521 
	`ci_t˝_£t_¶ow_°©e
(
√tif
, 
ts
, 
CI_TCP_LISTEN
);

1522 
és
 = 
	`SOCK_TO_TCP_LISTEN
(&
ts
->
s
);

1524 
	`t˝_øddr_be32
(
és
) = 0u;

1525 
	`t˝_Ω‹t_be16
(
és
) = 0u;

1527 #ifde‡
__löux__


1528 
	`ci_as£π_equÆ
(
és
->
s
.
tx_î∫o
, 
EPIPE
);

1531 #ifde‡
_WIN32


1532 
	`ci_as£π_equÆ
(
és
->
s
.
tx_î∫o
, 
EPIPE
);

1535 #ifde‡
__sun__


1536 
	`ci_as£π_equÆ
(
és
->
s
.
tx_î∫o
, 
ENOTCONN
);

1539 
	`ci_as£π_equÆ
(
és
->
s
.
rx_î∫o
, 
ENOTCONN
);

1543 if–~
és
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_BOUND_ALIEN
 ) {

1544 
•
 = 
	`TS_OFF
(
√tif
, 
és
);

1545 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
ci_t˝_sockë_li°í
, 
li°íq_tid
));

1546 
	`ci_ù_timî_öô
(
√tif
, &
és
->
li°íq_tid
, 
•
, "lstq");

1547 
és
->
li°íq_tid
.
∑øm1
 = 
	`S_SP
(tls);

1548 
és
->
li°íq_tid
.
‚
 = 
CI_IP_TIMER_TCP_LISTEN
;

1551 
rc
 = 
	`ci_t˝_li°í_öô
(
√tif
, 
és
);

1554 
	`ci_√tif_u∆ock
(
ï
->
√tif
);

1555 
	`ci_sock_u∆ock
(
√tif
, &
ts
->
s
.
b
);

1556 
	`ci_√tif_lock
(
ï
->
√tif
);

1558 if–
rc
 != 0 ) {

1559 
	`CI_SET_ERROR
(
rc
, -rc);

1560 
li°í_Áû
;

1562 
és
->
ac˚±q_max
 = 
ul_backlog
;

1564 
	`CITP_STATS_TCP_LISTEN
(
	`CI_ZERO
(&
és
->
°©s
));

1573 if–~
s
->
s_Êags
 & 
CI_SOCK_FLAG_BOUND_ALIEN
 ) {

1574 #ifde‡
ONLOAD_OFE


1575 if–
√tif
->
o„_ch™√l
 !
NULL
 ) {

1576 
és
->
s
.
o„_code_°¨t
 = 
	`o„_socktbl_föd
(

1577 
√tif
->
o„
, 
OFE_SOCKTYPE_TCP_LISTEN
,

1578 
	`t˝_œddr_be32
(
és
), 
INADDR_ANY
,

1579 
	`t˝_Õ‹t_be16
(
ts
), 0);

1580 
és
->
o„_¥omŸe
 = 
	`o„_socktbl_föd
(

1581 
√tif
->
o„
, 
OFE_SOCKTYPE_TCP_PASSIVE
,

1582 
	`t˝_œddr_be32
(
és
), 
INADDR_ANY
,

1583 
	`t˝_Õ‹t_be16
(
ts
), 0);

1586 
és
->
s
.
o„_code_°¨t
 = 
OFE_ADDR_NULL
;

1587 
és
->
o„_¥omŸe
 = 
OFE_ADDR_NULL
;

1590 
rc
 = 
	`ci_t˝_ï_£t_fûãrs
(
√tif
, 
	`S_SP
(
és
),Åls->
s
.
˝
.
so_bödtodevi˚
,

1591 
OO_SP_NULL
);

1592 if–
rc
 =-
EFILTERSSOME
 ) {

1593 if–
CITP_OPTS
.
no_Áû
 )

1594 
rc
 = 0;

1596 
	`ci_t˝_ï_˛ór_fûãrs
(
√tif
, 
	`S_SP
(
és
), 0);

1597 
rc
 = -
ENOBUFS
;

1600 
	`ci_as£π_√quÆ
(
rc
, -
EFILTERSSOME
);

1601 
	`VERB
(
	`ci_log
("%s: së_fûãr†Ñëu∫ed %d", 
__FUNCTION__
, 
rc
));

1602 i‡(
rc
 < 0) {

1603 
	`CI_SET_ERROR
(
rc
, -rc);

1604 
po°_li°í_Áû
;

1608 #ifde‡
_WIN32


1615 
	`ci_¶ìp
(500);

1623 #i‚de‡
_WIN32


1624 #ifde‡
__ci_drivî__


1626 
rc
 = 
	`eÁb_t˝_hñ≥r_li°í_os_sock
–
	`√tif2t˝_hñ≥r_ªsour˚
(
√tif
),

1627 
	`S_SP
(
és
), 
backlog
);

1630 
rc
 = 
	`ci_t˝_hñ≥r_li°í_os_sock
(
fd
, 
backlog
);

1632 i‡–
rc
 < 0 ) {

1634 
	`ci_t˝_ï_˛ór_fûãrs
(
√tif
, 
	`S_SP
(
és
), 0);

1635 
po°_li°í_Áû
;

1639 
ci_fd_t
 
os_sock
 = 
	`ci_gë_os_sock_fd
(
ï
, 
fd
);

1641 
	`ci_as£π_√quÆ
–
os_sock
, 
CI_INVALID_SOCKET
);

1644 
	`VERB
(
	`ci_log
("%s: downˇŒ sys_li°í(%#x/%d, %d)", 
__FUNCTION__
,

1645 
os_sock
, os_sock, 
backlog
));

1646 if–
CI_SOCKET_ERROR
 =
	`ci_sys_li°í
–
ï
, 
backlog
 ) ) {

1647 
	`CI_SET_ERROR
–
rc
, 
î∫o
 );

1649 
	`ci_t˝_ï_˛ór_fûãrs
(
√tif
, 
	`S_SP
(
és
), 0);

1650 
	`ci_ªl_os_sock_fd
(
os_sock
);

1651 
	`VERB
(
	`ci_log
("%s: sys_li°í faûed wôh %d", 
__FUNCTION__
, 
rc
));

1652 
po°_li°í_Áû
;

1654 
	`ci_ªl_os_sock_fd
(
os_sock
);

1657 
	`ci_√tif_u∆ock
(
ï
->
√tif
);

1660 
po°_li°í_Áû
:

1661 
	`ci_t˝_li°íq_dr›_Æl
(
√tif
, 
és
);

1662 
li°í_Áû
:

1664 
	`__ci_t˝_li°í_to_n‹mÆ
(
√tif
, 
és
);

1666 
	`ci_bô_˛ór
(&
és
->
s
.
b
.
sb_aÊags
, 
CI_SB_AFLAG_ORPHAN_BIT
);

1667 
	`ci_√tif_u∆ock
(
ï
->
√tif
);

1668 #ifde‡
__ci_drivî__


1669  
rc
;

1671  
CI_SOCKET_ERROR
;

1673 
	}
}

1676 
	$ci_t˝_shutdown_li°í
(
côp_sockë
* 
ï
, 
how
, 
ci_fd_t
 
fd
)

1678 #i‚de‡
__löux__


1679 
rc
;

1680 
	`CI_SET_ERROR
(
rc
, 
ENOTCONN
);

1681  
rc
;

1683 
ci_t˝_sockë_li°í
* 
és
 = 
	`SOCK_TO_TCP_LISTEN
(
ï
->
s
);

1685 if–
how
 =
SHUT_WR
 )

1688 
	`ci_sock_lock
(
ï
->
√tif
, &
és
->
s
.
b
);

1689 
	`ci_√tif_lock
(
ï
->
√tif
);

1690 
	`LOG_TC
(
	`ci_log
(
SK_FMT
" shutdown(SHUT_RD)", 
	`SK_PRI_ARGS
(
ï
)));

1691 
	`__ci_t˝_li°í_shutdown
(
ï
->
√tif
, 
és
, 
fd
);

1692 
	`__ci_t˝_li°í_to_n‹mÆ
(
ï
->
√tif
, 
és
);

1694 
ci_fd_t
 
os_sock
 = 
	`ci_gë_os_sock_fd
(
fd
);

1695 
Êags
 = 
	`ci_sys_f˙é
(
os_sock
, 
F_GETFL
);

1696 
Êags
 &(~
O_NONBLOCK
);

1697 
	`CI_TRY
(
	`ci_sys_f˙é
(
os_sock
, 
F_SETFL
, 
Êags
));

1698 
	`ci_ªl_os_sock_fd
(
os_sock
);

1700 
	`côp_waôabÀ_wake_nŸ_ö_pﬁl
(
ï
->
√tif
, &
és
->
s
.
b
,

1701 
CI_SB_FLAG_WAKE_RX
 | 
CI_SB_FLAG_WAKE_TX
);

1702 
	`ci_√tif_u∆ock
(
ï
->
√tif
);

1703 
	`ci_sock_u∆ock
(
ï
->
√tif
, &
és
->
s
.
b
);

1706 
	}
}

1709 
	$ci_t˝_shutdown
(
côp_sockë
* 
ï
, 
how
, 
ci_fd_t
 
fd
)

1711 
ci_sock_cmn
* 
s
 = 
ï
->s;

1712 
rc
;

1714 if–
s
->
b
.
°©e
 =
CI_TCP_LISTEN
 )

1715  
	`ci_t˝_shutdown_li°í
(
ï
, 
how
, 
fd
);

1717 if–
	`SOCK_TO_TCP
(
s
)->
¢d_dñeg©ed
 ) {

1720 
	`CI_SET_ERROR
(
rc
, 
EBUSY
);

1721  
rc
;

1724 if–! 
	`ci_√tif_åylock
(
ï
->
√tif
) ) {

1726 
Êags
 = 0;

1727  
s
->
b
.
°©e
 ) {

1728 
CI_TCP_CLOSED
:

1729 
CI_TCP_TIME_WAIT
:

1730 
	`CI_SET_ERROR
(
rc
, 
ENOTCONN
);

1731  
rc
;

1733 if–
how
 =
SHUT_RD
 || how =
SHUT_RDWR
 )

1734 
Êags
 |
CI_SOCK_AFLAG_NEED_SHUT_RD
;

1735 if–
how
 =
SHUT_WR
 || how =
SHUT_RDWR
 )

1736 
Êags
 |
CI_SOCK_AFLAG_NEED_SHUT_WR
;

1737 
	`ci_©omic32_‹
(&
s
->
s_aÊags
, 
Êags
);

1738 if–! 
	`ci_√tif_lock_‹_de„r_w‹k
(
ï
->
√tif
, &
s
->
b
) )

1740 
	`ci_©omic32_™d
(&
s
->
s_aÊags
, ~
Êags
);

1752 
	`ci_√tif_pﬁl
(
ï
->
√tif
);

1754 
rc
 = 
	`__ci_t˝_shutdown
(
ï
->
√tif
, 
	`SOCK_TO_TCP
(
s
), 
how
);

1755 if–
rc
 < 0 )

1756 
	`CI_SET_ERROR
(
rc
, -rc);

1757 
	`ci_√tif_u∆ock
(
ï
->
√tif
);

1758  
rc
;

1759 
	}
}

1762 
	$ci_t˝_gë≥î«me
(
côp_sockë
* 
ï
, 
sockaddr
* 
«me
,

1763 
sockÀn_t
* 
«mñí
)

1765 
ci_sock_cmn
* 
s
 = 
ï
->s;

1766 
rc
;

1768 
	`CHECK_TEP_NNL
(
ï
);

1770 #ifde‡
_WIN32


1772 if–! (
	`SOCK_TO_WAITABLE_OBJ
(
s
)->
t˝
.
t˝Êags
 & 
CI_TCPT_FLAG_WAS_ESTAB
) )

1775 if–! (
s
->
b
.
°©e
 & 
CI_TCP_STATE_SYNCHRONISED
) ||

1776 
s
->
b
.
°©e
 =
CI_TCP_TIME_WAIT
 )

1778 
	`CI_SET_ERROR
(
rc
, 
ENOTCONN
);

1779 if–
«me
 =
NULL
 || 
«mñí
 == NULL )

1780 
	`CI_SET_ERROR
(
rc
, 
EFAULT
);

1782 
	`ci_addr_to_u£r
(
«me
, 
«mñí
, 
s
->
domaö
,

1783 
	`S_TCP_HDR
(
s
)->
t˝_de°_be16
, s->
pkt
.
ù
.
ù_daddr_be32
);

1784 
rc
 = 0;

1787  
rc
;

1788 
	}
}

1791 
	$ci_t˝_gësock«me
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
, 
sockaddr
* 
ß
,

1792 
sockÀn_t
* 
p_ß_Àn
) {

1793 
ci_sock_cmn
* 
s
 = 
ï
->s;

1794 
rc
 = 0;

1797 
	`ci_t˝_böd_Êags_as£π_vÆid
(
s
);

1799 if–
s
->
s_Êags
 & 
CI_SOCK_FLAG_DEFERRED_BIND
 ) {

1800 
ci_uöt16
 
sour˚_be16
 = 0;

1802 if–
s
->
s_Êags
 & 
CI_SOCK_FLAG_ADDR_BOUND
 )

1803 
rc
 = 
	`__ci_t˝_böd
(
ï
->
√tif
, 
s
, 
fd
, s->
pkt
.
ù
.
ù_ßddr_be32
,

1804 &
sour˚_be16
, 0);

1806 
rc
 = 
	`__ci_t˝_böd
(
ï
->
√tif
, 
s
, 
fd
, 
INADDR_ANY
, &
sour˚_be16
, 0);

1808 if(
	`CI_LIKELY
–
rc
 == 0 )) {

1809 
s
->
s_Êags
 &~(
CI_SOCK_FLAG_DEFERRED_BIND
 |

1810 
CI_SOCK_FLAG_CONNECT_MUST_BIND
);

1811 
	`sock_Õ‹t_be16
(
s
Ë
sour˚_be16
;

1812 
s
->
˝
.
Õ‹t_be16
 = 
sour˚_be16
;

1813 
	`LOG_TC
(
	`log
(
NSS_FMT
 "Deferred bindÑeturned %s:%u",

1814 
	`NSS_PRI_ARGS
(
ï
->
√tif
, 
s
),

1815 
	`ù_addr_°r
(
INADDR_ANY
), 
	`¡ohs
(
	`sock_Õ‹t_be16
(
s
))));

1818 
	`LOG_U
(
	`ci_log
("__ci_t˝_bödÑëu∫ed %dáà%s:%d", 
	`CI_GET_ERROR
(
rc
),

1819 
__FILE__
, 
__LINE__
));

1823  
rc
;

1824 
	}
}

	@tcp_debug.c

11 
	~"ù_öã∫Æ.h
"

18 
	$ci_t˝_tx_pkt_as£π_vÆid
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

19 
ci_ù_pkt_fmt
* 
pkt
,

20 c⁄° * 
fûe
, 
löe
)

23 
ci_ù_pkt_fmt
* 
√xt_pkt
;

24 
ci_t˝_hdr
* 
t˝
;

25 
i
, 
Àn
, 
∑yÀn
;

27 
	`vîify
(
	`IS_VALID_PKT_ID
(
ni
, 
	`OO_PKT_P
(
pkt
)));

28 
	`vîify
(
pkt
->
ªfcou¡
 > 0);

31 
	`vîify
(
pkt
->
pkt_ëh_∑ylﬂd_off
 =
ETH_HLEN
);

32 
	`vîify
(
pkt
->
pkt_°¨t_off
 =0 ||Ökt->pkt_°¨t_of‡=-
ETH_VLAN_HLEN
);

33 
	`vîify
(
	`CI_IP4_IHL
(
	`oo_tx_ù_hdr
(
pkt
)Ë=(
ci_ù4_hdr
));

34 
t˝
 = 
	`TX_PKT_TCP
(
pkt
);

35 
	`vîify
(
t˝
 =
	`PKT_TCP_HDR
(
pkt
));

38 
	`vîify
(
t˝
->
t˝_sour˚_be16
 =
	`TS_TCP
(
ts
)->tcp_source_be16);

39 if–
ts
->
s
.
b
.
°©e
 !
CI_TCP_LISTEN
 ) {

40 
	`vîify
(
t˝
->
t˝_de°_be16
 =
	`TS_TCP
(
ts
)->tcp_dest_be16);

41 
	`vîify
(
	`oo_tx_ù_hdr
(
pkt
)->
ù_ßddr_be32
 =
ts
->
s
.pkt.
ù
.ip_saddr_be32);

42 
	`vîify
(
	`oo_tx_ù_hdr
(
pkt
)->
ù_daddr_be32
 =
ts
->
s
.pkt.
ù
.ip_daddr_be32);

47 
	`vîify
(
	`SEQ_LT
(
	`t˝_¢d_u«
(
ts
), 
pkt
->
pf
.
t˝_tx
.
íd_£q
));

48 
	`vîify
(
	`SEQ_LE
(
pkt
->
pf
.
t˝_tx
.
íd_£q
, 
	`t˝_íq_nxt
(
ts
)));

51 
∑yÀn
 = 
	`SEQ_SUB
(
pkt
->
pf
.
t˝_tx
.
íd_£q
,Ökt->pf.t˝_tx.
°¨t_£q
);

52 if–
t˝
->
t˝_Êags
 & (
CI_TCP_FLAG_SYN
 | 
CI_TCP_FLAG_FIN
ËË--
∑yÀn
;

53 
	`vîify
(
	`CI_TCP_HDR_OPT_LEN
(
t˝
Ë=
	`t˝_outgoög_›ts_Àn
(
ts
)

54 || (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
));

56 
	`vîify
(
pkt
->
n_buf„rs
 >= 1);

57 
	`vîify
(
pkt
->
n_buf„rs
 <
CI_IP_PKT_SEGMENTS_MAX
);

58 
√xt_pkt
 = 
pkt
;

59  
Àn
 = 0, 
i
 = 0; i < 
pkt
->
n_buf„rs
; ++i ) {

60 
	`vîify
(
√xt_pkt
->
buf_Àn
 > 0);

61 
Àn
 +
√xt_pkt
->
buf_Àn
;

62 if–
i
 < 
pkt
->
n_buf„rs
-1 )

63 
√xt_pkt
 = 
	`PKT_CHK
(
ni
,Çext_pkt->
‰ag_√xt
);

65 
	`vîify
(
Àn
 =
∑yÀn
 + 
	`CI_TCP_HDR_LEN
(
t˝
) +

66 
	`CI_IP4_IHL
(
	`oo_tx_ù_hdr
(
pkt
)Ë+ 
	`oo_ëhî_hdr_size
(pkt));

67 
	`vîify
(
Àn
 =
pkt
->
∑y_Àn
);

69 
	`vîify
(
	`oo_offbuf_±r
(&
pkt
->
buf
) ==

70 (*Ë
	`oo_tx_ëhî_d©a
(
pkt
Ë+ 
ts
->
outgoög_hdrs_Àn
 + 
∑yÀn
);

71 
	`vîify
(
	`oo_offbuf_íd
(&
pkt
->
buf
) ==

72 (*Ë
	`oo_tx_ëhî_d©a
(
pkt
Ë+ 
ts
->
outgoög_hdrs_Àn
 +Ås->
eff_mss
);

73 
	`vîify
(
	`oo_offbuf_íd
(&
pkt
->
buf
Ë<(*Ëpkà+ 
CI_CFG_PKT_BUF_SIZE
);

74 
	}
}

81 
	$ci_t˝_°©e_li°í_as£π_vÆid
(
ci_√tif
* 
√tif
,

82 
ci_t˝_sockë_li°í
* 
t¶
,

83 c⁄° * 
fûe
, 
löe
)

85 #ifde‡
__löux__


86 
	`vîify
(
t¶
->
s
.
tx_î∫o
 =
EPIPE
);

89 #ifde‡
_WIN32


90 
	`vîify
(
t¶
->
s
.
tx_î∫o
 =
EPIPE
);

93 #ifde‡
__sun__


94 
	`vîify
(
t¶
->
s
.
tx_î∫o
 =
ENOTCONN
);

97 
	`vîify
(
t¶
->
s
.
rx_î∫o
 =
ENOTCONN
);

99 
	`vîify
(
	`ci_to_öt
(
	`ci_t˝_ac˚±q_n
(
t¶
)) >= 0);

100 if–
	`ci_t˝_ac˚±q_n
(
t¶
) )

101 
	`vîify
(
	`ci_t˝_ac˚±q_nŸ_em±y
(
t¶
));

107 if–(Ë
	`ci_t˝_ac˚±q_n
(
t¶
Ë>Å¶->
ac˚±q_max
 )

108 
	`LOG_U
(
	`log
(
NTS_FMT
"áccept queue has moreÉlements (%d)Åhan "

109 "Ælowed (%d)", 
	`NTS_PRI_ARGS
(
√tif
, 
t¶
), 
	`ci_t˝_ac˚±q_n
(tsl),

110 
t¶
->
ac˚±q_max
));

111 
	}
}

113 #i‚de‡
NDEBUG


114 
	$ci_t˝_°©e_ªå™s_as£π_vÆid
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

115 c⁄° * 
fûe
, 
löe
)

117 
ci_ù_pkt_queue
* 
πq
 = &
ts
->
ªå™s
;

118 
ci_ù_pkt_fmt
 *
pkt
 = 
NULL
, *
íd
, *
¥ev_pkt
;

119 
num
 = 0, 
is_ßcked
 = 0;

120 
oo_pkt_p
 
id
;

122 
id
 = 
πq
->
hód
;

123 
¥ev_pkt
 = 0;

125  
	`OO_PP_NOT_NULL
(
id
) ) {

126 
	`vîify
(
	`IS_VALID_PKT_ID
(
ni
, 
id
));

127 
pkt
 = 
	`PKT
(
ni
, 
id
);

128 if–
	`OO_PP_EQ
(
id
, 
πq
->
hód
) ) {

129 
is_ßcked
 = (
pkt
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
) != 0;

130 
	`vîify
(
	`SEQ_LE
(
pkt
->
pf
.
t˝_tx
.
°¨t_£q
, 
	`t˝_¢d_u«
(
ts
)));

131 
	`vîify
(
	`SEQ_LT
(
	`t˝_¢d_u«
(
ts
), 
pkt
->
pf
.
t˝_tx
.
íd_£q
));

133 if–
	`OO_PP_IS_NULL
(
pkt
->
pf
.
t˝_tx
.
block_íd
) ) ;

135 
	`vîify
(
	`IS_VALID_PKT_ID
(
ni
, 
pkt
->
pf
.
t˝_tx
.
block_íd
));

136 
íd
 = 
	`PKT
(
ni
, 
pkt
->
pf
.
t˝_tx
.
block_íd
);

139 if–
¥ev_pkt
 )

140 
	`vîify
(
pkt
->
pf
.
t˝_tx
.
°¨t_£q
 =
¥ev_pkt
->pf.t˝_tx.
íd_£q
);

141 
	`vîify
(
	`SEQ_LE
(
pkt
->
pf
.
t˝_tx
.
íd_£q
, 
íd
->pf.tcp_tx.end_seq));

142 if–
is_ßcked
 ) 
	`vîify
(
pkt
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
);

143 
	`vîify
(~
pkt
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
);

144 
¥ev_pkt
 = 
pkt
;

145 ++
num
;

146 if–
pkt
 =
íd
 ) ;

147 
	`vîify
(
	`IS_VALID_PKT_ID
(
ni
, 
pkt
->
√xt
));

148 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

151 
id
 = 
íd
->
√xt
;

152 
is_ßcked
 = ! is_sacked;

155 if–
	`OO_PP_IS_NULL
(
id
ËË
d⁄e
;

158 
	`vîify
(! 
is_ßcked
);

160 if–
¥ev_pkt
 )

161 
	`vîify
(
pkt
->
pf
.
t˝_tx
.
°¨t_£q
 =
¥ev_pkt
->pf.t˝_tx.
íd_£q
);

162 
	`vîify
(
	`OO_PP_IS_NULL
(
pkt
->
pf
.
t˝_tx
.
block_íd
));

163 
	`vîify
(~
pkt
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
);

164 
¥ev_pkt
 = 
pkt
;

165 ++
num
;

166 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) ) ;

167 
	`vîify
(
	`IS_VALID_PKT_ID
(
ni
, 
pkt
->
√xt
));

168 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

171 
d⁄e
:

172 
	`vîify
–! 
pkt
 || 
	`OO_PP_EQ
(
	`OO_PKT_P
’kt), 
πq
->
èû
));

173 
	`vîify
(
num
 =
πq
->num);

174 
	}
}

177 
	$ci_t˝_°©e_£nd_as£π_vÆid
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

178 c⁄° * 
fûe
, 
löe
)

180 
ci_ù_pkt_queue
* 
£ndq
 = &
ts
->
£nd
;

181 
ci_ù_pkt_fmt
 *
pkt
;

182 
¥ev_£q
 = 
	`t˝_¢d_nxt
(
ts
);

183 
byãs
, 
num
;

184 
oo_pkt_p
 
id
;

186 
byãs
 = 0;

187 
num
 = 0;

189  
id
 = 
£ndq
->
hód
; 
	`OO_PP_NOT_NULL
(id); id = 
pkt
->
√xt
 ) {

190 
	`vîify
(
	`IS_VALID_PKT_ID
(
ni
, 
id
));

191 
pkt
 = 
	`PKT
(
ni
, 
id
);

192 
byãs
 +
	`SEQ_SUB
(
pkt
->
pf
.
t˝_tx
.
íd_£q
,Ökt->pf.t˝_tx.
°¨t_£q
);

193 
	`vîify
(
	`SEQ_EQ
(
pkt
->
pf
.
t˝_tx
.
°¨t_£q
, 
¥ev_£q
));

194 
¥ev_£q
 = 
pkt
->
pf
.
t˝_tx
.
íd_£q
;

195 ++
num
;

197 
	`vîify
(
ts
->
£nd
.
num
 ==Çum);

198 
	`vîify
(
byãs
 =
	`SEQ_SUB
(
	`t˝_íq_nxt
(
ts
), 
	`t˝_¢d_nxt
(ts)));

199 
	}
}

202 
	$ci_t˝_°©e_c⁄g_as£π_vÆid
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

203 c⁄° * 
fûe
, 
löe
)

205 
ci_ù_pkt_fmt
* 
pkt
;

207 
	`vîify
(!
ts
->
cwnd_exåa
 ||

208 ((
ts
->
c⁄g°©e
 & (
CI_TCP_CONG_FAST_RECOV
|
CI_TCP_CONG_COOLING
)) &&

209 (
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
)));

211 if–
ts
->
c⁄g°©e
 !
CI_TCP_CONG_OPEN
 &&

212 
ts
->
c⁄g°©e
 !
CI_TCP_CONG_NOTIFIED
) {

213 
	`vîify
(
ts
->
c⁄g°©e
 =
CI_TCP_CONG_RTO
 ||

214 
ts
->
c⁄g°©e
 =
CI_TCP_CONG_RTO_RECOV
 ||

215 
ts
->
c⁄g°©e
 =
CI_TCP_CONG_FAST_RECOV
 ||

216 
ts
->
c⁄g°©e
 =
CI_TCP_CONG_COOLING
);

217 
	`vîify
(
	`SEQ_LE
(
ts
->
c⁄gªcovî
, 
	`t˝_¢d_nxt
(ts)));

219 if–
	`SEQ_LT
(
	`t˝_¢d_u«
(
ts
),Ås->
c⁄gªcovî
) ) {

220 if–
ts
->
c⁄g°©e
 !
CI_TCP_CONG_COOLING
 ) {

221 
	`vîify
(
	`SEQ_LE
(
ts
->
ªå™s_£q
,Ås->
c⁄gªcovî
));

222 if–
	`SEQ_LE
(
	`t˝_¢d_u«
(
ts
),Ås->
ªå™s_£q
) ) {

223 
	`vîify
(
	`IS_VALID_PKT_ID
(
ni
, 
ts
->
ªå™s_±r
));

224 
pkt
 = 
	`PKT
(
ni
, 
ts
->
ªå™s_±r
);

225 
	`vîify
(
pkt
->
ªfcou¡
 > 0);

226 
	`vîify
(
	`SEQ_LE
(
pkt
->
pf
.
t˝_tx
.
°¨t_£q
, 
ts
->
ªå™s_£q
));

227 
	`vîify
(
	`SEQ_LT
(
ts
->
ªå™s_£q
, 
pkt
->
pf
.
t˝_tx
.
íd_£q
));

232 
	}
}

235 
	$ci_t˝_°©e_ªcv_as£π_vÆid
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

236 
gŸ_sock_lock
,

237 c⁄° * 
fûe
, 
löe
)

239 
ci_ù_pkt_queue
* 
q
;

240 
exåa˘_poöts_ö_ªcv1
 = 0;

241 
ci_ù_pkt_fmt
 *
pkt
, *
¥ev_pkt
 = 0;

242 
£q
, 
d©a_£q
;

243 
byãs
 = 0, 
num
 = 0;

244 
dr›_sock_lock
 = 0;

245 
ci_t˝_hdr
* 
t˝
;

246 
oo_offbuf
* 
buf
;

247 
oo_pkt_p
 
id
;

249 if–! 
gŸ_sock_lock
 )

250 
gŸ_sock_lock
 = 
dr›_sock_lock
 = 
	`ci_sock_åylock
(
ni
, &
ts
->
s
.
b
);

252 if–
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_ACCEPT_DATA
 )

253 
	`vîify
(
	`SEQ_EQ
(
	`t˝_rcv_nxt
(
ts
),Ås->
rcv_added
));

255 
£q
 = 
ts
->
rcv_dñivîed
;

258 
q
 = &
ts
->
ªcv1
;

259 
id
 = 
q
->
hód
;

260  
	`OO_PP_NOT_NULL
(
id
) ) {

261 
pkt
 = 
	`PKT_CHK
(
ni
, 
id
);

262 
t˝
 = 
	`PKT_TCP_HDR
(
pkt
);

263 
buf
 = &
pkt
->buf;

264 
	`vîify
(
	`oo_offbuf_À·
(
buf
) >= 0);

265 
	`vîify
(
	`oo_offbuf_À·
(
buf
Ë<
	`SEQ_SUB
(
pkt
->
pf
.
t˝_rx
.
íd_£q
,

266 
	`CI_BSWAP_BE32
(
t˝
->
t˝_£q_be32
)));

267 
d©a_£q
 = 
	`PKT_RX_BUF_SEQ
(
pkt
);

268 if–
gŸ_sock_lock
 || 
q
 =&
ts
->
ªcv2
 ) {

269 
	`vîify
(
	`SEQ_EQ
(
d©a_£q
 + 
	`oo_offbuf_À·
(
buf
)

270 + ((
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
)

271 >> 
CI_TCP_FLAG_FIN_BIT
), 
pkt
->
pf
.
t˝_rx
.
íd_£q
));

273 if–
gŸ_sock_lock
 ) {

274 
	`vîify
(
	`SEQ_EQ
(
d©a_£q
, 
£q
Ë|| 
	`oo_offbuf_À·
(
buf
) == 0);

275 
£q
 +
	`oo_offbuf_À·
(
buf
Ë+ ((
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
)

276 >> 
CI_TCP_FLAG_FIN_BIT
);

278 
byãs
 +
	`oo_offbuf_À·
(
buf
);

279 ++
num
;

280 if–
q
 =&
ts
->
ªcv1
 ) {

281 if–
	`OO_PP_EQ
(
ts
->
ªcv1_exåa˘
, 
	`OO_PKT_P
(
pkt
)) )

282 
exåa˘_poöts_ö_ªcv1
 = 1;

283 if–
exåa˘_poöts_ö_ªcv1
 && 
gŸ_sock_lock
 )

285 
	`vîify
(
	`oo_offbuf_À·
(
buf
) > 0);

287 if–
¥ev_pkt
 ) {

293 
	`vîify
(
	`SEQ_LE
(
t˝
->
t˝_£q_be32
, 
¥ev_pkt
->
pf
.
t˝_rx
.
íd_£q
));

295 
	`vîify
(
	`SEQ_LT
(
¥ev_pkt
->
pf
.
t˝_rx
.
íd_£q
, 
pkt
->pf.tcp_rx.end_seq));

299 
¥ev_pkt
 = 
pkt
;

300 
id
 = 
pkt
->
√xt
;

301 if–
	`OO_PP_IS_NULL
(
id
Ë&& 
q
 =&
ts
->
ªcv1
 ) {

302 
	`vîify
(
ts
->
ªcv1
.
num
 ==Çum);

303 
num
 = 0;

304 
q
 = &
ts
->
ªcv2
;

305 
id
 = 
q
->
hód
;

309 
	`vîify
(
ts
->
ªcv2
.
num
 ==Çum);

311 if–
gŸ_sock_lock
 ) {

312 if–(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_ACCEPT_DATA
) ||

313 (~
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_SYNCHRONISED
) )

314 
	`vîify
(
	`SEQ_EQ
(
£q
, 
	`t˝_rcv_nxt
(
ts
)));

316 
	`vîify
(
	`SEQ_EQ
(
£q
 + 1 , 
	`t˝_rcv_nxt
(
ts
)));

317 
	`vîify
(
byãs
 =
	`t˝_rcv_u§
(
ts
));

318 if–
	`OO_PP_NOT_NULL
(
ts
->
ªcv1_exåa˘
) ) {

319 
	`vîify
(
exåa˘_poöts_ö_ªcv1
);

320 
pkt
 = 
	`PKT_CHK
(
ni
, 
ts
->
ªcv1_exåa˘
);

321 if–
	`oo_offbuf_is_em±y
(&
pkt
->
buf
Ë&& 
	`OO_PP_NOT_NULL
’kt->
√xt
) ) {

322 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

323 
	`vîify
(
	`oo_offbuf_À·
(&
pkt
->
buf
) > 0);

328 
exåa˘_poöts_ö_ªcv1
 = 0;

329  
id
 = 
ts
->
ªcv1
.
hód
; 
	`OO_PP_NOT_NULL
(id); id = 
pkt
->
√xt
 ) {

330 
pkt
 = 
	`PKT_CHK
(
ni
, 
id
);

331 
buf
 = &
pkt
->buf;

332 if–
	`OO_PP_EQ
(
ts
->
ªcv1_exåa˘
, 
	`OO_PKT_P
(
pkt
)) ) {

333 
exåa˘_poöts_ö_ªcv1
 = 1;

334 
	`vîify
(
	`oo_offbuf_À·
(
buf
) >= 0);

336 if–
exåa˘_poöts_ö_ªcv1
 )

337 
	`vîify
(
	`oo_offbuf_À·
(
buf
) > 0);

339 
	`vîify
(
	`oo_offbuf_À·
(
buf
) == 0);

342 if–
dr›_sock_lock
 ) 
	`ci_sock_u∆ock
(
ni
, &
ts
->
s
.
b
);

344 
	}
}

347 
	$ci_t˝_°©e_rob_as£π_vÆid
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

348 c⁄° * 
fûe
, 
löe
)

350 
ci_ù_pkt_queue
* 
rob
 = &
ts
->rob;

351 
ci_ù_pkt_fmt
 *
block
, *
pkt
, *
¥ev_pkt
;

352 
ci_t˝_hdr
* 
t˝
;

353 
block_num
, 
num
 = 0;

354 
oo_pkt_p
 
id
;

356  
id
 = 
rob
->
hód
; 
	`OO_PP_NOT_NULL
(id);

357 
id
 = 
block
->
pf
.
t˝_rx
.
misc
.
rob
.
√xt_block
 ) {

358 
block
 = 
	`PKT_CHK
(
ni
, 
id
);

359 
block_num
 = 0;

360 
¥ev_pkt
 = 0;

363 
pkt
 = 
	`PKT_CHK
(
ni
, 
id
);

364 
t˝
 = 
	`PKT_TCP_HDR
(
pkt
);

366 
	`vîify
(
	`SEQ_LE
(
pkt
->
pf
.
t˝_rx
.
íd_£q
,

367 
block
->
pf
.
t˝_rx
.
misc
.
rob
.
íd_block_£q
));

368 ++
num
; ++
block_num
;

369 if–
¥ev_pkt
 ) {

370 
	`vîify
(
	`SEQ_LE
(
	`CI_BSWAP_BE32
(
t˝
->
t˝_£q_be32
), 
¥ev_pkt
->
pf
.
t˝_rx
.
íd_£q
));

371 
	`vîify
(
	`SEQ_LT
(
¥ev_pkt
->
pf
.
t˝_rx
.
íd_£q
, 
pkt
->pf.tcp_rx.end_seq));

374 if–
	`OO_PP_EQ
(
	`OO_PKT_P
(
pkt
), 
block
->
pf
.
t˝_rx
.
misc
.
rob
.
íd_block
) )

376 
id
 = 
pkt
->
√xt
;

377 
¥ev_pkt
 = 
pkt
;

380 
	`vîify
(
block
->
pf
.
t˝_rx
.
misc
.
rob
.
num
 =
block_num
);

383 
	`vîify
(
rob
->
num
 ==Çum);

384 
	}
}

388 
	$ci_t˝_°©e_as£π_vÆid
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

389 c⁄° * 
fûe
, 
löe
)

391 #i‚de‡
NDEBUG


392 
ci_ù_pkt_fmt
 *
pkt
, *
¥ev_pkt
;

393 
ßck_poöts_ö_rob
;

394 
num
, 
√ed_u∆ock
;

395 
oo_pkt_p
 
id
;

406 if–(
√ed_u∆ock
 = 
	`ci_√tif_åylock
(
√tif
)) )

407 
	`log
("%s: WARNING --Çëi‡%d wa†u∆ocked (%s:%d)", 
__FUNCTION__
,

408 
	`NI_ID
(
√tif
), 
fûe
, 
löe
);

410 
	`vîify
(
ts
);

411 
	`vîify
(
	`IS_VALID_SOCK_P
(
√tif
, 
	`S_SP
(
ts
)));

412 
	`vîify
(
	`SP_TO_TCP
(
√tif
, 
	`S_SP
(
ts
)) ==Ås);

413 
	`vîify
(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_TCP
);

414 
	`vîify
((
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
) ||

415 
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSED
);

416 
	`vîify
(
ts
->
s
.
b
.
°©e
 >
CI_TCP_CLOSED
);

417 
	`vîify
(
ts
->
s
.
b
.
°©e
 <
CI_TCP_TIME_WAIT
);

418 
	`ci_as£π
(
ts
->
s
.
pkt
.
ù
.
ù_¥Ÿocﬁ
 =
IPPROTO_TCP
);

420 
	#chk
(
x
) \

421 
	`vîify
(!
	`ci_ù_timî_≥ndög
(
√tif
, &
ts
->
x
) || \

422 (~
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_NO_TIMERS
) || \

423 (
ts
->
s
.
b
.
°©e
 =
CI_TCP_LISTEN
 && \

424 (
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_BOUND_ALIEN
)))

	)

425 
	`chk
(
πo_tid
);

426 
	`chk
(
dñack_tid
);

427 
	`chk
(
zwö_tid
);

428 
	`chk
(
kÆive_tid
);

429 
	`chk
(
pmtus
.
tid
);

430 #unde‡
chk


432 
	`vîify
(
	`SEQ_LE
(
	`t˝_¢d_u«
(
ts
), 
	`t˝_¢d_nxt
(ts)));

436 
	`vîify
(
	`ci_ù_queue_is_vÆid
(
√tif
, &
ts
->
£nd
));

437 
	`vîify
(
	`ci_ù_queue_is_vÆid
(
√tif
, &
ts
->
ªå™s
));

438 
	`vîify
(
	`ci_ù_queue_is_vÆid
(
√tif
, &
ts
->
ªcv1
));

439 
	`vîify
(
	`ci_ù_queue_is_vÆid
(
√tif
, &
ts
->
ªcv2
));

440 
	`vîify
(
	`ci_ù_queue_is_vÆid
(
√tif
, &
ts
->
rob
));

442 if(!(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_TXQ_ACTIVE
)){

443 
	`vîify
(
	`ci_ù_queue_is_em±y
(&
ts
->
£nd
));

444 
	`vîify
(
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
));

447 
	`vîify
((
	`TCP_RX_ERRNO
(
ts
Ë=0 &&Ås->
s
.
tx_î∫o
 == 0) ||

448 
ts
->
s
.
b
.
°©e
 !
CI_TCP_ESTABLISHED
);

450 if–
ts
->
s
.
b
.
°©e
 >
CI_TCP_SYN_SENT
 ) {

451 
	`vîify
(
	`t˝_eff_mss
(
ts
Ë<
CI_MAX_ETH_FRAME_LEN
);

452 
	`vîify
(
ts
->
cwnd
 >
	`t˝_eff_mss
(ts));

453 
	`vîify
(
ts
->
s°hªsh
 >
	`t˝_eff_mss
(ts) << 1);

454 
	`vîify
(
	`ci_to_öt
(
	`t˝_rcv_wnd_advîti£d
(
ts
)) >= 0);

457 
	`vîify
(
	`ci_to_öt
(
	`t˝_rcv_wnd_cuºít
(
ts
)) >= 0);

461 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

462 
	`vîify
(
ts
->
outgoög_hdrs_Àn
 ==

463 (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
) + 12);

464 
	`vîify
(
	`t˝_outgoög_›ts_Àn
(
ts
) == 12);

467 
	`vîify
(
ts
->
outgoög_hdrs_Àn
 =(
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
));

468 
	`vîify
(
	`t˝_outgoög_›ts_Àn
(
ts
) == 0);

470 
	`vîify
(
	`CI_TCP_HDR_LEN
(
	`TS_TCP
(
ts
)) ==

471 (
ci_t˝_hdr
Ë+ 
	`t˝_outgoög_›ts_Àn
(
ts
));

474 
	`ci_t˝_°©e_ªcv_as£π_vÆid
(
√tif
, 
ts
, 0, 
fûe
, 
löe
);

477 
	`ci_t˝_°©e_rob_as£π_vÆid
(
√tif
, 
ts
, 
fûe
, 
löe
);

480 
	`ci_t˝_°©e_c⁄g_as£π_vÆid
(
√tif
, 
ts
, 
fûe
, 
löe
);

483 
	`ci_t˝_°©e_ªå™s_as£π_vÆid
(
√tif
, 
ts
, 
fûe
, 
löe
);

486 
	`ci_t˝_°©e_£nd_as£π_vÆid
(
√tif
, 
ts
, 
fûe
, 
löe
);

488 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
 ){

490  
num
 = 0;Çum <
CI_TCP_SACK_MAX_BLOCKS
;Çum++ ) {

491 if–
	`OO_PP_NOT_NULL
(
ts
->
œ°_ßck
[
num
]) ) {

493 
ßck_poöts_ö_rob
 = 0;

494 
¥ev_pkt
 = 0;

495  
id
 = 
ts
->
rob
.
hód
; 
	`OO_PP_NOT_NULL
(id); id = 
pkt
->
√xt
 ) {

496 
pkt
 = 
	`PKT_CHK
(
√tif
, 
id
);

497 if–
	`OO_PP_EQ
(
id
, 
ts
->
œ°_ßck
[
num
]) ) {

500 
	`vîify
(!
ßck_poöts_ö_rob
);

501 
ßck_poöts_ö_rob
 = 1;

502 if(
¥ev_pkt
){

505 
	`vîify
(!
	`SEQ_EQ
(
¥ev_pkt
->
pf
.
t˝_tx
.
íd_£q
,

506 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
));

509 
¥ev_pkt
 = 
pkt
;

511 
	`vîify
(
ßck_poöts_ö_rob
);

516 if–
√ed_u∆ock
 ) 
	`ci_√tif_u∆ock
(
√tif
);

518 
	}
}

521 #i‚de‡
NDEBUG


522 
	$ci_t˝_ï_as£π_vÆid
(
côp_sockë
* 
ï
, c⁄° * 
fûe
, 
löe
)

524 
	`ci_as£π
(
ï
);

525 
	`ci_√tif_as£π_vÆid
(
ï
->
√tif
, 
fûe
, 
löe
);

526 
	`vîify
(
ï
->
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
);

527 if–
ï
->
s
->
b
.
°©e
 =
CI_TCP_LISTEN
 )

528 
	`ci_t˝_°©e_li°í_as£π_vÆid
(
ï
->
√tif
, 
	`SOCK_TO_TCP_LISTEN
”p->
s
),

529 
fûe
, 
löe
);

531 
	`ci_t˝_°©e_as£π_vÆid
(
ï
->
√tif
, 
	`SOCK_TO_TCP
”p->
s
), 
fûe
, 
löe
);

532 
	}
}

540 #i‡(!
deföed
(
__KERNEL__
)Ë|| deföed(
CI_CFG_BUILD_DUMP_CODE_IN_KERNEL
)

542 
	$ci_t˝_pkt_dump
(
ci_√tif
 *
ni
, 
ci_ù_pkt_fmt
* 
pkt
, 
is_ªcv
, 
dump
)

544 
ci_t˝_hdr
* 
t˝
 = 
	`PKT_TCP_HDR
(
pkt
);

545 
oo_pkt_p
 
buf
;

547 if–
is_ªcv
 ) {

548 
oo_offbuf
* 
buf
 = &
pkt
->buf;

549 
	`log
(" %4d: %08x-%08x ["
CI_TCP_FLAGS_FMT
"]Üe·=%d", 
	`OO_PKT_FMT
(
pkt
),

550 
	`SEQ
(
	`PKT_TCP_HDR
(
pkt
)->
t˝_£q_be32
), SEQ’kt->
pf
.
t˝_rx
.
íd_£q
),

551 
	`CI_TCP_HDR_FLAGS_PRI_ARG
(
t˝
), 
	`oo_offbuf_À·
(
buf
));

552 if–
dump
 & 1 )

553 
	`ci_hex_dump
(
ci_log_‚
, 
	`oo_ëhî_hdr
(
pkt
),

554 
	`oo_ù_hdr
(
pkt
)->
ù_tŸ_Àn_be16
 + 
	`oo_ëhî_hdr_size
(pkt), 0);

557 
i
, 
∑yÀn
 = 
	`TX_PKT_LEN
(
pkt
) -

558 (
	`oo_ëhî_hdr_size
(
pkt
Ë+ 
	`CI_IP4_IHL
(
	`oo_ù_hdr
(pkt)) +

559 
	`CI_TCP_HDR_LEN
(
t˝
));

561 if–
CI_IP_PKT_SEGMENTS_MAX
 != 6 )

562 
	`ci_log
("FIXME: %s:%d", 
__FILE__
, 
__LINE__
);

564 
	`log
(" %4d: %08x-%08x ["
CI_TCP_FLAGS_FMT
"]Çbuf=%dÖaylen=%d "

565 "£q=%d spc=%d "
CI_PKT_FLAGS_FMT
, 
	`OO_PKT_FMT
(
pkt
),

566 
	`SEQ
(
pkt
->
pf
.
t˝_tx
.
°¨t_£q
),

567 
	`SEQ
(
pkt
->
pf
.
t˝_tx
.
íd_£q
), 
	`CI_TCP_HDR_FLAGS_PRI_ARG
(
t˝
),

568 
pkt
->
n_buf„rs
, 
∑yÀn
,

569 
	`SEQ_SUB
(
pkt
->
pf
.
t˝_tx
.
íd_£q
,Ökt->pf.t˝_tx.
°¨t_£q
),

570 
	`oo_offbuf_À·
(&
pkt
->
buf
),

571 
	`CI_PKT_FLAGS_PRI_ARG
(
pkt
));

572 
buf
 = 
	`OO_PKT_P
(
pkt
);

573  
i
 = 0; i < 
pkt
->
n_buf„rs
; ++i ) {

574 
ci_ù_pkt_fmt
* 
≠kt
 = 
	`PKT_CHK
(
ni
, 
buf
);

575 
	`log
(" : "
EF_ADDR_FMT
":%d",

576 
≠kt
->
dma_addr
[
pkt
->
ötf_i
],ápkt->
buf_Àn
);

577 
buf
 = 
≠kt
->
‰ag_√xt
;

579 if–
dump
 & 1 )

580 
	`ci_hex_dump
(
ci_log_‚
, 
	`oo_ëhî_hdr
(
pkt
),Ökt->
buf_Àn
, 0);

582 
	}
}

585 
	$ci_t˝_°©e_dump_qs
(
ci_√tif
* 
ni
, 
ï_id
, 
dump
)

587 
ci_t˝_°©e
* 
ts
;

589 if–! 
	`IS_VALID_SOCK_ID
(
ni
, 
ï_id
) )

590 
	`log
("%s: invÆid id %d", 
__FUNCTION__
, 
ï_id
);

592 
ts
 = 
	`ID_TO_TCP
(
ni
, 
ï_id
);

594 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_LISTEN
 ) {

595 
	`log
("%s: %d LISTEN (TODO)", 
__FUNCTION__
, 
	`S_FMT
(
ts
));

599 
	`log
("%s: "
NTS_FMT
, 
__FUNCTION__
, 
	`NTS_PRI_ARGS
(
ni
, 
ts
));

600 
	`log
("ªcv1:Éxåa˘=%d", 
	`OO_PP_FMT
(
ts
->
ªcv1_exåa˘
));

601 
	`ci_√tif_pkt_queue_dump
(
ni
, &
ts
->
ªcv1
, 1, 
dump
);

602 
	`log
("recv2:");

603 
	`ci_√tif_pkt_queue_dump
(
ni
, &
ts
->
ªcv2
, 1, 
dump
);

604 
	`log
("rob:");

605 
	`ci_√tif_pkt_queue_dump
(
ni
, &
ts
->
rob
, 1, 
dump
);

606 
	`log
("send:");

607 
	`ci_√tif_pkt_queue_dump
(
ni
, &
ts
->
£nd
, 0, 
dump
);

608 
	`log
("retrans:");

609 
	`ci_√tif_pkt_queue_dump
(
ni
, &
ts
->
ªå™s
, 0, 
dump
);

610 
	}
}

613 
	$ci_t˝_°©e_dump_rob
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

615 
ci_ù_pkt_queue
* 
rob
 = &
ts
->rob;

616 
i
 = 1;

617 
ci_ù_pkt_fmt
* 
pkt
;

618 
oo_pkt_p
 
pkt_id
;

619 
oo_pkt_p
 
°¨t_id
 = 
rob
->
hód
;

621 
	`log
("%s: "
NTS_FMT
, 
__FUNCTION__
, 
	`NTS_PRI_ARGS
(
√tif
, 
ts
));

622  
pkt_id
 = 
rob
->
hód
; 
	`OO_PP_NOT_NULL
’kt_id);Ökt_id = 
pkt
->
√xt
) {

623 
pkt
 = 
	`PKT
(
√tif
, 
pkt_id
);

624 if–
	`OO_PP_EQ
(
pkt_id
, 
°¨t_id
) ) {

625 
	`log
(" %d block i¿ROB", 
i
);

626 
°¨t_id
 = 
	`PKT_TCP_RX_ROB
(
pkt
)->
√xt_block
;

628 
	`ci_t˝_pkt_dump
(
√tif
, 
pkt
, 1, 0);

630 
	`log
("End of ROB dump");

631 
	}
}

634 
	$ci_t˝_°©e_dump_ªå™s_blocks
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

636 
ci_ù_pkt_queue
* 
πq
 = &
ts
->
ªå™s
;

637 
ci_ù_pkt_fmt
 *
pkt
, *
íd
;

638 
oo_pkt_p
 
id
;

640 
	`log
("%s: "
NTS_FMT
 
TCP_SND_FMT
, 
__FUNCTION__
, 
	`NTS_PRI_ARGS
(
ni
, 
ts
),

641 
	`TCP_SND_PRI_ARG
(
ts
));

643  
id
 = 
πq
->
hód
; 
	`OO_PP_NOT_NULL
(id); id = 
íd
->
√xt
 ) {

644 
pkt
 = 
	`PKT
(
ni
, 
id
);

645 if–
	`OO_PP_NOT_NULL
(
pkt
->
pf
.
t˝_tx
.
block_íd
) )

646 
íd
 = 
	`PKT
(
ni
, 
pkt
->
pf
.
t˝_tx
.
block_íd
);

648 
íd
 = 
	`PKT
(
ni
, 
πq
->
èû
);

649 
	`log
(" %08x-%08x %d-%dÜí=%d%s%s", 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
,

650 
íd
->
pf
.
t˝_tx
.
íd_£q
, 
	`OO_PKT_FMT
(
pkt
), OO_PKT_FMT(end),

651 
	`SEQ_SUB
(
íd
->
pf
.
t˝_tx
.
íd_£q
, 
pkt
->pf.t˝_tx.
°¨t_£q
),

652 
íd
->
Êags
 & 
CI_PKT_FLAG_TX_PENDING
 ? " inflight":"",

653 
pkt
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
 ? " sacked":"");

655 
	}
}

658 
	$ci_t˝_°©e_dump_ªå™s
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

660 
ci_ù_pkt_queue
* 
πq
 = &
ts
->
ªå™s
;

661 
ci_ù_pkt_fmt
* 
pkt
;

662 
oo_pkt_p
 
id
;

664 
	`log
("%s: "
NTS_FMT
" "
TCP_SND_FMT
, 
__FUNCTION__
,

665 
	`NTS_PRI_ARGS
(
ni
, 
ts
), 
	`TCP_SND_PRI_ARG
(ts));

667  
id
 = 
πq
->
hód
; 
	`OO_PP_NOT_NULL
(id); id = 
pkt
->
√xt
 ) {

668 
pkt
 = 
	`PKT
(
ni
, 
id
);

669 
	`log
(" %4d: %08x-%08xÜen=%u block_end=%d %s%s%s",

670 
	`OO_PP_FMT
(
id
), 
	`SEQ
(
pkt
->
pf
.
t˝_tx
.
°¨t_£q
),

671 
	`SEQ
(
pkt
->
pf
.
t˝_tx
.
íd_£q
),Ökt->
buf_Àn
,

672 
	`OO_PP_FMT
(
pkt
->
pf
.
t˝_tx
.
block_íd
),

673 
pkt
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
 ? " sacked":"",

674 
pkt
->
Êags
 & 
CI_PKT_FLAG_RTQ_RETRANS
 ? "Ñetrans":"",

675 
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_PENDING
 ? " inflight":"");

677 
	}
}

682 
	$ci_t˝_sockë_cmn_dump
(
ci_√tif
* 
ni
, 
ci_t˝_sockë_cmn
* 
tsc
,

683 c⁄° * 
pf
,

684 
oo_dump_log_‚_t
 
loggî
, * 
log_¨g
)

687 
	}
}

690 
	$ci_t˝_sockë_li°í_dump
(
ci_√tif
* 
ni
, 
ci_t˝_sockë_li°í
* 
és
,

691 c⁄° * 
pf
,

692 
oo_dump_log_‚_t
 
loggî
, * 
log_¨g
)

694 
	`ci_t˝_sockë_cmn_dump
(
ni
, &
és
->
c
, 
pf
, 
loggî
, 
log_¨g
);

696 
	`loggî
(
log_¨g
, "%†Üi°íq: max=%dÇ=%dÇew=%d buckës=%d", 
pf
,

697 
	`ci_t˝_li°íq_max
(
ni
), 
és
->
n_li°íq
,Åls->
n_li°íq_√w
,

698 
és
->
n_buckës
);

699 
	`loggî
(
log_¨g
, "%†ác˚±q: max=%dÇ=%dác˚±ed=%d", 
pf
,

700 
és
->
ac˚±q_max
, 
	`ci_t˝_ac˚±q_n
—ls),Åls->
ac˚±q_n_out
);

701 
	`loggî
(
log_¨g
, "%† de„r_ac˚±=%d", 
pf
, 
és
->
c
.
t˝_de„r_ac˚±
);

702 #i‡
CI_CFG_FD_CACHING


703 
	`loggî
(
log_¨g
, "%s sockcache:Ç=%d sock_n=%d cache=%sÖending=%s",

704 
pf
, 
ni
->
°©e
->
∑ssive_ˇche_avaû_°ack
, 
és
->
ˇche_avaû_sock
,

705 
	`ci_ni_dŒi°_is_em±y
(
ni
, &
és
->
ïˇche
.
ˇche
) ? "EMPTY":"yes",

706 
	`ci_ni_dŒi°_is_em±y
(
ni
, &
és
->
ïˇche
.
≥ndög
) ? "EMPTY":"yes");

708 #i‡
CI_CFG_STATS_TCP_LISTEN


710 
ci_t˝_sockë_li°í_°©s
* 
s
 = &
és
->
°©s
;

711 #i‡
CI_CFG_FD_CACHING


712 
	`loggî
(
log_¨g
, "%† sockˇche_hô=%d", 
pf
, 
s
->
n_sockˇche_hô
);

714 
	`loggî
(
log_¨g
,

716 
pf
, 
s
->
n_li°íq_ovîÊow
, s->
n_li°íq_no_syƒecv
,

717 
s
->
n_ac˚±q_ovîÊow
, s->
n_ac˚±q_no_sock
);

718 
	`loggî
(
log_¨g
, "%sá_loop2_closed=%dá_no_fd=%dáck_rsts=%d os=%d",

719 
pf
, 
s
->
n_ac˚±_lo›2_˛o£d
, s->
n_ac˚±_no_fd
,

720 
s
->
n_acks_ª£t
, s->
n_ac˚±_os
);

721 if–
	`NI_OPTS
(
ni
).
t˝_syncookõs
 ) {

722 
	`loggî
(
log_¨g
, "%s syncookies: syn_recv=%dáck_recv=%dáck_answ=%d",

723 
pf
, 
s
->
n_syncookõ_syn
, s->
n_syncookõ_ack_ªcv
,

724 
s
->
n_syncookõ_ack_™sw
);

725 
	`loggî
(
log_¨g
, "%s syncookiesÑejected:Åimestamp=%d crypto_hash=%d",

726 
pf
, 
s
->
n_syncookõ_ack_ts_ªj
, s->
n_syncookõ_ack_hash_ªj
);

730 
	}
}

732 
	$löe_fmt_timî
(*
buf
, 
Àn
, 
pos
,

733 c⁄° *
fmt
, 
ci_ùtime_t
 
dñè
,

734 
ci_ùtime_t
 
t
,

735 
oo_dump_log_‚_t
 
loggî
, * 
log_¨g
)

737 
avaû
 = 
Àn
 - 
pos
;

738 
n
;

739 i‡–(
n
 = 
	`ci_¢¥ötf
(
buf
 + 
pos
, 
avaû
, 
fmt
, 
dñè
, 
t
)) >=ávail) {

740 
buf
[
pos
] = '\0';

741 
	`loggî
(
log_¨g
, "%s", 
buf
);

742 
pos
 = 0;

743 
n
 = 
	`ci_¢¥ötf
(
buf
, 
avaû
, 
fmt
, 
dñè
, 
t
);

745  
pos
 + 
n
;

746 
	}
}

749 #i‡
CI_CFG_CONGESTION_WINDOW_VALIDATION


750 
	#t˝_cwnd_u£d
(
ts
Ë(—s)->
cwnd_u£d
)

	)

752 
	#t˝_cwnd_u£d
(
ts
Ë0

	)

756 
	#LINE_LEN
 (79)

	)

757 
	$ci_t˝_°©e_dump
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

758 c⁄° *
pf
,

759 
oo_dump_log_‚_t
 
loggî
, * 
log_¨g
)

761 
oo_t˝_sockë_°©s
 
°©s
 = 
ts
->stats;

762 
ci_ùtime_t
 
now
 = 
	`ci_ù_time_now
(
ni
);

763 
buf
[
LINE_LEN
 + 1];

764 
n
;

766 if–
ts
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_TX_HARDWARE
 )

767 
	`ci_udp_ªcvq_dump
(
ni
, &
ts
->
time°amp_q
, 
pf
, " TXÅimestamping queue:",

768 
loggî
, 
log_¨g
);

770 
	`ci_t˝_sockë_cmn_dump
(
ni
, &
ts
->
c
, 
pf
, 
loggî
, 
log_¨g
);

772 
	`loggî
(
log_¨g
, "%†Å˝Êags: "
CI_TCP_SOCKET_FLAGS_FMT
"Üocal_peer: %d",

773 
pf
, 
	`CI_TCP_SOCKET_FLAGS_PRI_ARG
(
ts
),Ås->
loˇl_≥î
);

775 
	`loggî
(
log_¨g
, "%s snd: up=%08x una-nxt-max=%08x-%08x-%08xÉnq=%08x%s",

776 
pf
,

777 
	`t˝_¢d_up
(
ts
), 
	`t˝_¢d_u«
—s), 
	`t˝_¢d_nxt
—s),Ås->
¢d_max
,

778 
	`t˝_íq_nxt
(
ts
),

779 
	`SEQ_LT
(
	`t˝_¢d_nxt
(
ts
Ë+Ås->
¢d_dñeg©ed
, 
	`t˝_¢d_up
(ts)) ?

781 
	`loggî
(
log_¨g
,

783 
pf
, 
	`SEQ_SUB
(
	`t˝_íq_nxt
(
ts
), 
	`t˝_¢d_nxt
—s)),Ås->
£nd
.
num
,

784 
	`ci_t˝_£ndq_n_pkts
(
ts
),

785 
	`ci_t˝_öÊight
(
ts
),Ås->
ªå™s
.
num
, 
	`t˝_¢d_wnd
(ts),

786 
	`SEQ_SUB
(
ts
->
¢d_max
, 
	`t˝_¢d_nxt
(ts)));

787 if–
ts
->
¢d_dñeg©ed
 != 0 )

788 
	`loggî
(
log_¨g
, "%† snd dñeg©ed=%d", 
pf
, 
ts
->
¢d_dñeg©ed
);

789 
	`loggî
(
log_¨g
, "%s snd: cwnd=%d+%d used=%d ssthresh=%d bytes_acked=%d %s",

790 
pf
, 
ts
->
cwnd
,Ås->
cwnd_exåa
, 
	`t˝_cwnd_u£d
(ts),

791 
ts
->
s°hªsh
,Ås->
byãs_acked
, 
	`c⁄g°©e_°r
(ts));

792 
	`loggî
(
log_¨g
, "%s snd:Åimed_seq %xÅimed_ts %x",

793 
pf
, 
ts
->
timed_£q
,Ås->
timed_ts
);

794 
	`loggî
(
log_¨g
, "%† snd: sndbuf_pkts=%d "
OOF_IPCACHE_STATE
" "

795 
OOF_IPCACHE_DETAIL
,

796 
pf
, 
ts
->
so_¢dbuf_pkts
, 
	`OOFA_IPCACHE_STATE
(
ni
, &ts->
s
.
pkt
),

797 
	`OOFA_IPCACHE_DETAIL
(&
ts
->
s
.
pkt
));

798 
	`loggî
(
log_¨g
, "%s snd:ÜimitedÑwnd=%d cwnd=%dÇagle=%d more=%dápp=%d",

799 
pf
, 
°©s
.
tx_°›_rwnd
, sèts.
tx_°›_cwnd
, sèts.
tx_°›_«gÀ
,

800 
°©s
.
tx_°›_m‹e
, sèts.
tx_°›_≠p
);

802 
	`loggî
(
log_¨g
, "%†Ñcv:Çxt-max=%08x-%08x wndádv=%d cur=%d %s%s", 
pf
,

803 
	`t˝_rcv_nxt
(
ts
), 
	`t˝_rcv_wnd_right_edge_£¡
(ts),

804 
	`t˝_rcv_wnd_advîti£d
(
ts
), 
	`t˝_rcv_wnd_cuºít
(ts),

805 
	`ci_t˝_is_ö_Á°°¨t
(
ts
) ? " FASTSTART":"",

806 
	`ci_t˝_ˇn_u£_Á°_∑th
(
ts
) ? " FAST":"");

807 
	`loggî
(
log_¨g
, "%sÑcv: bytes=%dÑob_pkts=%d q_pkts=%d+%d usr=%d",

808 
pf
, 
ts
->
rcv_added
 - 
°©s
.
rx_i¢
,Ås->
rob
.
num
,Ås->
ªcv1
.num,

809 
ts
->
ªcv2
.
num
, 
	`t˝_rcv_u§
(ts));

811 
	`loggî
(
log_¨g
,

813 
pf
, 
ts
->
eff_mss
,Ås->
smss
,Ås->
amss
,

814 
ts
->
£nd
.
num
 +Ås->
ªå™s
.num +Ås->
rob
.num+ts->
ªcv1
.num

815 + 
ts
->
ªcv2
.
num
,Ås->
¢d_ws˛
,Ås->
rcv_ws˛
);

816 
	`loggî
(
log_¨g
, "%† sπt=%02dÑâv¨=%03dÑto=%d zwös=%u,%u", 
pf
,

817 
	`t˝_§â
(
ts
), 
	`t˝_πtv¨
—s),Ås->
πo
,Ås->
zwö_¥obes
,

818 
ts
->
zwö_acks
);

819 
	`loggî
(
log_¨g
,

821 
pf
, 
ts
->
ªå™smôs
, 
°©s
.
tŸÆ_ªå™s
,Ås->
dup_acks
);

822 
	`loggî
(
log_¨g
,

824 "ooo=%d", 
pf
, 
°©s
.
πos
,

825 
°©s
.
Á°_ªcovîs
, sèts.
rx_£q_îrs
, sèts.
rx_ack_£q_îrs
,

826 
°©s
.
rx_ooo_pkts
, sèts.
rx_ooo_fûl
);

827 
	`loggî
(
log_¨g
, "%†Åx: de„r=%dÇomac=%u w¨m=%u w¨m_ab‹ãd=%u", 
pf
,

828 
°©s
.
tx_de„r
, sèts.
tx_nomac_de„r
, sèts.
tx_msg_w¨m
,

829 
°©s
.
tx_msg_w¨m_ab‹t
);

830 
	`loggî
(
log_¨g
, "%†Åm∂: síd_Á°=%u síd_¶ow=%uá˘ive=%u", 
pf
,

831 
°©s
.
tx_tm∂_£nd_Á°
, sèts.
tx_tm∂_£nd_¶ow
,

832 
°©s
.
tx_tm∂_a˘ive
);

834 #i‚de‡
__KERNEL__


835 
	#fmt_timî
(
_b
, 
_l
, 
_n
, 
«me
, 
fõld
) \

836 if–
	`ci_ù_timî_≥ndög
(
ni
, &
ts
->
fõld
) ) \

837 
_n
 = 
	`löe_fmt_timî
(
_b
, 
_l
, _n, #name"(%ums[%x]) ", \

838 
	`ci_ù_time_ticks2ms
(
ni
, 
ts
->
fõld
.
time
-
now
), \

839 
ts
->
fõld
.
time
, \

840 
loggî
, 
log_¨g
)

	)

842 
	#fmt_timî
(
_b
, 
_l
, 
_n
, 
«me
, 
fõld
) \

843 if–
	`ci_ù_timî_≥ndög
(
ni
, &
ts
->
fõld
) ) \

844 
_n
 = 
	`löe_fmt_timî
(
_b
, 
_l
, _n, #name"(%uticks[%x]) ", \

845 
ts
->
fõld
.
time
-
now
,Ås->field.time, \

846 
ci_log_dump_‚
, 
NULL
)

	)

849 
	`loggî
(
log_¨g
, "%†Åimîs: ", 
pf
);

850 
n
 = 0;

851 
buf
[0] = '\0';

852 
	`fmt_timî
(
buf
, 
LINE_LEN
, 
n
, 
πo
, 
πo_tid
);

853 
	`fmt_timî
(
buf
, 
LINE_LEN
, 
n
, 
dñack
, 
dñack_tid
);

854 
	`fmt_timî
(
buf
, 
LINE_LEN
, 
n
, 
zwö
, 
zwö_tid
);

855 
	`fmt_timî
(
buf
, 
LINE_LEN
, 
n
, 
kÆive
, 
kÆive_tid
);

856 
	`fmt_timî
(
buf
, 
LINE_LEN
, 
n
, 
pmtu
, 
pmtus
.
tid
);

857 
	`loggî
(
log_¨g
, "%s", 
buf
);

858 
	}
}

861 
	$ci_t˝_°©e_dump_id
(
ci_√tif
* 
ni
, 
ï_id
)

863 if–! 
	`IS_VALID_SOCK_ID
(
ni
, 
ï_id
) ) {

864 
	`log
("%s: invÆid id=%d", 
__FUNCTION__
, 
ï_id
);

868 
	`ci_t˝_°©e_dump
(
ni
, 
	`ID_TO_TCP
“i, 
ï_id
), "", 
ci_log_dump_‚
, 
NULL
);

869 
	}
}

880 
	#CI_TCP_RX_CHK_DEST_MAC
 0x2

	)

881 
	#CI_TCP_RX_CHK_SRC_MAC
 0x4

	)

882 
	#CI_TCP_RX_CHK_SRC_IS_EFAB
 0x8

	)

883 
	#CI_TCP_RX_CHK_IP_CSUM
 0x10

	)

884 
	#CI_TCP_RX_CHK_TCP_CSUM
 0x20

	)

885 
	#CI_TCP_RX_CHK_PORT
 0x40

	)

887 
	#DUMP_PKT
 1

	)

888 
	#DUMP_PKT_ADDR
 (2|1)

	)

889 
	#DUMP_SOCK
 4

	)

890 
	#DUMP_SOCK_ADDR
 (8|4)

	)

892 #unde‡
LPF


893 
	#LPF
 "ci_t˝_rx_checks: "

	)

895 
	$t˝_rx_checks_cmn
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
,

896 
ci_ù_pkt_fmt
* 
pkt
, * 
dump
)

898 
chk
 = 
	`NI_OPTS
(
ni
).
t˝_rx_checks
;

899 
ci_t˝_hdr
* 
t˝
 = 
	`PKT_TCP_HDR
(
pkt
);

903 if–
chk
 & 
CI_TCP_RX_CHK_DEST_MAC
 ) {

904 
ci_uöt8
 
mac
[
ETH_ALEN
];

908 
	`ef_vi_gë_mac
(&
ni
->
nic_hw
[
pkt
->
√tif
.
rx
.
nic_i
].
ï
, 
mac
);

909 if–
	`memcmp
(
	`oo_ëhî_dho°
(
pkt
), 
mac
, 
ETH_ALEN
) ) {

910 
	`ci_log
(
LPF
 "W¨nög: DHOST_NOT_DEFAULT: undîlyög="
CI_MAC_PRINTF_FORMAT
,

911 
	`CI_MAC_PRINTF_ARGS
(
mac
));

912 *
dump
 |
DUMP_PKT_ADDR
 | 
DUMP_SOCK_ADDR
;

917 if–
chk
 & 
CI_TCP_RX_CHK_SRC_IS_EFAB
 ) {

918 
ci_uöt8
 
mac_¥efix
[] = { 0x00, 0x0F, 0x53, 0x00 };

919 if–
	`memcmp
(
	`oo_ëhî_sho°
(
pkt
), 
mac_¥efix
, (mac_prefix)) ) {

920 
	`ci_log
(
LPF
 "SHOST_NOT_EFAB:");

921 *
dump
 |
DUMP_PKT_ADDR
 | 
DUMP_SOCK_ADDR
;

925 if–
chk
 & 
CI_TCP_RX_CHK_IP_CSUM
 ) {

929 if–
chk
 & 
CI_TCP_RX_CHK_TCP_CSUM
 ) {

934 if–
t˝
->
t˝_Êags
 & 
	`NI_OPTS
(
ni
).
t˝_rx_log_Êags
 )

935 *
dump
 |
DUMP_SOCK
 | 
DUMP_PKT
;

936 
	}
}

939 
	$t˝_rx_checks_dump_cmn
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

940 
dump
)

942 
ci_t˝_hdr
* 
t˝
 = 
	`PKT_TCP_HDR
(
pkt
);

944 if–(
dump
 & 
DUMP_PKT
) == DUMP_PKT )

945 
	`ci_log
(
LPF
 "pkà"
CI_IP_PRINTF_FORMAT
":%u=>"CI_IP_PRINTF_FORMAT":%u ["

946 
CI_TCP_FLAGS_FMT
"]",

947 
	`CI_IP_PRINTF_ARGS
(&
	`oo_ù_hdr
(
pkt
)->
ù_ßddr_be32
),

948 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_sour˚_be16
),

949 
	`CI_IP_PRINTF_ARGS
(&
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
),

950 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_de°_be16
),

951 
	`CI_TCP_HDR_FLAGS_PRI_ARG
(
t˝
));

953 if–(
dump
 & 
DUMP_PKT_ADDR
) == DUMP_PKT_ADDR )

954 
	`ci_log
(
LPF
 "pkà"
CI_MAC_PRINTF_FORMAT
"=>"CI_MAC_PRINTF_FORMAT,

955 
	`CI_MAC_PRINTF_ARGS
(
	`oo_ëhî_sho°
(
pkt
)),

956 
	`CI_MAC_PRINTF_ARGS
(
	`oo_ëhî_dho°
(
pkt
)));

957 
	}
}

960 
	$ci_t˝_rx_checks
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
, 
ci_ù_pkt_fmt
* 
pkt
)

962 
chk
 = 
	`NI_OPTS
(
ni
).
t˝_rx_checks
;

963 
dump
 = 0;

965 
	`t˝_rx_checks_cmn
(
ni
, &
ts
->
s
, 
pkt
, &
dump
);

968 if–
chk
 & 
CI_TCP_RX_CHK_PORT
 ) {

972 #i‡
CI_CFG_PORT_STRIPING


973 ! (
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_STRIPE
) &&

975 
pkt
->
√tif
.
rx
.
p‹t_i
 !
	`ci_hwp‹t_gë_p‹äo
(
ts
->
s
.pkt.
hwp‹t
) ) {

976 
	`ci_log
(
LPF
 "PORT_BAD: outgoing_port=%d incoming_port=%d",

977 
	`ci_hwp‹t_gë_p‹äo
(
ts
->
s
.
pkt
.
hwp‹t
),Ökt->
√tif
.
rx
.
p‹t_i
);

978 
dump
 |
DUMP_PKT_ADDR
 | 
DUMP_SOCK_ADDR
;

983 if–
chk
 & 
CI_TCP_RX_CHK_SRC_MAC
 ) {

987 
ci_uöt8
 
mac
[
ETH_ALEN
];

988 
twiddÀ
;

989 
twiddÀ
 = 
	`oo_ëhî_dho°
(
pkt
)[5] ^

990 ((*)
	`ci_ù_ˇche_ëhî_sho°
(&
ts
->
s
.
pkt
))[5];

991 
	`mem˝y
(
mac
, 
	`ci_ù_ˇche_ëhî_dho°
(&
ts
->
s
.
pkt
), 
ETH_ALEN
);

992 
mac
[5] ^
twiddÀ
;

993 if–
	`memcmp
(
	`oo_ëhî_sho°
(
pkt
), 
mac
, 
ETH_ALEN
) ) {

994 
	`ci_log
(
LPF
 "SHOST_BAD:Éx≥˘ed="
CI_MAC_PRINTF_FORMAT
,

995 
	`CI_MAC_PRINTF_ARGS
(
mac
));

996 
dump
 |
DUMP_PKT_ADDR
 | 
DUMP_SOCK_ADDR
;

1003 
	`t˝_rx_checks_dump_cmn
(
ni
, 
pkt
, 
dump
);

1005 if–(
dump
 & 
DUMP_SOCK
) == DUMP_SOCK ) {

1006 
	`ci_log
(
LNT_FMT
 "¢d=%d inf=%dÑcv=%d %s", 
	`LNT_PRI_ARGS
(
ni
, 
ts
),

1007 
	`SEQ_SUB
(
	`t˝_íq_nxt
(
ts
), 
	`t˝_¢d_nxt
(ts)),

1008 
	`ci_t˝_öÊight
(
ts
), 
	`t˝_rcv_u§
—s), 
	`°©e_°r
(ts));

1009 
	`ci_log
(
LNT_FMT
 
CI_IP_PRINTF_FORMAT
":%u=>"CI_IP_PRINTF_FORMAT":%u",

1010 
	`LNT_PRI_ARGS
(
ni
, 
ts
),

1011 
	`CI_IP_PRINTF_ARGS
(&
	`t˝_œddr_be32
(
ts
)),

1012 (Ë
	`CI_BSWAP_BE16
(
	`t˝_Õ‹t_be16
(
ts
)),

1013 
	`CI_IP_PRINTF_ARGS
(&
	`t˝_øddr_be32
(
ts
)),

1014 (Ë
	`CI_BSWAP_BE16
(
	`t˝_Ω‹t_be16
(
ts
)));

1016 if–(
dump
 & 
DUMP_SOCK_ADDR
) == DUMP_SOCK_ADDR )

1017 
	`ci_log
(
LNT_FMT
 
CI_MAC_PRINTF_FORMAT
"=>"CI_MAC_PRINTF_FORMAT" hwport=%d"

1018 " såùe=%x", 
	`LNT_PRI_ARGS
(
ni
, 
ts
),

1019 
	`CI_MAC_PRINTF_ARGS
(
	`ci_ù_ˇche_ëhî_sho°
(&
ts
->
s
.
pkt
)),

1020 
	`CI_MAC_PRINTF_ARGS
(
	`ci_ù_ˇche_ëhî_dho°
(&
ts
->
s
.
pkt
)),

1021 (Ë
ts
->
s
.
pkt
.
hwp‹t
,

1022 #i‡
CI_CFG_PORT_STRIPING


1023 !!(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_STRIPE
)

1028 
	}
}

1031 
	$ci_t˝_li°í_rx_checks
(
ci_√tif
* 
ni
, 
ci_t˝_sockë_li°í
* 
és
,

1032 
ci_ù_pkt_fmt
* 
pkt
)

1034 
dump
 = 0;

1036 
	`t˝_rx_checks_cmn
(
ni
, &
és
->
s
, 
pkt
, &
dump
);

1037 
	`t˝_rx_checks_dump_cmn
(
ni
, 
pkt
, 
dump
);

1038 
	}
}

	@tcp_driver_ops.c

14 
	~<ci/öã∫Æ/ù.h
>

15 
	~<⁄lﬂd/t˝_drivî.h
>

16 
	~<⁄lﬂd/t˝_hñ≥r_‚s.h
>

18 #i‚de‡
__KERNEL__


22 
	$ci_t˝_hñ≥r_m‹e_bufs
(
ci_√tif
* 
ni
)

24  
	`eÁb_t˝_hñ≥r_m‹e_bufs
(
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
));

25 
	}
}

27 
	$ci_t˝_hñ≥r_m‹e_socks
(
ci_√tif
* 
ni
)

29  
	`eÁb_t˝_hñ≥r_m‹e_socks
(
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
));

30 
	}
}

	@tcp_helper.c

14 
	~"ù_öã∫Æ.h
"

15 
	~<⁄lﬂd/comm⁄.h
>

17 #ifde‡
__unix__


18 
	~<√töë/ö.h
>

19 
	~<⁄lﬂd/unix_ötf.h
>

21 
	~<⁄lﬂd/dup2_lock.h
>

23 
	~<ci/öã∫Æ/ù.h
>

24 #ifde‡
__löux__


25 
	~<ci/öã∫Æ/åampﬁöe.h
>

26 
	~<asm/uni°d.h
>

29 
	#VERB
(
x
)

	)

32 
	$ci_t˝_hñ≥r_m‹e_bufs
(
ci_√tif
* 
ni
)

34  
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

35 
OO_IOC_TCP_MORE_BUFS
, 
NULL
);

36 
	}
}

38 
	$ci_t˝_hñ≥r_m‹e_socks
(
ci_√tif
* 
ni
)

40  
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

41 
OO_IOC_TCP_MORE_SOCKS
, 
NULL
);

42 
	}
}

44 #i‡
CI_CFG_FD_CACHING


45 
	$ci_t˝_hñ≥r_˛ór_ïˇche
(
ci_√tif
* 
ni
)

47  
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

48 
OO_IOC_TCP_CLEAR_EPCACHE
, 
NULL
);

49 
	}
}

52 #ifde‡
_WIN32


53 
	$ci_t˝_hñ≥r_å™s„r_com∂ëi⁄
(
ci_fd_t
 
fd
)

55 
rc
;

57 
rc
 = 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_TCP_XFER_COMPLETION
, 
NULL
);

58 if–
rc
 < 0 ) {

59 
	`LOG_SV
(
	`ci_log
("%s: faûed f‹ %x (rc=%d)", 
__FUNCTION__
, 
fd
, 
rc
));

61  
rc
;

62 
	}
}

82 
	$ci_t˝_hñ≥r_ï_£t_fûãrs
(
ci_fd_t
 
fd
,

83 
oo_•
 
ï
,

84 
ci_ifid_t
 
bödto_ifödex
,

85 
oo_•
 
‰om_t˝_id
)

87 
oo_t˝_fûãr_£t_t
 
›
;

88 
rc
;

90 
›
.
t˝_id
 = 
ï
;

91 
›
.
bödto_ifödex
 = bindto_ifindex;

92 
›
.
‰om_t˝_id
 = from_tcp_id;

94 
	`VERB
(
	`ci_log
("%s: id=%d", 
__FUNCTION__
, 
ï
));

95 
rc
 = 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_EP_FILTER_SET
, &
›
);

97 if–
rc
 < 0 )

98 
	`LOG_SV
(
	`ci_log
("%s: faûed f‹ %d (rc=%d)", 
__FUNCTION__
,

99 
	`OO_SP_FMT
(
ï
), 
rc
));

100  
rc
;

101 
	}
}

109 
	$ci_t˝_hñ≥r_ï_ªu£p‹t_böd
(
ci_fd_t
 
fd
,

110 c⁄° * 
˛u°î_«me
,

111 
ci_öt32
 
˛u°î_size
,

112 
ci_uöt32
 
˛u°î_ª°¨t_›t
,

113 
ci_uöt32
 
addr_be32
,

114 
ci_uöt16
 
p‹t_be16
)

116 
oo_t˝_ªu£p‹t_böd_t
 
›
;

117 
rc
;

119 
	`°∫˝y
(
›
.
˛u°î_«me
, clu°î_«me, 
CI_CFG_CLUSTER_NAME_LEN
);

120 
›
.
˛u°î_«me
[
CI_CFG_CLUSTER_NAME_LEN
] = '\0';

121 
›
.
˛u°î_size
 = cluster_size;

122 
›
.
˛u°î_ª°¨t_›t
 = cluster_restart_opt;

123 
›
.
addr_be32
 =áddr_be32;

124 
›
.
p‹t_be16
 =Öort_be16;

125 
	`VERB
(
	`ci_log
("%s: id=%d", 
__FUNCTION__
, 
fd
));

126 
rc
 = 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_EP_REUSEPORT_BIND
, &
›
);

128 if–
rc
 < 0 )

129 
	`LOG_SV
(
	`ci_log
("%s: faûed f‹ %d (rc=%d)", 
__FUNCTION__
, 
fd
, 
rc
));

130  
rc
;

131 
	}
}

139 
	$ci_t˝_hñ≥r_˛u°î_dump
(* 
›aque
, * 
buf
, 
buf_Àn
)

141 
˛u°î_dump_¨gs
* 
¨gs
 = 
›aque
;

142 
oo_˛u°î_dump_t
 
›
;

143 
	`CI_USER_PTR_SET
(
›
.
buf
, buf);

144 
›
.
buf_Àn
 = buf_len;

145  
	`oo_ªsour˚_›
(
¨gs
->
fd
, 
OO_IOC_CLUSTER_DUMP
, &
›
);

146 
	}
}

160 
	$ci_t˝_hñ≥r_ï_˛ór_fûãrs
(
ci_fd_t
 
fd
, 
oo_•
 
ï
, 
√ed_upd©e
)

162 
oo_t˝_fûãr_˛ór_t
 
›
;

163 
rc
;

165 
›
.
t˝_id
 = 
ï
;

166 
›
.
√ed_upd©e
 = !!need_update;

168 
	`VERB
(
	`ci_log
("%s: id=%d", 
__FUNCTION__
, 
ï
));

169 
rc
 = 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_EP_FILTER_CLEAR
, &
›
);

171 if–
rc
 < 0 )

172 
	`LOG_SV
(
	`ci_log
("%s: faûed f‹ %d (rc=%d)", 
__FUNCTION__
,

173 
	`OO_SP_FMT
(
ï
), 
rc
));

174  
rc
;

175 
	}
}

189 
	$ci_t˝_hñ≥r_ï_fûãr_dump
(* 
›aque
, * 
buf
, 
buf_Àn
)

191 
fûãr_dump_¨gs
* 
¨gs
 = 
›aque
;

192 
oo_t˝_fûãr_dump_t
 
›
;

193 
›
.
sock_id
 = 
¨gs
->sock_id;

194 
	`CI_USER_PTR_SET
(
›
.
buf
, buf);

195 
›
.
buf_Àn
 = buf_len;

196  
	`oo_ªsour˚_›
(
¨gs
->
fd
, 
OO_IOC_EP_FILTER_DUMP
, &
›
);

197 
	}
}

214 
	$ci_t˝_hñ≥r_ï_mˇ°_add_dñ
(
ci_fd_t
 
fd
,

215 
oo_•
 
ï
,

216 
ci_uöt32
 
mˇ°_addr
,

217 
ci_ifid_t
 
ifödex
,

218 
add
)

220 
oo_t˝_fûãr_mˇ°_t
 
›
;

221 
rc
;

223 
›
.
t˝_id
 = 
ï
;

224 
›
.
ifödex
 = ifindex;

225 
›
.
addr
 = 
mˇ°_addr
;

227 
	`VERB
(
	`ci_log
("%s: id=%d %s", 
__FUNCTION__
, 
	`OO_SP_FMT
(
ï
),

228 
add
 ? "add" : "del"));

229 
rc
 = 
	`oo_ªsour˚_›
(
fd
,

230 
add
 ? 
OO_IOC_EP_FILTER_MCAST_ADD
 :

231 
OO_IOC_EP_FILTER_MCAST_DEL
,

232 &
›
);

234 if–
rc
 < 0 )

235 
	`LOG_SV
(
	`ci_log
("%s: %s failed for %d (rc=%d)",

236 
__FUNCTION__
, 
add
 ? "add" : "dñ", 
	`OO_SP_FMT
(
ï
), 
rc
));

237  
rc
;

238 
	}
}

241 
	$ci_t˝_hñ≥r_°ack_©èch
(
ci_fd_t
 
‰om_fd
,

242 
e‰m_nic_£t_t
 *
out_±r_nic_£t
,

243 
ci_uöt32
 *
out_m≠_size
)

245 
rc
;

246 
oo_°ack_©èch_t
 
›
;

248 
	`ci_as£π
(
out_±r_nic_£t
);

249 
	`ci_as£π
(
out_m≠_size
);

250 
rc
 = 
	`oo_ªsour˚_›
(
‰om_fd
, 
OO_IOC_STACK_ATTACH
, &
›
);

251 if–
rc
 < 0 )

252  
rc
;

253 *
out_±r_nic_£t
 = 
›
.
out_nic_£t
;

254 *
out_m≠_size
 = 
›
.out_map_size;

255  
›
.
fd
;

256 
	}
}

259 
	$ci_t˝_hñ≥r_sock_©èch
(
ci_fd_t
 
°ack_fd
, 
oo_•
 
ï_id
,

260 
domaö
, 
ty≥
)

262 
rc
;

263 
oo_sock_©èch_t
 
›
;

265 
›
.
ï_id
 =Ép_id;

266 
›
.
ty≥
 =Åype;

267 
›
.
domaö
 = domain;

268 
	`oo_rwlock_lock_ªad
(&
côp_dup2_lock
);

269 
rc
 = 
	`oo_ªsour˚_›
(
°ack_fd
, 
OO_IOC_SOCK_ATTACH
, &
›
);

270 
	`oo_rwlock_u∆ock_ªad
 (&
côp_dup2_lock
);

271 if–
rc
 < 0 )

272  
rc
;

273  
›
.
fd
;

274 
	}
}

277 
	$ci_t˝_hñ≥r_t˝_ac˚±_sock_©èch
(
ci_fd_t
 
°ack_fd
, 
oo_•
 
ï_id
,

278 
ty≥
)

280 
rc
;

281 
oo_t˝_ac˚±_sock_©èch_t
 
›
;

283 
›
.
ï_id
 =Ép_id;

284 
›
.
ty≥
 =Åype;

285 
	`oo_rwlock_lock_ªad
(&
côp_dup2_lock
);

286 
rc
 = 
	`oo_ªsour˚_›
(
°ack_fd
, 
OO_IOC_TCP_ACCEPT_SOCK_ATTACH
, &
›
);

287 
	`oo_rwlock_u∆ock_ªad
 (&
côp_dup2_lock
);

288 if–
rc
 < 0 )

289  
rc
;

290  
›
.
fd
;

291 
	}
}

293 
	$ci_t˝_hñ≥r_pùe_©èch
(
ci_fd_t
 
°ack_fd
, 
oo_•
 
ï_id
,

294 
Êags
, 
fds
[2])

296 
rc
;

297 
oo_pùe_©èch_t
 
›
;

299 
›
.
ï_id
 =Ép_id;

300 
›
.
Êags
 = flags;

301 
rc
 = 
	`oo_ªsour˚_›
(
°ack_fd
, 
OO_IOC_PIPE_ATTACH
, &
›
);

302 if–
rc
 < 0 )

303  
rc
;

304 
fds
[0] = 
›
.
rfd
;

305 
fds
[1] = 
›
.
wfd
;

306  
rc
;

307 
	}
}

309 #ifde‡
__löux__


310 
	$ci_t˝_hñ≥r_˛o£_no_åampﬁöe
(
fd
) {

311 
ªs
;

312 
ˇŒ_num
 = 
__NR_˛o£
;

314 #i‡
	`deföed
(
__i386__
)

318 
__asm__
 
	`__vﬁ©ûe__
("xchgl %%ebx, %%ecx\n\t"

324 :"˜"(
ªs
)

325 :"0"(
ˇŒ_num
),"c"(
fd
));

327 i‡(
	`CI_UNLIKELY
(
ªs
 < 0)) {

328 
î∫o
 = -
ªs
;

332 #ñi‡
	`deföed
(
__x86_64__
)

333 
__asm__
 
	`__vﬁ©ûe__
("syscall\n"

337 :"˜"(
ªs
)

338 :"a"(
ˇŒ_num
),"D"(
fd
));

340 i‡(
	`CI_UNLIKELY
(
ªs
 < 0)) {

341 
î∫o
 = -
ªs
;

345 #ñi‡
	`deföed
(
__PPC__
)

347 
r0
 
	`asm
("r0");

348 
r3
 
	`asm
("r3");

350 
r0
 = 
ˇŒ_num
;

351 
r3
 = 
fd
;

353 
asm
 volatile("sc\n"

358 :"Ù"(
r0
),"Ù"(
r3
)

359 :"r"(
r0
),"r"(
r3
)

361 
ªs
 = 
r3
;

363 if(
r0
 & (1<<28)) {

364 
î∫o
 = 
ªs
;

368 #ñi‡
	`deföed
(
__ü64__
)

371 
	`__©åibuã__
((
unu£d
)Ë
i
 = 
ˇŒ_num
;

373 
ªs
 = 0;

378  
ªs
;

379 
	}
}

384 
	~<⁄lﬂd/dup2_lock.h
>

385 
oo_rwlock
 
	gcôp_dup2_lock
;

388 
ci_fd_t
 
	$ci_t˝_hñ≥r_gë_sock_fd
(
ci_fd_t
 
fd
)

390 
oo_os_sock_fd_gë_t
 
›
;

391 
rc
;

393 
	`oo_rwlock_lock_ªad
(&
côp_dup2_lock
);

394 
›
.
sock_id
 = -1;

395 
rc
 = 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_OS_SOCK_FD_GET
, &
›
);

396 if–
rc
 == 0 )

397  
›
.
fd_out
;

398 
	`oo_rwlock_u∆ock_ªad
 (&
côp_dup2_lock
);

399  (
ci_fd_t
Ë
rc
;

400 
	}
}

403 
	$ci_t˝_hñ≥r_ªl_sock_fd
(
ci_fd_t
 
fd
)

405 
rc
 = 0;

406 #i‚de‡
_WIN32


407 
rc
 = 
	`ci_sys_˛o£
 (
fd
);

409 
	`oo_rwlock_u∆ock_ªad
 (&
côp_dup2_lock
);

410  
rc
;

411 
	}
}

413 #ifde‡
__sun__


414 
	$ci_t˝_hñ≥r_≠∂y_f˙é
(
ci_fd_t
 
fd
, 
cmd
, 
¨g
, * 
ªsu…
)

416 
rc
;

417 
oo_≠∂y_f˙é_t
 
›
;

419 
›
.
cmd
 = cmd;

420 
›
.
¨g
 =árg;

422 
rc
 = 
	`oo_ªsour˚_›
(
fd
, 
CI_RSOP_APPLY_FCNTL
, &
›
);

423 i‡(
rc
 == 0)

424 *
ªsu…
 = 
›
.result;

426  
rc
;

427 
	}
}

431 
	$ci_t˝_hñ≥r_böd_os_sock
(
ci_fd_t
 
fd
, c⁄° 
sockaddr
* 
addªss
,

432 
size_t
 
addæí
, 
ci_uöt16
* 
out_p‹t
)

434 
rc
;

435 
oo_t˝_böd_os_sock_t
 
›
;

437 
	`CI_USER_PTR_SET
(
›
.
addªss
,áddress);

438 
›
.
addæí
 =áddrlen;

440 
rc
 = 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_TCP_BIND_OS_SOCK
, &
›
);

442 i‡(
rc
 < 0) {

443 
î∫o
 = -
rc
;

446 
	`ci_as£π
(
rc
 == 0);

449 i‡(
out_p‹t
)

450 *
out_p‹t
 = 
›
.
addæí
;

451  
rc
;

452 
	}
}

455 
	$ci_t˝_hñ≥r_li°í_os_sock
(
ci_fd_t
 
fd
, 
backlog
)

457 
rc
;

459 
rc
 = 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_TCP_LISTEN_OS_SOCK
, &
backlog
);

460 i‡(
rc
 < 0) {

461 
î∫o
 = -
rc
;

464 
	`ci_as£π
 (
rc
 == 0);

465  
rc
;

466 
	}
}

469 #i‚de‡
_WIN32


470 
	$ci_t˝_hñ≥r_ídpoöt_shutdown
(
ci_fd_t
 
fd
, 
how
, 
ci_uöt32
 
ﬁd_°©e
)

472 
oo_t˝_ídpoöt_shutdown_t
 
›
;

473 
rc
;

475 
›
.
how
 = how;

476 
›
.
ﬁd_°©e
 = old_state;

477 
rc
 = 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_TCP_ENDPOINT_SHUTDOWN
, &
›
);

478 i‡(
rc
 < 0) {

479 
î∫o
 = -
rc
;

482 
	`ci_as£π
 (
rc
 == 0);

483  
rc
;

484 
	}
}

488 
	$ci_t˝_hñ≥r_c⁄√˘_os_sock
(
ci_fd_t
 
fd
, c⁄° 
sockaddr
*
addªss
,

489 
size_t
 
addæí
)

491 
rc
;

492 
oo_t˝_sockaddr_wôh_Àn_t
 
›
;

494 
	`CI_USER_PTR_SET
(
›
.
addªss
,áddress);

495 
›
.
addæí
 =áddrlen;

496 
rc
 = 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_TCP_CONNECT_OS_SOCK
, &
›
);

497 i‡(
rc
 < 0) {

498 
î∫o
 = -
rc
;

501 
	`ci_as£π
 (
rc
 == 0);

502  
rc
;

503 
	}
}

506 #ifde‡
__löux__


507 
	$ci_t˝_hñ≥r_£t_t˝_˛o£_os_sock
(
ci_√tif
 *
ni
, 
oo_•
 
sock_id
)

509  
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

510 
OO_IOC_TCP_CLOSE_OS_SOCK
, &
sock_id
);

511 
	}
}

519 
	$ci_t˝_hñ≥r_os_sock_¸óã_™d_£t
(
ci_√tif
 *
ni
, 
ci_fd_t
 
fd
,

520 
ci_sock_cmn
 *
s
, 
Àvñ
,

521 
›äame
, c⁄° * 
›tvÆ
,

522 
›éí
)

524 
rc
;

525 
oo_t˝_¸óã_£t_t
 
›
;

530 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

535 
	`ci_as£π_nÊags
(
s
->
s_Êags
, 
CI_SOCK_FLAG_FILTER
);

540 
	`ci_as£π_√quÆ
(
s
->
b
.
°©e
, 
CI_TCP_LISTEN
);

542 
›
.
Àvñ
 =Üevel;

543 
›
.
›äame
 = optname;

544 
	`CI_USER_PTR_SET
(
›
.
›tvÆ
, optval);

545 
›
.
›éí
 = optlen;

546 
rc
 = 
	`oo_ªsour˚_›
(
fd
, 
OO_IOC_OS_SOCK_CREATE_AND_SET
, &
›
);

547  
rc
;

548 
	}
}

551 
	$ci_t˝_hñ≥r_Æloc_a˘ive_wûd
(
ci_√tif
 *
ni
)

553  
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

554 
OO_IOC_ALLOC_ACTIVE_WILD
, 
NULL
);

555 
	}
}

	@tcp_init_shared.c

14 
	~"ù_öã∫Æ.h
"

17 #i‚de‡
_WIN32


18 
	#TCP_STATE_POISON
 0xff

	)

22 
	#LPF
 "TCP "

	)

25 
	$ci_t˝_°©e_£tup_timîs
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

27 
	#ci_t˝_£tup_timî
(
«me
, 
ˇŒback
, 
œbñ
) \

29 
ci_ù_timî
* 
t
 = &
ts
->
«me
##
_tid
; \

30 
oo_p
 
•
; \

31 
t
->
∑øm1
 = 
	`S_SP
(
ts
); \

32 
t
->
‚
 = 
ˇŒback
; \

33 
•
 = 
	`TS_OFF
(
ni
, 
ts
); \

34 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
ci_t˝_°©e
, 
«me
##
_tid
)); \

35 
	`ci_ù_timî_öô
(
ni
, &
ts
->
«me
##
_tid
, 
•
, 
œbñ
); \

36 } 0)

	)

38 
	`ci_t˝_£tup_timî
(
πo
, 
CI_IP_TIMER_TCP_RTO
, "rtot");

39 
	`ci_t˝_£tup_timî
(
dñack
, 
CI_IP_TIMER_TCP_DELACK
, "dela");

40 
	`ci_t˝_£tup_timî
(
zwö
, 
CI_IP_TIMER_TCP_ZWIN
, "zwin");

41 
	`ci_t˝_£tup_timî
(
kÆive
, 
CI_IP_TIMER_TCP_KALIVE
, "kalv");

42 #i‡
CI_CFG_TCP_SOCK_STATS


43 
	`ci_t˝_£tup_timî
(
°©s
, 
CI_IP_TIMER_TCP_STATS
, "stat");

45 #i‡
CI_CFG_TAIL_DROP_PROBE


46 
	`ci_t˝_£tup_timî
(
èûdr›
, 
CI_IP_TIMER_TCP_TAIL_DROP
,"tdrp");

48 
	`ci_t˝_£tup_timî
(
c‹k
, 
CI_IP_TIMER_TCP_CORK
, "cork");

50 #unde‡
ci_t˝_£tup_timî


51 
	}
}

54 
	$ci_t˝_°©e_c⁄√˘ed_›ts_öô
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

56 
oo_p
 
•
;

57 
i
;

59 
ts
->
£nd_¥equeue
 = 
CI_ILL_END
;

60 
	`oo_©omic_£t
(&
ts
->
£nd_¥equeue_ö
, 0);

61 
ts
->
£nd_ö
 = 0;

62 
ts
->
£nd_out
 = 0;

65 
	`ci_ù_queue_öô
(&
ts
->
ªcv1
);

66 
	`ci_ù_queue_öô
(&
ts
->
ªcv2
);

67 
	`TS_QUEUE_RX_SET
(
ts
, 
ªcv1
);

68 
ts
->
ªcv1_exåa˘
 = 
OO_PP_NULL
;

71 
	`ci_ù_queue_öô
(&
ts
->
rob
);

74 
ts
->
so_¢dbuf_pkts
 = 0;

75 
	`ci_ù_queue_öô
(&
ts
->
£nd
);

77 
	`ci_ù_queue_öô
(&
ts
->
ªå™s
);

78 
i
 = 0; i <
CI_TCP_SACK_MAX_BLOCKS
; i++ )

79 
ts
->
œ°_ßck
[
i
] = 
OO_PP_NULL
;

80 
ts
->
dßck_block
 = 
OO_PP_INVALID
;

82 
•
 = 
	`oo_sockp_to_°©ï
(
√tif
, 
	`S_SP
(
ts
));

83 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
ci_t˝_°©e
, 
timeout_q_lök
));

84 
	`ci_ni_dŒi°_lök_öô
(
√tif
, &
ts
->
timeout_q_lök
, 
•
, "tmoq");

85 
	`ci_ni_dŒi°_m¨k_‰ì
(&
ts
->
timeout_q_lök
);

87 
•
 = 
	`oo_sockp_to_°©ï
(
√tif
, 
	`S_SP
(
ts
));

88 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
ci_t˝_°©e
, 
tx_ªady_lök
));

89 
	`ci_ni_dŒi°_lök_öô
(
√tif
, &
ts
->
tx_ªady_lök
, 
•
, "tmoq");

90 
	`ci_ni_dŒi°_£lf_lök
(
√tif
, &
ts
->
tx_ªady_lök
);

91 
	}
}

94 
	$ci_t˝_°©e_tcb_öô_fixed
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

95 
‰om_ˇche
)

98 
ts
->
s
.
so
.
rcvlow©
 = 1;

101 
ts
->
c
.
ka_¥obe_th
 = 
	`NI_OPTS
(
√tif
).
kì∑live_¥obes
;

102 
ts
->
c
.
t_ka_time
 = 
	`NI_CONF
(
√tif
).
tc⁄°_kì∑live_time
;

103 
ts
->
c
.
t_ka_time_ö_£cs
 = 
	`NI_OPTS
(
√tif
).
kì∑live_time
 / 1000;

104 #i‡!
	`deföed
(
__sun__
)

105 
ts
->
c
.
t_ka_ötvl
 = 
	`NI_CONF
(
√tif
).
tc⁄°_kì∑live_ötvl
;

106 
ts
->
c
.
t_ka_ötvl_ö_£cs
 = 
	`NI_OPTS
(
√tif
).
kì∑live_ötvl
 / 1000;

110 
	`ci_ù_hdr_öô_fixed
(&
ts
->
s
.
pkt
.
ù
, 
IPPROTO_TCP
,

111 
CI_IP_DFLT_TTL
, 
CI_IP_DFLT_TOS
);

113 
	`sock_œddr_be32
(&(
ts
->
s
)) = 0;

114 
	`TS_TCP
(
ts
)->
t˝_sour˚_be16
 = 0;

115 #i‡
CI_CFG_FD_CACHING


119 if–!
‰om_ˇche
 ) {

120 
ts
->
ˇched_⁄_fd
 = -1;

121 
ts
->
ˇched_⁄_pid
 = -1;

130 
ts
->
s
.
pkt
.
ù
.
ù_ihl_vîsi⁄
 = 
	`CI_IP4_IHL_VERSION
((
ci_ù4_hdr
));

131 
ts
->
s
.
pkt
.
ù
.
ù_¥Ÿocﬁ
 = 
IPPROTO_TCP
;

132 
ts
->
s
.
pkt
.
ù
.
ù_check_be16
 = 0;

133 
ts
->
s
.
pkt
.
ù
.
ù_id_be16
 = 0;

134 
	`TS_TCP
(
ts
)->
t˝_check_be16
 = 0;

135 
	}
}

138 
	$ci_t˝_°©e_tcb_ªöô
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

139 
‰om_ˇche
)

141 
	`ci_t˝_°©e_£tup_timîs
(
√tif
, 
ts
);

143 #i‡
CI_CFG_FD_CACHING


144 if–!
‰om_ˇche
 ) {

145 
oo_p
 
•
;

146 
ts
->
ˇched_⁄_fd
 = -1;

147 
ts
->
ˇched_⁄_pid
 = -1;

148 
•
 = 
	`TS_OFF
(
√tif
, 
ts
);

149 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
ci_t˝_°©e
, 
ïˇche_lök
));

150 
	`ci_ni_dŒi°_lök_öô
(
√tif
, &
ts
->
ïˇche_lök
, 
•
, "epch");

151 
	`ci_ni_dŒi°_£lf_lök
(
√tif
, &
ts
->
ïˇche_lök
);

152 
•
 = 
	`TS_OFF
(
√tif
, 
ts
);

153 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
ci_t˝_°©e
, 
ïˇche_fd_lök
));

154 
	`ci_ni_dŒi°_lök_öô
(
√tif
, &
ts
->
ïˇche_fd_lök
, 
•
, "ecfd");

155 
	`ci_ni_dŒi°_£lf_lök
(
√tif
, &
ts
->
ïˇche_fd_lök
);

159 
	`ci_t˝_Á°_∑th_dißbÀ
(
ts
);

161 
ts
->
t˝Êags
 = 
	`NI_OPTS
(
√tif
).
syn_›ts
;

163 
ts
->
outgoög_hdrs_Àn
 = (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
);

164 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 )Ås->
outgoög_hdrs_Àn
 += 12;

165 
ts
->
öcomög_t˝_hdr_Àn
 = (
ci_t˝_hdr
);

166 
ts
->
c
.
t˝_de„r_ac˚±
 = 
OO_TCP_DEFER_ACCEPT_OFF
;

168 
	`ci_t˝_°©e_c⁄√˘ed_›ts_öô
(
√tif
, 
ts
);

171 
	`TS_TCP
(
ts
)->
t˝_urg_±r_be16
 = 0;

172 
	`t˝_íq_nxt
(
ts
Ë
	`t˝_¢d_u«
—sË
	`t˝_¢d_nxt
—sË
	`t˝_¢d_up
(ts) = 0;

173 
ts
->
¢d_dñeg©ed
 = 0;

174 
ts
->
¢d_max
 = 
	`t˝_¢d_nxt
(ts) + 1;

178 
ts
->
¢d_ws˛
 = 0;

179 
	`CI_IP_SOCK_STATS_VAL_TXWSCL
–
ts
,Ås->
¢d_ws˛
);

180 
ts
->
rcv_ws˛
 = 0;

181 
	`CI_IP_SOCK_STATS_VAL_RXWSCL
–
ts
,Ås->
rcv_ws˛
);

184 
	`t˝_rcv_wnd_right_edge_£¡
(
ts
Ë
	`t˝_rcv_wnd_advîti£d
(ts) = 0;

185 
ts
->
rcv_added
 =Ås->
rcv_dñivîed
 = 
	`t˝_rcv_nxt
(ts) = 0;

186 
	`t˝_rcv_up
(
ts
Ë
	`SEQ_SUB
(
	`t˝_rcv_nxt
(ts), 1);

189 
	`CI_TCP_HDR_SET_LEN
(
	`TS_TCP
(
ts
),

190 (
ts
->
outgoög_hdrs_Àn
 - (
ci_ù4_hdr
)));

191 
	`TS_TCP
(
ts
)->
t˝_Êags
 = 0u;

194 
ts
->
c⁄g°©e
 = 
CI_TCP_CONG_OPEN
;

195 
ts
->
cwnd_exåa
 = 0;

196 
ts
->
dup_acks
 = 0;

197 
ts
->
byãs_acked
 = 0;

199 #i‡
CI_CFG_BURST_CONTROL


201 
ts
->
bur°_wödow
 = 0;

205 #i‡
CI_CFG_CONGESTION_WINDOW_VALIDATION


206 
ts
->
t_œ°_£¡
 = 
	`ci_t˝_time_now
(
√tif
);

207 
ts
->
t_œ°_fuŒ
 = 
	`ci_t˝_time_now
(
√tif
);

208 
ts
->
cwnd_u£d
 = 0;

210 
ts
->
t_œ°_ªcv_ack
 =Ås->
t_œ°_ªcv_∑ylﬂd
 =Ås->
t_¥ev_ªcv_∑ylﬂd
 =

211 
	`ci_t˝_time_now
(
√tif
);

213 
ts
->
eff_mss
 = 0;

214 
ts
->
amss
 = 0;

215 
ts
->
s°hªsh
 = 0;

218 
ts
->
t•aws
 = 
	`ci_t˝_time_now
(
√tif
Ë- (
	`NI_CONF
“ëif).
tc⁄°_∑ws_idÀ
+1);

219 
ts
->
t§e˚¡
 = 0;

222 
ts
->
acks_≥ndög
 = 0;

225 
	`CITP_TCP_FASTSTART
(
ts
->
Á°°¨t_acks
 = 0);

227 #i‡
CI_CFG_TAIL_DROP_PROBE


229 
ts
->
èûdr›_°©e
 = 
CI_TCP_TAIL_DROP_INACTIVE
;

232 
	`ci_t˝_£t_du∑ck_thªsh
(
ts
, 0);

234 
ts
->
zwö_¥obes
 = 0;

235 
ts
->
zwö_acks
 = 0;

236 
ts
->
ka_¥obes
 = 0;

238 
ts
->
ka_œ°
 = 
	`ci_t˝_time_now
(
√tif
);

241 
ts
->
c
.
u£r_mss
 = 0;

244 
ts
->
ªå™smôs
 = 0;

247 
ts
->
πo
 = 
	`NI_CONF
(
√tif
).
tc⁄°_πo_öôül
;

248 
ts
->
ß
 = 0;

249 
ts
->
sv
 = 
	`NI_CONF
(
√tif
).
tc⁄°_πo_öôül
;

251 #i‡
CI_CFG_TCP_SOCK_STATS


252 
	`ci_t˝_°©s_öô
(
√tif
, 
ts
);

254 
	`t˝_urg_d©a
(
ts
) = 0;

256 i‡(
	`NI_OPTS
(
√tif
).
t˝_f‹˚_nodñay
 == 1)

257 
	`ci_bô_£t
(&
ts
->
s
.
s_aÊags
, 
CI_SOCK_AFLAG_NODELAY_BIT
);

259 
ts
->
tm∂_hód
 = 
OO_PP_NULL
;

261 
ts
->
loˇl_≥î
 = 
OO_SP_NULL
;

263 
	`mem£t
(&
ts
->
°©s
, 0, (ts->stats));

266 
	`ci_wmb
();

267 
ts
->
s
.
b
.
°©e
 = 
CI_TCP_CLOSED
;

268 
	}
}

271 
	$ci_t˝_°©e_öô
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
, 
‰om_ˇche
)

273 
	`ci_as£π
(
	`CI_PTR_OFFSET
(&
ts
->
s
.
pkt
.
ù
, 4) == 0);

274 
	`LOG_TV
(
	`ci_log
(
LPF
 "%s(): %d", 
__FUNCTION__
, 
	`S_FMT
(
ts
)));

276 #i‡
	`deföed
(
TCP_STATE_POISON
Ë&& !deföed(
NDEBUG
)

278 if–!
‰om_ˇche
 ) {

279 *
pois⁄_°¨t
 = &
ts
->
s
.
b
 + 1;

280 
	`mem£t
(
pois⁄_°¨t
, 
TCP_STATE_POISON
,

281 ((*)(
ts
+1)Ë- (*)
pois⁄_°¨t
);

286 
	`ci_sock_cmn_öô
(
√tif
, &
ts
->
s
, !
‰om_ˇche
);

287 
	`ci_pmtu_°©e_öô
(
√tif
, &
ts
->
s
, &ts->
pmtus
, 
CI_IP_TIMER_PMTU_DISCOVER
);

288 
	`ci_udp_ªcv_q_öô
(&
ts
->
time°amp_q
);

291 
	`ci_t˝_°©e_tcb_öô_fixed
(
√tif
, 
ts
, 
‰om_ˇche
);

292 
	`ci_t˝_°©e_tcb_ªöô
(
√tif
, 
ts
, 
‰om_ˇche
);

293 
	}
}

295 
	$ci_t˝_°©e_ªöô
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

297 
	`ci_as£π
(
	`CI_PTR_OFFSET
(&
ts
->
s
.
pkt
.
ù
, 4) == 0);

298 
	`LOG_TV
(
	`ci_log
(
LPF
 "%s(): %d", 
__FUNCTION__
, 
	`S_FMT
(
ts
)));

302 
ts
->
s
.
b
.
°©e
 = 
CI_TCP_INVALID
;

303 
	`ci_wmb
();

309 
	`ci_sock_cmn_ªöô
(
√tif
, &
ts
->
s
);

310 
	`ci_pmtu_°©e_ªöô
(
√tif
, &
ts
->
s
, &ts->
pmtus
);

311 
	`ci_udp_ªcv_q_öô
(&
ts
->
time°amp_q
);

313 
	`ci_t˝_°©e_tcb_ªöô
(
√tif
, 
ts
, 0);

314 
	}
}

317 #i‚de‡
__KERNEL__


318 
ci_t˝_°©e
* 
	$ci_t˝_gë_°©e_buf_‰om_ˇche
(
ci_√tif
 *
√tif
)

320 
ci_t˝_°©e
 *
ts
 = 
NULL
;

321 #i‡
CI_CFG_FD_CACHING


322 if–
	`ci_ni_dŒi°_nŸ_em±y
(
√tif
, &√tif->
°©e
->
a˘ive_ˇche
.
ˇche
) ) {

326 
ci_ni_dŒi°_lök
 *
lök
 =

327 
	`ci_ni_dŒi°_hód
(
√tif
, &√tif->
°©e
->
a˘ive_ˇche
.
ˇche
);

328 
ts
 = 
	`CI_CONTAINER
(
ci_t˝_°©e
, 
ïˇche_lök
, 
lök
);

329 
	`ci_as£π
(
ts
);

340 if–
ts
->
ˇched_⁄_pid
 !
	`gëpid
() &&

341 (~
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_IN_CACHE_NO_FD
) ) {

342  
NULL
;

348 
	`ci_ni_dŒi°_p›
(
√tif
, &√tif->
°©e
->
a˘ive_ˇche
.
ˇche
);

349 
	`ci_ni_dŒi°_£lf_lök
(
√tif
, &
ts
->
ïˇche_lök
);

350 
	`ci_ni_dŒi°_ªmove_ß„
(
√tif
, &
ts
->
ïˇche_fd_lök
);

351 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
a˘iveˇche_hô
);

352 
	`ci_©omic32_öc
((vﬁ©ûê
ci_uöt32
*)
	`CI_NETIF_PTR
(
√tif
,

353 
√tif
->
°©e
->
a˘ive_ˇche
.
avaû_°ack
));

356 
	`LOG_EP
(
	`ci_log
("Takög cached sockë "
NSS_FMT
" fd %d off cachedÜist",

357 
	`NSS_PRI_ARGS
(
√tif
, &
ts
->
s
),Ås->
ˇched_⁄_fd
));

359 
	`ci_t˝_°©e_öô
(
√tif
, 
ts
, 1);

361 
	`ci_as£π
(!(
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
));

362 
	`ci_as£π
(
	`ci_t˝_is_ˇched
(
ts
));

364 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
sockˇche_hô
);

367  
ts
;

368 
	}
}

372 
ci_t˝_°©e
* 
	$ci_t˝_gë_°©e_buf
(
ci_√tif
* 
√tif
)

374 
côp_waôabÀ_obj
* 
wo
;

376 
	`ci_as£π
(
√tif
);

378 
wo
 = 
	`côp_waôabÀ_obj_Æloc
(
√tif
);

379 if–! 
wo
 ) {

380 
	`LOG_TV
(
	`ci_log
("%s: [%d] ouào‡sockë buf„rs",
__FUNCTION__
,
	`NI_ID
(
√tif
)));

381  
NULL
;

384 
	`ci_t˝_°©e_öô
(
√tif
, &
wo
->
t˝
, 0);

385  &
wo
->
t˝
;

386 
	}
}

388 
	$ci_ni_aux_m‹e_bufs
(
ci_√tif
* 
ni
)

390 
côp_waôabÀ_obj
* 
wo
 = 
	`côp_waôabÀ_obj_Æloc
(
ni
);

391 
ci_ni_aux_mem
* 
aux
;

392 
oo_p
 
•
;

393 
i
;

395 if–
wo
 =
NULL
 )

398 
wo
->
hódî
.
°©e
 = 
CI_TCP_STATE_AUXBUF
;

399 
•
 = 
	`oo_sockp_to_°©ï
(
ni
, 
	`W_SP
(&
wo
->
waôabÀ
));

400 
	`ci_as£π_equÆ
(
	`CI_MEMBER_OFFSET
(
ci_ni_aux_mem
, 
lök
), 0);

402  
aux
 = (*)((
ci_uöçå_t
)
wo
 + 
CI_AUX_MEM_SIZE
), 
i
 = 1;

403 (
ci_uöçå_t
)(
wo
+1Ë> (ci_uöçå_t)
aux
;

404 
aux
++, 
i
++ ) {

405 
	`OO_P_ADD
(
•
, 
CI_AUX_MEM_SIZE
);

406 
	`ci_ni_dŒi°_lök_öô
(
ni
, &
aux
->
lök
, 
•
, "faux");

407 
aux
->
no
 = 
i
;

408 
ni
->
°©e
->
n_aux_bufs
++;

411 
aux
->
lök
.
√xt
 = 
ni
->
°©e
->
‰ì_aux_mem
;

412 
ni
->
°©e
->
‰ì_aux_mem
 = 
•
;

413 
ni
->
°©e
->
n_‰ì_aux_bufs
++;

415 
	}
}

	@tcp_ioctl.c

14 #ifde‡ 
__löux__


15 
	~<löux/sockios.h
>

18 
	~"ù_öã∫Æ.h
"

19 
	~<ci/√t/io˘ls.h
>

20 
	~<⁄lﬂd/osfûe.h
>

25 
	$ci_t˝_io˘l_lk
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
, 
ªque°
,

26 * 
¨g
)

28 
ci_√tif
* 
√tif
 = 
ï
->netif;

29 
ci_sock_cmn
* 
s
 = 
ï
->s;

30 
ci_t˝_°©e
* 
ts
 = 
NULL
;

31 
rc
 = 0;

32 
os_sockë_exi°s
 = 
s
->
b
.
sb_aÊags
 & 
CI_SB_AFLAG_OS_BACKED
;

34 if–
s
->
b
.
°©e
 !
CI_TCP_LISTEN
 )

35 
ts
 = 
	`SOCK_TO_TCP
(
s
);

46 if–
os_sockë_exi°s
 && 
ªque°
 !
FIONREAD
 &&Ñeque° !
SIOCATMARK
 &&

47 
ªque°
 !
FIOASYNC
 &&Ñeque° !
TIOCOUTQ
 &&Ñeque° !
SIOCOUTQNSD
 &&

48 
ªque°
 !(Ë
FIONBIO
 ) {

49 
rc
 = 
	`oo_os_sock_io˘l
(
√tif
, 
s
->
b
.
bufid
, 
ªque°
, 
¨g
, 
NULL
);

50 if–
rc
 < 0 )

51  
rc
;

56 
	`LOG_TV
–
	`ci_log
("%s:Ñeque° = %d,árg = %ld", 
__FUNCTION__
, 
ªque°
,

57 ()
¨g
));

59  
ªque°
 ) {

60 
FIONBIO
:

61 if–
	`CI_IOCTL_ARG_OK
(, 
¨g
) ) {

62 
	`CI_CMN_IOCTL_FIONBIO
(
ï
->
s
, 
¨g
);

63 
rc
 = 0;

66 
Áû_Áu…
;

67 
FIONREAD
:

68 if–!
	`CI_IOCTL_ARG_OK
(, 
¨g
) )

69 
Áû_Áu…
;

70 #ifde‡
__löux__


71 if–
s
->
b
.
°©e
 =
CI_TCP_LISTEN
 )

72 
Áû_övÆ
;

74 if–
s
->
b
.
°©e
 =
CI_TCP_SYN_SENT
 ) {

76 if–
s
->
b
.
°©e
 =
CI_TCP_SYN_SENT
 || s->b.°©ê=
CI_TCP_LISTEN
 ) {

78 
	`CI_IOCTL_SETARG
((*)
¨g
, 0);

83 
byãs_ö_rxq
 = 
	`t˝_rcv_u§
(
ts
);

84 i‡(
byãs_ö_rxq
 && ! (
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_OOBINLINE
)) {

86 #i‚de‡
_WIN32


87 i‡(
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_PTR_VALID
) {

89 
ªadnxt
 = 
	`t˝_rcv_nxt
(
ts
Ë- 
byãs_ö_rxq
;

90 i‡(
	`SEQ_LT
(
ªadnxt
, 
	`t˝_rcv_up
(
ts
))) {

91 
byãs_ö_rxq
 = 
	`t˝_rcv_up
(
ts
Ë- 
ªadnxt
;

92 } i‡(
	`SEQ_EQ
(
ªadnxt
, 
	`t˝_rcv_up
(
ts
))) {

93 
byãs_ö_rxq
--;

104 
	`LOG_URG
(
	`ci_log
(
TCP_URG_FMT
, 
	`TCP_URG_ARGS
(
ts
)));

105 
byãs_ö_rxq
 -
	`ci_ù_queue_nŸ_em±y
(&
ts
->
ªcv2
) ? 1 : 0;

109 
	`CI_IOCTL_SETARG
((*)
¨g
, 
byãs_ö_rxq
);

113 
TIOCOUTQ
:

114 
SIOCOUTQNSD
:

116 
	`CI_BUILD_ASSERT
(
TIOCOUTQ
 =
SIOCOUTQ
);

117 #ifde‡
__löux__


118 
outq_byãs
 = 0;

120 if–!
	`CI_IOCTL_ARG_OK
(, 
¨g
) )

121 
Áû_Áu…
;

122 if–
s
->
b
.
°©e
 =
CI_TCP_LISTEN
 )

123 
Áû_övÆ
;

125 if–
s
->
b
.
°©e
 !
CI_TCP_SYN_SENT
 ) {

128 if–
ªque°
 =
TIOCOUTQ
 )

129 
outq_byãs
 = 
	`SEQ_SUB
(
	`t˝_íq_nxt
(
ts
), 
	`t˝_¢d_u«
(ts));

131 
outq_byãs
 = 
	`SEQ_SUB
(
	`t˝_íq_nxt
(
ts
), 
	`t˝_¢d_nxt
(ts));

133 
	`CI_IOCTL_SETARG
((*)
¨g
, 
outq_byãs
);

135 #îr‹ 
TODO


140 
SIOCATMARK
:

142 if–!
	`CI_IOCTL_ARG_OK
(, 
¨g
) )

143 
Áû_Áu…
;

145 #ifde‡
_WIN32


146 if((
s
->
s_Êags
 & 
CI_SOCK_FLAG_OOBINLINE
)

147 || (
s
->
b
.
°©e
 =
CI_TCP_LISTEN
))

150 
	`CI_IOCTL_SETARG
–(*)
¨g
, 1);

151 
	`LOG_URG
(
	`log
("SIOCATMARKátmark=1 OOBINLINE=%sÜistening=%s",

152 (
s
->
s_Êags
 & 
CI_SOCK_FLAG_OOBINLINE
)?"TRUE":"FALSE",

153 
s
->
b
.
°©e
 =
CI_TCP_LISTEN
?"TRUE":"FALSE"));

154 
suc˚ss_out
;

159 
	`CI_IOCTL_SETARG
((*)
¨g
,

160 (
	`t˝_urg_d©a
(
ts
Ë& (
CI_TCP_URG_COMING
 | 
CI_TCP_URG_IS_HERE
))

162 
	`LOG_URG
(
	`log
(
NTS_FMT
 "SIOCATMARKátmark=%d OOBINLINE=%s URG_COMING=%s URG_HERE=%s",

163 
	`NTS_PRI_ARGS
(
ï
->
√tif
, 
ts
),

164 ((
	`t˝_urg_d©a
(
ts
Ë& (
CI_TCP_URG_COMING
 | 
CI_TCP_URG_IS_HERE
))? 0 : 1),

165 (
s
->
s_Êags
 & 
CI_SOCK_FLAG_OOBINLINE
)?"TRUE":"FALSE",

166 (
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_COMING
)?"TRUE":"FALSE",

167 (
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_IS_HERE
)?"TRUE":"FALSE"

169 
suc˚ss_out
;

173 
	`CI_IOCTL_SETARG
((*)
¨g
, 0);

174 if–
s
->
b
.
°©e
 !
CI_TCP_LISTEN
 ) {

175 
ªadnxt
;

177 
ªadnxt
 = 
	`SEQ_SUB
(
	`t˝_rcv_nxt
(
ts
), 
	`t˝_rcv_u§
(ts));

178 if–~
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_ACCEPT_DATA
 )

179 
ªadnxt
 = 
	`SEQ_SUB
(readnxt, 1);

180 if–
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_PTR_VALID
 )

181 
	`CI_IOCTL_SETARG
((*)
¨g
, 
ªadnxt
 =
	`t˝_rcv_up
(
ts
));

182 
	`LOG_URG
(
	`log
(
NTS_FMT
 "SIOCATMARKátmark=%dÑeadnxt=%uÑcv_up=%u%s",

183 
	`NTS_PRI_ARGS
(
ï
->
√tif
, 
ts
), 
ªadnxt
 =
	`t˝_rcv_up
(ts),

184 
ªadnxt
, 
	`t˝_rcv_up
(
	`SOCK_TO_TCP
(
ï
->
s
)),

185 (
	`t˝_urg_d©a
(
ts
)&
CI_TCP_URG_PTR_VALID
)?"":" (invalid)"));

191 #i‚de‡
__KERNEL__


192 
FIOASYNC
:

196 
rc
 = 
	`ci_sys_io˘l
(
fd
, 
ªque°
, 
¨g
);

199 
SIOCSPGRP
:

200 if–!
	`CI_IOCTL_ARG_OK
(, 
¨g
) )

201 
Áû_Áu…
;

206 
rc
 = 
	`ci_sys_f˙é
(
fd
, 
F_SETOWN
, 
	`CI_IOCTL_GETARG
(, 
¨g
));

207 if–
rc
 == 0 ) {

208 
rc
 = 
	`ci_cmn_io˘l
(
√tif
, 
ï
->
s
, 
ªque°
, 
¨g
,Ñc, 
os_sockë_exi°s
);

211 
	`CI_SET_ERROR
(
rc
, -rc);

217 #i‚de‡
_WIN32


218  
	`ci_cmn_io˘l
(
√tif
, 
ï
->
s
, 
ªque°
, 
¨g
, 
rc
, 
os_sockë_exi°s
);

220 
Áû_övÆ
;

226 #ifde‡
_WIN32


227 
suc˚ss_out
:

230  
rc
;

232 
Áû_övÆ
:

233 
	`LOG_SC
(
	`ci_log
("%s: "
NSS_FMT
" unhandledÑeq %d/%#xárg %ld/%#lx (EINVAL)",

234 
__FUNCTION__
, 
	`NSS_PRI_ARGS
(
√tif
, 
s
), 
ªque°
,Ñequest,

235 ()
¨g
, ()arg));

236  -
EINVAL
;

238 
Áû_Áu…
:

239 
	`LOG_SC
(
	`ci_log
("%s: "
NSS_FMT
" unhandledÑeq %d/%#xárg %#lx (EFAULT)",

240 
__FUNCTION__
, 
	`NSS_PRI_ARGS
(
√tif
, 
s
), 
ªque°
,Ñequest,

241 ()
¨g
));

242  -
EFAULT
;

243 
	}
}

258 
	$ci_t˝_io˘l
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
, 
ªque°
, * 
¨g
)

260 
rc
;

262 
	`ci_√tif_lock
(
ï
->
√tif
);

263 
rc
 = 
	`ci_t˝_io˘l_lk
(
ï
, 
fd
, 
ªque°
, 
¨g
);

264 
	`ci_√tif_u∆ock
(
ï
->
√tif
);

265  
rc
;

266 
	}
}

	@tcp_misc.c

14 
	~"ù_öã∫Æ.h
"

15 
	~<⁄lﬂd/¶ìp.h
>

16 
	~<⁄lﬂd/tm∂.h
>

18 
	#LPF
 "TCP MISC "

	)

20 
	#VERB
(
x
)

	)

22 #ifde‡
__löux__


25 
	mCI_LINUX_TCP_ESTABLISHED
 = 1,

26 
	mCI_LINUX_TCP_SYN_SENT
,

27 
	mCI_LINUX_TCP_SYN_RECV
,

28 
	mCI_LINUX_TCP_FIN_WAIT1
,

29 
	mCI_LINUX_TCP_FIN_WAIT2
,

30 
	mCI_LINUX_TCP_TIME_WAIT
,

31 
	mCI_LINUX_TCP_CLOSE
,

32 
	mCI_LINUX_TCP_CLOSE_WAIT
,

33 
	mCI_LINUX_TCP_LAST_ACK
,

34 
	mCI_LINUX_TCP_LISTEN
,

35 
	mCI_LINUX_TCP_CLOSING
,

40 c⁄° 
	gci_sock_°©es_löux_m≠
 [] = {

41 
CI_LINUX_TCP_CLOSE
,

42 
CI_LINUX_TCP_LISTEN
,

43 
CI_LINUX_TCP_SYN_SENT
,

44 
CI_LINUX_TCP_ESTABLISHED
,

45 
CI_LINUX_TCP_CLOSE_WAIT
,

46 
CI_LINUX_TCP_LAST_ACK
,

47 
CI_LINUX_TCP_FIN_WAIT1
,

48 
CI_LINUX_TCP_FIN_WAIT2
,

49 
CI_LINUX_TCP_CLOSING
,

52 
CI_LINUX_TCP_CLOSE


57 c⁄° * 
	$ty≥_°r
(
ty≥
)

59 #ifde‡
__sun__


60 c⁄° * 
ty≥_°rs
[] = {

70 c⁄° * 
ty≥_°rs
[] = {

84 #i‚de‡
SOCK_TYPE_MASK


85 
	#SOCK_TYPE_MASK
 0xf

	)

88 
ty≥
 &
SOCK_TYPE_MASK
;

90 i‡(
ty≥
 < 0 ||Åy≥ >( (
ty≥_°rs
) /  (type_strs[0])))

93  
ty≥_°rs
[
ty≥
];

94 
	}
}

96 c⁄° * 
	$domaö_°r
(
domaö
)

98 c⁄° * 
domaö_°rs
[] = {

102 #ifde‡
__sun__


163 i‡(
domaö
 < 0 || domaö >( (
domaö_°rs
) /  (domain_strs[0])))

166  
domaö_°rs
[
domaö
];

167 
	}
}

169 c⁄° * 
	$ù_addr_°r
(
ci_uöt32
 
addr_be32
)

171 
buf
[4][16];

172 
buf_i
;

173 
i
 = ++
buf_i
 & 3;

175 
	`ci_f‹m©_ù4_addr
(
buf
[
i
], 
addr_be32
);

176  
buf
[
i
];

177 
	}
}

180 c⁄° * 
	$ci_t˝_°©e_num_°r
(
°©e_i
)

182 c⁄° * 
°©e_°rs
[] = {

200 if–
°©e_i
 < 0 || sèã_ò>((
°©e_°rs
) / (state_strs[0])) )

203  
°©e_°rs
[
°©e_i
];

204 
	}
}

207 c⁄° * 
	$ci_t˝_c⁄g°©e_°r
(
s
)

209  
s
 ) {

210 
CI_TCP_CONG_OPEN
:  "Open";

211 
CI_TCP_CONG_RTO
:  "RTO";

212 
CI_TCP_CONG_RTO_RECOV
:  "RTORecovery";

213 
CI_TCP_CONG_FAST_RECOV
:  "FastRecovery";

214 
CI_TCP_CONG_COOLING
:  "Cooling";

215 
CI_TCP_CONG_NOTIFIED
:  "Notified";

217 
	`ci_log
("BAD CONGESTION STATE %x", 
s
);

220 
	}
}

223 
	$__ci_t˝_°©e_‰ì
(
ci_√tif
 *
ni
, 
ci_t˝_°©e
 *
ts
)

225 
	`VERB
(
	`ci_log
("%s("
NTS_FMT
")", 
__FUNCTION__
, 
	`NTS_PRI_ARGS
(
ni
,
ts
)));

226 
	`ci_as£π
(
ni
);

227 
	`ci_as£π
(
ts
);

230 if–
	`OO_SP_NOT_NULL
(
ts
->
loˇl_≥î
) ) {

231 
ci_t˝_°©e
* 
≥î
 = 
	`ID_TO_TCP
(
ni
, 
ts
->
loˇl_≥î
);

232 if–
≥î
->
loˇl_≥î
 =
	`S_SP
(
ts
) )

233 
≥î
->
loˇl_≥î
 = 
OO_SP_NULL
;

236 #i‡
CI_CFG_PIO


238 
	`ci_t˝_tm∂_‰ì_Æl
(
ni
, 
ts
);

242 
	`ci_ni_dŒi°_ªmove_ß„
(
ni
, &
ts
->
s
.
b
.
po°_pﬁl_lök
);

243 
	`ci_ni_dŒi°_ªmove_ß„
(
ni
, &
ts
->
s
.
b
.
ªady_lök
);

244 
	`ci_ni_dŒi°_ªmove_ß„
(
ni
, &
ts
->
s
.
ª≠_lök
);

250 
	`ci_as£π
(
	`ci_t˝_£ndq_is_em±y
(
ts
));

251 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
rob
));

252 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
));

254 
	`ci_ù_queue_dr›
(
ni
, &
ts
->
ªcv1
);

255 
	`ci_ù_queue_dr›
(
ni
, &
ts
->
ªcv2
);

257 
	`ci_udp_ªcv_q_dr›
(
ni
, &
ts
->
time°amp_q
);

259 #i‡
CI_CFG_FD_CACHING


269 
	`ci_ni_dŒi°_ªmove_ß„
(
ni
, &
ts
->
ïˇche_lök
);

272 
	#chk
(
x
Ë
	`ci_as£π
(!
	`ci_ù_timî_≥ndög
(
ni
, &
ts
->x))

	)

273 
	`chk
(
πo_tid
);

274 
	`chk
(
dñack_tid
);

275 
	`chk
(
zwö_tid
);

276 
	`chk
(
kÆive_tid
);

277 
	`chk
(
c‹k_tid
);

278 
	`chk
(
pmtus
.
tid
);

279 #i‡
CI_CFG_TCP_SOCK_STATS


280 
	`chk
(
°©s_tid
);

282 #unde‡
chk


283 
	}
}

292 
	$ci_t˝_°©e_‰ì
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

294 
	`VERB
(
	`ci_log
("%s("
NTS_FMT
")", 
__FUNCTION__
, 
	`NTS_PRI_ARGS
(
ni
,
ts
)));

295 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

296 
	`ci_as£π
(
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
);

298 
	`__ci_t˝_°©e_‰ì
(
ni
, 
ts
);

299 
	`côp_waôabÀ_obj_‰ì
(
ni
, &
ts
->
s
.
b
);

300 
	}
}

304 
ci_ölöe
 
	$ci_t˝_e°abs_h™dÀ
(
ci_√tif
 *
ni
, 
ci_t˝_°©e
 *
ts
, 
°©e
)

306 #i‡
CI_CFG_SUPPORT_STATS_COLLECTION


312 if–(
ts
->
s
.
b
.
°©e
 =
CI_TCP_ESTABLISHED


313 #i‚de‡
__löux__


314 && 
°©e
 !
CI_TCP_CLOSE_WAIT
Ë|| (
ts
->
s
.
b
.state == CI_TCP_CLOSE_WAIT

317 
	`CI_TCP_STATS_DEC_CURR_ESTAB
(
ni
);

319 i‡((
°©e
 =
CI_TCP_CLOSED
) &&

320 ((
ts
->
s
.
b
.
°©e
 =
CI_TCP_ESTABLISHED
) ||

321 (
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSE_WAIT
)))

322 
	`CI_TCP_STATS_INC_ESTAB_RESETS
–
ni
 );

324 
	}
}

326 
ci_öt32
 
	$ci_t˝_rcvbuf_e°ablished
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
)

328 
	`ci_as£π
(
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
);

329 if–
	`NI_OPTS
(
ni
).
t˝_rcvbuf_u£r
 != 0 )

330  
	`oo_adju°_SO_XBUF
(
	`NI_OPTS
(
ni
).
t˝_rcvbuf_u£r
);

331 if–~
s
->
s_Êags
 & 
CI_SOCK_FLAG_SET_RCVBUF
 ) {

332 if–
	`NI_OPTS
(
ni
).
t˝_rcvbuf_e°_def
 > 
s
->
so
.
rcvbuf
 )

333  
	`NI_OPTS
(
ni
).
t˝_rcvbuf_e°_def
;

334 if–
s
->
so
.
rcvbuf
 > 
	`NI_OPTS
(
ni
).
t˝_rcvbuf_e°_def
 * 4 ) {

336  
	`NI_OPTS
(
ni
).
t˝_rcvbuf_e°_def
 * 4;

339  
s
->
so
.
rcvbuf
;

340 
	}
}

342 
	$ci_t˝_£t_e°ablished_°©e
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

344 
	`ci_as£π
(
ts
);

345 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

347 
ts
->
s
.
b
.
°©e
 = 
CI_TCP_ESTABLISHED
;

348 
	`CI_TCP_STATS_INC_CURR_ESTAB
–
ni
 );

350 
ts
->
s
.
tx_î∫o
 = 0;

351 
ts
->
s
.
rx_î∫o
 = 0;

352 
ts
->
t˝Êags
 |
CI_TCPT_FLAG_WAS_ESTAB
;

362 if–
	`NI_OPTS
(
ni
).
t˝_¢dbuf_u£r
 != 0 )

363 
ts
->
s
.
so
.
¢dbuf
 = 
	`oo_adju°_SO_XBUF
(
	`NI_OPTS
(
ni
).
t˝_¢dbuf_u£r
);

364 if–~
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_SET_SNDBUF
 ) {

365 if–
	`NI_OPTS
(
ni
).
t˝_¢dbuf_e°_def
 > 
ts
->
s
.
so
.
¢dbuf
 )

366 
ts
->
s
.
so
.
¢dbuf
 = 
	`NI_OPTS
(
ni
).
t˝_¢dbuf_e°_def
;

367 if–
ts
->
s
.
so
.
¢dbuf
 > 
	`NI_OPTS
(
ni
).
t˝_¢dbuf_e°_def
 * 4 )

368 
ts
->
s
.
so
.
¢dbuf
 = 
	`NI_OPTS
(
ni
).
t˝_¢dbuf_e°_def
 * 4;

371 if–
	`NI_OPTS
(
ni
).
t˝_¢dbuf_mode
 =2 && (~
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_SET_SNDBUF
) )

372 
	`ci_t˝_ex∑nd_¢dbuf
(
ni
, 
ts
);

374 
	`ci_t˝_£t_¢dbuf
(
ni
, 
ts
);

376 
ts
->
s
.
so
.
rcvbuf
 = 
	`ci_t˝_rcvbuf_e°ablished
(
ni
, &ts->s);

377 
	`ci_t˝_£t_rcvbuf
(
ni
, 
ts
);

380 
ts
->
rcvbuf_drs
.
byãs
 =Ås->
rcv_wnd_advîti£d
;

381 
ts
->
rcvbuf_drs
.
£q
 =Ås->
rcv_dñivîed
;

382 
ts
->
rcvbuf_drs
.
time
 = 
	`ci_t˝_time_now
(
ni
);

384 #i‡
CI_CFG_PORT_STRIPING


385 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_STRIPE
 ) {

386 
ts
->
dup_thªsh
 = 
	`NI_OPTS
(
ni
).
°rùe_du∑ck_thªshﬁd
;

387 
	`LOG_TC
(
	`ci_log
(
NT_FMT
 "°rùög o¿÷=%xÑ=%x m=%x)", 
	`NT_PRI_ARGS
(
ni
, 
ts
),

388 
	`t˝_œddr_be32
(
ts
), 
	`t˝_øddr_be32
(ts),

389 
	`NI_OPTS
(
ni
).
°rùe_√tmask_be32
));

393 
	`CITP_TCP_FASTSTART
(
ts
->
Á°°¨t_acks
 = 
	`NI_OPTS
(
ni
).
t˝_Á°°¨t_öô
);

395 
	`CITP_TCP_FASTSTART
(
ts
->
t¶a°ack
 = 
	`t˝_rcv_nxt
(ts));

397 #i‡
CI_CFG_TAIL_DROP_PROBE


398 if(
	`NI_OPTS
(
ni
).
èû_dr›_¥obe
)

399 
ts
->
èûdr›_°©e
 = 
CI_TCP_TAIL_DROP_ACTIVE
;

402 if–
	`ci_t˝_ˇn_u£_Á°_∑th
(
ts
) )

403 
	`ci_t˝_Á°_∑th_íabÀ
(
ts
);

404 
	}
}

407 
	$ci_t˝_£t_¶ow_°©e
(
ci_√tif
 *
ni
, 
ci_t˝_°©e
* 
ts
, 
°©e
)

409 
	`ci_as£π
(
ts
);

410 
	`ci_as£π
(
°©e
 & 
CI_TCP_STATE_SLOW_PATH
);

412 #i‚de‡
NDEBUG


415 if(
ts
->
s
.
b
.
°©e
 !
CI_TCP_LISTEN
){

416 if(!(
°©e
 & 
CI_TCP_STATE_TXQ_ACTIVE
)){

417 
	`ci_as£π
(
	`ci_t˝_£ndq_is_em±y
(
ts
));

418 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
));

420 if(
°©e
 & 
CI_TCP_STATE_NO_TIMERS
){

421 
	#chk_timî
(
x
Ë
	`ci_as£π
(!
	`ci_ù_timî_≥ndög
(
ni
, &
ts
->x))

	)

422 
	`chk_timî
(
πo_tid
);

423 
	`chk_timî
(
dñack_tid
);

424 
	`chk_timî
(
zwö_tid
);

425 
	`chk_timî
(
kÆive_tid
);

426 
	`chk_timî
(
c‹k_tid
);

427 
	`chk_timî
(
pmtus
.
tid
);

428 #i‡
CI_CFG_TCP_SOCK_STATS


429 
	`chk_timî
(
°©s_tid
);

431 #unde‡
chk_timî


437 i‡(
CI_TCP_CLOSED
 =
°©e
) {

438 
	`ci_as£π
(
ts
->
s
.
rx_î∫o
 != 0);

439 
	`ci_as£π
(
ts
->
s
.
tx_î∫o
 != 0);

442 if(
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
){

444 
	`ci_as£π
(
°©e
 !
CI_TCP_TIME_WAIT
);

446 
	`ci_as£π
(
	`ci_ni_dŒi°_is_‰ì
(&
ts
->
timeout_q_lök
));

450 
	`ci_t˝_e°abs_h™dÀ
(
ni
, 
ts
, 
°©e
);

452 
ts
->
s
.
b
.
°©e
 = state;

453 
	`ci_t˝_Á°_∑th_dißbÀ
(
ts
);

454 
	}
}

457 
	$ci_t˝_∑r£_›ti⁄s
(
ci_√tif
* 
ni
, 
ciù_t˝_rx_pkt
* 
rxp
,

458 
ci_t˝_›ti⁄s
* 
t›ts
)

467 
ci_t˝_hdr
* 
t˝
;

468 
ci_uöt8
* 
›t
;

469 
i
, 
byãs
;

471 
	`ci_as£π
(
rxp
);

472 
	`ci_as£π
(
rxp
->
pkt
);

473 
	`ci_as£π
(
rxp
->
t˝
);

474 
	`ci_as£π
(
rxp
->
t˝
 =
	`PKT_TCP_HDR
‘xp->
pkt
));

476 
t˝
 = 
rxp
->tcp;

477 
›t
 = 
	`CI_TCP_HDR_OPTS
(
t˝
);

478 
byãs
 = 
	`CI_TCP_HDR_OPT_LEN
(
t˝
);

479 
rxp
->
Êags
 = 0;

481 
	`LOG_TV
(
	`log
(
LPF
 "parsing optionsÖacket %d, optlen %d",

482 
	`OO_PKT_FMT
(
rxp
->
pkt
), 
byãs
));

485  
byãs
 > 0 ) {

486 
›t
[0]) {

487 
CI_TCP_OPT_TIMESTAMP
:

488 if–
byãs
 < 10 ) {

489 
	`LOG_U
(
	`log
(
LPF
 "TSopt(truncated)"));

490 
Áû_out
;

492 if–
›t
[1] != 0xa ) {

493 
	`LOG_U
(
	`log
(
LPF
 "TS›t(badÜígth %d)", (Ë
›t
[1]));

494 
Áû_out
;

496 
rxp
->
Êags
 |
CI_TCPT_FLAG_TSO
;

497 if–
t›ts
 =
NULL
 ) {

498 
rxp
->
time°amp
 = 
	`CI_BSWAP_BE32
(*(
ci_uöt32
*Ë&
›t
[2]);

499 
rxp
->
time°amp_echo
 = 
	`CI_BSWAP_BE32
(*(
ci_uöt32
*Ë&
›t
[6]);

501 
›t
 +10; 
byãs
 -= 10;

503 
CI_TCP_OPT_SACK
:

504 if–
byãs
 < 10 || byã†< 
›t
[1] ) {

505 
	`LOG_U
(
	`log
(
LPF
 "SACK(truncated)"));

506 
Áû_out
;

508 if–
›t
[1] < 2 + 8 || (opt[1] & 7) != 2 ) {

509 
	`LOG_U
(
	`log
(
LPF
 "SACK(badÜígth %d)", (Ë
›t
[1]));

510 
Áû_out
;

512 if–
t›ts
 =
NULL
 ) {

513 
rxp
->
Êags
 |
CI_TCPT_FLAG_SACK
;

514 
rxp
->
ßck_blocks
 = ()(
›t
[1] >> 3u);

515  
i
 = 0; i < 2 * 
rxp
->
ßck_blocks
; i++ )

516 
rxp
->
ßck
[
i
] = 
	`CI_BSWAP_BE32
(*(
ci_uöt32
*Ë&
›t
[2 + i * 4]);

518 
byãs
 -
›t
[1]; opt += opt[1];

520 
CI_TCP_OPT_END
:

521 
out
;

522 
CI_TCP_OPT_NOP
:

523 ++
›t
; --
byãs
;

525 
CI_TCP_OPT_MSS
:

526 if–
byãs
 < 4 ) {

527 
	`LOG_U
(
	`log
(
LPF
 "MSS(truncated)"));

528 
Áû_out
;

530 if–
›t
[1] != 0x4 ) {

531 
	`LOG_U
(
	`log
(
LPF
 "MSS(badÜígth %d)", (Ë
›t
[1]));

532 
Áû_out
;

534 if–
t›ts
 ) {

535 
t›ts
->
smss
 = 
	`CI_BSWAP_BE16
(*(
ci_uöt16
*)(
›t
 + 2));

538 if–
t›ts
->
smss
 < 64 ) {

539 
	`LOG_U
(
	`log
("%s: Clamping smssÅo 64, value give is %d",

540 
__FUNCTION__
, 
t›ts
->
smss
));

541 
t›ts
->
smss
 = 64;

544 
›t
 +4; 
byãs
 -= 4;

546 
CI_TCP_OPT_WINSCALE
:

547 if–
byãs
 < 3 ) {

548 
	`LOG_U
(
	`log
(
LPF
 "WSopt(truncated)"));

549 
Áû_out
;

551 if–
›t
[1] != 0x3 ) {

552 
	`LOG_U
(
	`log
(
LPF
 "WS›t(badÜígth %d)", (Ë
›t
[1]));

553 
Áû_out
;

555 i‡–
›t
[2] > 
CI_TCP_WSCL_MAX
 ) {

557 
	`LOG_U
(
	`log
–
LPF
 "WSCL_SHFT of %uÜargerÅhan %d,Åruncating",

558 
CI_TCP_WSCL_MAX
, 
›t
[2]));

559 
›t
[2] = 
CI_TCP_WSCL_MAX
;

561 if–
t›ts
 ) {

562 
t›ts
->
Êags
 |
CI_TCPT_FLAG_WSCL
;

563 
t›ts
->
ws˛_sh·
 = 
›t
[2];

565 
›t
 +3; 
byãs
 -= 3;

567 
CI_TCP_OPT_SACK_PERM
:

568 if–
byãs
 < 2 ) {

569 
	`LOG_U
(
	`log
(
LPF
 "SACKperm(truncated)"));

570 
Áû_out
;

572 if–
›t
[1] != 0x2 ) {

573 
	`LOG_U
(
	`log
(
LPF
 "SACK≥rm(badÜígth %d)", (Ë
›t
[1]));

574 
Áû_out
;

576 if–
t›ts
 )Å›ts->
Êags
 |
CI_TCPT_FLAG_SACK
;

577 
›t
 +2; 
byãs
 -= 2;

580 #i‡
CI_CFG_PORT_STRIPING


581 if–
›t
[0] =
	`NI_OPTS
(
ni
).
°rùe_t˝_›t
 ) {

582 if–
byãs
 < 2 ) {

583 
	`LOG_U
(
	`log
(
LPF
 "STRIPE(truncated)"));

584 
Áû_out
;

586 if–
›t
[1] != 0x2 ) {

587 
	`LOG_U
(
	`log
(
LPF
 "STRIPE(badÜígth %d)", (Ë
›t
[1]));

588 
Áû_out
;

590 if–
t›ts
 )Å›ts->
Êags
 |
CI_TCPT_FLAG_STRIPE
;

591 
›t
 +2; 
byãs
 -= 2;

600 if–
byãs
 < 2 || byã†< 
›t
[1] ) {

601 
	`LOG_U
(
	`log
(
LPF
 "truncated options"));

602 
Áû_out
;

604 if–(Ë
›t
[1] < 2 ) {

605 
	`LOG_U
(
	`log
(
LPF
 "unknown/invalid TCP option %xÜength %d [ILLEGAL]",

606 (Ë
›t
[0], () opt[1]));

607 
Áû_out
;

609 
	`LOG_U
(
	`log
(
LPF
 "unknown/invalid TCP option %xÜength %d",

610 (Ë
›t
[0], () opt[1]));

611 
byãs
 -
›t
[1]; opt += opt[1];

617 
out
:

619 
Áû_out
:

620 
	`LOG_U
(
	`log
(
LPF
 "failedÅoÖrocess (some) TCP option(s)"));

622 
	}
}

631 
	$ci_ù_timî_˛ór_oﬁ
(
ci_√tif
* 
√tif
, 
ci_ù_timî
* 
tmr
)

633 
	`ci_ù_timî_˛ór
(
√tif
, 
tmr
);

634 
	}
}

636 
	$ci_t˝_°›_timîs
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

638 
	`ci_ù_timî_˛ór_oﬁ
(
√tif
, &
ts
->
πo_tid
);

639 
	`ci_ù_timî_˛ór_oﬁ
(
√tif
, &
ts
->
dñack_tid
);

640 
	`ci_ù_timî_˛ór_oﬁ
(
√tif
, &
ts
->
zwö_tid
);

641 
	`ci_ù_timî_˛ór_oﬁ
(
√tif
, &
ts
->
kÆive_tid
);

642 
	`ci_ù_timî_˛ór_oﬁ
(
√tif
, &
ts
->
c‹k_tid
);

643 
	`ci_ù_timî_˛ór_oﬁ
(
√tif
, &
ts
->
pmtus
.
tid
);

644 #i‡
CI_CFG_TCP_SOCK_STATS


645 
	`ci_ù_timî_˛ór_oﬁ
(
√tif
, &
ts
->
°©s_tid
);

647 #i‡
CI_CFG_TAIL_DROP_PROBE


648 if(
	`NI_OPTS
(
√tif
).
èû_dr›_¥obe
)

649 
	`ci_ù_timî_˛ór_oﬁ
(
√tif
, &
ts
->
èûdr›_tid
);

651 
	}
}

657 
	$ci_ù_queue_dr›
(
ci_√tif
* 
√tif
, 
ci_ù_pkt_queue
 *
qu
)

659 
ci_ù_pkt_fmt
* 
p
;

660 
	`CI_DEBUG
(
i
 = 
qu
->
num
);

662 
	`ci_as£π
(
√tif
);

663 
	`ci_as£π
(
qu
);

664 
	`ci_as£π
(
	`ci_ù_queue_is_vÆid
(
√tif
, 
qu
));

666  
	`OO_PP_NOT_NULL
(
qu
->
hód
Ë
	`CI_DEBUG
–&& 
i
-- > 0) ) {

667 
p
 = 
	`PKT_CHK
(
√tif
, 
qu
->
hód
);

668 
qu
->
hód
 = 
p
->
√xt
;

669 
	`ci_√tif_pkt_ªÀa£
(
√tif
, 
p
);

671 
	`ci_as£π_equÆ
(
i
, 0);

672 
	`ci_as£π
(
	`OO_PP_IS_NULL
(
qu
->
hód
));

673 
qu
->
num
 = 0;

674 
	}
}

677 
	$ci_t˝_tx_dr›_queues
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

679 
	`ci_t˝_ªå™s_dr›
(
ni
, 
ts
);

680 
	`ci_t˝_£ndq_dr›
(
ni
, 
ts
);

683 
	`t˝_¢d_nxt
(
ts
Ë
	`t˝_íq_nxt
—sË
	`t˝_¢d_u«
(ts);

684 
ts
->
c⁄g°©e
 = 
CI_TCP_CONG_OPEN
;

685 
ts
->
cwnd_exåa
 = 0;

686 
ts
->
dup_acks
 = 0;

687 
	}
}

690 #i‡
CI_CFG_FD_CACHING


696 
	$ci_t˝_°©e_‰ì_to_ˇche
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

698 
rc
;

699 
ci_t˝_sockë_li°í
* 
és
;

700 
ci_sockë_ˇche_t
* 
ˇche
;

702 
	`ci_as£π
(
	`ci_t˝_is_ˇched
(
ts
));

704 if–
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_IN_PASSIVE_CACHE
 ) {

708 
	`ci_as£π_√quÆ
(
	`t˝_œddr_be32
(
ts
), 0);

709 
	`ci_as£π_√quÆ
(
	`t˝_Õ‹t_be16
(
ts
), 0);

710 
rc
 = 
	`ci_√tif_li°íî_lookup
(
√tif
, 
	`t˝_œddr_be32
(
ts
), 
	`t˝_Õ‹t_be16
(ts));

714 
	`ci_as£π_ge
(
rc
, 0);

715 
és
 = 
	`ID_TO_TCP_LISTEN
(
√tif
, 
	`CI_NETIF_FILTER_ID_TO_SOCK_ID
“ëif, 
rc
));

717 
	`ci_as£π_equÆ
(
és
->
s
.
b
.
°©e
, 
CI_TCP_LISTEN
);

718 
ˇche
 = &
és
->
ïˇche
;

721 
ˇche
 = &
√tif
->
°©e
->
a˘ive_ˇche
;

728 #i‡
CI_CFG_DETAILED_CHECKS


731 
ci_ni_dŒi°_lök
 *
lök
 =

732 
	`ci_ni_dŒi°_°¨t
(
√tif
, &
ˇche
->
≥ndög
);

733  
lök
 !
	`ci_ni_dŒi°_íd
(
√tif
, &
ˇche
->
≥ndög
) ) {

734 if–
ts
 =
	`CI_CONTAINER
 (
ci_t˝_°©e
, 
ïˇche_lök
, 
lök
) )

736 
	`ci_ni_dŒi°_ôî
(
√tif
, 
lök
);

738 
	`ci_as£π_√quÆ
(
lök
, 
	`ci_ni_dŒi°_íd
(
√tif
, &
ˇche
->
≥ndög
));

742 
	`LOG_EP
(
	`ci_log
("Cached sockë "
NSS_FMT
" fd %d fromÖendingÅo cached",

743 
	`NSS_PRI_ARGS
(
√tif
,&
ts
->
s
),Ås->
ˇched_⁄_fd
));

744 
	`ci_ni_dŒi°_lök_as£π_is_ö_li°
(
√tif
, &
ts
->
ïˇche_lök
);

745 
	`ci_ni_dŒi°_ªmove_ß„
(
√tif
, &
ts
->
ïˇche_lök
);

756 
	`__ci_t˝_°©e_‰ì
(
√tif
, 
ts
);

757 
	`côp_waôabÀ_obj_‰ì_to_ˇche
(
√tif
, &
ts
->
s
.
b
);

758 
	`ci_ni_dŒi°_push
(
√tif
, &
ˇche
->ˇche, &
ts
->
ïˇche_lök
);

759 
	}
}

768 
	$ci_t˝_dr›
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
, 
so_îr‹
)

770 
rc
 = 0;

772 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

773 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 !
CI_TCP_LISTEN
);

775 
	`LOG_TC
(
	`log
(
LPF
 "%d TCP_DROP %s->CLOSED so_error=%d%s%s",

776 
	`S_FMT
(
ts
), 
	`ci_t˝_°©e_°r
—s->
s
.
b
.
°©e
), 
so_îr‹
,

777 (
ts
->
s
.
b
.
sb_aÊags
&
CI_SB_AFLAG_ORPHAN
) ? " orphan":"",

778 (
ts
->
s
.
b
.
sb_aÊags
&
CI_SB_AFLAG_TCP_IN_ACCEPTQ
) ? "ácceptq":""));

780 if–
so_îr‹
 != 0 )

781 
ts
->
s
.
so_îr‹
 = so_error;

783 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSED
 ) {

785 if–(
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
) &&

786 ! (
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_TCP_IN_ACCEPTQ
) )

787 
	`ci_t˝_°©e_‰ì
(
√tif
, 
ts
);

791 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
 || 
	`ci_t˝_is_timeout_‹ph™
(ts) )

792 
	`ci_√tif_timeout_ªmove
(
√tif
, 
ts
);

793 
	`ci_ni_dŒi°_ªmove_ß„
(
√tif
, &
ts
->
tx_ªady_lök
);

794 
	`ci_t˝_tx_dr›_queues
(
√tif
, 
ts
);

795 
	`ci_ù_queue_dr›
(
√tif
, &
ts
->
rob
);

796 
ts
->
s
.
tx_î∫o
 = 
EPIPE
;

797 
ts
->
s
.
rx_î∫o
 = 
CI_SHUT_RD
;

798 
	`ci_t˝_°›_timîs
(
√tif
, 
ts
);

799 
ts
->
acks_≥ndög
 = 0;

800 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_SYN_SENT
 ) {

801 
ts
->
ªå™smôs
 = 0;

802 
ts
->
t˝Êags
 &~
CI_TCPT_FLAG_NO_ARP
;

804 
	`ci_t˝_£t_¶ow_°©e
(
√tif
, 
ts
, 
CI_TCP_CLOSED
);

806 #i‡
CI_CFG_FD_CACHING


807 if–!
	`ci_t˝_is_ˇched
(
ts
) ) {

808 if–!
	`ci_ni_dŒi°_is_£lf_löked
(
√tif
, &
ts
->
ïˇche_lök
) ) {

809 
	`ci_ni_dŒi°_ªmove_ß„
(
√tif
, &
ts
->
ïˇche_lök
);

810 
rc
 = 
	`ci_t˝_ï_˛ór_fûãrs
(
√tif
, 
	`S_SP
(
ts
), 1);

813 
rc
 = 
	`ci_t˝_ï_˛ór_fûãrs
(
√tif
, 
	`S_SP
(
ts
), 0);

818 
	`ci_√tif_fûãr_ªmove
(
√tif
, 
	`S_ID
(
ts
), 
	`t˝_œddr_be32
(ts),

819 
	`t˝_Õ‹t_be16
(
ts
), 
	`t˝_øddr_be32
(ts),

820 
	`t˝_Ω‹t_be16
(
ts
), 
	`t˝_¥Ÿocﬁ
(ts));

821 
ts
->
s
.
s_Êags
 &~(
CI_SOCK_FLAG_FILTER
 | 
CI_SOCK_FLAG_MAC_FILTER
);

824 
rc
 = 
	`ci_t˝_ï_˛ór_fûãrs
(
√tif
, 
	`S_SP
(
ts
), 0);

827 if–
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_TCP_IN_ACCEPTQ
 ) {

830 if–
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
 ) {

831 
	`ci_as£π
(!
	`ci_t˝_is_ˇched
(
ts
));

832 #ifde‡
__KERNEL__


834 
	`__ci_t˝_°©e_‰ì
(
√tif
, 
ts
);

835 if–
rc
 =-
EAGAIN
 ) {

836 
t˝_hñ≥r_ídpoöt_t
* 
ï
 = 
	`ci_√tif_gë_vÆid_ï
(
√tif
, 
	`S_SP
(
ts
));

837 
	`t˝_hñ≥r_ídpoöt_queue_n⁄_©omic
(
ï
, 
OO_THR_EP_AFLAG_NEED_FREE
);

840 
	`ci_as£π_equÆ
(
rc
, 0);

841 
	`côp_waôabÀ_obj_‰ì
(
√tif
, &
ts
->
s
.
b
);

844 
	`ci_as£π_equÆ
(
rc
, 0);

845 
	`ci_t˝_°©e_‰ì
(
√tif
, 
ts
);

846 ()
rc
;

849 #i‡
CI_CFG_FD_CACHING


850 if–
	`ci_t˝_is_ˇched
(
ts
) ) {

851 
	`ci_t˝_°©e_‰ì_to_ˇche
(
√tif
, 
ts
);

855 
	`ci_t˝_wake_possibly_nŸ_ö_pﬁl
(
√tif
, 
ts
,

856 
CI_SB_FLAG_WAKE_RX
|
CI_SB_FLAG_WAKE_TX
);

858 
	}
}

866 
	$ci_t˝_ws˛_by_buff
(
ci_√tif
 *
√tif
, 
ci_öt32
 
rcv_buff
)

868 
ws˛
;

870 
	`ci_as£π
(
rcv_buff
 > 0);

871  
ws˛
 = 0;

872 (
ws˛
 < 
	`NI_OPTS
(
√tif
).
t˝_adv_wö_sˇÀ_max
) &&

873 (()(
CI_CFG_TCP_MAX_WINDOW
 << 
ws˛
Ë< ()
rcv_buff
);

874 ++
ws˛
 );

876  
ws˛
;

877 
	}
}

880 
	$ci_t˝_˛ór_ßcks
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

884 
ci_ù_pkt_queue
* 
πq
 = &
ts
->
ªå™s
;

885 
ci_ù_pkt_fmt
* 
pkt
;

886 
oo_pkt_p
 
id
 = 
πq
->
hód
;

888  
	`OO_PP_NOT_NULL
(
id
) ) {

889 
pkt
 = 
	`PKT_CHK
(
ni
, 
id
);

890 
pkt
->
pf
.
t˝_tx
.
block_íd
 = 
OO_PP_NULL
;

891 
pkt
->
Êags
 &=~ 
CI_PKT_FLAG_RTQ_SACKED
;

892 
id
 = 
pkt
->
√xt
;

895 
ts
->
ªå™s_£q
 = 
	`t˝_¢d_u«
(ts);

896 
ts
->
ªå™s_±r
 = 
πq
->
hód
;

897 
	}
}

900 
	$ci_t˝_ªå™s_öô_±rs
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

901 * 
ªcovî_£q_out
)

903 
ci_ù_pkt_queue
* 
πq
 = &
ts
->
ªå™s
;

904 
ci_ù_pkt_fmt
* 
pkt
;

906 
	`ci_as£π
(!
	`ci_ù_queue_is_em±y
(
πq
));

907 
pkt
 = 
	`PKT_CHK
(
ni
, 
πq
->
hód
);

908 
ts
->
ªå™s_±r
 = 
πq
->
hód
;

909 
ts
->
ªå™s_£q
 = 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
;

912 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
 ) {

914 *
ªcovî_£q_out
 = 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
;

915 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
pf
.
t˝_tx
.
block_íd
);

918 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) ) ;

919 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

921 
	}
}

924 
	$ci_t˝_gë_Áck
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

925 * 
Áck_out
, * 
ªå™s_d©a_out
)

933 
ci_ù_pkt_queue
* 
πq
 = &
ts
->
ªå™s
;

934 
ci_ù_pkt_fmt
* 
block
;

935 
ci_ù_pkt_fmt
* 
íd
;

936 
ªå™s_d©a
 = 0;

937 
Áck
;

939 
	`ci_as£π
(! 
	`ci_ù_queue_is_em±y
(
πq
));

941 
block
 = 
	`PKT_CHK
(
ni
, 
πq
->
hód
);

942 
Áck
 = 
	`t˝_¢d_u«
(
ts
);

945 if–
	`OO_PP_IS_NULL
(
block
->
pf
.
t˝_tx
.
block_íd
) ) {

947 
	`ci_as£π
(~
block
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
);

948 
	`ci_as£π
(
	`SEQ_LE
(
block
->
pf
.
t˝_tx
.
°¨t_£q
, 
Áck
));

949 if–
	`SEQ_LT
(
Áck
, 
ts
->
ªå™s_£q
) )

950 
ªå™s_d©a
 +
	`SEQ_SUB
(
ts
->
ªå™s_£q
, 
Áck
);

953 
íd
 = 
	`PKT_CHK
(
ni
, 
block
->
pf
.
t˝_tx
.
block_íd
);

955 if–
block
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
 )

956 
Áck
 = 
íd
->
pf
.
t˝_tx
.
íd_£q
;

957 if–
	`SEQ_LT
(
block
->
pf
.
t˝_tx
.
°¨t_£q
, 
ts
->
ªå™s_£q
) ) {

959 if–
	`SEQ_LE
(
íd
->
pf
.
t˝_tx
.
íd_£q
, 
ts
->
ªå™s_£q
) )

961 
ªå™s_d©a
 +
	`SEQ_SUB
(
íd
->
pf
.
t˝_tx
.
íd_£q
,

962 
block
->
pf
.
t˝_tx
.
°¨t_£q
);

964 
ªå™s_d©a
 +
	`SEQ_SUB
(
ts
->
ªå™s_£q
, 
block
->
pf
.
t˝_tx
.
°¨t_£q
);

967 if–
	`OO_PP_IS_NULL
(
íd
->
√xt
) ) ;

968 
block
 = 
	`PKT_CHK
(
ni
, 
íd
->
√xt
);

971 *
Áck_out
 = 
Áck
;

972 *
ªå™s_d©a_out
 = 
ªå™s_d©a
;

973 
	}
}

976 
	$ci_t˝_ªcovîed
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

978 
	`ci_as£π
(
ts
->
c⁄g°©e
 !
CI_TCP_CONG_OPEN
 &&

979 
ts
->
c⁄g°©e
 !
CI_TCP_CONG_NOTIFIED
);

981 if–
ts
->
c⁄g°©e
 =
CI_TCP_CONG_FAST_RECOV
 ) {

982 if–!(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
) )

988 
ts
->
cwnd
 = 
	`CI_MAX
—s->
s°hªsh
, 
	`NI_OPTS
(
ni
).
loss_mö_cwnd
);

990 if–
ts
->
c⁄g°©e
 =
CI_TCP_CONG_RTO_RECOV
 ) {

991 if–
ts
->
dup_acks
 >ts->
dup_thªsh
 ) {

992 
	`ci_t˝_íãr_Á°_ªcovîy
(
ni
, 
ts
);

997 
ts
->
c⁄g°©e
 = 
CI_TCP_CONG_OPEN
;

998 
ts
->
cwnd_exåa
 = 0;

999 
ts
->
dup_acks
 = 0;

1001 
	`LOG_TL
(
	`log
(
LNT_FMT
 "RECOVERED "
TCP_SND_FMT
" cwnd=%d ssthresh=%dÑto=%d",

1002 
	`LNT_PRI_ARGS
(
ni
, 
ts
), 
	`TCP_SND_PRI_ARG
(ts),

1003 
ts
->
cwnd
,Ås->
s°hªsh
,Ås->
πo
));

1005 
	`ci_as£π
(
ts
->
cwnd
 >
	`t˝_eff_mss
(ts));

1006 
	}
}

1009 
ci_t˝_rx_pkt_cﬂÀs˚
(
ci_√tif
* 
ni
, 
ci_ù_pkt_queue
* 
q
,

1010 
ci_ù_pkt_fmt
* 
pkt
, * 
p_‰ìd


1011 
	$CI_DEBUG_ARG
(
ci_t˝_°©e
* 
ts
))

1020 
ci_t˝_hdr
* 
pkt_t˝
 = 
	`PKT_TCP_HDR
(
pkt
);

1021 * 
pkt_∑ylﬂd
 = 
	`CI_TCP_PAYLOAD
(
pkt_t˝
);

1022 
oo_offbuf
* 
pkt_buf
 = &
pkt
->
buf
;

1023 * 
pkt_buf_íd
 = (*Ë
pkt
 + 
CI_CFG_PKT_BUF_SIZE
;

1025 
	`ci_as£π
(
	`oo_offbuf_±r
(
pkt_buf
Ë>
pkt_∑ylﬂd
);

1026 
	`PKT_TCP_RX_BUF_ASSERT_VALID
(
ni
, 
pkt
);

1029 if–
	`oo_offbuf_±r
(
pkt_buf
Ë!
pkt_∑ylﬂd
 ) {

1030 
n
 = ()(
	`oo_offbuf_±r
(
pkt_buf
Ë- 
pkt_∑ylﬂd
);

1031 
	`memmove
(
pkt_∑ylﬂd
, 
	`oo_offbuf_±r
(
pkt_buf
), 
	`oo_offbuf_À·
(pkt_buf));

1032 
pkt_buf
->
off
 -
n
;

1033 
pkt_buf
->
íd
 -
n
;

1034 
pkt_t˝
->
t˝_£q_be32
 = 
	`CI_BSWAP_BE32
(

1035 
	`CI_BSWAP_BE32
(
pkt_t˝
->
t˝_£q_be32
Ë+ 
n
);

1039 
ci_ù_pkt_fmt
* 
√xt
 = 
	`PKT_CHK
(
ni
, 
pkt
->next);

1040 
oo_offbuf
* 
√xt_buf
 = &
√xt
->
buf
;

1041 
n
, 
•a˚
 = ()(
pkt_buf_íd
 - 
	`oo_offbuf_íd
(
pkt_buf
));

1043 if–
√xt
->
ªfcou¡
 !1 || 
•a˚
 == 0 )

1046 
n
 = 
	`oo_offbuf_À·
(
√xt_buf
);

1047 
n
 = 
	`CI_MIN
(
•a˚
,Ç);

1048 
	`mem˝y
(
	`oo_offbuf_íd
(
pkt_buf
), 
	`oo_offbuf_±r
(
√xt_buf
), 
n
);

1050 
pkt_buf
->
íd
 +
n
;

1051 
pkt
->
pf
.
t˝_rx
.
íd_£q
 +
n
;

1052 
	`oo_offbuf_adv™˚
(
√xt_buf
, 
n
);

1054 if–
	`oo_offbuf_is_em±y
(
√xt_buf
) ) {

1055 
pkt
->
√xt
 =Çext->next;

1056 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) ) {

1057 
	`ci_as£π
(
	`OO_PP_EQ
(
q
->
èû
, 
	`OO_PKT_P
(
√xt
)));

1058 
q
->
èû
 = 
	`OO_PKT_P
(
pkt
);

1060 
	`ci_as£π
–! 
	`OO_PP_EQ
(
ts
->
ªcv1_exåa˘
, 
	`OO_PKT_P
(
√xt
)) );

1061 
	`ci_√tif_pkt_ªÀa£_rx_1ªf
(
ni
, 
√xt
);

1062 (*
p_‰ìd
)++;

1063 --
q
->
num
;

1066 
	`PKT_TCP_RX_BUF_ASSERT_VALID
(
ni
, 
pkt
);

1067 
	`PKT_TCP_RX_BUF_ASSERT_VALID
(
ni
, 
√xt
);

1070  ()(
pkt_buf_íd
 - 
	`oo_offbuf_íd
(
pkt_buf
));

1072 
	}
}

1075 
	$ci_t˝_rx_cﬂÀs˚_ªcv
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1076 
ci_ù_pkt_queue
* 
q
)

1078 
ci_ù_pkt_fmt
* 
pkt
;

1079 
‰ìd
 = 0;

1081 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1082 
	`ci_as£π
(
	`ci_sock_is_locked
(
ni
, &
ts
->
s
.
b
));

1084 if–
	`OO_PP_IS_NULL
(
q
->
hód
) )

1087 
pkt
 = 
	`PKT_CHK
(
ni
, 
q
->
hód
);

1088 if–
pkt
->
ªfcou¡
 != 1 )

1089  
‰ìd
;

1092  
	`OO_PP_NOT_NULL
(
pkt
->
√xt
) )

1093 if–! 
	`ci_t˝_rx_pkt_cﬂÀs˚
(
ni
, 
q
, 
pkt
, &
‰ìd
 
	`CI_DEBUG_ARG
(
ts
)) )

1095 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) )

1097 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

1099  
‰ìd
;

1100 
	}
}

1103 
	$ci_t˝_dr›_rob
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

1105 
i
;

1106 
	`ci_ù_queue_dr›
(
ni
, &
ts
->
rob
);

1107  
i
 = 0; i <
CI_TCP_SACK_MAX_BLOCKS
; ++i )

1108 
ts
->
œ°_ßck
[
i
] = 
OO_PP_NULL
;

1109 
ts
->
dßck_block
 = 
OO_PP_INVALID
;

1110 
	}
}

1113 
	$ci_t˝_åy_to_‰ì_pkts
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1114 
de•î©i⁄
)

1116 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
);

1118  
de•î©i⁄
 ) {

1120 if–! 
	`ci_sock_åylock
(
ni
, &
ts
->
s
.
b
) ) ;

1122 
‰ìd
 = 0;

1123 
ci_öt32
 
q_num_b4
 = 
ts
->
ªcv1
.
num
;

1124 
	`ci_t˝_rx_ª≠_rxq_bufs_socklocked
(
ni
, 
ts
);

1125 
‰ìd
 +
q_num_b4
 - 
ts
->
ªcv1
.
num
;

1127 
‰ìd
 +
	`ci_t˝_rx_cﬂÀs˚_ªcv
(
ni
, 
ts
, &ts->
ªcv1
);

1128 
‰ìd
 +
	`ci_t˝_rx_cﬂÀs˚_ªcv
(
ni
, 
ts
, &ts->
ªcv2
);

1129 
	`ci_sock_u∆ock
(
ni
, &
ts
->
s
.
b
);

1130  
‰ìd
;

1134 
num
 = 
ts
->
rob
.num;

1135 
	`ci_t˝_dr›_rob
(
ni
, 
ts
);

1136  
num
;

1144 
	}
}

1146 
ölöe
 

1147 
	$ci_t˝_rcvbuf_u«bu£_socklocked
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

1149 
	`ci_t˝_rx_ª≠_rxq_bufs_socklocked
(
ni
, 
ts
);

1150 
	`ci_t˝_rx_cﬂÀs˚_ªcv
(
ni
, 
ts
, &ts->
ªcv1
);

1151 
	`ci_t˝_rx_cﬂÀs˚_ªcv
(
ni
, 
ts
, &ts->
ªcv2
);

1152 
	}
}

1155 
	$ci_t˝_rcvbuf_u«bu£
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
, 
sock_locked
)

1157 
rob_dr›≥d
 = 0;

1158 
sock_u∆ock
 = 0;

1159 #i‚de‡
NDEBUG


1160 
pkts
 = 
ts
->
ªcv1
.
num
 +Ås->
ªcv2
.num +Ås->
rob
.num;

1163 
	`CITP_STATS_NETIF_INC
(
ni
, 
t˝_rcvbuf_abu£d
);

1164 
	`ci_as£π
(
	`ci_t˝_rcvbuf_abu£d
(
ni
, 
ts
));

1165 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1168 
	`ci_t˝_rx_ª≠_rxq_bufs
(
ni
, 
ts
);

1169 if–! 
	`ci_t˝_rcvbuf_abu£d
(
ni
, 
ts
) )

1170 
out
;

1174 if–
ts
->
rob
.
num
 >Ås->
rcv_wödow_max
 /Ås->
amss
 ) {

1175 
	`CITP_STATS_NETIF_INC
(
ni
, 
t˝_rcvbuf_abu£d_rob_guûty
);

1176 
	`ci_t˝_dr›_rob
(
ni
, 
ts
);

1177 
rob_dr›≥d
 = 1;

1178 if–! 
	`ci_t˝_rcvbuf_abu£d
(
ni
, 
ts
) )

1179 
out
;

1183 if–! 
sock_locked
 ) {

1184 
sock_locked
 = 
sock_u∆ock
 = 
	`ci_sock_åylock
(
ni
, &
ts
->
s
.
b
);

1186 if–
sock_locked
 )

1187 
	`ci_as£π
(
	`ci_sock_is_locked
(
ni
, &
ts
->
s
.
b
));

1191 if–
sock_locked
 ) {

1192 
	`CITP_STATS_NETIF_INC
(
ni
, 
t˝_rcvbuf_abu£d_ªcv_cﬂÀs˚d
);

1193 
	`ci_t˝_rcvbuf_u«bu£_socklocked
(
ni
, 
ts
);

1194 if–
sock_u∆ock
 )

1195 
	`ci_sock_u∆ock
(
ni
, &
ts
->
s
.
b
);

1197 if–
ts
->
ªcv1
.
num
 +Ås->
ªcv2
.num >

1198 (
ts
->
s
.
so
.
rcvbuf
 +Ås->
rcv_wödow_max
Ë/Ås->
amss
 ) {

1199 
rc
 = 
	`ci_sock_lock
(
ni
, &
ts
->
s
.
b
);

1200 if–
rc
 == 0 ) {

1201 
	`CITP_STATS_NETIF_INC
(
ni
, 
t˝_rcvbuf_abu£d_ªcv_guûty
);

1202 
	`ci_t˝_rcvbuf_u«bu£_socklocked
(
ni
, 
ts
);

1203 
	`ci_sock_u∆ock
(
ni
, &
ts
->
s
.
b
);

1204 #i‚de‡
NDEBUG


1205 
sock_locked
 = 
sock_u∆ock
 = 1;

1209 if–! 
	`ci_t˝_rcvbuf_abu£d
(
ni
, 
ts
) )

1210 
out
;

1214 if–!
rob_dr›≥d
 ) {

1215 
	`CITP_STATS_NETIF_INC
(
ni
, 
t˝_rcvbuf_abu£d_rob_de•î©e
);

1216 
	`ci_t˝_dr›_rob
(
ni
, 
ts
);

1219 
out
:

1220 #i‚de‡
NDEBUG


1227 if–
sock_locked
 )

1228 
	`ci_as£π
(!
	`ci_t˝_rcvbuf_abu£d
(
ts
));

1232 
¥öt
 = 0;

1234 if–
	`ci_t˝_rcvbuf_abu£d
(
ni
, 
ts
) ) {

1235 
	`LOG_U
(
¥öt
 = 1);

1237 
	`LOG_TV
(
¥öt
 = 1);

1238 if–
¥öt
 )

1239 
	`ci_log
(
LNT_FMT
" %s(%d):Üocked=%d from %dÅo %dÜimited by %d %s",

1240 
	`LNT_PRI_ARGS
(
ni
, 
ts
), 
__func__
,

1241 
sock_locked
 && !
sock_u∆ock
, sock_locked, 
pkts
,

1242 
ts
->
ªcv1
.
num
 +Ås->
ªcv2
.num +Ås->
rob
.num,

1243 (
ts
->
s
.
so
.
rcvbuf
 +Ås->
rcv_wödow_max
Ë/Ås->
amss
,

1244 
	`ci_t˝_rcvbuf_abu£d
(
ni
, 
ts
) ? " ABUSED" : "");

1248 if–
	`ci_t˝_rcvbuf_abu£d
(
ni
, 
ts
) )

1249 
	`CITP_STATS_NETIF_INC
(
ni
, 
t˝_rcvbuf_abu£d_badly
);

1251 
	}
}

1254 #i‡
CI_CFG_LIMIT_AMSS
 || 
CI_CFG_LIMIT_SMSS


1255 
	~<ci/drivî/eÁb/h¨dw¨e.h
>

1256 
ci_uöt16
 
	$ci_t˝_limô_mss
(
ci_uöt16
 
mss
, 
ci_√tif
* 
ni
, c⁄° * 
ˇŒî
)

1258 if–
mss
 > 
ni
->
°©e
->
max_mss
 ) {

1259 #i‡
CI_CFG_STATS_NETIF


1260 i‡(1 =++
ni
->
°©e
->
°©s
.
mss_limô©i⁄s
) {

1261 
	`LOG_U
(
	`ci_log
("%s: (%sËlimôög ms†%d => %d", 
__FUNCTION__
, 
ˇŒî
,

1262 
mss
, 
ni
->
°©e
->
max_mss
));

1265 
	`ci_log
("%s: (%sËlimôög ms†%d => %d", 
__FUNCTION__
, 
ˇŒî
,

1266 
mss
, 
ni
->
°©e
->
max_mss
);

1268 
mss
 = 
ni
->
°©e
->
max_mss
;

1270  
mss
;

1271 
	}
}

1275 
	$ci_t˝_≥rf‹m_de„ºed_sockë_w‹k
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

1277 
aÊags
, 
öãª°ög
;

1280 
	`ci_as£π
((
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_TCP
)

1281 && (
ts
->
s
.
b
.
°©e
 !
CI_TCP_LISTEN
));

1283 
öãª°ög
 = 
CI_SOCK_AFLAG_NEED_ACK
 | 
CI_SOCK_AFLAG_NEED_SHUT_RD
 |

1284 
CI_SOCK_AFLAG_NEED_SHUT_WR
;

1290 
aÊags
 = 
ts
->
s
.
s_aÊags
 & 
öãª°ög
;

1291 
	`ci_rmb
();

1292 
	`ci_t˝_£ndmsg_íqueue_¥equeue_de„ºed
(
ni
, 
ts
);

1294 if–
aÊags
 ) {

1295 
	`ci_©omic32_™d
(&
ts
->
s
.
s_aÊags
, ~
aÊags
);

1296 if–
aÊags
 & 
CI_SOCK_AFLAG_NEED_ACK
 )

1297 
	`ci_t˝_£nd_wnd_upd©e
(
ni
, 
ts
, 
CI_FALSE
);

1298  
aÊags
 & (
CI_SOCK_AFLAG_NEED_SHUT_RD
|
CI_SOCK_AFLAG_NEED_SHUT_WR
) ) {

1299 
CI_SOCK_AFLAG_NEED_SHUT_RD
 | 
CI_SOCK_AFLAG_NEED_SHUT_WR
:

1300 
	`__ci_t˝_shutdown
(
ni
, 
ts
, 
SHUT_RDWR
);

1302 
CI_SOCK_AFLAG_NEED_SHUT_RD
:

1303 
	`__ci_t˝_shutdown
(
ni
, 
ts
, 
SHUT_RD
);

1305 
CI_SOCK_AFLAG_NEED_SHUT_WR
:

1306 
	`__ci_t˝_shutdown
(
ni
, 
ts
, 
SHUT_WR
);

1312 
	}
}

1315 
	$ci_t˝_£t_¢dbuf
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

1317 
size
 = 
	`t˝_eff_mss
(
ts
);

1318 
ci_öt32
 
ﬁd_so_¢dbuf_pkts
 = 
ts
->
so_¢dbuf_pkts
;

1320 
	`ci_as£π
(
	`t˝_eff_mss
(
ts
) != 0);

1325 if–
	`NI_OPTS
(
ni
).
t˝_¢dbuf_mode
 )

1326 
size
 = 
	`CI_MAX
(size, 
CI_CFG_TCP_DEFAULT_MSS
);

1328 
ts
->
so_¢dbuf_pkts
 = (ts->
s
.
so
.
¢dbuf
 + 
size
 - 1) / size;

1330 if–
	`NI_OPTS
(
ni
).
t˝_¢dbuf_mode
 ) {

1332 
ts
->
so_¢dbuf_pkts
 =Ås->so_sndbuf_pkts * 3 / 2;

1334 if–
ts
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_STREAM
 )

1335 
ts
->
so_¢dbuf_pkts
 =Ås->so_sndbuf_pkts * 3 / 2;

1340 if–
	`ci_t˝_tx_advîti£_•a˚
(
ni
, 
ts
 ) &&

1341 
ﬁd_so_¢dbuf_pkts
 < 
ts
->
so_¢dbuf_pkts
 )

1342 
	`ci_t˝_wake_possibly_nŸ_ö_pﬁl
(
ni
, 
ts
, 
CI_SB_FLAG_WAKE_TX
);

1343 
	}
}

1345 #ifde‡
__KERNEL__


1346 
	$ci_t˝_sync_›t_Êag
(
sockë
* 
sock
, * 
îr
,

1347 
Àvñ
, 
›äame
)

1349 
›tvÆ
 = 1;

1350 
rc
;

1352 
rc
 = 
	`kî√l_£tsock›t
(
sock
, 
Àvñ
, 
›äame
, (*)&
›tvÆ
, (optval));

1353 if–
rc
 < 0 ) {

1354 
	`ci_log
("%s: ERROR (%d) failedÅo set socket option %d %d on kernel socket",

1355 
__FUNCTION__
, 
rc
, 
Àvñ
, 
›äame
);

1356 *
îr
 = 
rc
;

1358 
	}
}

1361 
	$ci_t˝_sync_›t_timevÆ
(
sockë
* 
sock
, * 
îr
,

1362 
Àvñ
, 
›äame
, 
timevÆ
* 
tv
)

1364 
rc
;

1366 
rc
 = 
	`kî√l_£tsock›t
(
sock
, 
Àvñ
, 
›äame
, (*)(
ci_uöçå_t
)
tv
,

1367 (
timevÆ
));

1368 if–
rc
 < 0 ) {

1369 
	`ci_log
("%s: ERROR (%d) failedÅo set socket option %d %dÅo val %lx:%lx "

1371 
__FUNCTION__
, 
rc
, 
Àvñ
, 
›äame
, 
tv
->
tv_£c
,Åv->
tv_u£c
);

1372 *
îr
 = 
rc
;

1374 
	}
}

1377 
	$ci_t˝_sync_›t_unsig√d
(
sockë
* 
sock
, * 
îr
,

1378 
Àvñ
, 
›äame
, * 
›tvÆ
)

1380 
rc
;

1382 
rc
 = 
	`kî√l_£tsock›t
(
sock
, 
Àvñ
, 
›äame
, (*)
›tvÆ
, ());

1383 if–
rc
 < 0 ) {

1384 
	`ci_log
("%s: ERROR (%d) failedÅo set socket option %d %dÅo val %u on "

1385 "kî√»sockë", 
__FUNCTION__
, 
rc
, 
Àvñ
, 
›äame
, *
›tvÆ
);

1386 *
îr
 = 
rc
;

1388 
	}
}

1391 
	$ci_t˝_sync_so_sock›ts
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1392 
sockë
* 
sock
)

1394 
îr
 = 0;

1395 
rc
;

1396 
timevÆ
 
tv
;

1397 
›tvÆ
;

1398 
sockÀn_t
 
›éí
;

1399 
lögî
 
l
;

1401 if–
ts
->
s
.
so
.
rcvtimeo_m£c
 > 0 ) {

1402 
›éí
 = (
tv
);

1403 
rc
 = 
	`ci_gë_sﬁ_sockë
(
ni
, &
ts
->
s
, 
SO_RCVTIMEO
, &
tv
, &
›éí
);

1404 
	`ci_as£π_equÆ
(
rc
, 0);

1405 ()
rc
;

1406 
	`ci_t˝_sync_›t_timevÆ
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, &
tv
);

1408 if–
ts
->
s
.
so
.
¢dtimeo_m£c
 > 0 ) {

1409 
›éí
 = (
tv
);

1410 
rc
 = 
	`ci_gë_sﬁ_sockë
(
ni
, &
ts
->
s
, 
SO_SNDTIMEO
, &
tv
, &
›éí
);

1411 
	`ci_as£π_equÆ
(
rc
, 0);

1412 ()
rc
;

1413 
	`ci_t˝_sync_›t_timevÆ
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, &
tv
);

1415 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_KALIVE
 ) {

1416 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_KEEPALIVE
);

1418 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_OOBINLINE
 ) {

1419 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_OOBINLINE
);

1421 if–
ts
->
s
.
so
.
rcvlow©
 != 1 ) {

1422 
›éí
 = (
›tvÆ
);

1423 
rc
 = 
	`ci_gë_sﬁ_sockë
(
ni
, &
ts
->
s
, 
SO_RCVLOWAT
, &
›tvÆ
, &
›éí
);

1424 
	`ci_as£π_equÆ
(
îr
, 0);

1425 ()
rc
;

1426 
	`ci_t˝_sync_›t_unsig√d
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_RCVLOWAT
, &
›tvÆ
);

1428 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_BROADCAST
 ) {

1429 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_BROADCAST
);

1431 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_REUSEADDR
 ) {

1432 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_REUSEADDR
);

1434 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_SET_SNDBUF
 ) {

1435 
›tvÆ
 = 
ts
->
s
.
so
.
¢dbuf
 / 2;

1436 
	`ci_t˝_sync_›t_unsig√d
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
›tvÆ
);

1438 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_SET_RCVBUF
 ) {

1439 
›tvÆ
 = 
ts
->
s
.
so
.
rcvbuf
 / 2;

1440 
	`ci_t˝_sync_›t_unsig√d
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
›tvÆ
);

1442 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_LINGER
 ) {

1443 
l
.
l_⁄off
 = 1;

1444 
l
.
l_lögî
 = 
ts
->
s
.
so
.
lögî
;

1445 
rc
 = 
	`kî√l_£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_LINGER
, (*)&
l
, (l));

1446 if–
rc
 < 0 ) {

1447 
	`ci_log
("%s: ERROR (%d) failedÅo set SO_LINGERÅo val %d on "

1448 "kî√»sockë", 
__FUNCTION__
, 
rc
, 
l
.
l_lögî
);

1449 
îr
 = 
rc
;

1452 if–
ts
->
s
.
so_¥i‹ôy
 != 0 ) {

1456 
›éí
 = (
›tvÆ
);

1457 
rc
 = 
	`ci_gë_sﬁ_sockë
(
ni
, &
ts
->
s
, 
SO_PRIORITY
, &
›tvÆ
, &
›éí
);

1458 
	`ci_as£π_equÆ
(
rc
, 0);

1459 
	`ci_t˝_sync_›t_unsig√d
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_PRIORITY
, &
›tvÆ
);

1461 if–
ts
->
s
.
˝
.
so_bödtodevi˚
 !
CI_IFID_BAD
 ) {

1466 * 
i‚ame
;

1467 
√t_devi˚
 *
dev
 = 
	`dev_gë_by_ödex
(&
öô_√t
,

1468 
ts
->
s
.
˝
.
so_bödtodevi˚
);

1469 if–
dev
 ) {

1470 
i‚ame
 = 
dev
->
«me
;

1471 
rc
 = 
	`kî√l_£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
, 
i‚ame
,

1472 
	`°æí
(
i‚ame
));

1473 if–
rc
 < 0 ) {

1474 
	`ci_log
("%s: ERROR (%d) failedÅo set SO_BINDTODEVICEÅo val %s on "

1475 "kî√»sockë", 
__FUNCTION__
, 
rc
, 
i‚ame
);

1476 
îr
 = 
rc
;

1478 
	`dev_put
(
dev
);

1484 
	`ci_log
("%s: ERROR couldÇotÑetrieve ifname for ifindex %d,Çot syncing"

1486 
__FUNCTION__
, 
ts
->
s
.
˝
.
so_bödtodevi˚
);

1487 
îr
 = -
EINVAL
;

1490 if–
ts
->
s
.
so
.
so_debug
 & 
CI_SOCKOPT_FLAG_SO_DEBUG
 ) {

1491 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_DEBUG
);

1493 if–
ts
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_TIMESTAMP
 ) {

1494 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_TIMESTAMP
);

1496 if–
ts
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_TIMESTAMPNS
 ) {

1497 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_TIMESTAMPNS
);

1499 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_REUSEPORT
 ) {

1500 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_SOCKET
, 
SO_REUSEPORT
);

1503  
îr
;

1504 
	}
}

1506 
	$ci_t˝_sync_ù_sock›ts
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1507 
sockë
* 
sock
)

1509 
›tvÆ
;

1510 
›éí
;

1511 
îr
 = 0;

1512 
rc
;

1514 if–
ts
->
s
.
pkt
.
ù
.
ù_tos
 != 0 ) {

1515 
›éí
 = (
›tvÆ
);

1516 
rc
 = 
	`ci_gë_sﬁ_sockë
(
ni
, &
ts
->
s
, 
IP_TOS
, &
›tvÆ
, &
›éí
);

1517 
	`ci_as£π_equÆ
(
rc
, 0);

1518 ()
rc
;

1519 
	`ci_t˝_sync_›t_unsig√d
(
sock
, &
îr
, 
SOL_IP
, 
IP_TOS
, &
›tvÆ
);

1521 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_SET_IP_TTL
 ) {

1522 
›éí
 = (
›tvÆ
);

1523 
rc
 = 
	`ci_gë_sﬁ_sockë
(
ni
, &
ts
->
s
, 
IP_TTL
, &
›tvÆ
, &
›éí
);

1524 
	`ci_as£π_equÆ
(
rc
, 0);

1525 ()
rc
;

1526 
	`ci_t˝_sync_›t_unsig√d
(
sock
, &
îr
, 
SOL_IP
, 
IP_TTL
, &
›tvÆ
);

1528 if–
ts
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_PKTINFO
 ) {

1529 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_IP
, 
IP_PKTINFO
);

1531 if–
ts
->
s
.
s_Êags
 & (
CI_SOCK_FLAG_ALWAYS_DF
 | 
CI_SOCK_FLAG_PMTU_DO
) ) {

1532 
›éí
 = (
›tvÆ
);

1533 
rc
 = 
	`ci_gë_sﬁ_sockë
(
ni
, &
ts
->
s
, 
SO_PRIORITY
, &
›tvÆ
, &
›éí
);

1534 
	`ci_as£π_equÆ
(
rc
, 0);

1535 ()
rc
;

1536 
	`ci_t˝_sync_›t_unsig√d
(
sock
, &
îr
, 
SOL_IP
, 
IP_MTU_DISCOVER
, &
›tvÆ
);

1538 if–
ts
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_TOS
 ) {

1539 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_IP
, 
IP_RECVTOS
);

1541 if–
ts
->
s
.
so
.
so_debug
 & 
CI_SOCKOPT_FLAG_IP_RECVERR
 ) {

1542 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_IP
, 
IP_RECVERR
);

1544 if–
ts
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_TTL
 ) {

1545 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_IP
, 
IP_RECVTTL
);

1547 if–
ts
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_RECVOPTS
 ) {

1548 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_IP
, 
IP_RECVOPTS
);

1550 if–
ts
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_RETOPTS
 ) {

1551 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_IP
, 
IP_RETOPTS
);

1554  
îr
;

1555 
	}
}

1557 
	$ci_t˝_sync_t˝_sock›ts
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1558 
sockë
* 
sock
)

1560 
›tvÆ
;

1561 
›éí
;

1562 
îr
 = 0;

1563 
rc
;

1565 if–
ts
->
s
.
s_aÊags
 & 
CI_SOCK_AFLAG_CORK_BIT
 ) {

1566 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_TCP
, 
TCP_CORK
);

1568 if–
ts
->
s
.
s_aÊags
 & 
CI_SOCK_AFLAG_NODELAY_BIT
 ) {

1569 
	`ci_t˝_sync_›t_Êag
(
sock
, &
îr
, 
SOL_TCP
, 
TCP_NODELAY
);

1571 #ifde‡
TCP_KEEPALIVE_ABORT_THRESHOLD


1572 if–
ts
->
c
.
ka_¥obe_th
 !
	`NI_OPTS
(
ni
).
kì∑live_¥obes
 ) {

1573 
›éí
 = (
›tvÆ
);

1574 
rc
 = 
	`ci_gë_sﬁ_t˝
(
ni
, &
ts
->
s
, 
TCP_KEEPALIVE_ABORT_THRESHOLD
, &
›tvÆ
,

1575 &
›éí
);

1576 
	`ci_as£π_equÆ
(
rc
, 0);

1577 ()
rc
;

1578 
	`ci_t˝_sync_›t_unsig√d
(
sock
, &
îr
, 
SOL_TCP
, 
TCP_KEEPALIVE_ABORT_THRESHOLD
,

1579 &
›tvÆ
);

1582 if–
ts
->
c
.
u£r_mss
 != 0 ) {

1583 
›éí
 = (
›tvÆ
);

1584 
rc
 = 
	`ci_gë_sﬁ_t˝
(
ni
, &
ts
->
s
, 
TCP_MAXSEG
, &
›tvÆ
, &
›éí
);

1585 
	`ci_as£π_equÆ
(
rc
, 0);

1586 ()
rc
;

1587 
	`ci_t˝_sync_›t_unsig√d
(
sock
, &
îr
, 
SOL_TCP
, 
TCP_MAXSEG
, &
›tvÆ
);

1589 if–
ts
->
c
.
t_ka_time
 !
	`NI_CONF
(
ni
).
tc⁄°_kì∑live_time
 ) {

1590 
›éí
 = (
›tvÆ
);

1591 
rc
 = 
	`ci_gë_sﬁ_t˝
(
ni
, &
ts
->
s
, 
TCP_KEEPIDLE
, &
›tvÆ
, &
›éí
);

1592 
	`ci_as£π_equÆ
(
rc
, 0);

1593 ()
rc
;

1594 
	`ci_t˝_sync_›t_unsig√d
(
sock
, &
îr
, 
SOL_TCP
, 
TCP_KEEPIDLE
, &
›tvÆ
);

1596 if–
ts
->
c
.
t_ka_ötvl
 !
	`NI_CONF
(
ni
).
tc⁄°_kì∑live_ötvl
 ) {

1597 
›éí
 = (
›tvÆ
);

1598 
rc
 = 
	`ci_gë_sﬁ_t˝
(
ni
, &
ts
->
s
, 
TCP_KEEPINTVL
, &
›tvÆ
, &
›éí
);

1599 
	`ci_as£π_equÆ
(
rc
, 0);

1600 ()
rc
;

1601 
	`ci_t˝_sync_›t_unsig√d
(
sock
, &
îr
, 
SOL_TCP
, 
TCP_KEEPINTVL
, &
›tvÆ
);

1603 if–
ts
->
c
.
ka_¥obe_th
 !
	`NI_CONF
(
ni
).
kì∑live_¥obes
 ) {

1604 
›éí
 = (
›tvÆ
);

1605 
rc
 = 
	`ci_gë_sﬁ_t˝
(
ni
, &
ts
->
s
, 
TCP_KEEPCNT
, &
›tvÆ
, &
›éí
);

1606 
	`ci_as£π_equÆ
(
rc
, 0);

1607 ()
rc
;

1608 
	`ci_t˝_sync_›t_unsig√d
(
sock
, &
îr
, 
SOL_TCP
, 
TCP_KEEPCNT
, &
›tvÆ
);

1610 if–
ts
->
c
.
t˝_de„r_ac˚±
 !
OO_TCP_DEFER_ACCEPT_OFF
 ) {

1611 
›éí
 = (
›tvÆ
);

1612 
rc
 = 
	`ci_gë_sﬁ_t˝
(
ni
, &
ts
->
s
, 
TCP_DEFER_ACCEPT
, &
›tvÆ
, &
›éí
);

1613 
	`ci_as£π_equÆ
(
rc
, 0);

1614 ()
rc
;

1615 
	`ci_t˝_sync_›t_unsig√d
(
sock
, &
îr
, 
SOL_TCP
, 
TCP_DEFER_ACCEPT
, &
›tvÆ
);

1618  
îr
;

1619 
	}
}

1643 
	$ci_t˝_sync_sock›ts_to_os_sock
(
ci_√tif
* 
ni
, 
oo_•
 
sock_id
,

1644 
sockë
* 
sock
)

1646 
rc
;

1647 
ci_t˝_°©e
* 
ts
 = 
	`SP_TO_TCP
(
ni
, 
sock_id
);

1649 
rc
 = 
	`ci_t˝_sync_so_sock›ts
(
ni
, 
ts
, 
sock
);

1650 if–
rc
 < 0 )

1651  
rc
;

1653 
rc
 = 
	`ci_t˝_sync_ù_sock›ts
(
ni
, 
ts
, 
sock
);

1654 if–
rc
 < 0 )

1655  
rc
;

1657 
rc
 = 
	`ci_t˝_sync_t˝_sock›ts
(
ni
, 
ts
, 
sock
);

1658  
rc
;

1659 
	}
}

1663 
	$ci_t˝_£t_¢dbuf_‰om_¢dbuf_pkts
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

1669 
size
 = 
	`t˝_eff_mss
(
ts
);

1671 
	`ci_as£π_√quÆ
(
	`t˝_eff_mss
(
ts
), 0);

1673 
size
 = 
	`CI_MAX
(size, 
CI_CFG_TCP_DEFAULT_MSS
);

1674 
ts
->
s
.
so
.
¢dbuf
 =Ås->
so_¢dbuf_pkts
 * 
size
;

1677 
ts
->
s
.
so
.
¢dbuf
 = (ts->s.so.sndbuf / 3) * 2;

1679 if–
ts
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_STREAM
 )

1680 
ts
->
s
.
so
.
¢dbuf
 = (ts->s.so.sndbuf / 3) * 2;

1681 
	}
}

1684 
	$ci_t˝_ex∑nd_¢dbuf
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

1690 
ƒ_£gs
;

1691 
¢dpkts
;

1692 
max_¢dbuf_pkts
 =

1693 
	`NI_OPTS
(
ni
).
max_tx_∑ckës
 >> NI_OPTS“i).
t˝_sockbuf_max_‰a˘i⁄
;

1696 
ƒ_£gs
 = 
	`CI_MAX
(10, 
ts
->
cwnd
 / 
	`t˝_eff_mss
(ts));

1699 
¢dpkts
 = 2 * 
ƒ_£gs
;

1701 if–
ts
->
so_¢dbuf_pkts
 < 
¢dpkts
 )

1702 
ts
->
so_¢dbuf_pkts
 = 
	`CI_MIN
(
¢dpkts
, 
max_¢dbuf_pkts
);

1703 
	}
}

1706 
boﬁ
 
	$ci_t˝_should_ex∑nd_¢dbuf
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

1709 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_SET_SNDBUF
 )

1710  
Ál£
;

1713 if–
ni
->
°©e
->
mem_¥essuª
 &

1714 (
OO_MEM_PRESSURE_CRITICAL
 | 
OO_MEM_PRESSURE_LOW
) )

1715  
Ál£
;

1718 if–
	`ci_t˝_öÊight
(
ts
Ë>ts->
cwnd
 )

1719  
Ál£
;

1721  
åue
;

1722 
	}
}

1725 
	$ci_t˝_modî©e_¢dbuf
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

1727 c⁄° 
ci_öt32
 
mö_¢dbuf_pkts
 = 2;

1728 if–! (
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_SET_SNDBUF
) ) {

1729 
ts
->
so_¢dbuf_pkts
 = 
	`CI_MIN
(ts->so_sndbuf_pkts,

1730 
	`ci_t˝_£ndq_n_pkts
(
ts
) >> 1);

1731 
ts
->
so_¢dbuf_pkts
 = 
	`CI_MAX
—s->so_¢dbuf_pkts, 
mö_¢dbuf_pkts
);

1733 
	}
}

1736 
ci_öt32
 
	$ci_t˝_max_rcvbuf
(
ci_√tif
* 
ni
, 
ci_uöt16
 
amss
)

1740  ( 
	`NI_OPTS
(
ni
).
max_rx_∑ckës
 >>

1741 
	`NI_OPTS
(
ni
).
t˝_sockbuf_max_‰a˘i⁄
 ) * 
amss
;

1742 
	}
}

	@tcp_recv.c

14 
	~"ù_öã∫Æ.h
"

17 
	#LPF
 "TCP RECV "

	)

19 #ifde‡
_WIN32


20 
	#CI_MSG_TRUNC
 
MSG_PARTIAL


	)

22 
	#CI_MSG_TRUNC
 
MSG_TRUNC


	)

26 
	st˝_ªcv_öfo
 {

27 
	mrc
;

28 
	m°ack_locked
;

29 
ci_iovec_±r
 
	mpiov
;

30 
ci_uöt64
 
	mtime°amp
;

31 
time•ec
 
	mhw_time°amp
;

32 c⁄° 
ci_t˝_ªcvmsg_¨gs
* 
	ma
;

33 
	mmsg_Êags
;

36 #i‚de‡
__KERNEL__


37 
ci_t˝_ªcvmsg_urg
(
t˝_ªcv_öfo
 *
röf
);

40 
ci_t˝_ªcvmsg_ªcv2
(
t˝_ªcv_öfo
 *
röf
);

46 
ci_ölöe
 

47 
	$ci_t˝_ªcv_fûl_msg«me
(
ci_t˝_°©e
* 
ts
, 
sockaddr
 *
«me
,

48 
sockÀn_t
 *
«mñí
)

50 #i‡
CI_CFG_TCP_RECVMSG_MSGNAME


51 if–
«me
 ) {

52 
sockaddr_ö
* 
söp
;

53 
sockaddr_ö
 
sö_buf
;

55 
	`ci_as£π
(
ts
);

56 
	`ci_as£π
(
«mñí
);

58 if–
	`CI_LIKELY
(*
«mñí
 >(
sockaddr_ö
)) ) {

59 
söp
 = (
sockaddr_ö
 *)
«me
;

60 
söp
->
sö_Ámûy
 = 
AF_INET
;

61 
söp
->
sö_p‹t
 = 
	`TS_TCP
(
ts
)->
t˝_de°_be16
;

62 
söp
->
sö_addr
.
s_addr
 = 
ts
->
s
.
pkt
.
ù
.
ù_daddr_be32
;

63 *
«mñí
 = (
sockaddr_ö
);

66 
sö_buf
.
sö_Ámûy
 = 
AF_INET
;

67 
sö_buf
.
sö_p‹t
 = 
	`TS_TCP
(
ts
)->
t˝_de°_be16
;

68 
sö_buf
.
sö_addr
.
s_addr
 = 
ts
->
s
.
pkt
.
ù
.
ù_daddr_be32
;

69 
	`mem˝y
(
«me
, &
sö_buf
, *
«mñí
);

73 *
«mñí
 = 0;

75 
	}
}

78 
	$ci_t˝_£nd_wnd_upd©e
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
, 
sock_locked
)

80 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

82 if(
	`CI_UNLIKELY
–! (
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_ACCEPT_DATA
) ))

85 
	`ci_as£π_…
(
	`ci_t˝_ack_åiggî_dñè
(
ts
), 
	`ci_t˝_max_rcv_wödow
(ts));

87 if–
	`SEQ_SUB
(
ts
->
rcv_dñivîed
 + 
	`ci_t˝_max_rcv_wödow
(ts),

88 
	`t˝_rcv_wnd_right_edge_£¡
(
ts
))

89 >
	`ci_t˝_ack_åiggî_dñè
(
ts
) ) {

90 
ci_ù_pkt_fmt
* 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
ni
);

91 if–
pkt
 ) {

92 
	`LOG_TR
(
	`log
(
LNTS_FMT
 "window updateádvertised=%d",

93 
	`LNTS_PRI_ARGS
(
ni
, 
ts
), 
	`t˝_rcv_wnd_advîti£d
(ts)));

94 
	`CITP_STATS_NETIF_INC
(
ni
, 
wnd_upd©es_£¡
);

95 
	`ci_t˝_£nd_ack
(
ni
, 
ts
, 
pkt
, 
sock_locked
);

99 
ts
->
ack_åiggî
 +
	`ci_t˝_ack_åiggî_dñè
(ts);

104 
	}
}

110 
	$ci_t˝_ªcvmsg_£nd_wnd_upd©e
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

111 
Êags
)

113 if–! 
	`ci_√tif_åylock
(
ni
) ) {

114 
	`ci_bô_£t
(&
ts
->
s
.
s_aÊags
, 
CI_SOCK_AFLAG_NEED_ACK_BIT
);

115 if–! 
	`ci_√tif_lock_‹_de„r_w‹k
(
ni
, &
ts
->
s
.
b
) )

117 
	`ci_bô_˛ór
(&
ts
->
s
.
s_aÊags
, 
CI_SOCK_AFLAG_NEED_ACK_BIT
);

120 
	`CHECK_TS
(
ni
, 
ts
);

122 
	`LOG_TR
(
	`log
(
LNTS_FMT
 "ack_trigger=%x c/wÑcv_delivered=%x "

124 
	`LNTS_PRI_ARGS
(
ni
, 
ts
),Ås->
ack_åiggî
,Ås->
rcv_dñivîed
,

125 
ts
->
rcv_added
,Ås->
rcv_wödow_max
,

126 
	`t˝_rcv_wnd_right_edge_£¡
(
ts
),

127 
	`t˝_rcv_wnd_cuºít
(
ts
)));

129 if–
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_NOT_CONNECTED
 ) 
out
;

132 
	`ci_t˝_rx_ª≠_rxq_bufs
(
ni
, 
ts
);

144 if–! 
	`ci_t˝_£nd_wnd_upd©e
(
ni
, 
ts
, 
CI_TRUE
) )

148 
ts
->
ack_åiggî
 =Ås->
rcv_dñivîed


149 + 
	`ci_t˝_ack_åiggî_dñè
(
ts
)

150 - 
	`SEQ_SUB
(
ts
->
rcv_dñivîed
 +Ås->
rcv_wödow_max
,

151 
	`t˝_rcv_wnd_right_edge_£¡
(
ts
));

153 
out
:

154 
	`CHECK_TS
(
ni
, 
ts
);

156 
	`ci_√tif_u∆ock
(
ni
);

157 
	}
}

163 
	$ci_t˝_rcvbuf_drs
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

165 
ci_ùtime_t
 
time
;

166 
ci_uöt32
 
rcv_byãs
;

178 
max_rcvbuf_∑ckës
 =

179 
	`NI_OPTS
(
√tif
).
max_rx_∑ckës
 >> NI_OPTS“ëif).
t˝_sockbuf_max_‰a˘i⁄
;

181 
time
 = 
	`ci_t˝_time_now
(
√tif
Ë- 
ts
->
rcvbuf_drs
.time;

182 if–
time
 < (
ts
->
ß
 >> 3) ||Ås->sa == 0 )

186 
rcv_byãs
 = 
ts
->
rcv_dñivîed
 -Ås->
rcvbuf_drs
.
£q
;

187 if–
rcv_byãs
 <
ts
->
rcvbuf_drs
.
byãs
 )

188 
√w_≥riod
;

196 if–! (
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_SET_SNDBUF
) ) {

197 
rcv_wnd
, 
rcvbuf
;

200 
rcv_wnd
 = (
rcv_byãs
 << 1Ë+ 16 * 
ts
->
amss
;

202 if–
rcv_byãs
 >
ts
->
rcvbuf_drs
.
byãs
 + (ts->rcvbuf_drs.bytes >> 2) ) {

204 i‡(
rcv_byãs
 >
ts
->
rcvbuf_drs
.
byãs
 + (ts->rcvbuf_drs.bytes >> 1))

206 
rcv_wnd
 <<= 1;

209 
rcv_wnd
 += (rcv_wnd >> 1);

212 
rcvbuf
 = 
	`CI_MIN
(
rcv_wnd
, 
max_rcvbuf_∑ckës
 * 
ts
->
amss
);

214 if–
rcvbuf
 > 
ts
->
s
.
so
.rcvbuf ) {

215 
ts
->
s
.
so
.
rcvbuf
 =Ñcvbuf;

216 
	`ci_t˝_£t_rcvbuf
(
√tif
, 
ts
);

220 
ts
->
rcvbuf_drs
.
byãs
 = 
rcv_byãs
;

222 
√w_≥riod
:

223 
ts
->
rcvbuf_drs
.
£q
 =Ås->
rcv_dñivîed
;

224 
ts
->
rcvbuf_drs
.
time
 = 
	`ci_t˝_time_now
(
√tif
);

225 
	}
}

228 
ölöe
 

229 
	$ci_t˝_ªcvmsg_gë_n›ìk
(
≥ek_off
, 
ci_t˝_°©e
 *
ts
, 
ci_√tif
 *
√tif
,

230 
ci_ù_pkt_fmt
 **
pkt
, 
tŸÆ
, 
n
, 
max_byãs
,

231 
t˝_ªcv_öfo
 *
röf
)

233 
	`ci_as£π
(
≥ek_off
 == 0);

234 
ts
->
rcv_dñivîed
 +
n
;

235 if–
	`NI_OPTS
(
√tif
).
t˝_rcvbuf_mode
 == 1 )

237 
	`ci_t˝_rcvbuf_drs
(
√tif
, 
ts
);

238 if–
	`oo_offbuf_À·
(&(*
pkt
)->
buf
) == 0 ) {

240 if–
	`CI_UNLIKELY
(
	`SEQ_LE
(
ts
->
ack_åiggî
,Ås->
rcv_dñivîed
)) )

241 
	`ci_t˝_ªcvmsg_£nd_wnd_upd©e
(
√tif
, 
ts
, 
röf
->
a
->
Êags
);

242 if–
tŸÆ
 =
max_byãs
 || 
	`OO_PP_IS_NULL
((*
pkt
)->
√xt
) )

246 
ts
->
ªcv1_exåa˘
 = (*
pkt
)->
√xt
;

247 *
pkt
 = 
	`PKT_CHK_NNL
(
√tif
, 
ts
->
ªcv1_exåa˘
);

248 
	`ci_as£π
(
	`oo_offbuf_nŸ_em±y
(&(*
pkt
)->
buf
));

251 
	}
}

265 
	$ci_t˝_ªcvmsg_gë
(
t˝_ªcv_öfo
 *
röf
)

267 
ci_√tif
* 
√tif
 = 
röf
->
a
->
ni
;

268 
ci_t˝_°©e
* 
ts
 = 
röf
->
a
->ts;

269 
n
, 
≥ek_off
, 
tŸÆ
;

270 
ci_ù_pkt_fmt
* 
pkt
;

271 
max_byãs
;

273 
	`ci_as£π
(
√tif
);

274 
	`ci_as£π
(
ts
);

277 
	`ci_as£π
(
	`ci_sock_is_locked
(
√tif
, &
ts
->
s
.
b
));

279 
≥ek_off
 = 0;

280 
tŸÆ
 = 0;

285 
max_byãs
 = 
	`t˝_rcv_u§
(
ts
);

287 if–
max_byãs
 <0 || 
	`OO_PP_IS_NULL
(
ts
->
ªcv1_exåa˘
))

288  
tŸÆ
;

290 
pkt
 = 
	`PKT_CHK_NNL
(
√tif
, 
ts
->
ªcv1_exåa˘
);

291 if–
	`oo_offbuf_is_em±y
(&
pkt
->
buf
) ) {

292 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
ËË 
tŸÆ
;

293 
ts
->
ªcv1_exåa˘
 = 
pkt
->
√xt
;

294 
pkt
 = 
	`PKT_CHK_NNL
(
√tif
, 
ts
->
ªcv1_exåa˘
);

295 
	`ci_as£π
(
	`oo_offbuf_nŸ_em±y
(&
pkt
->
buf
));

301 if–
röf
->
rc
 == 0 ) {

302 
röf
->
time°amp
 = 
pkt
->
pf
.
t˝_rx
.
rx_°amp
;

303 
röf
->
hw_time°amp
.
tv_£c
 = 
pkt
->
pf
.
t˝_rx
.
rx_hw_°amp
.tv_sec;

304 
röf
->
hw_time°amp
.
tv_n£c
 = 
pkt
->
pf
.
t˝_rx
.
rx_hw_°amp
.tv_nsec;

306 if–
röf
->
rc
 > 0 ) {

310 
	`ci_as£π_nÊags
(
röf
->
a
->
Êags
, 
ONLOAD_MSG_ONEPKT
);

314 
	`ci_as£π
(0);

318 
	`PKT_TCP_RX_BUF_ASSERT_VALID
(
√tif
, 
pkt
);

319 
	`ci_as£π
(
	`oo_offbuf_nŸ_em±y
(&
pkt
->
buf
));

320 
	`ci_as£π
(
	`oo_offbuf_À·
(&
pkt
->
buf
Ë> 
≥ek_off
);

322 
n
 = 
	`ci_ù_c›y_pkt_to_u£r
(
√tif
, &
röf
->
piov
.
io
, 
pkt
, 
≥ek_off
);

323 #ifde‡ 
__KERNEL__


324 if–
n
 < 0 )  
tŸÆ
;

327 
tŸÆ
 +
n
;

328 
	`ci_as£π
(
tŸÆ
 <
max_byãs
);

330 if(
	`CI_LIKELY
–! (
röf
->
a
->
Êags
 & (
MSG_PEEK
 | 
ONLOAD_MSG_ONEPKT
)) )) {

331 if–
	`ci_t˝_ªcvmsg_gë_n›ìk
(
≥ek_off
, 
ts
, 
√tif
, &
pkt
, 
tŸÆ
, 
n
,

332 
max_byãs
, 
röf
) != 0 )

333  
tŸÆ
;

336 if–
röf
->
a
->
Êags
 & 
MSG_PEEK
 ) {

338 
	`oo_offbuf_ªèrd
(&
pkt
->
buf
, 
n
);

340 
≥ek_off
 +
n
;

341 if–
	`oo_offbuf_À·
(&
pkt
->
buf
Ë- 
≥ek_off
 == 0 ) {

343 if–
tŸÆ
 =
max_byãs
 || 
	`OO_PP_IS_NULL
(
pkt
->
√xt
) )

345  
tŸÆ
;

346 
pkt
 = 
	`PKT_CHK_NNL
(
√tif
,Ökt->
√xt
);

347 
≥ek_off
 = 0;

348 
	`ci_as£π
(
	`oo_offbuf_nŸ_em±y
(&
pkt
->
buf
));

352 if–
	`ci_t˝_ªcvmsg_gë_n›ìk
(
≥ek_off
, 
ts
, 
√tif
, &
pkt
, 
tŸÆ
, 
n
,

353 
max_byãs
, 
röf
) != 0 )

354  
tŸÆ
;

357 if–
röf
->
a
->
Êags
 & 
ONLOAD_MSG_ONEPKT
 )

358  
tŸÆ
;

361 if–
	`CI_IOVEC_LEN
(&
röf
->
piov
.
io
) == 0 ) {

363 if–
röf
->
piov
.
iovÀn
 =0 )  
tŸÆ
;

364 
röf
->
piov
.
io
 = *‘öf->piov.
iov
)++;

365 --
röf
->
piov
.
iovÀn
;

374 
	}
}

380 
	$ci_t˝_ªcvmsg_•ö
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

381 
ci_uöt64
 
°¨t_‰c
)

383 
ci_uöt64
 
now_‰c
;

384 
ci_uöt64
 
scheduÀ_‰c
 = 
°¨t_‰c
;

385 #i‚de‡
__KERNEL__


386 
côp_sig«l_öfo
* 
si
 = 
	`côp_sig«l_gë_•ecific_öôed
();

388 
ci_uöt64
 
max_•ö
 = 
ts
->
s
.
b
.
•ö_cy˛es
;

389 
rc
, 
•ö_limô_by_so
 = 0;

391 if–
ts
->
s
.
so
.
rcvtimeo_m£c
 ) {

392 
ci_uöt64
 
max_so_•ö
 = (ci_uöt64)
ts
->
s
.
so
.
rcvtimeo_m£c
 *

393 
	`IPTIMER_STATE
(
ni
)->
khz
;

394 if–
max_so_•ö
 <
max_•ö
 ) {

395 
max_•ö
 = 
max_so_•ö
;

396 
•ö_limô_by_so
 = 1;

400 
now_‰c
 = 
°¨t_‰c
;

403 if–
	`ci_√tif_may_pﬁl
(
ni
) ) {

404 if–
	`ci_√tif_√ed_pﬁl_•önög
(
ni
, 
now_‰c
) ) {

405 if–
	`ci_√tif_åylock
(
ni
) ) {

406 
	`ci_√tif_pﬁl_n
(
ni
, 
	`NI_OPTS
“i).
evs_≥r_pﬁl
);

407 
	`ci_√tif_u∆ock
(
ni
);

410 if–! 
ni
->
°©e
->
is_•ö√r
 )

411 
ni
->
°©e
->
is_•ö√r
 = 1;

413 if–
	`t˝_rcv_u§
(
ts
Ë|| 
	`TCP_RX_DONE
(ts) ) {

414 
ni
->
°©e
->
is_•ö√r
 = 0;

417 
	`ci_‰c64
(&
now_‰c
);

418 
rc
 = 
	`OO_SPINLOOP_PAUSE_CHECK_SIGNALS
(
ni
, 
now_‰c
, &
scheduÀ_‰c
,

419 
ts
->
s
.
so
.
rcvtimeo_m£c
, &ts->s.
b
, 
si
);

420 if–
rc
 != 0 )

421 
out
;

422 #i‡
CI_CFG_SPIN_STATS


423 
ni
->
°©e
->
°©s
.
•ö_t˝_ªcv
++;

425 }  
now_‰c
 - 
°¨t_‰c
 < 
max_•ö
 );

427 
rc
 = 
•ö_limô_by_so
 ? -
EAGAIN
 : 0;

428 
out
:

429 
ni
->
°©e
->
is_•ö√r
 = 0;

430  
rc
;

431 
	}
}

443 
	#FLAGS_AND_LOWAT_PERMIT_FAST_RET_WITH_DATA
(
ts
, 
byãs
, 
Êags
) \

444 ((
Êags
 & (
MSG_DONTWAIT
 | 
MSG_PEEK
)) || \

445 ((~
Êags
 & 
MSG_WAITALL
Ë&& (
byãs
Ë>(
ts
)->
s
.
so
.
rcvlow©
))

	)

448 #i‚de‡
__KERNEL__


454 
ci_ölöe
 

455 
	$ci_t˝_fûl_ªcv_time°amp
(
t˝_ªcv_öfo
* 
röf
)

457 
ci_√tif
* 
ni
 = 
röf
->
a
->ni;

458 
ci_t˝_°©e
* 
ts
 = 
röf
->
a
->ts;

459 
ci_msghdr
* 
msg
 = 
röf
->
a
->msg;

461 #ifde‡
__löux__


462 if–
msg
 !
NULL
 && msg->
msg_c⁄åﬁÀn
 != 0 ) {

463 
cmsg_°©e
 cmsg_state;

464 if–
	`CI_UNLIKELY
–
ts
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_TIMESTAMP_ANY
 ) ) {

465 
cmsg_°©e
.
msg
 = msg;

466 
cmsg_°©e
.
cmsg_byãs_u£d
 = 0;

467 
cmsg_°©e
.
cm
 = 
	`CMSG_FIRSTHDR
(
msg
);

468 
cmsg_°©e
.
p_msg_Êags
 = &
röf
->
msg_Êags
;

470 i‡–
ts
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_TIMESTAMPNS
 )

471 
	`ù_cmsg_ªcv_time°am≤s
(
ni
, 
röf
->
time°amp
, &
cmsg_°©e
);

473 if–
ts
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_TIMESTAMP
 )

474 
	`ù_cmsg_ªcv_time°amp
(
ni
, 
röf
->
time°amp
, &
cmsg_°©e
);

476 if–
ts
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_TIMESTAMPING
 ) {

477 if–!(
röf
->
hw_time°amp
.
tv_n£c
 & 
CI_IP_PKT_HW_STAMP_FLAG_IN_SYNC
) )

478 
ts
->
s
.
time°ampög_Êags
 &~
ONLOAD_SOF_TIMESTAMPING_SYS_HARDWARE
;

479 
	`ù_cmsg_ªcv_time°ampög
(
ni
, 
röf
->
time°amp
, &röf->
hw_time°amp
,

480 
ts
->
s
.
time°ampög_Êags
, &
cmsg_°©e
);

483 
msg
->
msg_c⁄åﬁÀn
 = 
cmsg_°©e
.
cmsg_byãs_u£d
;

486 
msg
->
msg_c⁄åﬁÀn
 = 0;

489 
	}
}

493 
	$ci_t˝_ªcvmsg
(c⁄° 
ci_t˝_ªcvmsg_¨gs
* 
a
)

495 
have_pﬁÀd
;

496 
ci_uöt64
 
¶ìp_£q
;

497 
ci_t˝_°©e
* 
ts
 = 
a
->ts;

498 
ci_√tif
* 
ni
 = 
a
->ni;

499 
Êags
 = 
a
->flags;

500 
ci_uöt64
 
°¨t_‰c
 = 0;

501 
t˝_ªcv_•ö
 = 0;

502 
ci_uöt32
 
timeout
 = 
ts
->
s
.
so
.
rcvtimeo_m£c
;

503 
t˝_ªcv_öfo
 
röf
;

505 
	`ci_as£π
(
a
);

506 
	`ci_as£π
(
ni
);

507 
	`ci_as£π
(
ts
);

508 
	`ci_as£π
(
a
->
msg
);

510 
röf
.
°ack_locked
 = 0;

511 
röf
.
a
 =á;

512 
röf
.
rc
 = 0;

513 
röf
.
msg_Êags
 = 0;

515 #i‡
	`deföed
(
__sun__
)

516 i‡(
ts
->
s
.
b
.
°©e
 =
CI_TCP_SYN_SENT
) {

517 
	`CI_SET_ERROR
(
röf
.
rc
, 
ENOTCONN
);

518  
röf
.
rc
;

525 
röf
.
rc
 = 
	`ci_sock_lock
(
ni
, &
ts
->
s
.
b
);

526 if(
	`CI_UNLIKELY
–
röf
.
rc
 != 0 )) {

527 
	`CI_SET_ERROR
(
röf
.
rc
, -rinf.rc);

528  
röf
.
rc
;

531 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_LISTEN
 ) 
check_î∫o
;

533 
have_pﬁÀd
 = 0;

534 
	`ci_as£π_equÆ
(
röf
.
rc
, 0);

536 #i‚de‡
__KERNEL__


537 if–(
Êags
 & (
MSG_OOB
 | 
MSG_ERRQUEUE
)) )

538 
¶ow_∑th
;

540 
	`ci_as£π_equÆ
(
Êags
 & ~
MSG_DONTWAIT
, 0);

544 
	`ci_iovec_±r_öô_nz
(&
röf
.
piov
, 
a
->
msg
->
msg_iov
,á->msg->
msg_iovÀn
);

546 
	`LOG_TR
(
	`log
(
LNTS_FMT
 "recvmsgÜen=%d flags=%x bytes_in_rxq=%d",

547 
	`LNTS_PRI_ARGS
(
ni
, 
ts
),

548 
	`ci_iovec_±r_byãs_cou¡
(&
röf
.
piov
), 
Êags
, 
	`t˝_rcv_u§
(
ts
)));

550 #i‚de‡
__KERNEL__


551 
t˝_ªcv_•ö
 =

552 
	`oo_≥r_thªad_gë
()->
•ö°©e
 & (1 << 
ONLOAD_SPIN_TCP_RECV
);

554 
	`ci_‰c64
(&
°¨t_‰c
);

556 
pﬁl_ªcv_queue
:

557 
röf
.
rc
 +
	`ci_t˝_ªcvmsg_gë
(&rinf);

562 if–
	`ci_iovec_±r_is_em±y_¥›î
(&
röf
.
piov
) &&

563 –
röf
.
rc
 !0 || 
	`TCP_RX_DONE
(
ts
Ë|| 
	`t˝_rcv_u§
(ts) ) ) {

564 if–
	`CI_UNLIKELY
(
röf
.
rc
 =0ËË
check_î∫o
;

565 
suc˚ss_u∆ock_out
;

571 if–(
röf
.
a
->
Êags
 & 
ONLOAD_MSG_ONEPKT
Ë&& (röf.
rc
 > 0) )

572 
suc˚ss_u∆ock_out
;

574 if–! 
have_pﬁÀd
 ) {

579 
have_pﬁÀd
 = 1;

581 if–
	`ci_√tif_may_pﬁl
(
ni
Ë&& 
	`ci_√tif_√ed_pﬁl_•önög
“i, 
°¨t_‰c
) ) {

582 if–
	`ci_√tif_åylock
(
ni
) ) {

583 
ci_uöt32
 
rcv_added_bef‹e
 = 
ts
->
rcv_added
;

584 
™y_evs
 = 
	`ci_√tif_pﬁl_n
(
ni
, 
	`NI_OPTS
“i).
evs_≥r_pﬁl
);

585 if–
ts
->
rcv_added
 !
rcv_added_bef‹e
 ) {

590 
have_pﬁÀd
 = 0;

592 if–
™y_evs
 )

593 
	`ci_√tif_pﬁl
(
ni
);

594 
	`ci_√tif_u∆ock
(
ni
);

595 if–
ts
->
rcv_added
 !
rcv_added_bef‹e
 ) {

596 if–(
Êags
 & 
MSG_PEEK
) ) {

597 
	`ci_iovec_±r_öô_nz
(&
röf
.
piov
, 
a
->
msg
->
msg_iov
,á->msg->
msg_iovÀn
);

598 
röf
.
rc
 = 0;

600 
pﬁl_ªcv_queue
;

617 if(
	`CI_UNLIKELY
–
	`OO_PP_NOT_NULL
(
ts
->
ªcv2
.
hód
) ))

618 if–
	`ci_t˝_ªcvmsg_ªcv2
(&
röf
) )

619 
suc˚ss_u∆ock_out
;

625 if–
röf
.
rc
 && 
	`FLAGS_AND_LOWAT_PERMIT_FAST_RET_WITH_DATA
(
ts
,Ñöf.rc, 
Êags
) )

626 
suc˚ss_u∆ock_out
;

628 if–
	`TCP_RX_DONE
(
ts
ËË
rx_d⁄e
;

630 if–
röf
.
rc
 =0 && (
Êags
 & 
MSG_DONTWAIT
) ) {

631 
	`CI_SET_ERROR
(
röf
.
rc
, 
EAGAIN
);

632 
u∆ock_out
;

636 
	`ci_as£π
(!(
Êags
 & 
MSG_PEEK
Ë|| 
röf
.
rc
 == 0);

641 if–
t˝_ªcv_•ö
 ) {

642 
rc2
;

644 if–(
rc2
 = 
	`ci_t˝_ªcvmsg_•ö
(
ni
, 
ts
, 
°¨t_‰c
)) ) {

645 if–
rc2
 < 0 ) {

647 
	`CI_SET_ERROR
(
röf
.
rc
, -
rc2
);

648 
u∆ock_out
;

650 
pﬁl_ªcv_queue
;

653 
t˝_ªcv_•ö
 = 0;

654 if–
timeout
 ) {

655 
ci_uöt32
 
•ö_ms
 = 
	`NI_OPTS
(
ni
).
•ö_u£c
 >> 10;

656 if–
•ö_ms
 < 
timeout
 )

657 
timeout
 -
•ö_ms
;

659 
	`CI_SET_ERROR
(
röf
.
rc
, 
EAGAIN
);

660 
rx_d⁄e
;

667 
¶ìp_£q
 = 
ts
->
s
.
b
.¶ìp_£q.
Æl
;

668 
	`ci_rmb
();

669 if–
	`t˝_rcv_u§
(
ts
ËË
pﬁl_ªcv_queue
;

670 if–
	`TCP_RX_DONE
(
ts
ËË
rx_d⁄e
;

679 
rc2
;

682 
	`ci_as£π
(!
röf
.
°ack_locked
);

683 
rc2
 = 
	`ci_sock_¶ìp
(
ni
, &
ts
->
s
.
b
, 
CI_SB_FLAG_WAKE_RX
,

684 
CI_SLEEP_SOCK_LOCKED
 | 
CI_SLEEP_SOCK_RQ
,

685 
¶ìp_£q
, &
timeout
);

686 if–
rc2
 == 0 )

687 
rc2
 = 
	`ci_sock_lock
(
ni
, &
ts
->
s
.
b
);

688 if–
rc2
 < 0 ) {

690 if–
röf
.
rc
 ) {

691 #i‚de‡
__KERNEL__


692 
	`ci_t˝_ªcv_fûl_msg«me
(
ts
, (
sockaddr
*Ë
a
->
msg
->
msg_«me
,

693 &
a
->
msg
->
msg_«mñí
);

694 
	`ci_t˝_fûl_ªcv_time°amp
(&
röf
);

697 
	`CI_SET_ERROR
(
röf
.
rc
, -
rc2
);

698 
out
;

701 
	`ci_as£π
(
have_pﬁÀd
);

702 
pﬁl_ªcv_queue
;

705 #i‚de‡
__KERNEL__


706 
¶ow_∑th
:

708 if–
Êags
 & 
MSG_ERRQUEUE
 ) {

709 if–
	`ci_udp_ªcv_q_nŸ_em±y
(&
ts
->
time°amp_q
) ) {

710 
ci_ù_pkt_fmt
* 
pkt
;

711 
⁄lﬂd_scm_time°ampög_°ªam
 
°amps
;

712 
cmsg_°©e
 cmsg_state;

713 
tx_hw_°amp_ö_sync
;

715 
	`ci_rmb
();

716 
pkt
 = 
	`ci_udp_ªcv_q_gë
(
ni
, &
ts
->
time°amp_q
);

717 
	`ci_udp_ªcv_q_dñivî
(
ni
, &
ts
->
time°amp_q
, 
pkt
);

719 
cmsg_°©e
.
msg
 = 
a
->msg;

720 
cmsg_°©e
.
cm
 = 
a
->
msg
->
msg_c⁄åﬁ
;

721 
cmsg_°©e
.
cmsg_byãs_u£d
 = 0;

722 
cmsg_°©e
.
p_msg_Êags
 = &
röf
.
msg_Êags
;

723 
	`mem£t
(&
°amps
, 0, (stamps));

724 
tx_hw_°amp_ö_sync
 = 
pkt
->
tx_hw_°amp
.
tv_n£c
 &

725 
CI_IP_PKT_HW_STAMP_FLAG_IN_SYNC
;

727 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_RTQ_RETRANS
 ) {

728 if–
pkt
->
pf
.
t˝_tx
.
fú°_tx_hw_°amp
.
tv_n£c
 &

729 
CI_IP_PKT_HW_STAMP_FLAG_IN_SYNC
 ) {

730 
°amps
.
fú°_£¡
.
tv_£c
 = 
pkt
->
pf
.
t˝_tx
.
fú°_tx_hw_°amp
.tv_sec;

731 
°amps
.
fú°_£¡
.
tv_n£c
 = 
pkt
->
pf
.
t˝_tx
.
fú°_tx_hw_°amp
.tv_nsec;

733 if–
tx_hw_°amp_ö_sync
 ) {

734 
°amps
.
œ°_£¡
.
tv_£c
 = 
pkt
->
tx_hw_°amp
.tv_sec;

735 
°amps
.
œ°_£¡
.
tv_n£c
 = 
pkt
->
tx_hw_°amp
.tv_nsec;

738 if–
tx_hw_°amp_ö_sync
 ) {

739 
°amps
.
fú°_£¡
.
tv_£c
 = 
pkt
->
tx_hw_°amp
.tv_sec;

740 
°amps
.
fú°_£¡
.
tv_n£c
 = 
pkt
->
tx_hw_°amp
.tv_nsec;

742 
°amps
.
Àn
 = 
pkt
->
pf
.
t˝_tx
.
íd_£q
 -Ökt->pf.t˝_tx.
°¨t_£q
;

745 if–
	`TX_PKT_TCP
(
pkt
)->
t˝_Êags
 & (
CI_TCP_FLAG_SYN
|
CI_TCP_FLAG_FIN
) )

746 
°amps
.
Àn
--;

748 
	`ci_put_cmsg
(&
cmsg_°©e
, 
SOL_SOCKET
, 
ONLOAD_SCM_TIMESTAMPING_STREAM
,

749 (
°amps
), &stamps);

751 
	`ci_ù_cmsg_föish
(&
cmsg_°©e
);

752 
röf
.
msg_Êags
 |
MSG_ERRQUEUE
;

754 
röf
.
rc
 = 0;

755 
u∆ock_out
;

757 
röf
.
rc
 = -
EAGAIN
;

758 
	`CI_SET_ERROR
(
röf
.
rc
, -rinf.rc);

759 
check_î∫o
;

762 
	`ci_as£π
(
Êags
 & 
MSG_OOB
);

763 
röf
.
rc
 = 
	`ci_t˝_ªcvmsg_urg
(&rinf);

765 if–
röf
.
rc
 >0 ) 
suc˚ss_u∆ock_out
;

766 
	`CI_SET_ERROR
(
röf
.
rc
, -rinf.rc);

767 
u∆ock_out
;

770 
rx_d⁄e
:

771 if–
	`t˝_rcv_u§
(
ts
Ë&& !
	`ci_iovec_±r_is_em±y_¥›î
(&
röf
.
piov
) )

776 
pﬁl_ªcv_queue
;

777 if–
röf
.
rc
 ) 
suc˚ss_u∆ock_out
;

778 
check_î∫o
:

780 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_FIN_RECEIVED
 )

781 
u∆ock_out
;

782 i‡(
ts
->
s
.
so_îr‹
) {

783 
ci_öt32
 
rc1
 = 
	`ci_gë_so_îr‹
(&
ts
->
s
);

784 i‡(
rc1
 != 0)

785 
	`CI_SET_ERROR
(
röf
.
rc
, 
rc1
);

786 } if–
	`TCP_RX_ERRNO
(
ts
) ) {

787 
	`CI_SET_ERROR
(
röf
.
rc
, 
	`TCP_RX_ERRNO
(
ts
));

789 #i‚de‡
__KERNEL__


790 
a
->
msg
->
msg_c⁄åﬁÀn
 = 0;

792 
u∆ock_out
;

794 
suc˚ss_u∆ock_out
:

795 #i‚de‡
__KERNEL__


796 
	`ci_t˝_ªcv_fûl_msg«me
(
ts
, (
sockaddr
*Ë
a
->
msg
->
msg_«me
,

797 &
a
->
msg
->
msg_«mñí
);

798 
	`ci_t˝_fûl_ªcv_time°amp
(&
röf
);

800 
u∆ock_out
:

805 if–––(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_RECVD_FIN
Ë&& 
	`t˝_rcv_u§
(ts) == 0 )

806 || 
ni
->
°©e
->
mem_¥essuª
 ) && 
	`ci_√tif_åylock
(ni) ) {

807 
	`ci_t˝_rx_ª≠_rxq_bufs_socklocked
(
ni
, 
ts
);

808 
	`ci_√tif_u∆ock
(
ni
);

811 
	`ci_sock_u∆ock
(
ni
, &
ts
->
s
.
b
);

812 
out
:

813 if(
	`CI_UNLIKELY
–
ni
->
°©e
->
rxq_low
 ))

814 
	`ci_√tif_rxq_low_⁄_ªcv
(
ni
, &
ts
->
s
, 
röf
.
rc
);

815 #i‚de‡
__KERNEL__


816 if–
röf
.
rc
 >= 0 )

817 
a
->
msg
->
msg_Êags
 = 
röf
.msg_flags;

819  
röf
.
rc
;

820 
	}
}

822 
	$move_‰om_ªcv2_to_ªcv1
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

823 
ci_ù_pkt_fmt
* 
hód
,

824 
ci_ù_pkt_fmt
* 
èû
, 
n
)

830 
ci_ù_pkt_queue
* 
ªcv1
 = &
ts
->recv1;

831 
ci_ù_pkt_queue
* 
ªcv2
 = &
ts
->recv2;

833 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

834 
	`ci_as£π
(
	`ci_sock_is_locked
(
ni
, &
ts
->
s
.
b
));

835 
	`ci_as£π
(
n
 > 0);

836 
	`ci_as£π
(
ªcv2
->
num
 >
n
);

837 
	`ci_as£π
(
	`OO_PP_EQ
(
ªcv2
->
hód
, 
	`OO_PKT_P
(head)));

838 
	`ci_as£π
(
n
 < 
ªcv2
->
num
 || 
	`OO_PP_IS_NULL
(
èû
->
√xt
));

840 if–
n
 ) {

841 
	`LOG_URG
(
	`log
(
NTS_FMT
 "recvmsg: moving %dÖkts fromÑecv2ÅoÑecv1",

842 
	`NTS_PRI_ARGS
(
ni
, 
ts
), 
n
));

843 
	`ci_ù_queue_move
(
ni
, 
ªcv2
, 
ªcv1
, 
èû
, 
n
);

849 if–
	`OO_PP_IS_NULL
(
ts
->
ªcv1_exåa˘
) ) {

850 
ts
->
ªcv1_exåa˘
 = 
ªcv1
->
hód
;

857 
	`ci_as£π
(
	`oo_offbuf_is_em±y
(&(
	`PKT_CHK
(
ni
, 
ts
->
ªcv1_exåa˘
)->
buf
)));

858 
ts
->
ªcv1_exåa˘
 = 
	`OO_PKT_P
(
hód
);

864 if–
	`OO_PP_IS_NULL
(
ªcv2
->
hód
) ) {

865 
	`LOG_URG
(
	`log
(
NTS_FMT
 "ªcvmsg: swôchÅÿªcv1", 
	`NTS_PRI_ARGS
(
ni
, 
ts
)));

866 
	`TS_QUEUE_RX_SET
(
ts
, 
ªcv1
);

867 
	`ci_as£π
(!(
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_PTR_VALID
));

869 
	}
}

872 #i‚de‡
__KERNEL__


873 
	$ci_t˝_ªcvmsg_urg
(
t˝_ªcv_öfo
 *
röf
)

875 
ci_√tif
* 
ni
 = 
röf
->
a
->ni;

876 
ci_t˝_°©e
* 
ts
 = 
röf
->
a
->ts;

877 
msghdr
* 
msg
 = 
röf
->
a
->msg;

878 
ci_iovec_±r
 
piov
;

879 
ci_uöt8
 
oob
;

880 
ˇn_wrôe
;

881 
rc
 = 0;

883 if–!
röf
->
°ack_locked
 ) {

884 
rc
 = 
	`ci_√tif_lock
(
ni
);

885 if–
rc
 != 0 )

886  
rc
;

887 
röf
->
°ack_locked
 = 1;

889 
	`CHECK_TS
(
ni
, 
ts
);

891 
	`LOG_URG
(
	`ci_log
(
TCP_URG_FMT
, 
	`TCP_URG_ARGS
(
ts
)));

893 
	`ci_as£π
(
msg
->
msg_iovÀn
 > 0);

894 
	`ci_iovec_±r_öô_nz
(&
piov
, 
msg
->
msg_iov
, msg->
msg_iovÀn
);

895 
ˇn_wrôe
 = !
	`ci_iovec_±r_is_em±y_¥›î
(&
piov
);

897 if–
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_OOBINLINE
 ) {

898 
	`LOG_URG
(
	`ci_log
("%s: OOBINLINE i†£t,Ñc=-EINVAL", 
__FUNCTION__
));

899 
rc
 = -
EINVAL
;

900 
out
;

904 
	`ci_√tif_pﬁl
(
ni
);

906 if–
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_COMING
 ) {

907 
	`LOG_URG
(
	`log
("%s:ÇÿOOB byã,Ñc=-EINVAL", 
__FUNCTION__
));

908 
rc
 = -
EAGAIN
;

909 
out
;

911 if–~
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_IS_HERE
 ) {

912 
	`LOG_URG
(
	`ci_log
("%s: OOB byã ha¢'à¨rived,Ñc=-EAGAIN", 
__FUNCTION__
));

913 
rc
 = -
EINVAL
;

914 
out
;

917 i‡(
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSED
) {

918 
	`LOG_URG
(
	`ci_log
("%s:Å˝ sèã i†CLOSED,Ñc=0", 
__FUNCTION__
));

919 
out
;

923 i‡(
ts
->
s
.
rx_î∫o
 & 
CI_SHUT_RD
) {

924 
	`LOG_URG
(
	`ci_log
("%s:Ñódög i¢'àpossibÀ(SHUT_RD),Ñc=0", 
__FUNCTION__
));

925 
out
;

933 
oob
 = 
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_DATA_MASK
;

934 #ifde‡ 
__löux__


935 
röf
->
msg_Êags
 |
MSG_OOB
;

938 
	`LOG_URG
(
	`ci_log
("Ródög OOB byã, oob=0x%X, fœgs=0x%X", 
oob
, 
röf
->
a
->
Êags
));

941 i‡(~
röf
->
a
->
Êags
 & 
MSG_PEEK
)

942 
	`t˝_urg_d©a
(
ts
Ë&=~ (
CI_TCP_URG_IS_HERE
 | 
CI_TCP_URG_DATA_MASK
);

947 if–
röf
->
a
->
Êags
 & 
CI_MSG_TRUNC
 ) {

948 
rc
 = 
ˇn_wrôe
;

949 
out
;

952 if–! 
ˇn_wrôe
 ) {

953 #ifde‡ 
__löux__


954 
röf
->
msg_Êags
 |
CI_MSG_TRUNC
;

956 
rc
 = 0;

957 
out
;

964 *(*)
	`CI_IOVEC_BASE
(&
piov
.
io
Ë
oob
;

965 
rc
 = 1;

967 
out
:

968 
	`CHECK_TS
(
ni
, 
ts
);

969 
	`ci_√tif_u∆ock
(
ni
);

970 
röf
->
°ack_locked
 = 0;

971  
rc
;

972 
	}
}

976 
	$ci_t˝_ªcvmsg_ªcv2_≥ek2
(
t˝_ªcv_öfo
 *
röfo
,

977 
°¨t_skù
, 
°›_©_m¨k
,

978 
rd_nxt_£q
)

986 
ci_t˝_°©e
* 
ts
 = 
röfo
->
a
->ts;

987 
ci_√tif
* 
ni
 = 
röfo
->
a
->ni;

988 
ci_ù_pkt_queue
* 
ªcv2
 = &
ts
->recv2;

989 
ci_ù_pkt_fmt
* 
pkt
 = 
	`PKT_CHK
(
ni
, 
ªcv2
->
hód
);

990 
oo_offbuf
* 
buf
 = &
pkt
->buf;

991 
n
, 
≥ek_off
 = 
°¨t_skù
;

992 #ifde‡
__KERNEL__


993 
rc
;

996 
	`ci_as£π
(
	`oo_offbuf_À·
(
buf
Ë>
°¨t_skù
);

997 
	`ci_as£π
(
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_PTR_VALID
);

998 
	`ci_as£π
(!
°›_©_m¨k
 || 
	`SEQ_LE
(
rd_nxt_£q
, 
	`t˝_rcv_up
(
ts
)));

1000 
	`LOG_URG
(
	`log
(
LNTS_FMT
 "recv2_peek: so_far=%d skip=%d stop@mark=%d "

1001 "rd_nxt_£q=%08xÑcv_up=%08x", 
	`LNTS_PRI_ARGS
(
ni
, 
ts
),

1002 
röfo
->
rc
, 
°¨t_skù
, 
°›_©_m¨k
,

1003 
rd_nxt_£q
, 
	`t˝_rcv_up
(
ts
)));

1005 
rd_nxt_£q
 +
°¨t_skù
;

1008 
n
 = 
	`oo_offbuf_À·
(
buf
Ë- 
≥ek_off
;

1009 
n
 = 
	`CI_MIN
“, ()
	`CI_IOVEC_LEN
(&
röfo
->
piov
.
io
));

1010 if–
°›_©_m¨k
 ) {

1011 
di°_to_urg
 = 
	`t˝_rcv_up
(
ts
Ë- 
rd_nxt_£q
;

1012 if–
di°_to_urg
 == 0 )

1014 
	`ci_log
("dist_to_urg == 0");

1017 
n
 = 
	`CI_MIN
“, 
di°_to_urg
);

1020 #ifde‡
__KERNEL__


1021 
rc
 = 
	`c›y_to_u£r
(
	`CI_IOVEC_BASE
(&
röfo
->
piov
.
io
), 
	`oo_offbuf_±r
(
buf
Ë+ 
≥ek_off
, 
n
);

1022 if–
rc
 != 0 ) {

1023 
	`LOG_URG
(
	`log
(
LNTS_FMT
 "%s: copy_to_userÑeturned %d",

1024 
	`LNTS_PRI_ARGS
(
ni
, 
ts
), 
__FUNCTION__
, 
rc
));

1025 
	`ci_as£π
(
rc
 == 0);

1028 
	`mem˝y
(
	`CI_IOVEC_BASE
(&
röfo
->
piov
.
io
), 
	`oo_offbuf_±r
(
buf
Ë+ 
≥ek_off
, 
n
);

1030 
röfo
->
rc
 +
n
;

1031 
	`ci_iovec_±r_adv™˚
(&
röfo
->
piov
, 
n
);

1032 
≥ek_off
 +
n
;

1033 
rd_nxt_£q
 +
n
;

1035 if–
	`CI_IOVEC_LEN
(&
röfo
->
piov
.
io
) == 0 ) {

1036 if–
röfo
->
piov
.
iovÀn
 == 0 )

1039 
röfo
->
piov
.
io
 = *‘öfo->piov.
iov
)++;

1040 --
röfo
->
piov
.
iovÀn
;

1042 if–
	`oo_offbuf_À·
(
buf
Ë- 
≥ek_off
 == 0 ) {

1043 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) )

1045 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

1046 
buf
 = &
pkt
->buf;

1047 
≥ek_off
 = 0;

1050 
	}
}

1053 
	$ci_t˝_ªcvmsg_ªcv2_≥ek
(
t˝_ªcv_öfo
 *
röf
)

1055 
ci_t˝_°©e
* 
ts
 = 
röf
->
a
->ts;

1056 
ci_√tif
* 
ni
 = 
röf
->
a
->ni;

1057 
ci_ù_pkt_queue
* 
ªcv2
 = &
ts
->recv2;

1058 
ci_ù_pkt_fmt
* 
pkt
;

1059 
skù
, 
°›_©_m¨k
;

1060 
rd_nxt_£q
;

1062 if–!
röf
->
°ack_locked
 ) {

1063 
rc
 = 
	`ci_√tif_lock
(
ni
);

1064 if–
rc
 != 0 )

1065  
rc
;

1066 
röf
->
°ack_locked
 = 1;

1069 
pkt
 = 
	`PKT_CHK
(
ni
, 
ªcv2
->
hód
);

1070 
rd_nxt_£q
 = 
	`PKT_RX_BUF_SEQ
(
pkt
);

1075 if–
	`OO_PP_NOT_NULL
(
ts
->
ªcv1_exåa˘
) ) {

1076 
ci_ù_pkt_fmt
* 
r1pkt
 = 
	`PKT_CHK
(
ni
, 
ts
->
ªcv1_exåa˘
);

1077 
£q
 = 
	`PKT_RX_BUF_SEQ
(
r1pkt
Ë+ 
röf
->
rc
;

1082 if–
£q
 !
	`CI_BSWAP_BE32
(
	`PKT_TCP_HDR
(
pkt
)->
t˝_£q_be32
) )

1088 
out
;

1094 if–
	`t˝_rcv_up
(
ts
Ë=
rd_nxt_£q
 ) {

1095 
skù
 = !(
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_OOBINLINE
);

1096 
°›_©_m¨k
 = 0;

1099 
skù
 = 0;

1100 
°›_©_m¨k
 = 1;

1102 
	`ci_t˝_ªcvmsg_ªcv2_≥ek2
(
röf
, 
skù
, 
°›_©_m¨k
, 
rd_nxt_£q
);

1104 
out
:

1105 
	`ci_√tif_u∆ock
(
ni
);

1106 
röf
->
°ack_locked
 = 0;

1107  
röf
->
rc
;

1108 
	}
}

1111 
	$ci_t˝_ªcvmsg_h™dÀ_ø˚
(
t˝_ªcv_öfo
 *
röf
)

1113 
rc
;

1119 
	`ci_√tif_u∆ock
(
röf
->
a
->
ni
);

1120 
röf
->
°ack_locked
 = 0;

1121 
röf
->
rc
 +
	`ci_t˝_ªcvmsg_gë
(rinf);

1122 
rc
 = 
	`ci_√tif_lock
(
röf
->
a
->
ni
);

1123 if–
rc
 != 0 )

1124  
rc
;

1125 
röf
->
°ack_locked
 = 1;

1130  
	`ci_iovec_±r_is_em±y_¥›î
(&
röf
->
piov
) ||

1131 ((
röf
->
a
->
Êags
 & 
ONLOAD_MSG_ONEPKT
Ë&& (röf->
rc
 > 0));

1132 
	}
}

1135 
ci_ölöe
 
	$ci_t˝_ªcv1_is_em±y
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

1140 
ci_ù_pkt_fmt
 *
pkt
;

1141 if–
	`OO_PP_IS_NULL
(
ts
->
ªcv1_exåa˘
) )  1;

1142 
pkt
 = 
	`PKT_CHK_NNL
(
ni
, 
ts
->
ªcv1_exåa˘
);

1143  
	`oo_offbuf_is_em±y
(&
pkt
->
buf
Ë&& 
	`OO_PP_IS_NULL
’kt->
√xt
);

1144 
	}
}

1147 
	$ci_t˝_ªcvmsg_ªcv2
(
t˝_ªcv_öfo
 *
röf
)

1149 
ci_t˝_°©e
* 
ts
 = 
röf
->
a
->ts;

1150 
ci_√tif
* 
ni
 = 
röf
->
a
->ni;

1151 
ci_ù_pkt_queue
* 
ªcv2
 = &
ts
->recv2;

1152 
ci_ù_pkt_fmt
* 
pkt
, *
hód_pkt
, *
èû_pkt
;

1153 
oo_offbuf
* 
buf
;

1154 
rd_nxt_£q
, 
n
;

1155 
mu°_ªtu∫_‰om_ªcv
 = 0;

1157 if–
röf
->
a
->
Êags
 & 
MSG_PEEK
 )

1158  
	`ci_t˝_ªcvmsg_ªcv2_≥ek
(
röf
);

1160 
agaö
:

1161 
	`LOG_URG
(
	`ci_log
("%s:ágaöÑc=%d", 
__FUNCTION__
, 
röf
->
rc
));

1163 
	`ci_as£π
(
	`ci_sock_is_locked
(
ni
, &
ts
->
s
.
b
));

1164 if–!
röf
->
°ack_locked
 ) {

1165 
rc
 = 
	`ci_√tif_lock
(
ni
);

1166 if–
rc
 != 0 )

1167  
rc
;

1168 
röf
->
°ack_locked
 = 1;

1170 
	`CHECK_TS
(
ni
, 
ts
);

1173 if–! 
	`ci_t˝_ªcv1_is_em±y
(
ni
, 
ts
) ) {

1174 
mu°_ªtu∫_‰om_ªcv
 = 
	`ci_t˝_ªcvmsg_h™dÀ_ø˚
(
röf
);

1175 if–
mu°_ªtu∫_‰om_ªcv
 ) 
u∆ock_out
;

1178 
	`ci_as£π
(
	`ci_t˝_ªcv1_is_em±y
(
ni
, 
ts
));

1180 
pkt
 = 
	`PKT_CHK
(
ni
, 
ªcv2
->
hód
);

1181 
buf
 = &
pkt
->buf;

1182 
	`ci_as£π
(
	`oo_offbuf_À·
(
buf
));

1185 
rd_nxt_£q
 = 
	`PKT_RX_BUF_SEQ
(
pkt
);

1187 
	`LOG_URG
(
	`log
("%s: "
NTS_FMT
 "so_far=%d flags=%xÇxt_seq=%08xÑcv_up=%08x "

1188 "urg_d©a=%03x", 
__FUNCTION__
, 
	`NTS_PRI_ARGS
(
ni
, 
ts
),

1189 
röf
->
rc
,Ñöf->
a
->
Êags
, 
rd_nxt_£q
, 
	`t˝_rcv_up
(
ts
),

1190 
	`t˝_urg_d©a
(
ts
)));

1192 
	`ci_as£π
(
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_PTR_VALID
);

1194 i‡–
röf
->
rc
 == 0 )

1195 
röf
->
time°amp
 = 
pkt
->
pf
.
t˝_rx
.
rx_°amp
;

1197 if–
	`t˝_rcv_up
(
ts
Ë=
rd_nxt_£q
 ) {

1199 
	`LOG_URG
(
	`ci_log
("%s: We're staringátÅhe oob byteándÑc=%d",

1200 
__FUNCTION__
, 
röf
->
rc
));

1205 if–
röf
->
rc
 ) {

1207 
	`LOG_URG
(
	`ci_log
("%s: We're staringátÅhe oob byteándÑc=%d",

1208 
__FUNCTION__
, 
röf
->
rc
));

1209 
mu°_ªtu∫_‰om_ªcv
 = 1;

1210 
u∆ock_out
;

1214 if–! (
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_OOBINLINE
) ) {

1218 
	`oo_offbuf_adv™˚
(
buf
, 1);

1219 ++
ts
->
rcv_dñivîed
;

1229 
	`t˝_urg_d©a_övÆid©e
(
ts
);

1230 
	`move_‰om_ªcv2_to_ªcv1
(
ni
, 
ts
, 
pkt
, 
	`PKT_CHK
“i,
ªcv2
->
èû
),Ñecv2->
num
);

1231 
	`ci_as£π
(
	`OO_PP_IS_NULL
(
ªcv2
->
hód
));

1232 
	`ci_as£π
(
	`TS_QUEUE_RX
(
ts
Ë=&ts->
ªcv1
);

1233 
	`ci_√tif_u∆ock
(
ni
);

1234 
röf
->
°ack_locked
 = 0;

1235 
röf
->
rc
 +
	`ci_t˝_ªcvmsg_gë
(rinf);

1236 
out
;

1242 
hód_pkt
 = 
pkt
;

1243 
n
 = 0;

1244 
èû_pkt
 = 0;

1245  
	`t˝_rcv_up
(
ts
Ë>
pkt
->
pf
.
t˝_rx
.
íd_£q
 ) {

1246 
èû_pkt
 = 
pkt
;

1247 ++
n
;

1248 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) ) ;

1249 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

1251 if–
n
 ) {

1256 
	`move_‰om_ªcv2_to_ªcv1
(
ni
, 
ts
, 
hód_pkt
, 
èû_pkt
, 
n
);

1257 
	`CHECK_TS
(
ni
, 
ts
);

1258 
	`ci_√tif_u∆ock
(
ni
);

1259 
röf
->
°ack_locked
 = 0;

1261 
röf
->
rc
 +
	`ci_t˝_ªcvmsg_gë
(rinf);

1262 
mu°_ªtu∫_‰om_ªcv
 = 
	`ci_iovec_±r_is_em±y_¥›î
(&
röf
->
piov
) ||

1263 ((
röf
->
a
->
Êags
 & 
ONLOAD_MSG_ONEPKT
Ë&& (röf->
rc
 > 0));

1264 if–
mu°_ªtu∫_‰om_ªcv
 ) 
out
;

1269 if–
	`OO_PP_NOT_NULL
(
ªcv2
->
hód
ËË
agaö
;

1270 
out
;

1276 
n
;

1277 if–
	`OO_PP_IS_NULL
(
ªcv2
->
hód
ËË
u∆ock_out
;

1278 
n
 = 
	`t˝_rcv_up
(
ts
Ë- 
rd_nxt_£q
;

1279 
	`LOG_URG
(
	`ci_log
("%s:Ñeading %d bytes from urg segment before OOBB",

1280 
__FUNCTION__
, 
n
));

1281 
	`ci_as£π
(
n
 > 0);

1282 
	`ci_as£π_…
(
n
, 
	`oo_offbuf_À·
(
buf
));

1283 
n
 = 
	`ci_c›y_to_iovec
(&
röf
->
piov
, 
	`oo_offbuf_±r
(
buf
),Ç);

1284 
röf
->
rc
 +
n
;

1285 
	`oo_offbuf_adv™˚
(
buf
, 
n
);

1286 
ts
->
rcv_dñivîed
 +
n
;

1287 
	`ci_as£π
(
	`oo_offbuf_À·
(
buf
));

1291 
mu°_ªtu∫_‰om_ªcv
 = 1;

1295 
u∆ock_out
:

1296 
	`CHECK_TS
(
ni
, 
ts
);

1297 if–
röf
->
°ack_locked
 ) {

1298 
	`ci_√tif_u∆ock
(
ni
);

1299 
röf
->
°ack_locked
 = 0;

1301 
out
:

1302 if–
	`NI_OPTS
(
ni
).
t˝_rcvbuf_mode
 == 1 )

1303 
	`ci_t˝_rcvbuf_drs
(
ni
, 
ts
);

1306 
mu°_ªtu∫_‰om_ªcv
 |
	`ci_iovec_±r_is_em±y_¥›î
(&
röf
->
piov
) ||

1307 ((
röf
->
a
->
Êags
 & 
ONLOAD_MSG_ONEPKT
Ë&& (röf->
rc
 > 0));

1309 
	`LOG_URG
(
	`ci_log
("%s:Ñeturning %dÑc=%d "

1311 
__FUNCTION__
, 
mu°_ªtu∫_‰om_ªcv
,

1312 
röf
->
rc
,

1313 
	`ci_iovec_±r_is_em±y_¥›î
(&
röf
->
piov
)));

1315  
mu°_ªtu∫_‰om_ªcv
;

1316 
	}
}

	@tcp_rx.c

31 
	~"ù_öã∫Æ.h
"

32 
	~"t˝_rx.h
"

34 #ifde‡
ONLOAD_OFE


35 
	~"o„/⁄lﬂd.h
"

39 
	#LPF
 "TCP RX "

	)

42 
	#TCP_RX_FMT
 "pkt=%08x-%08x " 
RCV_WND_FMT


	)

43 
	#TCP_RX_ARGS
(
pkt
, 
ts
) () \

44 
	`CI_BSWAP_BE32
(
	`PKT_TCP_HDR
((
pkt
))->
t˝_£q_be32
), \

45 (
pkt
)->
pf
.
t˝_rx
.
íd_£q
, 
	`RCV_WND_ARGS
(
ts
)

	)

47 
	#ARP_REINFORCE_ON_SYN


	)

49 
h™dÀ_rx_¶ow
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
,

50 
ciù_t˝_rx_pkt
* 
rxp
);

53 
ci_ù_pkt_fmt
* 
	$__ci_√tif_pkt_rx_to_tx
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

54 c⁄° * 
ˇŒî
)

56 if–
pkt
->
ªfcou¡
 == 1 ) {

57 if–~
pkt
->
Êags
 & 
CI_PKT_FLAG_RX
 ) {

58 
	`ci_as£π_equÆ
(
pkt
->
ötf_i
, 
OO_INTF_I_LOOPBACK
);

61 
pkt
->
Êags
 &~
CI_PKT_FLAG_RX
;

62 --
ni
->
°©e
->
n_rx_pkts
;

64 
	`CI_DEBUG
(
pkt
->
pkt_°¨t_off
 = 0xff;

65 
pkt
->
pkt_ëh_∑ylﬂd_off
 = 0xff);

70 
ﬁd_buf£t_id
, 
√w_buf£t_id
;

72 
ﬁd_buf£t_id
 = 
	`PKT_SET_ID
(
pkt
);

73 
√w_buf£t_id
 = 
	`NI_PKT_SET
(
ni
);

74 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pkt
);

75 if(
	`CI_LIKELY
–
ni
->
∑ckës
->
£t
[
ﬁd_buf£t_id
].
n_‰ì
 > 0 ))

76 
pkt
 = 
	`ci_√tif_pkt_gë
(
ni
, 
ﬁd_buf£t_id
);

77 if–
ﬁd_buf£t_id
 !
√w_buf£t_id
 &&

78 
ni
->
∑ckës
->
£t
[
√w_buf£t_id
].
n_‰ì
 > 0 )

79 
pkt
 = 
	`ci_√tif_pkt_gë
(
ni
, 
√w_buf£t_id
);

81 
pkt
 = 
	`ci_√tif_pkt_Æloc_¶ow
(
ni
, 0, 1);

82 if–
pkt
 =
NULL
 ) {

83 
	`LOG_U
(
	`ci_log
("%s: c™'àÆloˇãÑïlyÖackë", 
ˇŒî
));

84 
	`CITP_STATS_NETIF_INC
(
ni
, 
pﬁl_no_pkt
);

85  
NULL
;

88  
pkt
;

89 
	}
}

92 
ci_ölöe
 
	$ci_t˝_rx_upd©e_°©e_⁄_add
(
ci_t˝_°©e
* 
ts
, 
ªcvd
)

95 
	`ci_wmb
();

97 
ts
->
rcv_added
 +
ªcvd
;

101 
ts
->
ack_åiggî
 =Ås->
rcv_dñivîed
 + 
	`ci_t˝_ack_åiggî_dñè
(ts);

103 
ts
->
s
.
b
.
sb_Êags
 |
CI_SB_FLAG_RX_DELIVERED
;

104 
	}
}

107 
	$ci_t˝_rx_ª≠_rxq_bufs
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

112 
ci_ù_pkt_queue
* 
rxq
 = &
ts
->
ªcv1
;

114 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

116  ! 
	`OO_PP_EQ
(
rxq
->
hód
, 
ts
->
ªcv1_exåa˘
) ) {

117 
ci_ù_pkt_fmt
* 
pkt
 = 
	`PKT_CHK
(
√tif
, 
rxq
->
hód
);

118 
oo_pkt_p
 
√xt
 = 
pkt
->next;

120 
	`ci_√tif_pkt_ªÀa£_rx_1ªf
(
√tif
, 
pkt
);

121 --
rxq
->
num
;

122 
rxq
->
hód
 = 
√xt
;

124 
	}
}

126 
	$ci_t˝_rx_ª≠_rxq_œ°_buf
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

128 
ci_ù_pkt_fmt
* 
pkt
 = 
	`PKT_CHK
(
√tif
, 
ts
->
ªcv1_exåa˘
);

130 
	`ci_as£π
(
	`ci_sock_is_locked
(
√tif
, &
ts
->
s
.
b
));

132 if–
	`oo_offbuf_is_em±y
(&
pkt
->
buf
) ) {

133 
ts
->
ªcv1_exåa˘
 =Ås->
ªcv1
.
hód
 = 
pkt
->
√xt
;

134 
	`ci_√tif_pkt_ªÀa£_rx_1ªf
(
√tif
, 
pkt
);

135 --
ts
->
ªcv1
.
num
;

137 
	}
}

141 
	$ci_t˝_rx_íqueue_∑ckë
(
ci_√tif
 *
√tif
, 
ci_t˝_°©e
 *
ts
,

142 
ci_ù_pkt_fmt
 *
pkt
)

144 
ci_ù_pkt_queue
* 
rxq
 = 
	`TS_QUEUE_RX
(
ts
);

145 
oo_pkt_p
 
¥evhód
 = 
rxq
->
hód
;

146 
byãs
;

148 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

149 
	`ci_as£π_equÆ
(
	`SEQ_SUB
(
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
	`t˝_rcv_nxt
(
ts
)) -

150 ((
	`PKT_TCP_HDR
(
pkt
)->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
) ? 1 : 0),

151 
	`oo_offbuf_À·
(&
pkt
->
buf
));

153 
	`t˝_rcv_nxt
(
ts
Ë
pkt
->
pf
.
t˝_rx
.
íd_£q
;

155 
byãs
 = 
	`oo_offbuf_À·
(&
pkt
->
buf
);

156 
	`ci_ù_queue_íqueue
(
√tif
, 
rxq
, 
pkt
);

158 if–
rxq
 =&
ts
->
ªcv1
 ) {

159 if–
	`OO_PP_IS_NULL
(
¥evhód
) ) {

160 
	`ci_as£π
(
	`OO_PP_IS_NULL
(
ts
->
ªcv1_exåa˘
));

161 
ts
->
ªcv1_exåa˘
 = 
rxq
->
hód
;

163 
	`ci_t˝_rx_ª≠_rxq_bufs
(
√tif
, 
ts
);

166 
	`ci_t˝_rx_upd©e_°©e_⁄_add
(
ts
, 
byãs
);

167 
	}
}

170 #ifde‡
NDEBUG


171 
	#DO_SLOW_CHAIN_LENGTH_CHECK
 0

	)

173 
	#DO_SLOW_CHAIN_LENGTH_CHECK
 1

	)

180 
	$ci_t˝_rx_íqueue_chaö
(
ci_√tif
 *
√tif
, 
ci_t˝_°©e
 *
ts
,

181 
ci_ù_pkt_queue
 *
‰om
,

182 
ci_ù_pkt_fmt
 *
œ°
, 
num
)

193 
ci_ù_pkt_queue
 *
rxq
 = 
	`TS_QUEUE_RX
(
ts
);

194 
oo_pkt_p
 
¥evhód
 = 
rxq
->
hód
;

195 
byãs
;

196 #i‡
DO_SLOW_CHAIN_LENGTH_CHECK


197 
cou¡
 = 0;

200 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

202 
	`ci_as£π
(
‰om
);

203 
	`ci_as£π
(
	`OO_PP_NOT_NULL
(
‰om
->
hód
));

204 
	`ci_as£π
(
œ°
);

206 i‡(
	`ci_ù_queue_is_em±y
(
‰om
))

209 #i‡
DO_SLOW_CHAIN_LENGTH_CHECK


211 
ci_ù_pkt_fmt
 *
pkt
;

212 
pkt
 = 
	`PKT_CHK
(
√tif
, 
‰om
->
hód
);

214 
pkt
) {

215 
cou¡
 +
	`oo_offbuf_À·
(&
pkt
->
buf
);

216 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) )

218 if–
pkt
 =
œ°
 )

220 
pkt
 = 
	`PKT_CHK
(
√tif
,Ökt->
√xt
);

225 
byãs
 = 
œ°
->
pf
.
t˝_rx
.
íd_£q
 - 
	`t˝_rcv_nxt
(
ts
);

226 if–
	`PKT_TCP_HDR
(
œ°
)->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
 )

227 --
byãs
;

229 #i‡
DO_SLOW_CHAIN_LENGTH_CHECK


230 
	`ci_as£π_equÆ
(
byãs
, 
cou¡
);

233 
	`t˝_rcv_nxt
(
ts
Ë
œ°
->
pf
.
t˝_rx
.
íd_£q
;

235 
	`ci_ù_queue_move
(
√tif
, 
‰om
, 
rxq
, 
œ°
, 
num
);

237 if–
rxq
 =&
ts
->
ªcv1
 ) {

238 if–
	`OO_PP_IS_NULL
(
¥evhód
) ) {

239 
	`ci_as£π
(
	`OO_PP_IS_NULL
(
ts
->
ªcv1_exåa˘
));

240 
ts
->
ªcv1_exåa˘
 = 
rxq
->
hód
;

242 
	`ci_t˝_rx_ª≠_rxq_bufs
(
√tif
, 
ts
);

245 
	`ci_t˝_rx_upd©e_°©e_⁄_add
(
ts
, 
byãs
);

246 
	}
}

249 #ifde‡
__löux__


251 #ifde‡
__ci_drivî__


252 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,27)

254 
	$ci_kûl_¥oc
(
pid_t
 
pid
, 
sig
, 
¥iv
)

256 
ªt
;

258 
	`rcu_ªad_lock
();

259 
ªt
 = 
	`kûl_pid
(
	`föd_vpid
(
pid
), 
sig
, 
¥iv
);

260 
	`rcu_ªad_u∆ock
();

261  
ªt
;

262 
	}
}

263 
	#kûl_¥oc
 
ci_kûl_¥oc


	)

269 
	$ci_t˝_£nd_sig_urg
(
ci_t˝_°©e
 *
ts
)

271 
rc
;

273 i‡(!
ts
->
s
.
b
.
sigown
)

276 
	`LOG_URG
(
	`ci_log
("%s: sídög SIGURGÅÿpid %d", 
__FUNCTION__
,
ts
->
s
.
b
.
sigown
));

278 #ifde‡
__ci_drivî__


279 
rc
 = 
	`kûl_¥oc
(
ts
->
s
.
b
.
sigown
, 
SIGURG
, 1);

281 
rc
 = 
	`kûl
(
ts
->
s
.
b
.
sigown
, 
SIGURG
);

284 i‡(
rc
)

285 
	`LOG_U
(
	`ci_log
("%s: failedÅo send SIGURGÅoápp,Öid=%d,Ås=%p(%d)",

286 
__FUNCTION__
, 
ts
->
s
.
b
.
sigown
,Ås, 
	`S_FMT
(ts)));

287 
	}
}

292 #ifde‡
__sun__


293 
	$ci_t˝_£nd_sig_urg
(
ci_t˝_°©e
 *
ts
)

295 i‡(!
ts
->
s
.
b
.
sigown
)

298 
	`LOG_URG
(
	`ci_log
("%s: sídög SIGURGÅÿpid %d", 
__FUNCTION__
,
ts
->
s
.
b
.
sigown
));

300 #ifde‡
__ci_drivî__


302 
¥oc_t
 *
p
;

304 
	`muãx_íãr
(&
pidlock
);

305 
p
 = 
	`¥föd_z⁄e
(
ts
->
s
.
b
.
sigown
, 
ALL_ZONES
);

307 i‡(
p
 =
NULL
) {

308 
	`LOG_U
(
	`ci_log
("%s: failedÅo send SIGURGÅoÖid=%d (lookup failed)",

309 
__FUNCTION__
, 
ts
->
s
.
b
.
sigown
));

310 
d⁄e
;

313 i‡(
p
->
p_°©
 =
SIDL
) {

314 
	`LOG_U
(
	`ci_log
("%s: failedÅo send SIGURGÅoÖid=%d (pid state)",

315 
__FUNCTION__
, 
ts
->
s
.
b
.
sigown
));

316 
d⁄e
;

319 
	`muãx_íãr
(&
p
->
p_lock
);

320 
	`sigt›roc
(
p
, 
NULL
, 
SIGURG
);

321 
	`muãx_exô
(&
p
->
p_lock
);

323 
d⁄e
:

324 
	`muãx_exô
(&
pidlock
);

328 
rc
;

330 
rc
 = 
	`kûl
(
ts
->
s
.
b
.
sigown
, 
SIGURG
);

332 i‡(
rc
)

333 
	`LOG_U
(
	`ci_log
("%s: failedÅo send SIGURGÅoápp,Öid=%d,Ås=%p(%d)",

334 
__FUNCTION__
, 
ts
->
s
.
b
.
sigown
,Ås, 
	`S_FMT
(ts)));

337 
	}
}

342 
	$ci_t˝_urg_pkt_¥o˚ss
(
ci_t˝_°©e
 *
ts
, 
ci_√tif
 *
√tif
,

343 
ciù_t˝_rx_pkt
 *
rxp
)

345 
ci_ù_pkt_fmt
 *
pkt
 = 
rxp
->pkt;

346 
ci_t˝_hdr
 *
t˝
 = 
rxp
->tcp;

347 #i‚de‡
_WIN32


349 
urg_±r_adj
 = 
	`NI_OPTS
(
√tif
).
urg_rfc
;

350 
urg_±r_off£t
 = 
	`CI_BSWAP_BE16
(
t˝
->
t˝_urg_±r_be16
Ë+ 
urg_±r_adj
;

352 
urg_±r_off£t
 = 
	`CI_BSWAP_BE16
(
t˝
->
t˝_urg_±r_be16
);

355 
ci_uöt32
 
rcv_up
 = 
rxp
->
£q
 + 
urg_±r_off£t
 - 1;

356 
œ°£q
 = 
	`SEQ_SUB
(
pkt
->
pf
.
t˝_rx
.
íd_£q
,

357 (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
) ? 2 : 1);

359 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

361 if–
	`SEQ_LT
(
rcv_up
, 
	`t˝_rcv_nxt
(
ts
)) ) {

363 
	`LOG_U
(
	`log
(
LPF
 "rcv_up(%08xË<rcv_nxt(%08x)", 
rcv_up
, 
	`t˝_rcv_nxt
(
ts
)));

366 if–
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_PTR_VALID
 ) {

368 if–
	`SEQ_LT
(
rcv_up
, 
	`t˝_rcv_up
(
ts
)) ) {

369 
	`LOG_U
(
	`log
(
LNTS_FMT
 "URGÖtr gone backÑcv_up(%08x) <Åcp_rcv_up(%08x)",

370 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
), 
rcv_up
, 
	`t˝_rcv_up
(ts)));

379 if–!(
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_COMING
) ) {

380 #i‚de‡
_WIN32


381 
	`t˝_rcv_up
(
ts
Ë
rcv_up
;

382 
	`ci_t˝_£nd_sig_urg
(
ts
);

384 
	`t˝_urg_d©a
(
ts
Ë|
CI_TCP_URG_COMING
 | 
CI_TCP_URG_PTR_VALID
;

387 if–
	`SEQ_LE
(
rcv_up
, 
œ°£q
) ) {

389 
ci_o˘ë
* 
∑ylﬂd
 = (ci_o˘ë*Ë
	`CI_TCP_PAYLOAD
(
t˝
);

391 #ifde‡
_WIN32


392 i‡(
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_IS_HERE
)

409 
	`LOG_URG
(
	`log
(
LNTS_FMT
 "AÃódyá¿OOBB", 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
)));

410 i‡(
	`t˝_urg_d©a
(
ts
Ë& 
CI_TCP_URG_RD_PAST
) {

412 
	`LOG_URG
(
	`log
(
LNTS_FMT
 "AÃódyÑódÖa°", 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
)));

413 
	`t˝_urg_d©a
(
ts
Ë|
CI_TCP_URG_IN_RECV2
;

414 
no_œtch
;

419 
	`t˝_urg_d©a
(
ts
Ë&=~ 
CI_TCP_URG_DATA_MASK
;

420 
	`t˝_urg_d©a
(
ts
Ë|
CI_TCP_URG_IS_HERE
 | 
∑ylﬂd
[
urg_±r_off£t
 - 1];

422 
no_œtch
:

423 
	`t˝_urg_d©a
(
ts
Ë&=~ 
CI_TCP_URG_COMING
;

424 
	`t˝_rcv_up
(
ts
Ë
rcv_up
;

429 
	`t˝_urg_d©a
(
ts
Ë&=~ (
CI_TCP_URG_DATA_MASK
 | 
CI_TCP_URG_COMING
);

430 
	`t˝_urg_d©a
(
ts
Ë|
CI_TCP_URG_IS_HERE
 | 
∑ylﬂd
[
urg_±r_off£t
 - 1];

438 
	`TS_QUEUE_RX_SET
(
ts
, 
ªcv2
);

443 if–
	`ci_t˝_ˇn_u£_Á°_∑th
(
ts
) )

444 
	`ci_t˝_Á°_∑th_íabÀ
(
ts
);

446 
	`LOG_URG
(
	`log
(
LNTS_FMT
 "URG data=0x%02XÅcp_rcv_up=%08x off=%d",

447 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
), 
	`t˝_urg_d©a
—s), 
	`t˝_rcv_up
(ts),

448 
urg_±r_off£t
));

455 
	`t˝_urg_d©a
(
ts
Ë&=~ (
CI_TCP_URG_DATA_MASK
 | 
CI_TCP_URG_IS_HERE
);

459 
	`ci_t˝_Á°_∑th_dißbÀ
(
ts
);

461 
	`LOG_URG
(
	`log
(
LNTS_FMT
 "URG (future)Åcp_rcv_up=%08x off=%u",

462 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
), 
	`t˝_rcv_up
—s), 
urg_±r_off£t
));

465 
	}
}

477 
ci_ölöe
 
	$ci_t˝_£q_¥obably_u«c˚±abÀ
(
rcv_nxt
,

478 
rcv_rhs
,

479 
t˝_£q
,

480 
íd_£q
)

482 if(
	`SEQ_LE
(
íd_£q
, 
rcv_nxt
Ë| SEQ_LE(
rcv_rhs
, 
t˝_£q
)){

485 if–
	`SEQ_EQ
(
íd_£q
, 
t˝_£q
Ë&& SEQ_EQ(
rcv_nxt
,Åcp_seq)) {

492 
	}
}

542 
ci_ölöe
 
	$ci_t˝_£q_deföôñy_u«c˚±abÀ
(
rcv_nxt
,

543 
rcv_rhs
,

544 
t˝_£q
,

545 
íd_£q
)

547 
	`ci_as£π
(
	`ci_t˝_£q_¥obably_u«c˚±abÀ
(
rcv_nxt
, 
rcv_rhs
,

548 
t˝_£q
, 
íd_£q
));

550 if(
	`SEQ_EQ
(
íd_£q
, 
t˝_£q
)

551 && 
rcv_nxt
 !
rcv_rhs


552 && 
	`SEQ_EQ
(
t˝_£q
, 
rcv_rhs
))

555 
	}
}

558 
	$h™dÀ_u«c˚±abÀ_ack
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

559 
ciù_t˝_rx_pkt
* 
rxp
)

561 
ci_ù_pkt_fmt
 *
pkt
;

565 
	`CI_IP_SOCK_STATS_INC_ACKERR
–
ts
 );

566 
	`LOG_U
(
	`log
(
LPF
 "%d ACK UNACCEPTABLE %†¢d_nxt=%08xáck=%08x", 
	`S_FMT
(
ts
),

567 
	`°©e_°r
(
ts
), 
	`t˝_¢d_nxt
—s), 
rxp
->
ack
));

569 
	`CITP_STATS_NETIF_INC
(
√tif
, 
u«c˚±abÀ_acks
);

571 if–
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_SYNCHRONISED
 ) {

572 
pkt
 = 
	`ci_√tif_pkt_rx_to_tx
(
√tif
, 
rxp
->pkt);

573 if–
pkt
 !
NULL
 )

574 
	`ci_t˝_£nd_ack
(
√tif
, 
ts
, 
pkt
, 
CI_FALSE
);

577 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_£¡_u«c˚±abÀ_ack
);

578 
	`ci_t˝_ª∂y_wôh_r°
(
√tif
, 
rxp
);

581 
	`CI_TCP_STATS_INC_OUT_SEGS
–
√tif
 );

582 
	}
}

589 
ci_ölöe
 
	$ci_t˝_tso_upd©e
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

590 
ci_uöt32
 
beg_£q
, ci_uöt32 
íd_£q
,

591 
ci_uöt32
 
tsvÆ
)

593 if–
	`SEQ_LE
(
beg_£q
, 
ts
->
t¶a°ack
) &&

594 #i‡
CI_CFG_TCP_RFC1323_STRICT_TSO


595 
	`SEQ_LT
(
ts
->
t¶a°ack
, 
íd_£q
)

597 
	`SEQ_LE
(
ts
->
t¶a°ack
, 
íd_£q
)

600 
ts
->
t§e˚¡
 = 
tsvÆ
;

601 
ts
->
t•aws
 = 
	`ci_t˝_time_now
(
ni
);

602 #i‚de‡
NDEBUG


603 
ts
->
t¶a°£q
 = 
beg_£q
;

606 
	}
}

610 
ci_ölöe
 
	$ci_t˝_∑ws_check
(
ci_√tif
* 
√tif
, 
ci_uöt32
 
tsvÆ
,

611 
t•aws
, 
t§e˚¡
)

613 if–
	`CI_LIKELY
(
	`TIME_LE
(
t§e˚¡
, 
tsvÆ
)) )

621 if(
	`ci_t˝_time_now
(
√tif
Ë- 
t•aws
 > 
	`NI_CONF
“ëif).
tc⁄°_∑ws_idÀ
){

622 
	`LOG_TC
(
	`log
(
LPF
 "PAWs idleÅimeoutÇow=0x%xÖaws_idle=0x%xÅspaws=0x%x",

623 
	`ci_t˝_time_now
(
√tif
),

624 
	`NI_CONF
(
√tif
).
tc⁄°_∑ws_idÀ
, 
t•aws
));

629 
	`CI_TCP_EXT_STATS_INC_PAWS_ESTAB_REJECTED
–
√tif
 );

631  
CI_TCP_PAWS_FAILED
;

632 
	}
}

638 
ci_ölöe
 
	$ci_t˝_›ícwnd
(
ci_√tif
 *
ni
, 
ci_t˝_°©e
* 
ts
)

640 #i‡
CI_CFG_CONG_AVOID_NOTIFIED


643 if–
ts
->
c⁄g°©e
 =
CI_TCP_CONG_NOTIFIED
 ){

644 if(
	`SEQ_LE
(
	`t˝_¢d_u«
(
ts
),Ås->
c⁄gªcovî
))

645 
ts
->
c⁄g°©e
 = 
CI_TCP_CONG_OPEN
;

649 if–
ts
->
cwnd
 >ts->
s°hªsh
 ) {

651 #i‡
CI_CFG_CONG_AVOID_SCALE_BACK


652 
tmp
 = 
	`NI_OPTS
(
ni
).
c⁄g_avoid_sˇÀ_back
 >> 
	`t˝_§â
(
ts
);

653 
cwnd_sˇÀd
 = 
	`CI_MAX
(1, 
tmp
Ë* 
ts
->
cwnd
;

655 
cwnd_sˇÀd
 = 
ts
->
cwnd
;

662 
	`LOG_TV
(
	`log
(
LPF
 "%d OPENCWND: CAÉff_mss=%u bytes_acked=%u cwnd=%u",

663 
	`S_FMT
(
ts
), 
	`t˝_eff_mss
—s),Ås->
byãs_acked
,Ås->
cwnd
));

664 if–
ts
->
byãs_acked
 >
cwnd_sˇÀd
 ) {

665 
ts
->
byãs_acked
 -
cwnd_sˇÀd
;

666 
ts
->
cwnd
 +
	`t˝_eff_mss
(ts);

671 
cwnd_öc
;

672 
	`LOG_TV
(
	`log
(
LPF
 "%d OPENCWND: SSÉff_mss=%u bytes_acked=%u cwnd=%u",

673 
	`S_FMT
(
ts
), 
	`t˝_eff_mss
—s),Ås->
byãs_acked
,Ås->
cwnd
));

674 if–! 
CI_CFG_CONG_AVOID_CONSERVATIVE_SLOW_START
 && 
ts
->
°©s
.
πos
 == 0 )

678 
cwnd_öc
 = 
	`t˝_eff_mss
(
ts
Ë* 
CI_CFG_CONG_AVOID_RFC3465_L_VALUE
;

680 
cwnd_öc
 = 
	`t˝_eff_mss
(
ts
);

681 
cwnd_öc
 = 
	`CI_MIN
(cwnd_öc, 
ts
->
byãs_acked
);

682 
ts
->
cwnd
 +
cwnd_öc
;

683 
ts
->
byãs_acked
 = 0;

686 
	`LOG_TV
(
	`log
(
LPF
 "%d OPENCWND:Énd cwnd=%u", 
	`S_FMT
(
ts
),Ås->
cwnd
));

688 
	`ci_as£π_À
(
	`t˝_eff_mss
(
ts
), 
CI_MAX_ETH_FRAME_LEN
);

689 
	`ci_as£π_ge
(
ts
->
cwnd
, 
	`t˝_eff_mss
(ts));

690 
	`ci_as£π_ge
(
ts
->
s°hªsh
, (
ci_uöt32
)(
	`t˝_eff_mss
(ts) << 1));

691 
	}
}

694 
	$ci_t˝_íãr_Á°_ªcovîy
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

696 
	`ci_as£π
(
ts
->
dup_acks
 >ts->
dup_thªsh
);

698 if–
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
) ) {

699 
	`LOG_U
(
	`log
(
LNT_FMT
 "%d DUPACKs, butÇo dataÅoÑetransmit!",

700 
	`LNT_PRI_ARGS
(
ni
, 
ts
),Ås->
dup_acks
));

704 ++
ts
->
°©s
.
Á°_ªcovîs
;

706 
ts
->
s°hªsh
 = 
	`ci_t˝_losswnd
(ts);

707 
ts
->
cwnd
 =Ås->
s°hªsh
 + (
ci_uöt32
Ëts->
dup_thªsh
 * 
	`t˝_eff_mss
(ts);

708 
ts
->
cwnd
 = 
	`CI_MAX
—s->cwnd, 
	`NI_OPTS
(
ni
).
loss_mö_cwnd
);

710 
	`ci_as£π
(
ts
->
cwnd
 >
	`t˝_eff_mss
(ts));

712 
ts
->
c⁄gªcovî
 = 
	`t˝_¢d_nxt
(ts);

713 
	`ci_t˝_ªå™s_öô_±rs
(
ni
, 
ts
, &ts->
c⁄gªcovî
);

714 if(!
	`SEQ_LE
(
ts
->
c⁄gªcovî
, 
	`t˝_¢d_nxt
(ts)))

715 
	`LOG_U
(
	`log
("AboutÅoássert on congrecover: %u, %u",

716 
ts
->
c⁄gªcovî
, 
	`t˝_¢d_nxt
(ts)));

717 
	`ci_as£π
(
	`SEQ_LE
(
ts
->
c⁄gªcovî
, 
	`t˝_¢d_nxt
(ts)));

719 
	`LOG_TL
(
	`log
(
LNT_FMT
 "%†=> Fa°Recovîy dups=%d "
TCP_SND_FMT
,

720 
	`LNT_PRI_ARGS
(
ni
, 
ts
), 
	`c⁄g°©e_°r
—s),Ås->
dup_acks
,

721 
	`TCP_SND_PRI_ARG
(
ts
));

722 
	`log
(
LNT_FMT
 " "
TCP_CONG_FMT
,

723 
	`LNT_PRI_ARGS
(
ni
, 
ts
), 
	`TCP_CONG_PRI_ARG
(ts)));

725 
ts
->
c⁄g°©e
 = 
CI_TCP_CONG_FAST_RECOV
;

727 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
 )

728 
	`ci_t˝_ªå™s_ªcovî
(
ni
, 
ts
, 1);

730 
	`ci_t˝_ªå™s_⁄e
(
ts
, 
ni
, 
	`PKT_CHK
“i,Ås->
ªå™s
.
hód
));

733 
	`ci_t˝_˛ór_πt_timög
(
ts
);

734 
	`ci_t˝_πo_ª°¨t
(
ni
, 
ts
);

736 
	`CI_IP_SOCK_STATS_INC_DUPACKFREC
–
ts
 );

737 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
 )

738 
	`CI_TCP_EXT_STATS_INC_TCP_SACK_RECOVERY
–
ni
 );

740 
	`CI_TCP_EXT_STATS_INC_TCP_RENO_RECOVERY
–
ni
 );

741 
	}
}

747 
	$ci_t˝_rx_du∑ck
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
,

748 
ciù_t˝_rx_pkt
* 
rxp
)

750 
	`ci_as£π
(
rxp
->
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 == 0);

751 
	`ci_as£π
(
	`SEQ_EQ
(
	`t˝_¢d_u«
(
ts
), 
rxp
->
ack
));

753 
ts
->
dup_acks
++;

754 
	`LOG_TL
(
	`log
(
LNT_FMT
 "DUPACK dups=%d "
TCP_SND_FMT
,

755 
	`LNT_PRI_ARGS
(
√tif
, 
ts
),Ås->
dup_acks
, 
	`TCP_SND_PRI_ARG
(ts));

756 
	`log
(
LNT_FMT
 " %s cwnd=%i crecover=%08xÇow-rto_to=%uÑto=%u",

757 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
	`c⁄g°©e_°r
—s),Ås->
cwnd
,

758 
ts
->
c⁄gªcovî
, 
	`ci_t˝_time_now
(
√tif
Ë-Ås->
πo_tid
.
time
,

759 
ts
->
πo
));

760 
	`CI_IP_SOCK_STATS_INC_DUPACK
–
ts
 );

762 if–(
ts
->
c⁄g°©e
 =
CI_TCP_CONG_OPEN
)

763 | (
ts
->
c⁄g°©e
 =
CI_TCP_CONG_NOTIFIED
) ) {

765 if–
ts
->
dup_acks
 >ts->
dup_thªsh
 )

766 
	`ci_t˝_íãr_Á°_ªcovîy
(
√tif
, 
ts
);

768 if–
ts
->
c⁄g°©e
 =
CI_TCP_CONG_FAST_RECOV
 &&

769 !(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
) ) {

776 
ts
->
cwnd
 +
	`t˝_eff_mss
(ts);

777 
	`CI_IP_SOCK_STATS_INC_DUPACKCONGFREC
–
ts
 );

779 if–
ts
->
c⁄g°©e
 !
CI_TCP_CONG_COOLING
 )

780 
	`ci_t˝_ªå™s_ªcovî
(
√tif
, 
ts
, 0);

782 
	`ci_as£π
(
ts
->
cwnd
 >
	`t˝_eff_mss
(ts));

783 
	}
}

790 
	$ci_t˝_åy_cwndªcovî
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
,

791 
ci_ù_pkt_fmt
* 
pkt
)

793 
ci_ù_pkt_queue
* 
πq
 = &
ts
->
ªå™s
;

795 
	`ci_as£π
(
ts
->
c⁄g°©e
 !
CI_TCP_CONG_OPEN


796 && 
ts
->
c⁄g°©e
 !
CI_TCP_CONG_NOTIFIED
);

798 
	`LOG_TL
(
	`log
(
LNT_FMT
 "%s snd_una=%08x cwnd=%d ssthresh=%d crecover=%08x",

799 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
	`c⁄g°©e_°r
(ts),

800 
	`t˝_¢d_u«
(
ts
),Ås->
cwnd
,Ås->
s°hªsh
,Ås->
c⁄gªcovî
));

802 if–(
ts
->
c⁄g°©e
 & 
CI_TCP_CONG_FAST_RECOV
) &&

803 !(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
) ) {

804 if–
	`SEQ_LT
(
	`t˝_¢d_u«
(
ts
),Ås->
c⁄gªcovî
) )

808 
	`ci_t˝_ªå™s_⁄e
(
ts
, 
√tif
, 
	`PKT_CHK
“ëif, 
πq
->
hód
));

810 
	`ci_t˝_ªcovîed
(
√tif
, 
ts
);

813 if–
ts
->
c⁄g°©e
 =
CI_TCP_CONG_RTO
 ) {

817 
ts
->
πo
 = 
	`t˝_§â
—sË+Ås->
sv
;

818 
	`ci_t˝_πo_bound
(
√tif
, 
ts
);

819 if–! 
	`ci_ù_queue_is_em±y
(
πq
) )

820 
	`ci_t˝_πo_ª°¨t
(
√tif
, 
ts
);

822 
ts
->
c⁄g°©e
 = 
CI_TCP_CONG_RTO_RECOV
;

825 if–
ts
->
c⁄g°©e
 =
CI_TCP_CONG_COOLING
 ) {

826 if–
	`SEQ_LE
(
ts
->
c⁄gªcovî
, 
	`t˝_¢d_u«
(ts)) )

827 
	`ci_t˝_ªcovîed
(
√tif
, 
ts
);

832 
Áck
;

833 
ªå™s_d©a
;

834 
	`ci_t˝_gë_Áck
(
√tif
, 
ts
, &
Áck
, &
ªå™s_d©a
);

835 
ts
->
cwnd_exåa
 = 
	`SEQ_SUB
(
Áck
, 
	`t˝_¢d_u«
—s)Ë- 
ªå™s_d©a
;

836 
ts
->
cwnd_exåa
 = 
	`CI_MAX
(ts->cwnd_extra, 0);

841 
	`ci_t˝_ªå™s_ªcovî
(
√tif
, 
ts
, 0);

842 
	}
}

845 
	$ci_t˝_rx_ßck_¥o˚ss_block
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

846 
°¨t
, 
íd
)

848 
ci_ù_pkt_queue
* 
πq
 = &
ts
->
ªå™s
;

849 
ci_ù_pkt_fmt
* 
°¨t_block
;

850 
ci_ù_pkt_fmt
* 
°¨t_block_íd
;

851 
ci_ù_pkt_fmt
* 
°¨t_pkt
;

852 
ci_ù_pkt_fmt
* 
°¨t_pkt_¥ev
;

853 
ci_ù_pkt_fmt
* 
íd_block
;

854 
ci_ù_pkt_fmt
* 
íd_pkt
;

855 
ci_ù_pkt_fmt
* 
pkt
;

856 
oo_pkt_p
 
√xt_µ
;

877 
√xt_µ
 = 
πq
->
hód
;

879 
°¨t_block
 = 
	`PKT_CHK
(
ni
, 
√xt_µ
);

880 if–
	`OO_PP_IS_NULL
(
°¨t_block
->
pf
.
t˝_tx
.
block_íd
) ) {

882 
	`ci_as£π
(!(
°¨t_block
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
));

883 
°¨t_block_íd
 = 
	`PKT_CHK
(
ni
, 
πq
->
èû
);

884 
	`ci_as£π
(
	`SEQ_LE
(
íd
, 
°¨t_block_íd
->
pf
.
t˝_tx
.
íd_£q
));

887 
°¨t_block_íd
 = 
	`PKT_CHK
(
ni
, 
°¨t_block
->
pf
.
t˝_tx
.
block_íd
);

888 if–
	`SEQ_LE
(
°¨t
, 
°¨t_block_íd
->
pf
.
t˝_tx
.
°¨t_£q
) ) ;

889 if–(
°¨t_block
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
) &&

890 
	`SEQ_LE
(
°¨t
, 
°¨t_block_íd
->
pf
.
t˝_tx
.
íd_£q
) ) {

892 
	`LOG_TV
(
	`log
(
LNT_FMT
 "SACK %08x-%08xÖartial overlap %08x-%08x",

893 
	`LNT_PRI_ARGS
(
ni
, 
ts
), 
°¨t
, 
íd
,

894 
°¨t_block
->
pf
.
t˝_tx
.
°¨t_£q
,

895 
°¨t_block_íd
->
pf
.
t˝_tx
.
íd_£q
));

896 
°¨t_pkt
 = 
°¨t_block_íd
;

897 
°¨t_pkt_¥ev
 = 0;

898 
gŸ_°¨t_pkt
;

900 
√xt_µ
 = 
°¨t_block_íd
->
√xt
;

901 if–
	`OO_PP_IS_NULL
(
√xt_µ
) ) ;

905 
°¨t_pkt_¥ev
 = 0;

906 
°¨t_pkt
 = 
°¨t_block
;

907  
	`SEQ_LT
(
°¨t_pkt
->
pf
.
t˝_tx
.
°¨t_£q
, 
°¨t
) ) {

908 if–
	`OO_PP_IS_NULL
(
°¨t_pkt
->
√xt
) ) {

909 
	`LOG_TV
(
	`log
(
LNT_FMT
 "SACK %08x-%08xÖartial ofÜast %08x-%08x",

910 
	`LNT_PRI_ARGS
(
ni
, 
ts
), 
°¨t
, 
íd
, 
°¨t_pkt
->
pf
.
t˝_tx
.
°¨t_£q
,

911 
°¨t_pkt
->
pf
.
t˝_tx
.
íd_£q
));

914 
°¨t_pkt_¥ev
 = 
°¨t_pkt
;

915 
°¨t_pkt
 = 
	`PKT_CHK
(
ni
, sèπ_pkt->
√xt
);

917 
gŸ_°¨t_pkt
:

920 
íd_block
 = 
°¨t_block
;

921 
pkt
 = 
°¨t_block_íd
;

923 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) ) ;

924 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

925 if–
	`SEQ_LT
(
íd
, 
pkt
->
pf
.
t˝_tx
.
íd_£q
) ) ;

926 
íd_block
 = 
pkt
;

927 if–
	`OO_PP_IS_NULL
(
íd_block
->
pf
.
t˝_tx
.
block_íd
) ) ;

928 
pkt
 = 
	`PKT_CHK
(
ni
, 
íd_block
->
pf
.
t˝_tx
.
block_íd
);

932 if–(
°¨t_block
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
) &&

933 
°¨t_block
 =
íd_block
 ) {

934 
	`LOG_TV
(
	`log
(
LNT_FMT
 "SACK %08x-%08x duplicate or subset of %08x-%08x",

935 
	`LNT_PRI_ARGS
(
ni
, 
ts
), 
°¨t
, 
íd
,

936 
°¨t_block
->
pf
.
t˝_tx
.
°¨t_£q
,

937 
°¨t_block_íd
->
pf
.
t˝_tx
.
íd_£q
));

945 if–
°¨t_block
 =
íd_block
 ) 
pkt
 = 
°¨t_pkt
;

946 
pkt
 = 
íd_block
;

947 
íd_pkt
 = 0;

949 if–
	`SEQ_LT
(
íd
, 
pkt
->
pf
.
t˝_tx
.
íd_£q
) ) ;

950 
íd_pkt
 = 
pkt
;

952 if–
	`SEQ_EQ
(
íd
, 
pkt
->
pf
.
t˝_tx
.
íd_£q
) ) ;

953 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) ) ;

954 
pkt
 = 
	`PKT_CHK
(
ni
, 
íd_pkt
->
√xt
);

956 if–! 
íd_pkt
 ) {

960 
	`LOG_TV
(
	`log
(
LNT_FMT
 "SACK %08x-%08x withinÖkt %08x-%08x",

961 
	`LNT_PRI_ARGS
(
ni
, 
ts
), 
°¨t
, 
íd
,

962 
°¨t_pkt
->
pf
.
t˝_tx
.
°¨t_£q
, sèπ_pkt->pf.t˝_tx.
íd_£q
));

970 
	`ci_as£π
(
	`SEQ_LE
(
°¨t
, 
°¨t_pkt
->
pf
.
t˝_tx
.
°¨t_£q
) ||

971 ((
°¨t_block
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
) &&

972 
	`SEQ_LT
(
°¨t_block
->
pf
.
t˝_tx
.
°¨t_£q
, 
°¨t
)));

973 
	`ci_as£π
(
	`SEQ_LE
(
íd_pkt
->
pf
.
t˝_tx
.
íd_£q
, 
íd
));

975 if–!(
°¨t_block
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
Ë&& 
°¨t_pkt_¥ev
 ) {

983 
	`ci_as£π
(
°¨t_block
 !
°¨t_pkt
);

985 
°¨t_block
->
pf
.
t˝_tx
.
block_íd
 = 
	`OO_PKT_P
(
°¨t_pkt_¥ev
);

986 if–
	`OO_PP_EQ
(
°¨t_block
->
√xt
, 
	`OO_PKT_P
(
°¨t_pkt
)) ) ;

987 
°¨t_block
 = 
	`PKT_CHK
(
ni
, sèπ_block->
√xt
);

995 
√xt_µ
 = 
	`OO_PKT_P
(
íd_pkt
);

996 if–
	`OO_PP_NOT_NULL
(
íd_pkt
->
√xt
) ) {

997 
pkt
 = 
	`PKT_CHK
(
ni
, 
íd_pkt
->
√xt
);

998 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
 ) {

999 
	`LOG_TV
(
	`log
(
LNT_FMT
 "SACK %08x-%08x inconsistent with %08x-%08x",

1000 
	`LNT_PRI_ARGS
(
ni
, 
ts
), 
°¨t
, 
íd
,

1001 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
,

1002 
	`PKT_CHK
(
ni
, 
pkt
->
pf
.
t˝_tx
.
block_íd
)->pf.t˝_tx.
íd_£q
));

1003 
√xt_µ
 = 
pkt
->
pf
.
t˝_tx
.
block_íd
;

1008 if–
°¨t_block
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
 )

1009 
pkt
 = 
°¨t_block
;

1011 
pkt
 = 
°¨t_pkt
;

1012  
pkt
 !
íd_pkt
 ) {

1013 
pkt
->
pf
.
t˝_tx
.
block_íd
 = 
√xt_µ
;

1014 
pkt
->
Êags
 |
CI_PKT_FLAG_RTQ_SACKED
;

1015 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

1017 
pkt
->
pf
.
t˝_tx
.
block_íd
 = 
√xt_µ
;

1018 
pkt
->
Êags
 |
CI_PKT_FLAG_RTQ_SACKED
;

1019 
	}
}

1025 
ci_ölöe
 
	$ci_t˝_rx_dßck_check
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1026 
ciù_t˝_rx_pkt
* 
rxp
)

1028 
°¨t
 = 
rxp
->
ßck
[0];

1029 
íd
 = 
rxp
->
ßck
[1];

1030 
rc
 = 0;

1037 if–
	`SEQ_LE
(
°¨t
, 
rxp
->
ack
) ) {

1038 
	`LOG_TO
(
	`log
(
LNT_FMT
 "DSACK option %08x-%08xáck=%08x una=%08x",

1039 
	`LNT_PRI_ARGS
(
ni
, 
ts
), 
°¨t
, 
íd
, 
rxp
->
ack
, 
	`t˝_¢d_u«
(ts)));

1040 
rxp
->
Êags
 |
CI_TCP_DSACK
;

1041 
rc
 = 1;

1043 if–
rxp
->
ßck_blocks
 > 1 ) {

1045 
°¨t1
 = 
rxp
->
ßck
[2];

1046 
íd1
 = 
rxp
->
ßck
[3];

1047 if–
	`SEQ_LE
(
°¨t1
, 
°¨t
Ë&& SEQ_LE(
íd
, 
íd1
) ) {

1048 
	`LOG_TO
(
	`log
(
LNT_FMT
 "DSACK option %08x-%08x withÇext %08x-%08x",

1049 
	`LNT_PRI_ARGS
(
ni
, 
ts
), 
°¨t
, 
íd
, 
°¨t1
, 
íd1
));

1050 
rxp
->
Êags
 |
CI_TCP_DSACK
;

1051 
rc
 = 1;

1055  
rc
;

1056 
	}
}

1065 
	$ci_t˝_rx_ßck_¥o˚ss
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

1066 
ciù_t˝_rx_pkt
* 
rxp
)

1068 
i
;

1069 
°¨t
;

1070 
íd
;

1071 
ßcked
 = 0;

1073 if–!(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
) ) {

1074 
	`LOG_U
(
	`log
(
LNT_FMT
 "SACKÑeceived butÇotÇegotiated",

1075 
	`LNT_PRI_ARGS
(
√tif
, 
ts
)));

1079 
	`LOG_TO
(
	`log
(
LPF
 "%d: %d SACK blocks", 
	`S_FMT
(
ts
), 
rxp
->
ßck_blocks
));

1081 
	`ci_as£π
(
	`ci_ù_queue_is_vÆid
(
√tif
, &
ts
->
ªå™s
));

1082 
	`ci_as£π
(
rxp
->
Êags
 & 
CI_TCPT_FLAG_SACK
);

1083 
	`ci_as£π
(
	`SEQ_LE
(
	`t˝_¢d_u«
(
ts
), 
rxp
->
ack
));

1086 
	`ci_as£π
(
rxp
->
ßck_blocks
 >= 1);

1092 if–
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
) |

1093 (
rxp
->
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
) )

1097 
i
 = 
	`ci_t˝_rx_dßck_check
(
√tif
, 
ts
, 
rxp
);

1100  ; 
i
 < 
rxp
->
ßck_blocks
; i++ ) {

1102 
°¨t
 = 
rxp
->
ßck
[2 * 
i
];

1103 
íd
 = 
rxp
->
ßck
[2 * 
i
 + 1];

1105 
	`LOG_TO
(
	`log
(
LNT_FMT
 "SACK %d %08x-%08x "
TCP_SND_FMT
,

1106 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
i
, 
°¨t
, 
íd
, 
	`TCP_SND_PRI_ARG
(ts)));

1116 if–! ( 
	`SEQ_LE
(
°¨t
, 
rxp
->
ack
Ë| 
	`SEQ_LT
(
	`t˝_¢d_nxt
(
ts
), 
íd
) |

1117  
	`SEQ_LE
(
íd
, 
°¨t
)) ) {

1118 
	`ci_t˝_rx_ßck_¥o˚ss_block
(
√tif
, 
ts
, 
°¨t
, 
íd
);

1119 
ßcked
 = 1;

1126 
	`LOG_U
(if– 
	`SEQ_LE
(
°¨t
, 
rxp
->
ack
) ||

1127  
	`SEQ_LT
(
	`t˝_¢d_nxt
(
ts
Ë+Ås->
¢d_dñeg©ed
, 
íd
) ||

1128  
	`SEQ_LE
(
íd
, 
°¨t
) )

1129 
	`log
(
LNT_FMT
 "SACK %d %08x-%08x invalid snd=%08x-%08x",

1130 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
i
, 
°¨t
, 
íd
,

1131 
	`t˝_¢d_u«
(
ts
), 
	`t˝_¢d_nxt
(ts)));

1135 if–
ßcked
 != 0 )

1136 
rxp
->
Êags
 |
CI_TCP_SACKED
;

1137 
	}
}

1140 
	$ci_t˝_rx_‰ì_acked_bufs
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

1141 
ciù_t˝_rx_pkt
* 
rxp
)

1143 
ci_√tif_pﬁl_°©e
* 
ps
 = 
rxp
->
pﬁl_°©e
;

1144 
ci_ù_pkt_queue
* 
πq
 = &
ts
->
ªå™s
;

1146 
	`ci_as£π
(
	`ci_ù_queue_is_vÆid
(
√tif
, 
πq
));

1147 
ts
->
ªå™smôs
=0;

1149 if–
	`ci_ù_queue_is_em±y
(
πq
) ) {

1150 
	`ci_as£π
(
ts
->
¢d_dñeg©ed
);

1151 
	`ci_as£π
(
	`SEQ_GE
(
	`t˝_¢d_nxt
(
ts
Ë+Ås->
¢d_dñeg©ed
, 
rxp
->
ack
));

1152 
d⁄e
;

1156 
ci_ù_pkt_fmt
* 
p
 = 
	`PKT_CHK
(
√tif
, 
πq
->
hód
);

1158 if–
	`SEQ_LT
(
rxp
->
ack
, 
p
->
pf
.
t˝_tx
.
íd_£q
) ) {

1160 
	`ci_t˝_πo_ª°¨t
(
√tif
, 
ts
);

1163 
	`LOG_TV
(
	`log
(
LNT_FMT
 "ACKED id=%d seq=%08x-%08x ["
CI_TCP_FLAGS_FMT
"]"

1164 " (%08xË%d", 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
	`OO_PKT_FMT
(
p
),

1165 
p
->
pf
.
t˝_tx
.
°¨t_£q
,Ö->pf.t˝_tx.
íd_£q
,

1166 
	`CI_TCP_HDR_FLAGS_PRI_ARG
(
	`PKT_TCP_HDR
(
p
)), 
rxp
->
ack
, 
πq
->
num
));

1168 
	`ci_ù_queue_dequeue
(
√tif
, 
πq
, 
p
);

1170 
	`ci_as£π
(
p
->
ªfcou¡
 > 0);

1172 if–
p
->
Êags
 & 
CI_PKT_FLAG_TX_TIMESTAMPED
 &&

1173 (
ts
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_STREAM
) ) {

1174 
	`ci_udp_ªcv_q_put
(
√tif
, &
ts
->
time°amp_q
, 
p
);

1177 
ts
->
s
.
b
.
sb_Êags
 |
CI_SB_FLAG_RX_DELIVERED
;

1180 
	`ci_√tif_pkt_ªÀa£_ö_pﬁl
(
√tif
, 
p
, 
ps
);

1183 if–
	`ci_ù_queue_is_em±y
(
πq
) ) {

1185 
	`ci_t˝_πo_˛ór
(
√tif
, 
ts
);

1186 
	`ci_t˝_kÆive_ª°¨t
(
√tif
, 
ts
, 
	`ci_t˝_kÆive_idÀ_gë
(ts));

1194 if–
ts
->
s
.
b
.
sb_Êags
 & 
CI_SB_FLAG_RX_DELIVERED
 ) {

1195 
	`ci_√tif_put_⁄_po°_pﬁl
(
√tif
, &
ts
->
s
.
b
);

1196 
	`ci_t˝_wake
(
√tif
, 
ts
, 
CI_SB_FLAG_WAKE_RX
);

1199 
d⁄e
:

1200 
	`ci_as£π
(!
	`ci_ù_queue_is_em±y
(
πq
Ë|| 
	`SEQ_EQ
(
rxp
->
ack
, 
	`t˝_¢d_nxt
(
ts
)) ||

1201 
ts
->
¢d_dñeg©ed
 != 0);

1202 
	`t˝_¢d_u«
(
ts
Ë
rxp
->
ack
;

1205 if–
	`NI_OPTS
(
√tif
).
t˝_¢dbuf_mode
 >= 1 &&

1206 –
	`ci_t˝_tx_advîti£_•a˚
(
√tif
, 
ts
Ë||Ås->
s
.
tx_î∫o
 ) )

1207 
	`ci_t˝_wake
(
√tif
, 
ts
, 
CI_SB_FLAG_WAKE_TX
);

1208 
	}
}

1217 
ci_ölöe
 
	$ci_t˝_rx_åy_¢d_wnd_öÊ©e
(
ci_t˝_°©e
 *
ts
,

1218 
ciù_t˝_rx_pkt
 *
rxp
)

1220 
ci_ù_pkt_fmt
 *
pkt
 = 
rxp
->pkt;

1235 
	`ci_as£π
(
	`SEQ_LE
(
ts
->
¢d_u«
, 
rxp
->
ack
));

1236 
	`ci_as£π
(
	`SEQ_LE
(
rxp
->
ack
, 
ts
->
¢d_nxt
 +Ås->
¢d_dñeg©ed
));

1242 #i‡
CI_CFG_NOTICE_WINDOW_SHRINKAGE


1243 
	`SEQ_LT
(
ts
->
¢d_u«
, 
rxp
->
ack
) ||

1244 
	`SEQ_LT
(
ts
->
¢d_wl1
, 
rxp
->
£q
) ||

1245 –
	`SEQ_EQ
(
ts
->
¢d_wl1
, 
rxp
->
£q
) &&

1247 
	`SEQ_LT
(
ts
->
¢d_max
, 
rxp
->
ack
 + 
pkt
->
pf
.
t˝_rx
.
wödow
)

1249 #i‡
CI_CFG_NOTICE_WINDOW_SHRINKAGE


1253 
ci_uöt32
 
¥ev_¢d_max
 = 
ts
->
¢d_max
;

1254 
	`ci_t˝_£t_¢d_max
(
ts
, 
rxp
->
£q
,Ñxp->
ack
, 
pkt
->
pf
.
t˝_rx
.
wödow
);

1255 
	`ci_as£π
(
	`SEQ_GE
(
ts
->
¢d_max
,Ås->
¢d_u«
));

1256  
ts
->
¢d_max
 - 
¥ev_¢d_max
;

1260 
	}
}

1268 
	$ci_t˝_rx_h™dÀ_ack
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
,

1269 
ciù_t˝_rx_pkt
* 
rxp
)

1271 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

1272 
¢d_max_dif„ª¡
;

1279 
	`ci_as£π
(
	`SEQ_LE
(
rxp
->
ack
, 
	`t˝_¢d_nxt
(
ts
Ë+Ås->
¢d_dñeg©ed
));

1280 
	`ci_as£π
(
	`SEQ_LE
(
	`t˝_¢d_u«
(
ts
), 
rxp
->
ack
));

1281 
	`ci_as£π
–
	`OO_SP_IS_NULL
(
ts
->
loˇl_≥î
) );

1283 i‡(
ts
->
¢d_max
 =
rxp
->
ack
)

1284 
	`CI_TCP_EXT_STATS_INC_TCP_FULL_UNDO
–
√tif
 );

1286 
¢d_max_dif„ª¡
 = 
	`ci_t˝_rx_åy_¢d_wnd_öÊ©e
(
ts
, 
rxp
);

1288 if–
	`SEQ_LT
(
	`t˝_¢d_u«
(
ts
), 
rxp
->
ack
) ) {

1290 
acked
 = 
	`SEQ_SUB
(
rxp
->
ack
, 
	`t˝_¢d_u«
(
ts
));

1294 
ts
->
zwö_¥obes
 = 0;

1295 
ts
->
zwö_acks
 = 0;

1298 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

1299 
	`ci_t˝_upd©e_πt
(
√tif
, 
ts
,

1300 
	`ci_t˝_time_now
(
√tif
Ë- 
rxp
->
time°amp_echo
);

1302 if–
	`SEQ_LE
(
	`t˝_¢d_u«
(
ts
),Ås->
timed_£q
) &&

1303 
	`SEQ_LT
(
ts
->
timed_£q
, 
rxp
->
ack
) &&

1304 ((
ts
->
c⁄g°©e
 =
CI_TCP_CONG_OPEN
) |

1305 (
ts
->
c⁄g°©e
 =
CI_TCP_CONG_NOTIFIED
)) ) {

1312 
	`ci_t˝_upd©e_πt
(
√tif
, 
ts
, 
	`ci_t˝_time_now
“ëifË-Ås->
timed_ts
);

1316 
ts
->
byãs_acked
 +
acked
;

1317 
	`ci_t˝_›ícwnd
(
√tif
, 
ts
);

1320 
ts
->
dup_acks
 = 0;

1323 
	`ci_t˝_rx_‰ì_acked_bufs
(
√tif
, 
ts
, 
rxp
);

1325 if–
ts
->
c⁄g°©e
 !
CI_TCP_CONG_OPEN
 &&Ås->c⁄g°©ê!
CI_TCP_CONG_NOTIFIED
)

1327 
	`ci_t˝_åy_cwndªcovî
(
ts
, 
√tif
, 
pkt
);

1329 if–
	`NI_OPTS
(
√tif
).
t˝_¢dbuf_mode
 == 2 &&

1330 
	`ci_t˝_should_ex∑nd_¢dbuf
(
√tif
, 
ts
) )

1331 
	`ci_t˝_ex∑nd_¢dbuf
(
√tif
, 
ts
);

1358 if–
	`SEQ_EQ
(
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
rxp
->
£q
) &&

1359 ! 
¢d_max_dif„ª¡
 ) {

1360 if–! (
rxp
->
Êags
 & 
CI_TCP_DSACK
)

1361 && 
pkt
->
pf
.
t˝_rx
.
wödow
 >
	`t˝_eff_mss
(
ts
)

1362 && !
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
) )

1363 
	`ci_t˝_rx_du∑ck
(
ts
, 
√tif
, 
rxp
);

1366 
ts
->
dup_acks
 = 0;

1370 
ts
->
dup_acks
 = 0;

1374 if–
	`SEQ_SUB
(
ts
->
¢d_max
, 
rxp
->
ack
Ë< 
	`t˝_eff_mss
(ts) &&

1375 
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
) &&

1376 
	`OO_SP_IS_NULL
(
ts
->
loˇl_≥î
) ) {

1386 if–
	`ci_ù_timî_≥ndög
(
√tif
, &
ts
->
zwö_tid
) ) {

1387 if–
ts
->
zwö_¥obes
 > 0 ) {

1388 ++
ts
->
zwö_acks
;

1389 
ts
->
zwö_¥obes
 = 0;

1391 
	`ci_ù_timî_˛ór
(
√tif
, &
ts
->
zwö_tid
);

1393 
	`ci_t˝_zwö_£t
(
√tif
, 
ts
);

1394 
	`CI_IP_SOCK_STATS_INC_ZWIN
(
ts
);

1399 
	`ci_t˝_kÆive_ª£t
(
√tif
, 
ts
);

1400 
	}
}

1406 
	$ci_t˝_rx_¥o˚ss_fö
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

1408 
	`CI_DEBUG
(
¥ev_°©e
 = 
ts
->
s
.
b
.
°©e
);

1410 if–! 
	`ci_ù_queue_is_em±y
(&
ts
->
rob
) ) {

1411 
	`LOG_U
(
	`log
(
LNTS_FMT
 "n⁄-em±y ROBá·î FIN", 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
)));

1412 
	`ci_ù_queue_dr›
(
√tif
, &
ts
->
rob
);

1418 
ts
->
t˝Êags
 |
CI_TCPT_FLAG_FIN_RECEIVED
;

1419 #ifde‡
_WIN32


1426 
ts
->
s
.
rx_î∫o
 |
CI_SHUT_RD
;

1428 
ts
->
s
.
rx_î∫o
 = 
CI_SHUT_RD
;

1430 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_ESTABLISHED
 ) {

1431 
	`ci_t˝_£t_¶ow_°©e
(
√tif
, 
ts
, 
CI_TCP_CLOSE_WAIT
);

1432 } if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_FIN_WAIT1
 ) {

1433 if–
	`SEQ_EQ
(
	`t˝_¢d_u«
(
ts
), 
	`t˝_íq_nxt
(ts)) ) {

1434 
	`ci_as£π
(
	`ci_t˝_£ndq_is_em±y
(
ts
));

1435 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
));

1436 
	`ci_√tif_timewaô_íãr
(
√tif
, 
ts
);

1437 
	`ci_t˝_£t_¶ow_°©e
(
√tif
, 
ts
, 
CI_TCP_TIME_WAIT
);

1440 
	`ci_t˝_£t_¶ow_°©e
(
√tif
, 
ts
, 
CI_TCP_CLOSING
);

1443 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 =
CI_TCP_FIN_WAIT2
);

1444 
	`ci_as£π
(
	`ci_t˝_£ndq_is_em±y
(
ts
));

1445 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
));

1447 
	`ci_√tif_timewaô_íãr
(
√tif
, 
ts
);

1448 
	`ci_t˝_£t_¶ow_°©e
(
√tif
, 
ts
, 
CI_TCP_TIME_WAIT
);

1450 
	`LOG_TC
(
	`log
(
LPF
 "%d FIN %s->%s", 
	`S_FMT
(
ts
),

1451 
	`ci_t˝_°©e_°r
(
¥ev_°©e
), 
	`°©e_°r
(
ts
)));

1455 
	`ci_t˝_rx_ª≠_rxq_bufs
(
√tif
, 
ts
);

1456 if–
	`t˝_rcv_u§
(
ts
Ë=0 && 
	`ci_sock_åylock
(
√tif
, &ts->
s
.
b
) ) {

1457 
	`ci_as£π_equÆ
(
	`t˝_rcv_u§
(
ts
), 0);

1458 if–
	`OO_PP_NOT_NULL
(
ts
->
ªcv1_exåa˘
) )

1459 
	`ci_t˝_rx_ª≠_rxq_œ°_buf
(
√tif
, 
ts
);

1461 
	`ci_as£π_equÆ
(
ts
->
ªcv1
.
num
, 0);

1462 
	`ci_sock_u∆ock
(
√tif
, &
ts
->
s
.
b
);

1465 
	`ci_t˝_wake
(
√tif
, 
ts
, 
CI_SB_FLAG_WAKE_RX
);

1467 if–
	`OO_SP_NOT_NULL
(
ts
->
loˇl_≥î
) ) {

1469 
ci_t˝_°©e
* 
≥î
 = 
	`ID_TO_TCP
(
√tif
, 
ts
->
loˇl_≥î
);

1470 if–
≥î
->
s
.
b
.
°©e
 =
CI_TCP_LAST_ACK
 )

1471 
	`ci_t˝_dr›
(
√tif
, 
≥î
, 0);

1473 
	`ci_t˝_£t_¶ow_°©e
(
√tif
, 
≥î
, 
CI_TCP_FIN_WAIT2
);

1476 
	}
}

1478 #i‡
CI_CFG_PORT_STRIPING


1479 
	$ci_t˝_check_ooo_°rùe
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

1481 
ci_ù_pkt_fmt
* 
block_pkt
 = 
	`PKT_CHK
(
√tif
, 
ts
->
rob
.
hód
);

1482 
g≠_°¨t_£qno
 = 
	`t˝_rcv_nxt
(
ts
);

1483 
g≠_p‹t_sw≠
;

1485 
g≠_found
[2] = {0, 0};

1488 
g≠_p‹t_sw≠
 = 
	`ci_ts_p‹t_sw≠
(
g≠_°¨t_£qno
, 
ts
);

1489 
g≠_found
[
g≠_p‹t_sw≠
] = 1;

1490 if–
g≠_found
[0] && gap_found[1] )

1492 if–
	`PKT_TCP_RX_ROB
(
block_pkt
)->
√xt_block
 < 0 ) ;

1493 
g≠_°¨t_£qno
 = 
	`PKT_TCP_RX_ROB
(
block_pkt
)->
íd_block_£q
;

1494 
block_pkt
 = 
	`PKT_CHK
(
√tif
, 
	`PKT_TCP_RX_ROB
(block_pkt)->
√xt_block
);

1497 
	}
}

1501 
	$ci_t˝_rx_dñivî_rob
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

1503 
ci_ù_pkt_fmt
* 
pkt
;

1504 
ci_ù_pkt_fmt
* 
íd_pkt
 = 
NULL
;

1505 
oo_pkt_p
 
íd_block_id
, 
id
;

1506 
ci_t˝_hdr
* 
t˝
;

1507 
ci_ù_pkt_queue
* 
rob
;

1508 
ci_uöt32
 
œ°_£q
;

1509 
num
;

1510 
ci_uöt32
 
£q
;

1512 ++
ts
->
°©s
.
rx_ooo_fûl
;

1513 
rob
 = &
ts
->rob;

1514 
	`ci_as£π
(
	`ci_ù_queue_is_vÆid
(
√tif
, 
rob
));

1515 
id
 = 
rob
->
hód
;

1516 
pkt
 = 
	`PKT_CHK
(
√tif
, 
id
);

1517 
£q
 = 
	`CI_BSWAP_BE32
(
	`PKT_TCP_HDR
(
pkt
)->
t˝_£q_be32
);

1520 
íd_block_id
 = 
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block
;

1521 
	`ASSERT_VALID_PKT_ID
(
√tif
, 
íd_block_id
);

1522  
	`SEQ_LE
(
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
	`t˝_rcv_nxt
(
ts
)) ) {

1526 
	`LOG_TR
(
	`log
(
LPF
 "%d dropÖacket from ROB %d: %x-%x",

1527 
	`S_FMT
(
ts
), 
	`OO_PP_FMT
(
id
), 
£q
,

1528 
pkt
->
pf
.
t˝_rx
.
íd_£q
));

1529 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
 ) {

1530 
i
;

1531  
i
 = 0; i <
CI_TCP_SACK_MAX_BLOCKS
; i++ )

1532 if–
	`OO_PP_EQ
(
ts
->
œ°_ßck
[
i
], 
id
) )

1533 
ts
->
œ°_ßck
[
i
] = 
OO_PP_NULL
;

1538 
	`ci_ù_queue_dequeue
(
√tif
, 
rob
, 
pkt
);

1539 if–
	`OO_PP_EQ
(
id
, 
íd_block_id
) )

1540 
íd_block_id
 = 
OO_PP_NULL
;

1541 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

1542 if–
	`ci_ù_queue_is_em±y
(
rob
) )

1544 
id
 = 
rob
->
hód
;

1545 
pkt
 = 
	`PKT_CHK
(
√tif
, 
id
);

1546 
£q
 = 
	`CI_BSWAP_BE32
(
	`PKT_TCP_HDR
(
pkt
)->
t˝_£q_be32
);

1547 if–
	`OO_PP_IS_NULL
(
íd_block_id
) ) {

1548 
íd_block_id
 = 
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block
;

1549 
	`ASSERT_VALID_PKT_ID
(
√tif
, 
íd_block_id
);

1552 
t˝
 = 
	`PKT_TCP_HDR
(
pkt
);

1555 if–
	`SEQ_LT
(
	`t˝_rcv_nxt
(
ts
), 
£q
) ) {

1556 
	`LOG_TV
(
	`log
("%d %s ROB can't deliverÑcv_nxt=%08xÑob_nxt=%08x",

1557 
	`S_FMT
(
ts
), 
	`°©e_°r
—s), 
	`t˝_rcv_nxt
—s), 
£q
));

1558 #i‡
CI_CFG_PORT_STRIPING


1559 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_STRIPE
 )

1560  
	`ci_t˝_check_ooo_°rùe
(
√tif
, 
ts
);

1566 
	`LOG_TO
(
	`log
(
LPF
 "%d ROB deliverÑcv=%08x-%08x cur %08xÑob_seq=%08x-%08x",

1567 
	`S_FMT
(
ts
), 
	`t˝_rcv_nxt
—s), 
	`t˝_rcv_wnd_right_edge_£¡
(ts),

1568 
	`t˝_rcv_wnd_cuºít
(
ts
), 
£q
,

1569 
	`PKT
(
√tif
, 
íd_block_id
)->
pf
.
t˝_rx
.
íd_£q
));

1570 
	`ci_as£π
(
	`SEQ_LE
(
	`t˝_rcv_nxt
(
ts
),

1571 
	`PKT
(
√tif
, 
íd_block_id
)->
pf
.
t˝_rx
.
íd_£q
));

1573 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
 ) {

1574 
i
;

1575  
i
 = 0; i <
CI_TCP_SACK_MAX_BLOCKS
; i++ )

1576 if–
	`OO_PP_EQ
(
ts
->
œ°_ßck
[
i
], 
id
) )

1577 
ts
->
œ°_ßck
[
i
] = 
OO_PP_NULL
;

1583 
œ°_£q
 = 
	`t˝_rcv_nxt
(
ts
);

1584 
num
 = 0;

1586 
	`LOG_TV
(
	`log
(
LPF
 "%d ROB deliverÖacket %d: %x-%x,Üast_seq = %x, "

1587 "∑y_À¿%d", 
	`S_FMT
(
ts
), 
	`OO_PP_FMT
(
id
), 
£q
,

1588 
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
œ°_£q
,Ökt->pf.t˝_rx.
∑y_Àn
));

1589 
	`ci_as£π
(
	`SEQ_LE
(
£q
, 
œ°_£q
));

1590 
	`ci_as£π
(
	`SEQ_LT
(
œ°_£q
, 
pkt
->
pf
.
t˝_rx
.
íd_£q
));

1591 
	`oo_offbuf_öô
(&
pkt
->
buf
,

1592 
	`CI_TCP_PAYLOAD
(
t˝
Ë+ (
œ°_£q
 - 
£q
),

1593 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 - (
œ°_£q
 - 
£q
));

1595 #ifde‡
_WIN32


1602 if(
	`CI_UNLIKELY
–(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_URG
) &&

1603 ! (
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_OOBINLINE
) )) {

1604 
	`LOG_URG
(
	`ci_log
("%s: URG found", 
__FUNCTION__
));

1605 
	`ci_t˝_urg_pkt_¥o˚ss
(
ts
, 
√tif
, 
pkt
, 
t˝
);

1610 if–
	`CI_UNLIKELY
(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
) ) {

1611 
	`LOG_TC
(
	`log
(
LPF
 "%d out-of-‹dî FIN", 
	`S_FMT
(
ts
)));

1614 
	`ci_as£π
(
	`oo_offbuf_nŸ_em±y
(&
pkt
->
buf
));

1616 
num
++;

1617 
íd_pkt
 = 
pkt
;

1618 
œ°_£q
 = 
pkt
->
pf
.
t˝_rx
.
íd_£q
;

1619 if–
	`OO_PP_EQ
(
	`OO_PKT_P
(
pkt
), 
íd_block_id
) )

1621 
id
 = 
pkt
->
√xt
;

1622 
pkt
 = 
	`PKT_CHK
(
√tif
, 
id
);

1623 
t˝
 = 
	`PKT_TCP_HDR
(
pkt
);

1624 
£q
 = 
	`CI_BSWAP_BE32
(
t˝
->
t˝_£q_be32
);

1631 
	`ci_as£π
(
num
 > 0 || (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
));

1634 if–
num
 != 0 )

1635 
	`ci_t˝_rx_íqueue_chaö
(
√tif
, 
ts
, 
rob
, 
íd_pkt
, 
num
);

1637 if(
	`CI_UNLIKELY
–
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
 )) {

1638 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
 ) {

1639 
i
;

1640  
i
 = 0; i <
CI_TCP_SACK_MAX_BLOCKS
; i++ ) {

1641 if–
	`OO_PP_EQ
(
ts
->
œ°_ßck
[
i
], 
	`OO_PKT_P
(
pkt
)) ) {

1642 
ts
->
œ°_ßck
[
i
] = 
OO_PP_NULL
;

1648 
	`ci_ù_queue_dequeue
(
√tif
, 
rob
, 
pkt
);

1650 if–
pkt
->
pf
.
t˝_rx
.
íd_£q
 - 
£q
 != 1 ) {

1651 
	`ci_t˝_rx_íqueue_∑ckë
(
√tif
, 
ts
, 
pkt
);

1653 
	`t˝_rcv_nxt
(
ts
Ë
pkt
->
pf
.
t˝_rx
.
íd_£q
;

1654 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

1656 
	`ci_t˝_rx_¥o˚ss_fö
(
√tif
, 
ts
);

1659 
	`ci_as£π
(
	`ci_ù_queue_is_vÆid
(
√tif
, 
rob
));

1661 if–
	`ci_t˝_ˇn_u£_Á°_∑th
(
ts
) )

1662 
	`ci_t˝_Á°_∑th_íabÀ
(
ts
);

1669 #i‡
CI_CFG_PORT_STRIPING


1670 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_STRIPE
 ) {

1671 if–
	`ci_ù_queue_nŸ_em±y
(&
ts
->
rob
) ) {

1672 if–
	`ci_t˝_check_ooo_°rùe
(
√tif
, 
ts
) ) {

1673 
	`TCP_FORCE_ACK
(
ts
);

1688 
	`TCP_FORCE_ACK
(
ts
);

1689  
	`ci_ù_queue_nŸ_em±y
(&
ts
->
rob
);

1691 
	}
}

1694 
ci_ölöe
 
	$ci_t˝_rx_dñivî_to_ªcvq
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
,

1695 
ciù_t˝_rx_pkt
 *
rxp
)

1697 
ci_ù_pkt_fmt
 *
pkt
 = 
rxp
->pkt;

1698 
ci_t˝_hdr
 *
t˝
 = 
rxp
->tcp;

1699 
rc
 = 0;

1705 
	`ci_as£π
(
	`SEQ_LE
(
rxp
->
£q
, 
	`t˝_rcv_nxt
(
ts
)));

1706 
	`ci_as£π
(
pkt
->
pf
.
t˝_rx
.
∑y_Àn
);

1708 
	`oo_offbuf_öô
(&
pkt
->
buf
, 
	`CI_TCP_PAYLOAD
(
t˝
),Ökt->
pf
.
t˝_rx
.
∑y_Àn
);

1711 
	`oo_offbuf_adv™˚
(&
pkt
->
buf
, 
	`SEQ_SUB
(
	`t˝_rcv_nxt
(
ts
), 
rxp
->
£q
));

1712 
	`ci_as£π
(
	`oo_offbuf_nŸ_em±y
(&
pkt
->
buf
));

1714 
	`ci_t˝_rx_íqueue_∑ckë
(
√tif
, 
ts
, 
pkt
);

1716 if–!
	`ci_ù_queue_is_em±y
(&
ts
->
rob
) )

1717 
rc
 = 
	`ci_t˝_rx_dñivî_rob
(
√tif
, 
ts
);

1719 
	`ci_t˝_wake
(
√tif
, 
ts
, 
CI_SB_FLAG_WAKE_RX
);

1720  
rc
;

1721 
	}
}

1724 
	$ci_t˝_rx_dñivî2
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
,

1725 
ciù_t˝_rx_pkt
* 
rxp
)

1728 
	`ci_t˝_rx_dñivî_to_ªcvq
(
ts
, 
√tif
, 
rxp
);

1729 
	}
}

1739 
	$ci_t˝_rx_glue_rob
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

1740 
ci_ù_pkt_fmt
* 
pkt
)

1742 
oo_pkt_p
 
œ°_id
;

1743 
œ°_£q
;

1744 
ci_ù_pkt_fmt
* 
√xt_pkt
;

1745 
oo_pkt_p
 
√xt_id
;

1746 
ci_ù_pkt_fmt
* 
tmp
;

1747 
oo_pkt_p
 
tmp_id
;

1749  
√xt_id
 = 
	`PKT_TCP_RX_ROB
(
pkt
)->
√xt_block
;

1750 
	`OO_PP_NOT_NULL
(
√xt_id
);

1751 
√xt_id
 = 
	`PKT_TCP_RX_ROB
(
pkt
)->
√xt_block
) {

1752 
√xt_pkt
 = 
	`PKT_CHK
(
√tif
, 
√xt_id
);

1753 
œ°_£q
 = 
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block_£q
;

1754 if–
	`SEQ_LT
(
œ°_£q
, 
	`CI_BSWAP_BE32
(
	`PKT_TCP_HDR
(
√xt_pkt
)->
t˝_£q_be32
)) )

1756 
	`LOG_TV
(
	`log
(
LPF
 "ROB glue %dánd %d blocks",

1757 
	`OO_PKT_FMT
(
pkt
), 
	`OO_PP_FMT
(
√xt_id
)));

1760 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
) {

1761 
i
;

1762  
i
 = 0; i <
CI_TCP_SACK_MAX_BLOCKS
; i++ )

1763 if–
	`OO_PP_EQ
(
√xt_id
, 
ts
->
œ°_ßck
[
i
]) )

1764 
ts
->
œ°_ßck
[
i
] = 
	`OO_PKT_P
(
pkt
);

1770 
œ°_id
 = 
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block
;

1771 
	`ASSERT_VALID_PKT_ID
(
√tif
, 
œ°_id
);

1772 
	`PKT_TCP_RX_ROB
(
pkt
)->
√xt_block
 = PKT_TCP_RX_ROB(
√xt_pkt
)->next_block;

1774 if–
	`SEQ_LT
(
œ°_£q
, 
	`PKT_TCP_RX_ROB
(
√xt_pkt
)->
íd_block_£q
) ) {

1776 
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block
 = PKT_TCP_RX_ROB(
√xt_pkt
)->end_block;

1777 
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block_£q
 = PKT_TCP_RX_ROB(
√xt_pkt
)->end_block_seq;

1778 
	`PKT_TCP_RX_ROB
(
pkt
)->
num
 +PKT_TCP_RX_ROB(
√xt_pkt
)->num;

1781  
tmp_id
 = 
√xt_id
, 
tmp
 = 
√xt_pkt
;

1782 
	`OO_PP_NOT_NULL
(
tmp_id
Ë&& 
	`SEQ_LE
(
tmp
->
pf
.
t˝_rx
.
íd_£q
, 
œ°_£q
);

1783 
tmp_id
 = 
√xt_id
, 
tmp
 = 
	`PKT_CHK
(
√tif
,Åmp_id)) {

1784 
	`ci_as£π
–! 
	`OO_PP_EQ
(
tmp_id
, 
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block
) );

1785 
√xt_id
 = 
tmp
->
√xt
;

1786 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
tmp
);

1787 
	`PKT_TCP_RX_ROB
(
pkt
)->
num
--;

1788 
ts
->
rob
.
num
--;

1790 
	`PKT_CHK
(
√tif
, 
œ°_id
)->
√xt
 = 
√xt_id
;

1791 if–
	`OO_PP_IS_NULL
(
√xt_id
) )

1792 
ts
->
rob
.
èû
 = 
	`OO_PKT_P
(
pkt
);

1795 
	`PKT
(
√tif
, 
œ°_id
)->
√xt
 = 
	`PKT_TCP_RX_ROB
(
√xt_pkt
)->
√xt_block
;

1796 if–
	`OO_PP_IS_NULL
(
	`PKT
(
√tif
, 
œ°_id
)->
√xt
) )

1797 
ts
->
rob
.
èû
 = 
œ°_id
;

1799 
œ°_id
 = 
	`PKT_TCP_RX_ROB
(
√xt_pkt
)->
√xt_block
;

1800  
tmp_id
 = 
√xt_id
;

1801 
	`OO_PP_NOT_NULL
(
tmp_id
Ë&& ! 
	`OO_PP_EQ
—mp_id, 
œ°_id
);

1802 
tmp_id
 = 
√xt_id
 ) {

1803 
	`ci_as£π
–! 
	`OO_PP_EQ
(
tmp_id
, 
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block
) );

1804 
tmp
 = 
	`PKT_CHK
(
√tif
, 
tmp_id
);

1805 
√xt_id
 = 
tmp
->
√xt
;

1806 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
tmp
);

1807 
	`PKT_TCP_RX_ROB
(
pkt
)->
num
--;

1808 
ts
->
rob
.
num
--;

1813 
	}
}

1816 #i‡
CI_CFG_PORT_STRIPING


1822 
	$ci_t˝_rx_ooo_°rùe
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

1823 
ciù_t˝_rx_pkt
* 
rxp
)

1825 
ci_ù_pkt_queue
* 
rob
 = &
ts
->rob;

1826 
ci_ù_pkt_fmt
* 
block_pkt
 = 
	`PKT_CHK
(
√tif
, 
rob
->
hód
);

1831 
g≠_p‹t_sw≠
;

1836 
tx_p‹t_sw≠
 = 
	`ci_ts_p‹t_sw≠
(
rxp
->
£q
, 
ts
);

1842 
g≠_°¨t_£qno
 = 
	`t˝_rcv_nxt
(
ts
);

1844 
	`LOG_TV
(
	`log
(
LNT_FMT
 "OOOÖ‹t_sw≠=%d s=%08x-%08x", 
	`LNT_PRI_ARGS
(
√tif
, 
ts
),

1845 
tx_p‹t_sw≠
, 
rxp
->
£q
,Ñxp->
pkt
->
pf
.
t˝_rx
.
íd_£q
));

1851 if–
	`SEQ_LE
(
rxp
->
£q
, 
g≠_°¨t_£qno
) ) {

1855 
	`LOG_TV
(
	`log
(
LNT_FMT
 "OOOÅerminatedát gap %08x-%08x",

1856 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
g≠_°¨t_£qno
,

1857 
	`CI_BSWAP_BE32
(
	`PKT_TCP_HDR
(
block_pkt
)->
t˝_£q_be32
)));

1861 
g≠_p‹t_sw≠
 = 
	`ci_ts_p‹t_sw≠
(
g≠_°¨t_£qno
, 
ts
);

1862 
	`LOG_TV
(
	`log
(
LNT_FMT
 "OOO comparingÖort %d gap %08x-%08x",

1863 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
g≠_p‹t_sw≠
, 
g≠_°¨t_£qno
,

1864 
	`CI_BSWAP_BE32
(
	`PKT_TCP_HDR
(
block_pkt
)->
t˝_£q_be32
)));

1866 if–
g≠_p‹t_sw≠
 =
tx_p‹t_sw≠
 ) {

1868 
	`LOG_TV
(
	`log
(
LNT_FMT
 "OOOÑequesting dupack for %08x",

1869 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
	`t˝_rcv_nxt
(ts)));

1874 if–
	`PKT_TCP_RX_ROB
(
block_pkt
)->
√xt_block
 < 0 ) ;

1876 
g≠_°¨t_£qno
 = 
	`PKT_TCP_RX_ROB
(
block_pkt
)->
íd_block_£q
;

1877 
block_pkt
 = 
	`PKT_CHK
(
√tif
, 
	`PKT_TCP_RX_ROB
(block_pkt)->
√xt_block
);

1882 
	}
}

1890 
	$ci_t˝_rx_íqueue_ooo
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

1891 
ciù_t˝_rx_pkt
* 
rxp
)

1893 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

1894 
ci_ù_pkt_queue
* 
rob
 = &
ts
->rob;

1896 
oo_pkt_p
 
¥ev_id
;

1897 
ci_ù_pkt_fmt
* 
¥ev_pkt
 = 
NULL
;

1898 
oo_pkt_p
 
block_id
;

1899 
ci_ù_pkt_fmt
* 
block_pkt
 = 
NULL
;

1901 
	`CITP_STATS_NETIF_INC
(
√tif
, 
rx_out_of_‹dî
);

1902 
	`CI_IP_SOCK_STATS_INC_OOO
–
ts
 );

1903 ++
ts
->
°©s
.
rx_ooo_pkts
;

1904 
	`LOG_TO
(
	`log
(
LNT_FMT
 "ENQ-OOO "
TCP_RCV_FMT
" s=%08x",

1905 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
	`TCP_RCV_PRI_ARG
—s), 
rxp
->
£q
));

1907 
	`ci_as£π
(
	`OO_SP_IS_NULL
(
ts
->
loˇl_≥î
));

1908 
	`ci_as£π
(
	`ci_ù_queue_is_vÆid
(
√tif
, 
rob
));

1909  
¥ev_id
 = 
OO_PP_NULL
, 
block_id
 = 
rob
->
hód
;

1910 
	`OO_PP_NOT_NULL
(
block_id
) &&

1911 (
block_pkt
 = 
	`PKT_CHK
(
√tif
, 
block_id
),

1912 
	`SEQ_LT
(
	`CI_BSWAP_BE32
(
	`PKT_TCP_HDR
(
block_pkt
)->
t˝_£q_be32
),

1913 
rxp
->
£q
));

1914 
¥ev_id
 = 
block_id
, 
¥ev_pkt
 = 
block_pkt
,

1915 
block_id
 = 
	`PKT_TCP_RX_ROB
(
block_pkt
)->
√xt_block
 ) {

1917 
	`LOG_TV
(
	`log
(
LNT_FMT
 "OOO check: from %08x-%08xÅo %08x-%08x",

1918 
	`LNT_PRI_ARGS
(
√tif
, 
ts
),

1919 
	`OO_PP_NOT_NULL
(
¥ev_id
) ?

1920 
	`CI_BSWAP_BE32
(
	`PKT_TCP_HDR
(
¥ev_pkt
)->
t˝_£q_be32
) : 0,

1921 
	`OO_PP_NOT_NULL
(
¥ev_id
) ?

1922 
	`PKT_TCP_RX_ROB
(
¥ev_pkt
)->
íd_block_£q
 : 0,

1923 
	`OO_PP_NOT_NULL
(
block_id
) ?

1924 
	`CI_BSWAP_BE32
(
	`PKT_TCP_HDR
(
block_pkt
)->
t˝_£q_be32
) : 0,

1925 
	`OO_PP_NOT_NULL
(
block_id
) ?

1926 
	`PKT_TCP_RX_ROB
(
block_pkt
)->
íd_block_£q
 : 0));

1930 if–(
	`OO_PP_NOT_NULL
(
¥ev_id
) &&

1931 
	`SEQ_LE
(
pkt
->
pf
.
t˝_rx
.
íd_£q
,

1932 
	`PKT_TCP_RX_ROB
(
¥ev_pkt
)->
íd_block_£q
)) ||

1933 (
	`OO_PP_NOT_NULL
(
block_id
) &&

1934 
	`SEQ_EQ
(
rxp
->
£q
,

1935 
	`CI_BSWAP_BE32
(
	`PKT_TCP_HDR
(
block_pkt
)->
t˝_£q_be32
)) &&

1936 
	`SEQ_LE
(
pkt
->
pf
.
t˝_rx
.
íd_£q
,

1937 
	`PKT_TCP_RX_ROB
(
block_pkt
)->
íd_block_£q
)) ) {

1938 
	`LOG_TL
(
	`log
(
LNT_FMT
 "OOO DROP duplicate %08x-%08x",

1939 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
rxp
->
£q
,

1940 
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block_£q
));

1941 if–(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
) ) {

1942 
ts
->
dßck_°¨t
 = 
rxp
->
£q
;

1943 
ts
->
dßck_íd
 = 
pkt
->
pf
.
t˝_rx
.
íd_£q
;

1944 
ts
->
dßck_block
 = 
¥ev_id
;

1946 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

1947 
	`ci_as£π
(
	`ci_ù_queue_is_vÆid
(
√tif
, 
rob
));

1952 
	`LOG_TV
(
	`log
(
LNT_FMT
 "OOO %d bëwì¿%dánd %d", 
	`LNT_PRI_ARGS
(
√tif
, 
ts
),

1953 
	`OO_PKT_FMT
(
pkt
), 
	`OO_PP_FMT
(
¥ev_id
), OO_PP_FMT(
block_id
)));

1955 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
 ) {

1956 
ts
->
œ°_ßck
[0] = 
	`OO_PKT_P
(
pkt
);

1958 
pkt
->
√xt
 = 
block_id
;

1960 
	`PKT_TCP_RX_ROB
(
pkt
)->
√xt_block
 = 
block_id
;

1961 
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block
 = 
	`OO_PKT_P
(pkt);

1962 
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block_£q
 =Ökt->
pf
.
t˝_rx
.
íd_£q
;

1963 
	`PKT_TCP_RX_ROB
(
pkt
)->
num
 = 1;

1965 
rob
->
num
++;

1967 if–
	`OO_PP_IS_NULL
(
block_id
) )

1968 
rob
->
èû
 = 
	`OO_PKT_P
(
pkt
);

1974 if–
	`OO_PP_IS_NULL
(
¥ev_id
) ) {

1975 
rob
->
hód
 = 
	`OO_PKT_P
(
pkt
);

1976 
	`ci_t˝_rx_glue_rob
(
√tif
, 
ts
, 
pkt
);

1978 
	`ci_t˝_rx_glue_rob
(
√tif
, 
ts
, 
pkt
);

1979 
	`PKT_CHK
(
√tif
, 
	`PKT_TCP_RX_ROB
(
¥ev_pkt
)->
íd_block
)->
√xt
 = 
	`OO_PKT_P
(
pkt
);

1980 
	`PKT_TCP_RX_ROB
(
¥ev_pkt
)->
√xt_block
 = 
	`OO_PKT_P
(
pkt
);

1981 
	`ci_t˝_rx_glue_rob
(
√tif
, 
ts
, 
¥ev_pkt
);

1984 
	`CHECK_TS
(
√tif
, 
ts
);

1986 
	`ci_t˝_Á°_∑th_dißbÀ
(
ts
);

1988 #i‡
CI_CFG_PORT_STRIPING


1989 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_STRIPE
 )

1990  
	`ci_t˝_rx_ooo_°rùe
(
√tif
, 
ts
, 
rxp
);

1994 
	}
}

2000 
ci_noölöe
 
	$mac_upd©e_if_mac_m©ch
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

2001 
ci_ù_pkt_fmt
* 
pkt
)

2003 if–
	`memcmp
(
	`ci_ù_ˇche_ëhî_dho°
(&
ts
->
s
.
pkt
), 
	`oo_ëhî_sho°
(pkt),

2004 
ETH_ALEN
) == 0 )

2005 
	`ci˝_ù_ˇche_mac_upd©e
(
ni
, &
ts
->
s
.
pkt
, 1 );

2006 
	}
}

2009 
ci_noölöe
 
	$mac_upd©e_if_ack_√w_‹_mac_m©ch
(
ci_√tif
* 
ni
,

2010 
ci_t˝_°©e
* 
ts
,

2011 c⁄° 
ciù_t˝_rx_pkt
* 
rxp
)

2013 if–
	`SEQ_GT
(
rxp
->
ack
, 
	`t˝_¢d_u«
(
ts
)) ||

2014 
	`memcmp
(
	`ci_ù_ˇche_ëhî_dho°
(&
ts
->
s
.
pkt
),

2015 
	`oo_ëhî_sho°
(
rxp
->
pkt
), 
ETH_ALEN
) == 0 )

2016 
	`ci˝_ù_ˇche_mac_upd©e
(
ni
, &
ts
->
s
.
pkt
, 1 );

2017 
	}
}

2020 
	$h™dÀ_rx_li°í_r°
(
ci_√tif
* 
ni
, 
ci_t˝_sockë_li°í
* 
és
,

2021 
ciù_t˝_rx_pkt
* 
rxp
)

2023 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

2024 #i‚de‡
NDEBUG


2025 
ci_ù4_hdr
* 
ù
 = 
	`oo_ù_hdr
(
pkt
);

2027 
ci_t˝_hdr
* 
t˝
 = 
rxp
->tcp;

2028 
ci_t˝_°©e_syƒecv
* 
t§
;

2041 if–
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 ) {

2042 
	`LOG_U
(
	`log
(
LPF
 "%d RST with data (%d bytes)",

2043 
	`S_FMT
(
és
), 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
));

2044 
	`LOG_DU
(
	`ci_hex_dump
(
ci_log_‚
, 
	`PKT_START
(
pkt
),

2045 
	`oo_ëhî_hdr_size
(
pkt
) +

2046 
	`CI_BSWAP_BE16
(
ù
->
ù_tŸ_Àn_be16
), 0));

2049 if–(
t˝
->
t˝_Êags
 & ~(
CI_TCP_FLAG_RST
|
CI_TCP_FLAG_ACK
)

2050 & 
CI_TCP_FLAG_MASK
) )

2051 
	`LOG_U
(
	`log
(
LPF
 "%d RST wôh u√x≥˘ed fœg†(%x)", 
	`S_FMT
(
és
),

2052 (Ë
t˝
->
t˝_Êags
));

2058 
t§
 = 
	`ci_t˝_li°íq_lookup
(
ni
, 
és
, 
rxp
);

2060 if–
t§
 ) {

2061 
t§_rcv_wnd
 = 
	`ci_t˝_rcvbuf2wödow
(
és
->
s
.
so
.
rcvbuf
,

2062 
t§
->
amss
,Å§->
rcv_ws˛
);

2063 if–
	`SEQ_LE
(
t§
->
rcv_nxt
, 
rxp
->
£q
) &&

2064 
	`SEQ_LT
(
rxp
->
£q
, 
t§
->
rcv_nxt
 + 
t§_rcv_wnd
) ) {

2065 
	`ci_t˝_li°íq_ªmove
(
ni
, 
és
, 
t§
);

2066 
	`ci_t˝_syƒecv_‰ì
(
ni
, 
t§
);

2067 
	`CITP_STATS_NETIF_INC
(
ni
, 
r°_ªcv_syƒecv
);

2068 
	`LOG_TC
(
	`log
(
LPF
 "%d SYNRECV %s:%d->%s:%d RST",

2069 
	`S_FMT
(
és
),

2070 
	`ù_addr_°r
(
ù
->
ù_ßddr_be32
),

2071 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_sour˚_be16
),

2072 
	`ù_addr_°r
(
ù
->
ù_daddr_be32
),

2073 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_de°_be16
)));

2076 
	`LOG_U
(
	`log
(
LPF
 "%d SYNRECV %s:%d->%s:%d RST u«c˚±abÀ", 
	`S_FMT
(
és
),

2077 
	`ù_addr_°r
(
ù
->
ù_ßddr_be32
),

2078 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_sour˚_be16
),

2079 
	`ù_addr_°r
(
ù
->
ù_daddr_be32
),

2080 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_de°_be16
)));

2081 
	`CITP_STATS_NETIF_INC
(
ni
, 
r°_ªcv_u«c˚±abÀ
);

2089 
	`LOG_TR
(
	`log
(
LPF
 "%d LISTEN %s:%d->%s:%d RST ignored (no SYNRECV)",

2090 
	`S_FMT
(
és
), 
	`ù_addr_°r
(
ù
->
ù_ßddr_be32
),

2091 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_sour˚_be16
),

2092 
	`ù_addr_°r
(
ù
->
ù_daddr_be32
),

2093 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_de°_be16
)));

2096 
	`ci_√tif_pkt_ªÀa£_rx
(
ni
, 
pkt
);

2097 
	}
}

2099 
	$h™dÀ_rx_r°
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
,

2100 
ciù_t˝_rx_pkt
* 
rxp
)

2108 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

2109 
ci_t˝_hdr
* 
t˝
 = 
rxp
->tcp;

2111 
	`LOG_TC
(
	`log
(
FNTS_FMT
 "RST "
TCP_RCV_FMT
" PKT seq=%08xáck=%08x",

2112 
	`FNTS_PRI_ARGS
(
√tif
, 
ts
), 
	`TCP_RCV_PRI_ARG
(ts),

2113 
rxp
->
£q
,Ñxp->
ack
));

2119 if–
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 ) {

2120 
	`LOG_U
(
	`log
(
LPF
 "%d RST with data (%d bytes)",

2121 
	`S_FMT
(
ts
), 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
));

2122 
	`LOG_DU
(
	`ci_hex_dump
(
ci_log_‚
, 
	`PKT_START
(
pkt
),

2123 
	`oo_ëhî_hdr_size
(
pkt
) +

2124 
	`CI_BSWAP_BE16
(
	`oo_ù_hdr
(
pkt
)->
ù_tŸ_Àn_be16
), 0));

2127 if–(
t˝
->
t˝_Êags
 & ~(
CI_TCP_FLAG_RST
|
CI_TCP_FLAG_ACK
)

2128 & 
CI_TCP_FLAG_MASK
) )

2129 
	`LOG_U
(
	`log
(
LPF
 "%d RST wôh u√x≥˘ed fœg†(%x)", 
	`S_FMT
(
ts
),

2130 (Ë
t˝
->
t˝_Êags
));

2132 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_SYN_SENT
 ) {

2139 if–(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_ACK
) &&

2140 
	`SEQ_LE
(
	`t˝_¢d_u«
(
ts
), 
rxp
->
ack
) &&

2141 
	`SEQ_LE
(
rxp
->
ack
, 
	`t˝_¢d_nxt
(
ts
)) ) {

2142 
	`LOG_TC
(
	`log
(
LPF
 "%d SYN-SENT->CLOSED (RESET)", 
	`S_FMT
(
ts
)));

2143 
	`ci_t˝_dr›
(
√tif
, 
ts
, 
ECONNREFUSED
);

2146 
u«c˚±abÀ_r°
;

2148 
‰ìpkt_out
;

2159 if–
	`ci_t˝_£q_¥obably_u«c˚±abÀ
(
	`t˝_rcv_nxt
(
ts
),

2160 
	`t˝_rcv_wnd_right_edge_£¡
(
ts
),

2161 
rxp
->
£q
,Ñxp->seq) ) {

2162 
u«c˚±abÀ_r°
;

2165 #i‡
CI_CFG_STATS_NETIF


2166 if–
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_TCP_IN_ACCEPTQ
 )

2167 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_ªcv_ac˚±q
);

2168 if–
	`t˝_rcv_u§
(
ts
) )

2169 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_ªcv_has_ªcvq
);

2170 if–! 
	`SEQ_EQ
(
	`t˝_íq_nxt
(
ts
), 
	`t˝_¢d_nxt
(ts)) )

2171 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_ªcv_has_£ndq
);

2172 if–! 
	`SEQ_EQ
(
	`t˝_¢d_nxt
(
ts
), 
	`t˝_¢d_u«
(ts)) )

2173 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_ªcv_has_u«ck
);

2177  
ts
->
s
.
b
.
°©e
 ) {

2178 
CI_TCP_ESTABLISHED
:

2179 
CI_TCP_FIN_WAIT1
:

2180 
CI_TCP_FIN_WAIT2
:

2181 
CI_TCP_CLOSING
:

2182 
CI_TCP_LAST_ACK
:

2183 
	`LOG_TC
(
	`log
(
LPF
"%d %s->CLOSED (RESET)",
	`S_FMT
(
ts
),
	`°©e_°r
(ts)));

2184 
	`ci_t˝_dr›
(
√tif
, 
ts
, 
ECONNRESET
);

2185 
‰ìpkt_out
;

2186 
CI_TCP_CLOSE_WAIT
:

2187 
	`ci_t˝_dr›
(
√tif
, 
ts
, 
EPIPE
);

2188 
‰ìpkt_out
;

2189 
CI_TCP_TIME_WAIT
:

2190 
CI_TCP_CLOSED
:

2191 
u«c˚±abÀ_r°
;

2194 
	`log
(
LPF
"U√x≥˘ed vÆuêöÅs->s.b.°©ê%d", 
ts
->
s
.
b
.
°©e
);

2195 
	`ci_as£π
(0);

2198 
u«c˚±abÀ_r°
:

2199 
	`LOG_U
(
	`log
(
FNTS_FMT
 "UNACCEPTABLE RST "
TCP_RCV_FMT
" PKT seq=%08xáck=%08x",

2200 
	`FNTS_PRI_ARGS
(
√tif
, 
ts
), 
	`TCP_RCV_PRI_ARG
(ts),

2201 
rxp
->
£q
,Ñxp->
ack
));

2202 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_ªcv_u«c˚±abÀ
);

2204 
‰ìpkt_out
:

2205 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

2207 
	}
}

2214 
	$h™dÀ_rx_syƒecv_ack
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
,

2215 
ci_t˝_°©e_syƒecv
* 
t§
,

2216 
ciù_t˝_rx_pkt
* 
rxp
,

2217 
ci_ù_ˇched_hdrs
* 
ùˇche
)

2219 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

2220 
ci_t˝_hdr
* 
t˝
 = 
rxp
->tcp;

2221 
t§_rcv_wnd
 = 
	`ci_t˝_rcvbuf2wödow
(
és
->
s
.
so
.
rcvbuf
, 
t§
->
amss
,

2222 
t§
->
rcv_ws˛
);

2223 
ci_t˝_°©e
* 
ts
;

2225 
	`ci_as£π
(
√tif
);

2226 
	`ci_as£π
(
és
);

2227 
	`ci_as£π
(
és
->
s
.
b
.
°©e
 =
CI_TCP_LISTEN
);

2228 
	`ci_as£π
(
t§
);

2229 
	`ASSERT_VALID_PKT
(
√tif
, 
pkt
);

2231 
	`LOG_TC
(
	`log
(
LNT_FMT
 "SYN-RECV %s:%d->%s:%d on socket %s:%d",

2232 
	`LNT_PRI_ARGS
(
√tif
, 
és
),

2233 
	`ù_addr_°r
(
	`oo_ù_hdr
(
pkt
)->
ù_ßddr_be32
),

2234 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_sour˚_be16
),

2235 
	`ù_addr_°r
(
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
),

2236 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_de°_be16
),

2237 
	`ù_addr_°r
(
	`t˝_œddr_be32
(
és
)),

2238 (Ë
	`CI_BSWAP_BE16
(
	`t˝_Õ‹t_be16
(
és
))));

2253 if–
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
 ) {

2254 if–!
	`SEQ_EQ
(
rxp
->
£q
+1, 
t§
->
rcv_nxt
) ) {

2255 
	`LOG_U
(
	`log
(
LNT_FMT
 "SYNRECVÇon-dup SYN willÑesetÖkt=%08x-%08x"

2256 "Ñcv=%08x-%08x", 
	`LNT_PRI_ARGS
(
√tif
, 
és
),

2257 
rxp
->
£q
, 
pkt
->
pf
.
t˝_rx
.
íd_£q
,

2258 
t§
->
rcv_nxt
,Å§->rcv_nxà+ 
t§_rcv_wnd
));

2260 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_£¡_syƒecv_bad_syn
);

2261 
ª£t_out
;

2263 
	`LOG_TV
(
	`log
(
LNT_FMT
 "SYNRECV du∞SYN", 
	`LNT_PRI_ARGS
(
√tif
, 
és
)));

2265 
ªå™smô_sy«ck
;

2269 if–
	`ci_t˝_£q_¥obably_u«c˚±abÀ
(
t§
->
rcv_nxt
,

2270 
t§_rcv_wnd
+
t§
->
rcv_nxt
,

2271 
rxp
->
£q
,

2272 
pkt
->
pf
.
t˝_rx
.
íd_£q
) ) {

2273 
	`LOG_U
(
	`log
(
LNT_FMT
 "SYNRECV unacceptable SEQÖkt=%08x-%08x "

2274 "["
CI_TCP_FLAGS_FMT
"]Ñcv=%08x-%08x", 
	`LNT_PRI_ARGS
(
√tif
, 
és
),

2275 
rxp
->
£q
, 
pkt
->
pf
.
t˝_rx
.
íd_£q
,

2276 
	`CI_TCP_HDR_FLAGS_PRI_ARG
(
t˝
),

2277 
t§
->
rcv_nxt
,Å§->rcv_nxà+ 
t§_rcv_wnd
));

2279 
ªå™smô_sy«ck
;

2283 
	`ci_as£π
(~
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_RST
);

2286 if–
t§
->
t˝›ts
.
Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

2287 if–(~
rxp
->
Êags
 & 
CI_TCPT_FLAG_TSO
) ||

2288 
	`ci_t˝_∑ws_check
(
√tif
, 
rxp
->
time°amp
,

2289 
t§
->
time°
,Å§->
t•ìr
) ) {

2290 
	`LOG_U
(
	`log
(
LNT_FMT
 "SYNRECV PAWS failedÖkt=%08x-%08x "

2291 "rcv=%08x-%08x", 
	`LNT_PRI_ARGS
(
√tif
, 
és
),

2292 
rxp
->
£q
, 
pkt
->
pf
.
t˝_rx
.
íd_£q
,

2293 
t§
->
rcv_nxt
,Å§->rcv_nxà+ 
t§_rcv_wnd
));

2294 
ªå™smô_sy«ck
;

2297 
t§
->
t•ìr
 = 
rxp
->
time°amp
;

2301 if–~
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_ACK
 ) {

2302 
	`LOG_U
(
	`log
(
LNT_FMT
 "SYNRECVÇon ACK",

2303 
	`LNT_PRI_ARGS
(
√tif
, 
és
)));

2305 
‰ìpkt_out
;

2309 if–!
	`SEQ_EQ
(
t§
->
¢d_i¢
+1, 
rxp
->
ack
) ) {

2310 
	`LOG_U
(
	`log
(
LNT_FMT
 "SYNRECV bad ACK",

2311 
	`LNT_PRI_ARGS
(
√tif
, 
és
)));

2313 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_£¡_syƒecv_bad_ack
);

2314 
ª£t_out
;

2318 
t§
->
ªåõs
 |
CI_FLAG_TSR_RETRIES_ACKED
;

2319 if–(
és
->
c
.
t˝_de„r_ac˚±
 !
OO_TCP_DEFER_ACCEPT_OFF
 ) &&

2320 
	`SEQ_EQ
(
rxp
->
£q
, 
pkt
->
pf
.
t˝_rx
.
íd_£q
) &&

2321 (
t§
->
ªåõs
 & 
CI_FLAG_TSR_RETRIES_MASK
Ë< 
és
->
c
.
t˝_de„r_ac˚±
 ) {

2322 
	`CITP_STATS_TCP_LISTEN
(++
√tif
->
°©e
->
°©s
.
ac˚±s_de„ºed
);

2323 
	`ci_√tif_pkt_ªÀa£
(
√tif
, 
pkt
);

2325 if–
	`ci_t˝_li°íq_åy_¥omŸe
(
√tif
, 
és
, 
t§
, 
ùˇche
, &
ts
) < 0 ) {

2326 
	`CI_TCP_EXT_STATS_INC_LISTEN_DROPS
–
√tif
 );

2327 
	`LOG_U
(
	`log
(
LNT_FMT
 "SYNRECV failedÅoÖromoteÅoácceptq, seq=%08x",

2328 
	`LNT_PRI_ARGS
(
√tif
, 
és
), 
rxp
->
£q
));

2329 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

2333 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 +
	`CI_TCP_HDR_LEN
(
t˝
Ë- 
ts
->
öcomög_t˝_hdr_Àn
;

2336 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 )

2337 
	`ci_t˝_upd©e_πt
(
√tif
, 
ts
,

2338 
	`ci_t˝_time_now
(
√tif
Ë- 
rxp
->
time°amp_echo
);

2339 if–~
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SYNCOOKIE
 )

2340 
	`ci_t˝_upd©e_πt
(
√tif
, 
ts
, 
	`ci_t˝_time_now
“ëifË-Ås->
timed_ts
);

2344 if–! 
	`SEQ_EQ
(
rxp
->
£q
, 
pkt
->
pf
.
t˝_rx
.
íd_£q
) )

2345 
	`TCP_FORCE_ACK
(
ts
);

2347 
	`h™dÀ_rx_¶ow
(
ts
, 
√tif
, 
rxp
);

2351 
‰ìpkt_out
:

2352 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

2354 
ªå™smô_sy«ck
:

2355 
pkt
 = 
	`ci_√tif_pkt_rx_to_tx
(
√tif
,Ökt);

2356 if–
pkt
 !
NULL
 )

2357 
	`ci_t˝_syƒecv_£nd
(
√tif
, 
és
, 
t§
, 
pkt
,

2358 
CI_TCP_FLAG_SYN
 | 
CI_TCP_FLAG_ACK
, 
NULL
);

2360 
ª£t_out
:

2362 
	`ci_t˝_ª∂y_wôh_r°
(
√tif
, 
rxp
);

2364 
	}
}

2377 
	$h™dÀ_rx_li°í
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
,

2378 
ciù_t˝_rx_pkt
* 
rxp
, 
Æªady_∑r£d
)

2380 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

2381 
ci_ù_pkt_fmt
* 
tx_pkt
;

2382 
ci_ù4_hdr
* 
ù
 = 
	`oo_ù_hdr
(
pkt
);

2383 
ci_t˝_hdr
* 
t˝
 = 
rxp
->tcp;

2384 
ci_t˝_°©e_syƒecv
* 
t§
;

2385 
ci_ù_ˇched_hdrs
 
ùˇche
;

2386 
oo_•
 
loˇl_≥î
 = 
OO_SP_NULL
;

2387 
do_syncookõ
 = 0;

2389 
	`ci_as£π
(
és
);

2390 
	`ci_as£π
(
és
->
s
.
b
.
°©e
 =
CI_TCP_LISTEN
);

2392 if–
	`NI_OPTS
(
√tif
).
t˝_rx_checks
 )

2393 
	`ci_t˝_li°í_rx_checks
(
√tif
, 
és
, 
pkt
);

2395 
	`ci_√tif_put_⁄_po°_pﬁl
(
√tif
, &
és
->
s
.
b
);

2397 if–
pkt
->
ötf_i
 =
OO_INTF_I_LOOPBACK
 ) {

2398 
loˇl_≥î
 = 
pkt
->
pf
.
t˝_rx
.
lo
.
tx_sock
;

2399 
	`ci_as£π_equÆ
(
pkt
->
pf
.
t˝_rx
.
lo
.
rx_sock
, 
és
->
s
.
b
.
bufid
);

2401 
pkt
->
pf
.
t˝_rx
.
wödow
 = 
	`CI_BSWAP_BE16
(
t˝
->
t˝_wödow_be16
);

2402 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 -
	`CI_TCP_HDR_LEN
(
t˝
);

2403 
pkt
->
pf
.
t˝_rx
.
íd_£q
 = 
rxp
->
£q
 +Ökt->pf.t˝_rx.
∑y_Àn
;

2404 
pkt
->
pf
.
t˝_rx
.
íd_£q
 +=

2405 (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
Ë>> 
CI_TCP_FLAG_SYN_BIT
;

2406 
pkt
->
pf
.
t˝_rx
.
íd_£q
 +=

2407 (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
Ë>> 
CI_TCP_FLAG_FIN_BIT
;

2412 
	`ci_as£π_ge
(
pkt
->
pf
.
t˝_rx
.
∑y_Àn
, 0);

2414 if–
	`CI_TCP_HDR_LEN
(
t˝
Ë< (
ci_t˝_hdr
) ) {

2415 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

2418 if–
	`CI_UNLIKELY
(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_RST
) ) {

2419 
	`h™dÀ_rx_li°í_r°
(
√tif
, 
és
, 
rxp
);

2423 i‡(!
Æªady_∑r£d
Ë
	`ci_t˝_∑r£_›ti⁄s
(
√tif
, 
rxp
, 
NULL
);

2426 
	`ci_as£π
(~
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_RST
);

2428 if–(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_MASK
Ë=
CI_TCP_FLAG_SYN
 ) {

2434 if–
és
->
n_li°íq_√w
 > 
	`CI_MIN
—ls->
ac˚±q_max
,

2435 
	`ci_t˝_li°íq_max
(
√tif
)) / 4 &&

2436 (
	`ci_t˝_ac˚±q_n
(
és
Ë>és->
ac˚±q_max
 ||

2437 (
	`OO_SP_IS_NULL
(
√tif
->
°©e
->
‰ì_ïs_hód
) &&

2438 
√tif
->
°©e
->
n_ï_bufs
 =√tif->°©e->
max_ï_bufs


2440 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
syn_dr›_busy
);

2441 
‰ìpkt_out
;

2445 if–(
és
->
n_li°íq
 >
	`ci_t˝_li°íq_max
(
√tif
)) |

2446 –! 
	`ci_ni_aux_ˇn_Æloc
(
√tif
) ) ) {

2449 if–
	`NI_OPTS
(
√tif
).
t˝_syncookõs
 )

2450 
do_syncookõ
 = 1;

2460 if–
	`ci_t˝_ac˚±q_n
(
és
Ë>és->
ac˚±q_max
 )

2461 
	`ci_t˝_li°íq_dr›_ﬁde°
(
√tif
, 
és
);

2465 if–
és
->
n_li°íq
 >
	`ci_t˝_li°íq_max
(
√tif
) )

2466 
	`CITP_STATS_TCP_LISTEN
(++
és
->
°©s
.
n_li°íq_ovîÊow
);

2468 
	`CITP_STATS_TCP_LISTEN
(++
és
->
°©s
.
n_li°íq_no_syƒecv
);

2469 if–!
do_syncookõ
 )

2470 
‰ìpkt_out
;

2483 
	`ci_ù_ˇche_öô
(&
ùˇche
);

2484 
ùˇche
.
ù
.
ù_daddr_be32
 = ip->
ù_ßddr_be32
;

2485 
ùˇche
.
dp‹t_be16
 = 
t˝
->
t˝_sour˚_be16
;

2486 if–
	`CI_UNLIKELY
–
pkt
->
ötf_i
 =
OO_INTF_I_LOOPBACK
 ) ) {

2490 
ùˇche
.
°©us
 = 
ªårc_loˇÃouã
;

2491 
ùˇche
.
íˇp
.
ty≥
 = 
CICP_LLAP_TYPE_SFC
;

2492 
ùˇche
.
ëhî_off£t
 = 4;

2493 
ùˇche
.
ötf_i
 = 
OO_INTF_I_LOOPBACK
;

2494 
ùˇche
.
mtu
 = 
√tif
->
°©e
->
max_mss
;

2495 
	`ci˝_mac_£t_mo°ly_vÆid
(
	`CICP_USER_MIBS
(
	`CICP_HANDLE
(
√tif
)).
mac_uèbÀ
,

2496 &
ùˇche
.
mac_öãgrôy
);

2498 if–
	`NI_OPTS
(
√tif
).
t˝_li°í_ª∂õs_back
 ) {

2499 
ci_ifid_t
 
ifödex
;

2500 
rc
;

2502 if–
pkt
->
vœn
 ) {

2503 
ùˇche
.
íˇp
.
ty≥
 = 
CICP_LLAP_TYPE_VLAN
;

2504 
ùˇche
.
íˇp
.
vœn_id
 = 
pkt
->
vœn
;

2506 
ùˇche
.
íˇp
.
ty≥
 = 
CICP_LLAP_TYPE_SFC
;

2507 
ùˇche
.
íˇp
.
vœn_id
 = 0;

2509 
	`ci˝_ùˇche_vœn_£t
(&
ùˇche
);

2510 
ùˇche
.
ötf_i
 = 
pkt
->intf_i;

2511 
rc
 = 
	`ci˝_Œ≠_föd
(
	`CICP_HANDLE
(
√tif
), &
ifödex
,

2512 
√tif
->
°©e
->
ötf_i_to_hwp‹t
[
ùˇche
.
ötf_i
],

2513 
ùˇche
.
íˇp
.
vœn_id
);

2514 if–
rc
 == 0 ) {

2515 
rc
 = 
	`ci˝_Œ≠_ªåõve
(
	`CICP_HANDLE
(
√tif
),

2516 
ifödex
, &
ùˇche
.
mtu
,

2517 
NULL
, NULL, NULL, NULL, NULL);

2519 if–
rc
 == 0 ) {

2520 
	`ci_as£π
(
ùˇche
.
mtu
);

2521 
ùˇche
.
ù_ßddr_be32
 =

2522 
ùˇche
.
ù
.
ù_ßddr_be32
 = ip->
ù_daddr_be32
;

2523 
	`CI_MAC_ADDR_SET
(
	`ci_ù_ˇche_ëhî_dho°
(&
ùˇche
),

2524 
	`oo_ëhî_sho°
(
pkt
));

2525 
	`CI_MAC_ADDR_SET
(
	`ci_ù_ˇche_ëhî_sho°
(&
ùˇche
),

2526 
	`oo_ëhî_dho°
(
pkt
));

2527 
	`ci˝_mac_£t_mo°ly_vÆid
(
	`CICP_USER_MIBS
(
	`CICP_HANDLE
(
√tif
)).
mac_uèbÀ
,

2528 &
ùˇche
.
mac_öãgrôy
);

2529 
ùˇche
.
°©us
 = 
ªårc_suc˚ss
;

2532 
ùˇche
.
°©us
 = 
ªårc_Æõƒouã
;

2537 
oo_sock_˝œ√
 
sock_˝
 = 
és
->
s
.
˝
;

2538 
sock_˝
.
ù_œddr_be32
 = 
ù
->
ù_daddr_be32
;

2539 
sock_˝
.
Õ‹t_be16
 = 
t˝
->
t˝_de°_be16
;

2540 
	`ci˝_u£r_ªåõve
(
√tif
, &
ùˇche
, &
sock_˝
);

2543  
ùˇche
.
°©us
 ) {

2544 
ªårc_suc˚ss
:

2545 
ªårc_nomac
:

2547 
ªårc_loˇÃouã
:

2548 
ùˇche
.
Êags
 |
CI_IP_CACHE_IS_LOCALROUTE
;

2549 
ùˇche
.
ù_ßddr_be32
 = ipˇche.
ù
.ù_ßddr_be32 = ip->
ù_daddr_be32
;

2552 
	`LOG_U
(
	`ci_log
("%s:ÇoÑeturnÑouteÅo %sÉxists, droppingÜistenÑesponseÖkt",

2553 
__FUNCTION__
, 
	`ù_addr_°r
(
ù
->
ù_ßddr_be32
)));

2554 
	`LOG_DU
(
	`ci_hex_dump
(
ci_log_‚
, 
	`PKT_START
(
pkt
),

2555 
	`ù_pkt_dump_Àn
(
	`CI_BSWAP_BE16
(
ù
->
ù_tŸ_Àn_be16
)),

2557 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
syn_dr›_no_ªtu∫_rouã
);

2558 
‰ìpkt_out
;

2562 if–(
t§
 = 
	`ci_t˝_li°íq_lookup
(
√tif
, 
és
, 
rxp
)) ) {

2564 
	`h™dÀ_rx_syƒecv_ack
(
√tif
, 
és
, 
t§
, 
rxp
, &
ùˇche
);

2569 if–
	`NI_OPTS
(
√tif
).
t˝_syncookõs
 && (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_ACK
) &&

2570 
	`ci_t˝_ac˚±q_n
(
és
Ë<Åls->
ac˚±q_max
 ) {

2571 
ci_t˝_°©e_syƒecv
* 
t§
;

2572 
	`ci_t˝_syncookõ_ack
(
√tif
, 
és
, 
rxp
, &
t§
);

2573 if–
t§
 !
NULL
 ) {

2574 
t§
->
amss
 = 
ùˇche
.
mtu
 - (
ci_t˝_hdr
Ë- (
ci_ù4_hdr
);

2575 #i‡
CI_CFG_LIMIT_AMSS


2576 
t§
->
amss
 = 
	`ci_t˝_limô_mss
—§->amss, 
√tif
, 
__FUNCTION__
);

2578 
	`h™dÀ_rx_syƒecv_ack
(
√tif
, 
és
, 
t§
, 
rxp
, &
ùˇche
);

2587 
	`LOG_TC
(
	`log
(
LNT_FMT
 "LISTEN %s:%d->%s:%d on socket %s:%d",

2588 
	`LNT_PRI_ARGS
(
√tif
, 
és
), 
	`ù_addr_°r
(
ù
->
ù_ßddr_be32
),

2589 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_sour˚_be16
),

2590 
	`ù_addr_°r
(
ù
->
ù_daddr_be32
),

2591 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_de°_be16
),

2592 
	`ù_addr_°r
(
	`t˝_œddr_be32
(
és
)),

2593 (Ë
	`CI_BSWAP_BE16
(
	`t˝_Õ‹t_be16
(
és
))));

2597 if(
	`CI_UNLIKELY
–!
do_syncookõ
 &&

2598 
és
->
n_li°íq
 >
	`ci_t˝_li°íq_max
(
√tif
) )) {

2599 
	`CITP_STATS_TCP_LISTEN
(++
és
->
°©s
.
n_li°íq_ovîÊow
);

2600 
‰ìpkt_out
;

2602 if(
	`CI_UNLIKELY
–!
do_syncookõ
 && ! 
	`ci_ni_aux_ˇn_Æloc
(
√tif
) )) {

2603 
	`CITP_STATS_TCP_LISTEN
(++
és
->
°©s
.
n_li°íq_no_syƒecv
);

2604 
‰ìpkt_out
;

2607 if–
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_ACK
 ) {

2610 
	`LOG_TC
(
	`log
(
LNT_FMT
"LISTEN gŸ ACK, wû»ª£t",
	`LNT_PRI_ARGS
(
√tif
,
és
)));

2611 
	`CITP_STATS_TCP_LISTEN
(++
és
->
°©s
.
n_acks_ª£t
);

2612 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_£¡_li°í_gŸ_ack
);

2613 
ª£t_out
;

2616 if–~
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
 ) {

2617 
	`LOG_U
(
	`log
(
LNT_FMT
 "LISTEN gotÖacket without SYN, will drop",

2618 
	`LNT_PRI_ARGS
(
√tif
, 
és
)));

2619 
	`LOG_DU
(
	`ci_hex_dump
(
ci_log_‚
, 
	`PKT_START
(
pkt
),

2620 
	`ù_pkt_dump_Àn
(
	`CI_BSWAP_BE16
(
ù
->
ù_tŸ_Àn_be16
)),

2623 
‰ìpkt_out
;

2627 if–(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_MASK
Ë!
CI_TCP_FLAG_SYN
 ) {

2628 
	`LOG_U
(
	`log
(
LNT_FMT
 "LISTEN got SYN with other flags",

2629 
	`LNT_PRI_ARGS
(
√tif
, 
és
)));

2630 
	`LOG_DU
(
	`ci_hex_dump
(
ci_log_‚
, 
	`PKT_START
(
pkt
),

2631 
	`ù_pkt_dump_Àn
(
	`CI_BSWAP_BE16
(
ù
->
ù_tŸ_Àn_be16
)),

2637 (
ù
->
ù_daddr_be32
 =ù->
ù_ßddr_be32
 &&

2638 
pkt
->
ötf_i
 !
OO_INTF_I_LOOPBACK
)

2640 || (0 =
ù
->
ù_ßddr_be32
) || (0xffffffff == ip->ip_saddr_be32)

2642 || (
	`CI_IP_ADDR_EQUAL
(
ù
->
ù_ßddr_be32
, 127,0,0,0, 0xff000000) &&

2643 
pkt
->
ötf_i
 !
OO_INTF_I_LOOPBACK
)

2644 || (!
	`NI_OPTS
(
√tif
).
unc⁄föe_syn
 &&

2646 –(
	`CI_IP_ADDR_EQUAL
(
ù
->
ù_ßddr_be32
, 10,0,0,0, 0xff000000) &&

2647 !
	`CI_IP_ADDR_EQUAL
(
ù
->
ù_daddr_be32
, 10,0,0,0, 0xff000000))

2649 || (
	`CI_IP_ADDR_EQUAL
(
ù
->
ù_ßddr_be32
, 172,16,0,0, 0xffff0000) &&

2650 !
	`CI_IP_ADDR_EQUAL
(
ù
->
ù_daddr_be32
, 172,16,0,0, 0xffff0000))

2652 || (
	`CI_IP_ADDR_EQUAL
(
ù
->
ù_ßddr_be32
, 192,168,0,0, 0xffff0000) &&

2653 !
	`CI_IP_ADDR_EQUAL
(
ù
->
ù_daddr_be32
, 192,168,0,0, 0xffff0000))

2656 
	`LOG_U
(
	`log
(
LNT_FMT
 "LISTEN ignoring SYN: bad src/dst",

2657 
	`LNT_PRI_ARGS
(
√tif
, 
és
));

2658 
	`log
(
LPF
 " ----> S[%s], D[%s]", 
	`ù_addr_°r
(
ù
->
ù_ßddr_be32
),

2659 
	`ù_addr_°r
(
ù
->
ù_daddr_be32
)));

2660 
‰ìpkt_out
;

2667 if–
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 ) {

2668 
	`LOG_U
(
	`log
(
LPF
 "%d LISTEN SYN wôh d©®(%d byãs)", 
	`S_FMT
(
és
),

2669 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
));

2670 
	`LOG_DU
(
	`ci_hex_dump
(
ci_log_‚
, 
	`PKT_START
(
pkt
),

2671 
	`ù_pkt_dump_Àn
(
	`CI_BSWAP_BE16
(
ù
->
ù_tŸ_Àn_be16
)),

2676 if–
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
 ) {

2677 
	`LOG_U
(
	`log
(
LPF
 "%d LISTEN gŸ segmíàwôh FIN, wû»dr›", 
	`S_FMT
(
és
)));

2678 
‰ìpkt_out
;

2682 if–
do_syncookõ
 ) {

2683 
t§
 = 
	`ci_Æloc
((
ci_t˝_°©e_syƒecv
));

2688 
t§
 = 
	`ci_ni_aux_p2syƒecv
(
√tif
,

2689 
	`ci_ni_aux_Æloc
(
√tif
,

2690 
CI_TCP_AUX_TYPE_SYNRECV
));

2691 
t§
->
buckë_lök
 = 
OO_P_NULL
;

2692 
t§
->
hash
 = 
rxp
->hash;

2696 
	`mem£t
(&
t§
->
t˝›ts
, 0, (tsr->tcpopts));

2697 
t§
->
t˝›ts
.
smss
 = 
CI_CFG_TCP_DEFAULT_MSS
;

2698 if–
ùˇche
.
Êags
 & 
CI_IP_CACHE_IS_LOCALROUTE
 )

2699 
t§
->
loˇl_≥î
 =Üocal_peer;

2701 
t§
->
loˇl_≥î
 = 
OO_SP_NULL
;

2703 
t§
->
t˝›ts
.
Êags
 = 0;

2704 if–
	`ci_t˝_∑r£_›ti⁄s
(
√tif
, 
rxp
, &
t§
->
t˝›ts
) < 0 ) {

2705 #i‡
CI_CFG_TCP_INVALID_OPT_RST


2707 
	`LOG_U
(
	`log
(
LPF
 "%d LISTEN bad SYN o±i⁄†wû»ª£t", 
	`S_FMT
(
és
)));

2708 if–
do_syncookõ
 )

2709 
	`ci_‰ì
(
t§
);

2711 
	`ci_t˝_syƒecv_‰ì
(
√tif
, 
t§
);

2712 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_£¡_bad_›ti⁄s
);

2713 
ª£t_out
;

2717 
t§
->
t˝›ts
.
Êags
 |
rxp
->Êag†& 
CI_TCPT_FLAG_TSO
;

2718 if–
t§
->
t˝›ts
.
Êags
 & 
CI_TCPT_FLAG_TSO
 )

2719 
t§
->
t•ìr
 = 
rxp
->
time°amp
;

2721 if–!
do_syncookõ
 ) {

2722 if–! 
	`ci_t˝_ˇn_°rùe
(
√tif
, 
ù
->
ù_daddr_be32
,ù->
ù_ßddr_be32
) )

2723 
t§
->
t˝›ts
.
Êags
 &=~ 
CI_TCPT_FLAG_STRIPE
;

2724 
t§
->
t˝›ts
.
Êags
 &
	`NI_OPTS
(
√tif
).
syn_›ts
 | 
CI_TCPT_FLAG_STRIPE
;

2728 
t§
->
l_addr
 = 
ù
->
ù_daddr_be32
;

2729 
t§
->
r_addr
 = 
ù
->
ù_ßddr_be32
;

2730 
t§
->
r_p‹t
 = 
t˝
->
t˝_sour˚_be16
;

2733 
t§
->
time°
 = 
	`ci_t˝_time_now
(
√tif
);

2734 
t§
->
rcv_nxt
 = 
rxp
->
£q
 + 1;

2735 if–
	`NI_OPTS
(
√tif
).
t˝_rcvbuf_mode
 == 1 )

2737 
t§
->
rcv_ws˛
 = (
ci_uöt8
)

2738 
	`ci_t˝_ws˛_by_buff
(
√tif
,

2739 
	`ci_t˝_max_rcvbuf
(
√tif
,Çëif->
°©e
->
max_mss
));

2741 
t§
->
rcv_ws˛
 = (
ci_uöt8
)

2742 
	`ci_t˝_ws˛_by_buff
(
√tif
,

2743 
	`ci_t˝_rcvbuf_e°ablished
(
√tif
, &
és
->
s
));

2745 if–
do_syncookõ
 )

2746 
	`ci_t˝_syncookõ_syn
(
√tif
, 
és
, 
t§
);

2748 
t§
->
¢d_i¢
 = 
	`ci_t˝_öôül_£qno
(
√tif
);

2751 
	`ci_t˝_li°íq_ö£π
(
√tif
, 
és
, 
t§
);

2752 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
li°í2syƒecv
);

2755 
	`LOG_TC
(if–
t§
->
amss
 =0 )Å§->ams†
√tif
->
°©e
->
max_mss
;

2756 
	`log
(
LNT_FMT
 "SYN-RECVÑcv=%08x-%08x snd=%08x-%08x",

2757 
	`LNT_PRI_ARGS
(
√tif
, 
és
),

2758 
t§
->
rcv_nxt
,Åsr->rcv_nxt +

2759 
	`ci_t˝_rcvbuf2wödow
(
és
->
s
.
so
.
rcvbuf
,

2760 
t§
->
amss
,Å§->
rcv_ws˛
),

2761 
t§
->
¢d_i¢
,Å§->¢d_i¢ + 
pkt
->
pf
.
t˝_rx
.
wödow
));

2764 
	`CI_TCP_STATS_INC_PASSIVE_OPENS
–
√tif
 );

2765 if–
	`OO_SP_NOT_NULL
(
t§
->
loˇl_≥î
) )

2766 
	`ci_√tif_pkt_hﬁd
(
√tif
, 
pkt
);

2767 
tx_pkt
 = 
	`ci_√tif_pkt_rx_to_tx
(
√tif
, 
pkt
);

2768 if–
tx_pkt
 !
NULL
 )

2769 
	`ci_t˝_syƒecv_£nd
(
√tif
, 
és
, 
t§
, 
tx_pkt
,

2770 
CI_TCP_FLAG_SYN
 | 
CI_TCP_FLAG_ACK
, &
ùˇche
);

2772 if–
	`OO_SP_NOT_NULL
(
t§
->
loˇl_≥î
) ) {

2773 
ci_t˝_°©e
 *
ts
 = 
NULL
;

2774 
ci_t˝_°©e
* 
≥î
 = 
	`ID_TO_TCP
(
√tif
, 
t§
->
loˇl_≥î
);

2776 if–(
és
->
c
.
t˝_de„r_ac˚±
 !
OO_TCP_DEFER_ACCEPT_OFF
 ) &&

2777 
	`SEQ_EQ
(
rxp
->
£q
 + 1, 
pkt
->
pf
.
t˝_rx
.
íd_£q
) ) {

2778 
	`CITP_STATS_TCP_LISTEN
(++
√tif
->
°©e
->
°©s
.
ac˚±s_de„ºed
);

2779 
≥î
->
t˝Êags
 |
CI_TCPT_FLAG_LOOP_DEFERRED
;

2780 
	`LOG_TC
(
	`log
(
LNT_FMT
 "loopback connection deferred",

2781 
	`LNT_PRI_ARGS
(
√tif
, 
≥î
)));

2783 if–
	`ci_t˝_li°íq_åy_¥omŸe
(
√tif
, 
és
, 
t§
, &
ùˇche
, &
ts
) < 0 ) {

2784 
	`CI_TCP_EXT_STATS_INC_LISTEN_DROPS
–
√tif
 );

2785 
	`LOG_U
(
	`log
(
LNT_FMT
 "SYNRECV failedÅoÖromoteÜocal connection "

2786 "tÿac˚±q", 
	`LNT_PRI_ARGS
(
√tif
, 
és
)));

2787 
	`ci_t˝_dr›
(
√tif
, 
≥î
, 
EBUSY
);

2789 
	`ci_√tif_pkt_ªÀa£
(
√tif
, 
pkt
);

2792 if–
do_syncookõ
 )

2793 
	`ci_‰ì
(
t§
);

2796 
‰ìpkt_out
:

2797 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

2800 
ª£t_out
:

2802 
	`ci_t˝_ª∂y_wôh_r°
(
√tif
, 
rxp
);

2804 
	}
}

2810 
	$h™dÀ_syn_£¡_›ts
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

2811 
ciù_t˝_rx_pkt
* 
rxp
)

2813 
ci_t˝_›ti⁄s
 
t˝›ts
;

2814 
›éí
 = 0;

2817 
	`mem£t
(&
t˝›ts
, 0, (tcpopts));

2818 
t˝›ts
.
smss
 = 
CI_CFG_TCP_DEFAULT_MSS
;

2820 
t˝›ts
.
Êags
 = 0;

2821 if–
	`ci_t˝_∑r£_›ti⁄s
(
√tif
, 
rxp
, &
t˝›ts
) < 0 ) {

2822 #i‡
CI_CFG_TCP_INVALID_OPT_RST


2824 
	`LOG_U
(
	`log
(
LPF
 "%d SYN-SENTÉrror in options willÑeset",

2825 
	`S_FMT
(
ts
)));

2826 
	`ci_t˝_dr›
(
√tif
, 
ts
, 
ECONNRESET
);

2828 
	`ci_t˝_£t_Êags
(
ts
, 
CI_TCP_FLAG_ACK
);

2829 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_£¡_bad_›ti⁄s
);

2830 
	`ci_t˝_ª∂y_wôh_r°
(
√tif
, 
rxp
);

2834 
t˝›ts
.
Êags
 |
rxp
->Êag†& 
CI_TCPT_FLAG_TSO
;

2836 if–
ts
->
t˝Êags
 & 
t˝›ts
.
Êags
 & 
CI_TCPT_FLAG_WSCL
 ) {

2837 
ts
->
¢d_ws˛
 = 
t˝›ts
.
ws˛_sh·
;

2838 
	`CI_IP_SOCK_STATS_VAL_TXWSCL
–
ts
,Ås->
¢d_ws˛
 );

2841 
ts
->
¢d_ws˛
 =Ås->
rcv_ws˛
 = 0u;

2842 
	`CI_IP_SOCK_STATS_VAL_TXWSCL
–
ts
,Ås->
¢d_ws˛
 );

2843 
	`CI_IP_SOCK_STATS_VAL_RXWSCL
–
ts
,Ås->
rcv_ws˛
 );

2844 
ts
->
t˝Êags
 &=~ 
CI_TCPT_FLAG_WSCL
;

2847 
ts
->
t¶a°ack
 = 
	`t˝_rcv_nxt
(ts);

2848 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

2849 if–
rxp
->
Êags
 & 
CI_TCPT_FLAG_TSO
) {

2851 
ts
->
öcomög_t˝_hdr_Àn
 += 12;

2852 
›éí
 = 12;

2854 #i‚de‡
NDEBUG


2855 
ts
->
t¶a°£q
 = 
rxp
->
£q
;

2857 
ts
->
t§e˚¡
 = 
rxp
->
time°amp
;

2858 
ts
->
t•aws
 = 
	`ci_t˝_time_now
(
√tif
);

2861 
oo_pkt_p
 
id
;

2862 
ci_ù_pkt_queue
 *
txq
 = &
ts
->
£nd
;

2863 
ci_ù_pkt_fmt
 *
p
;

2864 
ci_uöt8
 *
›t
;

2866  
id
 = 
txq
->
hód
; 
	`OO_PP_NOT_NULL
(id); id = 
p
->
√xt
 ) {

2867 
p
 = 
	`PKT_CHK
(
√tif
, 
id
);

2868 
›t
 = 
	`CI_TCP_HDR_OPTS
(
	`TX_PKT_TCP
(
p
));

2869 if–
	`CI_TCP_HDR_OPT_LEN
(
	`TX_PKT_TCP
(
p
)) >= 12 )

2870 *
›t
 = 0;

2872 
ts
->
t˝Êags
 &~
CI_TCPT_FLAG_TSO
;

2875 if–!(
t˝›ts
.
Êags
 & 
CI_TCPT_FLAG_SACK
) )

2876 
ts
->
t˝Êags
 &=~ 
CI_TCPT_FLAG_SACK
;

2877 if–!(
t˝›ts
.
Êags
 & 
CI_TCPT_FLAG_STRIPE
) )

2878 
ts
->
t˝Êags
 &=~ 
CI_TCPT_FLAG_STRIPE
;

2880 
ts
->
outgoög_hdrs_Àn
 = (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
Ë+ 
›éí
;

2881 
	`ci_t˝_£t_hdr_Àn
(
ts
, (
ci_t˝_hdr
Ë+ 
›éí
);

2883 
ts
->
smss
 = 
t˝›ts
.smss;

2884 i‡(
ts
->
c
.
u£r_mss
 &&Ås->c.u£r_ms†<Ås->
smss
)

2885 
ts
->
smss
 =Ås->
c
.
u£r_mss
;

2886 #i‡
CI_CFG_LIMIT_SMSS


2887 
ts
->
smss
 = 
	`ci_t˝_limô_mss
—s->smss, 
√tif
, 
__FUNCTION__
);

2889 
	`ci_as£π_gt
(
ts
->
smss
, 0);

2890 
	`ci_t˝_£t_eff_mss
(
√tif
, 
ts
);

2891 
	`ci_t˝_£t_öôülcwnd
(
√tif
, 
ts
);

2893 
	}
}

2896 
	$h™dÀ_rx_syn_£¡
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

2897 
ciù_t˝_rx_pkt
* 
rxp
)

2899 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

2900 
ci_t˝_hdr
* 
t˝
 = 
rxp
->tcp;

2903 
	`ci_as£π
(~
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_RST
);

2906 if–
pkt
->
ötf_i
 =
OO_INTF_I_LOOPBACK
 ) {

2907 
ci_t˝_°©e
* 
≥î
 = 
	`ID_TO_TCP
(
√tif
, 
ts
->
loˇl_≥î
);

2908 
	`ci_as£π
(
ts
->
s
.
pkt
.
Êags
 & 
CI_IP_CACHE_IS_LOCALROUTE
);

2909 if–
	`h™dÀ_syn_£¡_›ts
(
√tif
, 
ts
, 
rxp
) < 0 ) ;

2910 
ts
->
¢d_u«
 =Ås->
¢d_nxt
;

2914 
ts
->
¢d_max
 =Ås->
¢d_nxt
 + 
≥î
->
s
.
so
.
rcvbuf
;

2916 if–
≥î
->
s
.
b
.
°©e
 !
CI_TCP_LISTEN
 )

2917 
≥î
->
¢d_max
 =Öìr->
¢d_u«
 + 
ts
->
s
.
so
.
rcvbuf
;

2919 
£t_i¢
;

2923 
	`ci_as£π
(!
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
));

2933 if–
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
 ) {

2934 
	`LOG_U
(
	`log
(
LPF
 "%d SYN-SENT got segment with FIN (ignored)",

2935 
	`S_FMT
(
ts
)));

2936 
‰ì_out
;

2944 if–
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_ACK
 ) {

2945 if–
	`SEQ_LE
(
rxp
->
ack
, 
	`t˝_¢d_u«
(
ts
)) ||

2946 
	`SEQ_LT
(
	`t˝_¢d_nxt
(
ts
), 
rxp
->
ack
) ) {

2947 
	`LOG_U
(
	`log
(
LPF
 "%d SYN-SENT unacceptable ACK willÑeset",

2948 
	`S_FMT
(
ts
)));

2949 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_£¡_u«c˚±abÀ_ack
);

2950 
	`ci_t˝_ª∂y_wôh_r°
(
√tif
, 
rxp
);

2957 
	`ci_as£π
(~
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_RST
);

2964 if–
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
 ) {

2965 if–~
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_ACK
 ) {

2967 
	`LOG_U
(
	`log
(
LPF
 "%d SYN-SENT simu…™eou†›í", 
	`S_FMT
(
ts
)));

2968 
‰ì_out
;

2973 
	`LOG_U
(
	`log
(
LPF
 "%d SYN-SENT ignoredÖacket without SYN/RST flags=0x%x "

2975 
	`S_FMT
(
ts
), 
t˝
->
t˝_Êags
));

2976 
‰ì_out
;

2985 if–
	`h™dÀ_syn_£¡_›ts
(
√tif
, 
ts
, 
rxp
) < 0 ) ;

2989 
	`ci_as£π
(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_ACK
);

2990 
	`ci_t˝_rx_h™dÀ_ack
(
ts
, 
√tif
, 
rxp
);

2996 
	`ci_t˝_£t_¢d_max
(
ts
, 
rxp
->
£q
,Ñxp->
ack
, 
pkt
->
pf
.
t˝_rx
.
wödow
);

2998 
£t_i¢
:

3000 
	`ci_t˝_rx_£t_i¢
(
ts
, 
pkt
->
pf
.
t˝_rx
.
íd_£q
);

3002 
	`ci_t˝_£t_e°ablished_°©e
(
√tif
, 
ts
);

3003 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
a˘ive_›ís
);

3005 
	`ci_as£π
(
	`CI_TCP_HDR_LEN
(
	`TS_TCP
(
ts
)) ==

3006 (
ci_t˝_hdr
Ë+ 
	`t˝_outgoög_›ts_Àn
(
ts
));

3007 
	`ci_t˝_£t_öôülcwnd
(
√tif
, 
ts
);

3008 
	`ci_as£π_gt
(
ts
->
rcv_wödow_max
,0);

3009 
	`ci_t˝_öô_rcv_wnd
(
ts
, "SYN SENT");

3011 
	`LOG_TC
(
	`log
(
LPF
 "%d SYN-SENT->ESTABLISHED " 
RCV_WND_FMT
 " snd=%08x-%08x-%08x"

3013 
	`S_FMT
(
ts
), 
	`RCV_WND_ARGS
(ts),

3014 
	`t˝_¢d_u«
(
ts
), 
	`t˝_¢d_nxt
—s),Ås->
¢d_max
, 
	`t˝_íq_nxt
(ts)));

3017 if–
	`ci_t˝_£ndq_nŸ_em±y
(
ts
) ) {

3018 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

3019 
	`ci_t˝_tx_adv™˚
(
ts
, 
√tif
);

3021 i‡–
	`OO_SP_NOT_NULL
(
ts
->
loˇl_≥î
) ) {

3022 
	`ci_t˝_£nd_ack_lo›back
(
√tif
, 
ts
, 
CI_FALSE
);

3023 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

3026 
pkt
 = 
	`ci_√tif_pkt_rx_to_tx
(
√tif
,Ökt);

3027 if–
pkt
 !
NULL
 )

3028 
	`ci_t˝_£nd_ack
(
√tif
, 
ts
, 
pkt
, 
CI_FALSE
);

3031 
	`ci_t˝_wake
(
√tif
, 
ts
, 
CI_SB_FLAG_WAKE_RX
 | 
CI_SB_FLAG_WAKE_TX
);

3034 
‰ì_out
:

3035 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

3037 
	}
}

3040 
	$h™dÀ_rx_˛o£_waô
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
,

3041 
ciù_t˝_rx_pkt
* 
rxp
)

3043 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

3046 
	`ci_as£π
(~
rxp
->
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_RST
);

3048 #i‚de‡
NDEBUG


3052 if–
	`SEQ_LT
(
	`t˝_rcv_nxt
(
ts
), 
pkt
->
pf
.
t˝_rx
.
íd_£q
) ) {

3053 
	`LOG_U
(
	`log
(
LPF
 "%d CLOSE-WAIT d©®a·î FIN " 
TCP_RX_FMT
,

3054 
	`S_FMT
(
ts
), 
	`TCP_RX_ARGS
(
pkt
,Ås)));

3056 if–
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 ) {

3057 
	`LOG_TR
(
	`log
(
LPF
 "%d CLOSE-WAIT du∂iˇã d©®" 
TCP_RX_FMT
,

3058 
	`S_FMT
(
ts
), 
	`TCP_RX_ARGS
(
pkt
,Ås)));

3060 if–
rxp
->
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
 )

3061 
	`LOG_U
(
	`log
(
LPF
 "%d CLOSE-WAIT gŸ SYN", 
	`S_FMT
(
ts
)));

3064 if–
	`ci_t˝_£ndq_nŸ_em±y
(
ts
) )

3065 
	`ci_t˝_tx_adv™˚
(
ts
, 
√tif
);

3067 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

3068 
	}
}

3071 
	$h™dÀ_rx_œ°_ack_‹_˛osög
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
,

3072 
ciù_t˝_rx_pkt
* 
rxp
,

3073 
√xt_°©e
)

3075 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

3078 
	`ci_as£π
(~
rxp
->
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_RST
);

3080 #i‚de‡
NDEBUG


3081 if–
rxp
->
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
 )

3082 
	`LOG_U
(
	`log
(
LPF
 "%d %†ßw SYN!", 
	`S_FMT
(
ts
), 
	`°©e_°r
(ts)));

3087 if–
	`SEQ_EQ
(
	`t˝_¢d_u«
(
ts
), 
	`t˝_íq_nxt
(ts)) ) {

3088 
	`ci_as£π
(
	`ci_t˝_£ndq_is_em±y
(
ts
));

3089 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
));

3094 
	`ci_as£π
(
	`SEQ_EQ
(
rxp
->
ack
, 
	`t˝_¢d_nxt
(
ts
)));

3099 if–
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 ) {

3100 
	`LOG_U
(
	`log
(
LPF
 "%d %†bad d©®" 
TCP_RX_FMT
,

3101 
	`S_FMT
(
ts
), 
	`°©e_°r
—s), 
	`TCP_RX_ARGS
(
pkt
,Ås)));

3104 
	`LOG_TC
(
	`log
(
LNT_FMT
 "%s->%s", 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
	`°©e_°r
(ts),

3105 
	`ci_t˝_°©e_°r
(
√xt_°©e
)));

3107 
	`ci_t˝_wake
(
√tif
, 
ts
, 
CI_SB_FLAG_WAKE_RX
 | 
CI_SB_FLAG_WAKE_TX
);

3112 if–
√xt_°©e
 =
CI_TCP_CLOSED
 ) {

3113 
	`ci_t˝_dr›
(
√tif
, 
ts
, 0);

3120 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_ACTIVE_WILD
 )

3121 
	`ci_√tif_a˘ive_wûd_sh¨î_˛o£d
(
√tif
, &
ts
->
s
);

3124 
	`ci_as£π
(
√xt_°©e
 =
CI_TCP_TIME_WAIT
);

3125 
ts
->
s
.
tx_î∫o
 = 
EPIPE
;

3126 
ts
->
s
.
rx_î∫o
 |
CI_SHUT_RD
;

3127 
	`ci_as£π
(
	`ci_t˝_£ndq_is_em±y
(
ts
));

3128 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
));

3129 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
rob
));

3130 
	`ci_√tif_timewaô_íãr
(
√tif
, 
ts
);

3131 
	`ci_t˝_£t_¶ow_°©e
(
√tif
, 
ts
, 
√xt_°©e
);

3135 if–
	`ci_t˝_£ndq_nŸ_em±y
(
ts
) )

3136 
	`ci_t˝_tx_adv™˚
(
ts
, 
√tif
);

3138 #i‚de‡
NDEBUG


3142 if–
	`SEQ_LT
(
	`t˝_rcv_nxt
(
ts
), 
pkt
->
pf
.
t˝_rx
.
íd_£q
) ) {

3143 
	`LOG_U
(
	`log
(
LPF
 "%d %†d©®a·î " 
TCP_RX_FMT
,

3144 
	`S_FMT
(
ts
), 
	`°©e_°r
—s), 
	`TCP_RX_ARGS
(
pkt
,Ås)));

3146 if–
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 ) {

3147 
	`LOG_TR
(
	`log
(
LPF
 "%d %†du∂iˇã d©®" 
TCP_RX_FMT
,

3148 
	`S_FMT
(
ts
), 
	`°©e_°r
—s), 
	`TCP_RX_ARGS
(
pkt
,Ås)));

3153 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

3154 
	}
}

3157 
ci_ölöe
 
	$h™dÀ_rx_fö_waô_1
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
)

3159 if–
	`ci_t˝_£ndq_is_em±y
(
ts
) &&

3160 
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
) ) {

3162 
	`LOG_TC
(
	`log
(
LPF
 "%d FIN-WAIT1->FIN-WAIT2", 
	`S_FMT
(
ts
)));

3163 
	`ci_t˝_£t_¶ow_°©e
(
√tif
, 
ts
, 
CI_TCP_FIN_WAIT2
);

3164 
	`ci_t˝_wake
(
√tif
, 
ts
, 
CI_SB_FLAG_WAKE_TX
);

3166 i‡–
	`ci_t˝_is_timeout_‹ph™
(
ts
) )

3167 
	`ci_√tif_timeout_ª°¨t
(
√tif
, 
ts
);

3169 
	}
}

3177 
	$h™dÀ_rx_mö‹_°©es
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
,

3178 
ciù_t˝_rx_pkt
* 
rxp
)

3180 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

3181 
ci_t˝_hdr
* 
t˝
 = 
rxp
->tcp;

3183  
ts
->
s
.
b
.
°©e
 ) {

3184 
CI_TCP_SYN_SENT
:

3185 
	`h™dÀ_rx_syn_£¡
(
√tif
, 
ts
, 
rxp
);

3187 
CI_TCP_CLOSE_WAIT
:

3188 
	`h™dÀ_rx_˛o£_waô
(
ts
, 
√tif
, 
rxp
);

3190 
CI_TCP_LAST_ACK
:

3191 
	`h™dÀ_rx_œ°_ack_‹_˛osög
(
ts
, 
√tif
, 
rxp
, 
CI_TCP_CLOSED
);

3193 
CI_TCP_CLOSING
:

3194 
	`h™dÀ_rx_œ°_ack_‹_˛osög
(
ts
, 
√tif
, 
rxp
, 
CI_TCP_TIME_WAIT
);

3196 
CI_TCP_FIN_WAIT1
:

3200 
	`h™dÀ_rx_fö_waô_1
(
ts
, 
√tif
);

3201 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
rxp
->
pkt
);

3203 
CI_TCP_TIME_WAIT
:

3211 if(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
) {

3212 i‡(
	`SEQ_LT
(
	`t˝_rcv_nxt
(
ts
), 
rxp
->
£q
) ||

3213 ((
ts
->
t˝Êags
 & 
rxp
->
Êags
 & 
CI_TCPT_FLAG_TSO
) &&

3214 
	`TIME_GE
(
rxp
->
time°amp
, 
ts
->
t§e˚¡
)) ){

3215 
fûãr_id
;

3216 
	`LOG_TV
(

3217 i‡(!
	`SEQ_LT
(
	`t˝_rcv_nxt
(
ts
), 
rxp
->
£q
))

3218 
	`log
(
LPF
 "old SYN seqÇumberáccepted usingÅimestamp %x >= %x",

3219 
rxp
->
time°amp
, 
ts
->
t§e˚¡
);

3226 
	`LOG_TV
(
	`log
(
LPF
 "SYN in TIME WAIT state,Ñecycling connection"));

3227 
	`ci_√tif_timeout_Àave
(
√tif
, 
ts
);

3229 
fûãr_id
 = 
	`ci_√tif_li°íî_lookup
(
√tif
,

3230 
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
,

3231 
t˝
->
t˝_de°_be16
);

3233 if–
fûãr_id
 >= 0 ) {

3234 
ci_t˝_sockë_li°í
* 
és
;

3235 
és
 = 
	`SP_TO_TCP_LISTEN
(
√tif
,

3236 
	`CI_NETIF_FILTER_ID_TO_SOCK_ID
(
√tif
, 
fûãr_id
));

3237 
	`ci_as£π
(
és
->
s
.
b
.
°©e
 =
CI_TCP_LISTEN
);

3241 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 +
	`CI_TCP_HDR_LEN
(
t˝
);

3242 
	`h™dÀ_rx_li°í
(
√tif
, 
és
, 
rxp
, 1);

3246 
	`LOG_U
(
	`log
(
LPF
 "no matchingÜistener for SYN in TIME_WAIT"));

3249 
	`LOG_U
(
	`log
(
LPF
 "SYN in TIME_WAIT has old SEQ - staying in TIME_WAIT"));

3252 
	`LOG_U
(
	`log
(
LPF
 "unexpectedÖacketÑeceived while in TIME_WAIT"));

3253 
	`LOG_DU
(
	`ci_hex_dump
(
ci_log_‚
, 
	`PKT_START
(
pkt
), 64, 0));

3254 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

3256 
CI_TCP_CLOSED
:

3269 
	`ci_as£π
(
pkt
->
ötf_i
 =
OO_INTF_I_LOOPBACK
);

3270 if(!(
pkt
->
ötf_i
 =
OO_INTF_I_LOOPBACK
))

3271 
	`LOG_E
(
	`ci_log
(
LNT_FMT
 "ERROR demuxÅo CLOSED socket",

3272 
	`LNT_PRI_ARGS
(
√tif
, 
ts
)));

3273 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_£¡_no_m©ch
);

3274 
	`ci_t˝_ª∂y_wôh_r°
(
√tif
, 
rxp
);

3281 
	}
}

3284 #i‚de‡
NDEBUG


3286 
	$ex∂aö_why_£q_u«c˚±abÀ
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

3287 
ciù_t˝_rx_pkt
* 
rxp
)

3289 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

3291 
	`log
(
LNTS_FMT
 "SEQ UNACCEPTABLE "
TCP_RX_FMT
" ...",

3292 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
), 
	`TCP_RX_ARGS
(
rxp
->
pkt
,Ås));

3295 if–! 
	`SEQ_EQ
(
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
rxp
->
£q
) &&

3296 
	`t˝_rcv_wnd_right_edge_£¡
(
ts
Ë=
	`t˝_rcv_nxt
(ts) &&

3297 
	`SEQ_LT
(
pkt
->
pf
.
t˝_rx
.
íd_£q
-1, 
	`t˝_rcv_nxt
(
ts
)) &&

3298 (~
ci_ç_log
 & 
CI_TP_LOG_TV
) )

3303 if–
ts
->
t˝Êags
 & 
rxp
->
Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

3304 if–
	`ci_t˝_∑ws_check
(
√tif
, 
rxp
->
time°amp
,

3305 
ts
->
t•aws
,Ås->
t§e˚¡
) ) {

3310 if–
	`SEQ_EQ
(
rxp
->
£q
, 
ts
->
t¶a°ack
)

3311 && 
	`SEQ_EQ
(
ts
->
t¶a°ack
,Ås->
t¶a°£q
)

3312 && 
	`SEQ_EQ
(
rxp
->
£q
, 
pkt
->
pf
.
t˝_rx
.
íd_£q
) )

3313 
	`log
("\tPAWSÑeorderedÅsval=0x%xÅsrecent=0x%x "

3314 "t¶a°ack=0x%xÅ¶a°£q=0x%x", 
rxp
->
time°amp
,

3315 
ts
->
t§e˚¡
,Ås->
t¶a°ack
,Ås->
t¶a°£q
);

3317 
	`log
("\tPAWS FAILEDÅsval=0x%xÅsrecent=0x%x "

3318 "t¶a°ack=0x%xÅ¶a°£q=0x%x", 
rxp
->
time°amp
,

3319 
ts
->
t§e˚¡
,Ås->
t¶a°ack
,Ås->
t¶a°£q
);

3322 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 )

3323 
	`log
("\tTSO missing");

3325 if–
	`SEQ_EQ
(
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
rxp
->
£q
) ) {

3326 if–
	`t˝_rcv_wnd_right_edge_£¡
(
ts
Ë=
	`t˝_rcv_nxt
(ts) ) {

3328 if–! 
	`SEQ_EQ
(
rxp
->
£q
, 
	`t˝_rcv_nxt
(
ts
)) )

3329 
	`log
("\tseg.len=0,Ñcv.wnd=0, seg.seq!=rcv.nxt");

3331 if–
	`SEQ_LT
(
rxp
->
£q
, 
	`t˝_rcv_nxt
(
ts
)) )

3332 
	`log
("\tseg.len=0,Ñcv.wnd>0, seg.seq<rcv.nxt");

3333 if–
	`SEQ_LE
(
	`t˝_rcv_wnd_right_edge_£¡
(
ts
), 
rxp
->
£q
) )

3334 
	`log
("\tseg.len=0,Ñcv.wnd>0, seg.seq>rcv.nxt+rcv.wnd");

3336 if(
	`t˝_rcv_wnd_right_edge_£¡
(
ts
Ë=
	`t˝_rcv_nxt
(ts)) {

3338 
	`log
("\tseg.len>0,Ñcv.wnd=0");

3342 if–
	`SEQ_LT
(
pkt
->
pf
.
t˝_rx
.
íd_£q
-1, 
	`t˝_rcv_nxt
(
ts
)) ) {

3343 
	`log
("\tseg.len>0,Ñcv.wnd>0, "

3345 
	`log
("\tIfÉxperiencingÜoss &Ñeordering,Örobably unnecessary "

3348 if–
	`SEQ_LE
(
	`t˝_rcv_wnd_right_edge_£¡
(
ts
), 
rxp
->
£q
) )

3349 
	`log
("\tseg.len>0,Ñcv.wnd>0, seg.seq>=rcv.nxt+rcv.wnd,"

3352 
	}
}

3354 
	$ex∂aö_why_⁄_¶ow_∑th
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

3355 
ciù_t˝_rx_pkt
* 
rxp
)

3357 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

3358 
ci_t˝_hdr
* 
t˝
 = 
rxp
->tcp;

3360 
	`log
(
LPF
 "%d SLOW...", 
	`S_FMT
(
ts
));

3362 if–
ts
->
Á°_∑th_check
 =~
CI_TCP_FAST_PATH_MASK
 )

3363 
	`log
("\tfast_disabled");

3364 if–(
	`CI_TCP_FAST_PATH_WORD
(
t˝
Ë& 
CI_TCP_FAST_PATH_MASK
)

3365 !
ts
->
Á°_∑th_check
 )

3366 
	`log
("\tfast_check(%x,%x)",

3367 ()(
	`CI_TCP_FAST_PATH_WORD
(
t˝
)&
CI_TCP_FAST_PATH_MASK
),

3368 ()
ts
->
Á°_∑th_check
);

3369 if–
rxp
->
£q
 - 
	`t˝_rcv_nxt
(
ts
) )

3370 
	`log
("\t£q(%08x)!Ùcv_nxt(%08x)", 
rxp
->
£q
, 
	`t˝_rcv_nxt
(
ts
));

3371 if–
	`SEQ_LT
(
	`t˝_rcv_wnd_right_edge_£¡
(
ts
), 
pkt
->
pf
.
t˝_rx
.
íd_£q
) )

3372 
	`log
("\äŸ_ö_wö(" 
RCV_WND_FMT
 "Énd_seq=%08x)",

3373 
	`RCV_WND_ARGS
(
ts
), 
pkt
->
pf
.
t˝_rx
.
íd_£q
);

3374 if–
	`t˝_¢d_u«
(
ts
Ë- 
rxp
->
ack
 )

3375 
	`log
("\äew_ack(u«=%08xáck=%08x)", 
	`t˝_¢d_u«
(
ts
), 
rxp
->
ack
);

3376 if–
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 <= 0 )

3377 
	`log
("\tsh‹t’ay_Àn=%d)", 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
);

3378 
	}
}

3381 
	$h™dÀ_u«c˚±abÀ_£q
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

3382 
ciù_t˝_rx_pkt
* 
rxp
)

3384 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

3385 
ci_t˝_hdr
* 
t˝
 = 
rxp
->tcp;

3386 
öÊ©e
;

3389 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_SYN_SENT
 ) {

3390 
	`h™dÀ_rx_syn_£¡
(
√tif
, 
ts
, 
rxp
);

3392 
ts
->
dßck_block
 = 
OO_PP_INVALID
;

3405 if–
	`SEQ_GT
(
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
rxp
->
£q
) &&

3406 
	`SEQ_BTW
(
rxp
->
£q
, 
	`SEQ_SUB
(
	`t˝_rcv_nxt
(
ts
), 0x2000),

3407 
	`t˝_rcv_nxt
(
ts
)) &&

3408 
	`SEQ_GE
(
rxp
->
ack
, 
ts
->
¢d_u«
) &&

3409 
	`SEQ_LE
(
rxp
->
ack
, 
ts
->
¢d_nxt
) &&

3410 
	`SEQ_GT
(
rxp
->
ack
 +Ñxp->
pkt
->
pf
.
t˝_rx
.
wödow
,

3411 
ts
->
¢d_max
) &&

3412 (
öÊ©e
 = 
	`ci_t˝_rx_åy_¢d_wnd_öÊ©e
(
ts
, 
rxp
)) > 0 ) {

3413 i‡–
	`ci_t˝_£ndq_nŸ_em±y
(
ts
) ) {

3414 
	`LOG_TR
(
	`log
(
LNTS_FMT
 "%08x-%08x u«c˚±abÀ "
TCP_RCV_FMT
,

3415 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
), 
rxp
->
£q
,

3416 
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
	`TCP_RCV_PRI_ARG
(
ts
)));

3417 
	`LOG_TR
(
	`log
(" inÊ©ed wödow by %d", 
öÊ©e
));

3418 
	`ci_t˝_tx_adv™˚
(
ts
, 
√tif
);

3425 #i‡
CI_CFG_PORT_STRIPING


3429 if–(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_STRIPE
)

3430 && 
	`SEQ_EQ
(
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
rxp
->
£q
)

3431 && 
	`SEQ_LE
(
rxp
->
£q
, 
	`t˝_rcv_nxt
(
ts
)) ) {

3437 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

3442 
ts
->
dßck_block
 = 
OO_PP_INVALID
;

3447 if–
	`SEQ_EQ
(
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
rxp
->
£q
) ) {

3449 ++
ts
->
°©s
.
rx_ack_£q_îrs
;

3450 #i‚de‡
NDEBUG


3451 if–
ts
->
°©s
.
rx_ack_£q_îrs
 <
	`NI_OPTS
(
√tif
).
t˝_max_£qîr_msg
 )

3452 
	`LOG_U
(
	`ex∂aö_why_£q_u«c˚±abÀ
(
√tif
, 
ts
, 
rxp
));

3456 
	`CITP_TCP_FASTSTART
(
ts
->
Á°°¨t_acks
 = 
	`NI_OPTS
(
√tif
).
t˝_Á°°¨t_loss
);

3457 ++
ts
->
°©s
.
rx_£q_îrs
;

3458 #i‚de‡
NDEBUG


3459 if–
ts
->
°©s
.
rx_£q_îrs
 <
	`NI_OPTS
(
√tif
).
t˝_max_£qîr_msg
 )

3460 
	`LOG_U
(
	`ex∂aö_why_£q_u«c˚±abÀ
(
√tif
, 
ts
, 
rxp
));

3465 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
 ) {

3466 if–
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
 &&

3467 
	`SEQ_EQ
(
rxp
->
£q
+1, 
	`t˝_rcv_nxt
(
ts
)) ) {

3468 
	`LOG_TC
(
	`log
(
LNT_FMT
 "dup FIN in TIME_WAITÑestarting 2MSL",

3469 
	`LNT_PRI_ARGS
(
√tif
, 
ts
)));

3470 
	`ci_√tif_timeout_ª°¨t
(
√tif
, 
ts
);

3475 if–
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_SYNCHRONISED
 ) {

3476 
pkt
 = 
	`ci_√tif_pkt_rx_to_tx
(
√tif
,Ökt);

3477 if–
pkt
 !
NULL
 )

3478 
	`ci_t˝_£nd_ack
(
√tif
, 
ts
, 
pkt
, 
CI_FALSE
);

3481 
	`LOG_U
(
	`log
(
LPF
 "%d handle unacceptable seq RSTACKÇeeded because "

3482 "nŸ i¿synchr⁄ized sèã",
	`S_FMT
(
ts
)));

3483 
	`CITP_STATS_NETIF_INC
(
√tif
, 
r°_£¡_bad_£q
);

3484 
	`ci_t˝_ª∂y_wôh_r°
(
√tif
, 
rxp
);

3488 
ts
->
dßck_block
 = 
OO_PP_INVALID
;

3490 
	}
}

3493 
	$h™dÀ_rx_¶ow
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
,

3494 
ciù_t˝_rx_pkt
* 
rxp
)

3496 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

3497 
ci_t˝_hdr
* 
t˝
 = 
rxp
->tcp;

3499 
	`CI_IP_SOCK_STATS_INC_RXSLOW
–
ts
 );

3500 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 !
CI_TCP_LISTEN
);

3502 
	`LOG_TV
(
	`ex∂aö_why_⁄_¶ow_∑th
(
√tif
, 
ts
, 
rxp
));

3503 
	`CITP_STATS_NETIF_INC
(
√tif
, 
rx_¶ow
);

3508 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 -
	`CI_TCP_HDR_LEN
(
t˝
Ë- 
ts
->
öcomög_t˝_hdr_Àn
;

3509 
pkt
->
pf
.
t˝_rx
.
íd_£q
 = 
rxp
->
£q
 +Ökt->pf.t˝_rx.
∑y_Àn
;

3510 
pkt
->
pf
.
t˝_rx
.
íd_£q
 +=

3511 (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
Ë>> 
CI_TCP_FLAG_SYN_BIT
;

3512 
pkt
->
pf
.
t˝_rx
.
íd_£q
 +=

3513 (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
Ë>> 
CI_TCP_FLAG_FIN_BIT
;

3514 
pkt
->
pf
.
t˝_rx
.
wödow
 = 
	`ci_t˝_wnd_‰om_hdr
(
t˝
, 
ts
->
¢d_ws˛
);

3519 
	`ci_as£π_ge
(
pkt
->
pf
.
t˝_rx
.
∑y_Àn
, 0);

3521 if(
	`CI_UNLIKELY
–
	`CI_TCP_HDR_LEN
(
t˝
Ë< (
ci_t˝_hdr
) ))

3522 
bad_pkt
;

3523 if(
	`CI_UNLIKELY
–
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_RST
 ))

3524 
h™dÀ_r°
;

3527 
	`LOG_TR
(if–
t˝
->
t˝_Êags
 & (
CI_TCP_FLAG_ECE
|
CI_TCP_FLAG_CWR
) )

3528 
	`log
(
LNT_FMT
 "ECN flags=%xÇot implemented (ignored)",

3529 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), (Ë
t˝
->
t˝_Êags
));

3531 
	`ci_as£π_equÆ
(
	`oo_ù_hdr
(
pkt
)->
ù_ßddr_be32
, 
ts
->
s
.pkt.
ù
.
ù_daddr_be32
);

3532 
	`ci_as£π_equÆ
(
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
, 
ts
->
s
.pkt.
ù
.
ù_ßddr_be32
);

3533 
	`ci_as£π_equÆ
(
t˝
->
t˝_sour˚_be16
, 
	`TS_TCP
(
ts
)->
t˝_de°_be16
);

3534 
	`ci_as£π_equÆ
(
t˝
->
t˝_de°_be16
, 
	`TS_TCP
(
ts
)->
t˝_sour˚_be16
);

3539 if–
ts
->
t˝Êags
 & 
rxp
->
Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

3540 if–
	`ci_t˝_∑ws_check
(
√tif
, 
rxp
->
time°amp
,

3541 
ts
->
t•aws
,Ås->
t§e˚¡
) )

3542 
u«c˚±abÀ_∑ws
;

3543 
	`ci_t˝_tso_upd©e
(
√tif
, 
ts
, 
rxp
->
£q
,

3544 
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
rxp
->
time°amp
);

3546 if–
	`CI_UNLIKELY
(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
) )

3547 
u«c˚±abÀ_∑ws
;

3549 
nŸ_u«c˚±abÀ_∑ws
:

3560 if–
	`ci_t˝_£q_¥obably_u«c˚±abÀ
(
	`t˝_rcv_nxt
(
ts
),

3561 
	`t˝_rcv_wnd_right_edge_£¡
(
ts
),

3562 
rxp
->
£q
,

3563 
pkt
->
pf
.
t˝_rx
.
íd_£q
) )

3564 
u«c˚±abÀ_£q
;

3565 
nŸ_u«c˚±abÀ_£qno
:

3567 if(
	`CI_UNLIKELY
–
√tif
->
°©e
->
mem_¥essuª
 & 
OO_MEM_PRESSURE_CRITICAL
 ))

3568 
mem_¥essuª
;

3569 
c⁄töue_mem_¥essuª
:

3575 if–
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 )

3576 
ts
->
t_œ°_ªcv_∑ylﬂd
 = 
	`ci_t˝_time_now
(
√tif
);

3578 
ts
->
t_œ°_ªcv_ack
 = 
	`ci_t˝_time_now
(
√tif
);

3581 if(
	`CI_UNLIKELY
–
ts
->
s
.
pkt
.
Êags
 & 
CI_IP_CACHE_NEED_UPDATE_SOON
 )) {

3594 
	`mac_upd©e_if_ack_√w_‹_mac_m©ch
(
√tif
, 
ts
, 
rxp
);

3602 if–
	`CI_LIKELY
(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_SYNCHRONISED
) ) {

3606 if–
	`CI_UNLIKELY
(
	`SEQ_LT
(
	`t˝_¢d_nxt
(
ts
Ë+Ås->
¢d_dñeg©ed
, 
rxp
->
ack
)) )

3612 
¥obably_u«c˚±abÀ_ack
;

3614 if–
	`CI_LIKELY
(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_TXQ_ACTIVE
) ) {

3616 if–
	`SEQ_LE
(
	`t˝_¢d_u«
(
ts
), 
rxp
->
ack
) ) {

3619 if–
rxp
->
Êags
 & 
CI_TCPT_FLAG_SACK
 )

3620 
	`ci_t˝_rx_ßck_¥o˚ss
(
√tif
, 
ts
, 
rxp
);

3622 if–
	`OO_SP_IS_NULL
(
ts
->
loˇl_≥î
) )

3623 
	`ci_t˝_rx_h™dÀ_ack
(
ts
, 
√tif
, 
rxp
);

3625 
	`ci_as£π_equÆ
(
	`t˝_¢d_u«
(
ts
), 
rxp
->
ack
);

3627 if–
	`ci_t˝_£ndq_is_em±y
(
ts
) &&

3628 (
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_LINGER
) &&

3629 
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
) )

3631 
	`ci_t˝_wake
(
√tif
, 
ts
, 
CI_SB_FLAG_WAKE_TX
);

3635 
	`ci_t˝_kÆive_ª£t
(
√tif
, 
ts
);

3638 #i‡
CI_CFG_TAIL_DROP_PROBE


3640 
ci_ù_pkt_queue
 *
πq
 = &
ts
->
ªå™s
;

3642 if(
ts
->
èûdr›_°©e
 =
CI_TCP_TAIL_DROP_PROBED
){

3643 
	`ci_as£π
(
	`NI_OPTS
(
√tif
).
èû_dr›_¥obe
);

3645 if(
	`ci_ù_queue_nŸ_em±y
(
πq
)){

3646 
ci_ù_pkt_fmt
 *
πq_èû
 = 
	`PKT_CHK
(
√tif
, 
πq
->
èû
);

3647 
πq_èû_£q
 = 
	`CI_BSWAP_BE32
(
	`TX_PKT_TCP
(
πq_èû
)->
t˝_£q_be32
);

3649 
	`LOG_TV
(
	`log
("ReceivedÑeplyÅoÅail dropÖrobe, mark==tail %d (%08x), sack %d, dsack %d,Åail sacked %d",

3650 
	`SEQ_LE
(
πq_èû_£q
, 
ts
->
èûdr›_m¨k
),

3651 
πq_èû_£q
,

3652 
rxp
->
Êags
 & 
CI_TCP_SACKED
,

3653 
rxp
->
Êags
 & 
CI_TCP_DSACK
,

3654 
πq_èû
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
));

3655 if(
	`SEQ_LE
(
πq_èû_£q
, 
ts
->
èûdr›_m¨k
)

3656 && (
rxp
->
Êags
 & 
CI_TCPT_FLAG_SACK
)

3657 && (
πq_èû
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
)){

3659 
ts
->
dup_acks
 =Ås->
dup_thªsh
;

3660 
	`ci_t˝_íãr_Á°_ªcovîy
(
√tif
, 
ts
);

3661 
ts
->
èûdr›_°©e
 = 
CI_TCP_TAIL_DROP_ACTIVE
;

3664 
ts
->
èûdr›_°©e
 = 
CI_TCP_TAIL_DROP_ACTIVE
;

3669 
ts
->
èûdr›_°©e
 = 
CI_TCP_TAIL_DROP_ACTIVE
;

3671 }i‡(
ts
->
èûdr›_°©e
 =
CI_TCP_TAIL_DROP_PRIMED
){

3672 
	`ci_as£π
(
	`NI_OPTS
(
√tif
).
èû_dr›_¥obe
);

3675 if(
	`ci_ù_queue_nŸ_em±y
(
πq
))

3676 
	`ci_t˝_èûdr›_ª°¨t
(
√tif
, 
ts
);

3678 
	`ci_t˝_èûdr›_˛ór
(
√tif
, 
ts
);

3679 
ts
->
èûdr›_°©e
 = 
CI_TCP_TAIL_DROP_ACTIVE
;

3685 
nŸ_u«c˚±abÀ_ack
:

3687 if–
	`CI_LIKELY
(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_ACCEPT_DATA
) ) {

3690 #i‚de‡
_WIN32


3691 if–
	`CI_UNLIKELY
(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_URG
))

3692 
	`ci_t˝_urg_pkt_¥o˚ss
(
ts
, 
√tif
, 
rxp
);

3695 if–
	`CI_UNLIKELY
(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
) ) {

3707 
	`LOG_TC
(
	`log
(
LNTS_FMT
 "SYN (du∂iˇã?Ëign‹ed "
TCP_RX_FMT
,

3708 
	`LNTS_PRI_ARGS
(
√tif
,
ts
), 
	`TCP_RX_ARGS
(
pkt
,Ås)));

3709 ++
rxp
->
£q
;

3710 
t˝
->
t˝_Êags
 &=~ 
CI_TCP_FLAG_SYN
;

3716 if–
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 ) {

3717 if–
	`CI_UNLIKELY
(
ts
->
s
.
rx_î∫o
) ) {

3724 if–(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_RECVD_FIN
) ||

3725 
ts
->
s
.
tx_î∫o
 != 0 )

3727 
	`LOG_U
(
	`log
(
LNTS_FMT
" dataárrived with SHUT_RD (rx=%xÅx=%x)",

3728 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
),Ås->
s
.
rx_î∫o
,Ås->s.
tx_î∫o
));

3729 
	`ci_t˝_ª∂y_wôh_r°
(
√tif
, 
rxp
);

3730 
	`ci_t˝_dr›
(
√tif
, 
ts
, 
ECONNRESET
);

3738 if–
	`SEQ_LT
(
	`t˝_rcv_wnd_right_edge_£¡
(
ts
), 
pkt
->
pf
.
t˝_rx
.
íd_£q
) ) {

3744 
n
=
	`SEQ_SUB
(
pkt
->
pf
.
t˝_rx
.
íd_£q
,
	`t˝_rcv_wnd_right_edge_£¡
(
ts
));

3745 
	`LOG_U
(
	`log
(
LPF
 "%d %†EXCEEDS WIN by %d " 
TCP_RX_FMT
,

3746 
	`S_FMT
(
ts
), 
	`°©e_°r
—s), 
n
, 
	`TCP_RX_ARGS
(
pkt
,Ås)));

3747 
	`ci_as£π
–
	`OO_SP_IS_NULL
(
ts
->
loˇl_≥î
) );

3748 
pkt
->
pf
.
t˝_rx
.
íd_£q
 -
n
;

3749 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 -
n
;

3750 if–
	`SEQ_LE
(
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
	`t˝_rcv_nxt
(
ts
)) ) {

3752 
pkt
 = 
	`ci_√tif_pkt_rx_to_tx
(
√tif
,Ökt);

3753 if–
pkt
 !
NULL
 )

3754 
	`ci_t˝_£nd_ack
(
√tif
, 
ts
, 
pkt
, 
CI_FALSE
);

3761 if–
	`SEQ_LE
(
rxp
->
£q
, 
	`t˝_rcv_nxt
(
ts
)) ) {

3764 if–! (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
) ){

3765 if–
	`ci_t˝_rx_dñivî_to_ªcvq
(
ts
, 
√tif
, 
rxp
) == 0 )

3766 
	`TCP_NEED_ACK
(
ts
);

3772 
	`TCP_FORCE_ACK
(
ts
);

3773 
	`CITP_STATS_NETIF_INC
(
√tif
, 
rx_rob_n⁄_em±y
);

3774 
	`CITP_TCP_FASTSTART
(
ts
->
Á°°¨t_acks
 =

3775 
	`NI_OPTS
(
√tif
).
t˝_Á°°¨t_loss
);

3782 if(
	`SEQ_LT
(
	`t˝_rcv_nxt
(
ts
), 
pkt
->
pf
.
t˝_rx
.
íd_£q
-1)){

3783 
	`ci_t˝_rx_dñivî_to_ªcvq
(
ts
, 
√tif
, 
rxp
);

3787 if(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_ACCEPT_DATA
) {

3788 
	`ci_t˝_rx_¥o˚ss_fö
(
√tif
, 
ts
);

3794 
	`ci_as£π
(
	`SEQ_EQ
(
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
	`t˝_rcv_nxt
(
ts
) + 1));

3795 
	`t˝_rcv_nxt
(
ts
Ë
pkt
->
pf
.
t˝_rx
.
íd_£q
;

3796 
	`ci_t˝_rx_¥o˚ss_fö
(
√tif
, 
ts
);

3797 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

3799 
	`TCP_FORCE_ACK
(
ts
);

3807 if–
	`ci_t˝_rx_íqueue_ooo
(
√tif
, 
ts
, 
rxp
) ) {

3808 
	`CITP_TCP_FASTSTART
(
ts
->
Á°°¨t_acks
 =

3809 
	`NI_OPTS
(
√tif
).
t˝_Á°°¨t_loss
);

3810 if–
ts
->
acks_≥ndög
 ) {

3815 
ci_ù_pkt_fmt
* 
ackpkt
 = 
	`ci_√tif_pkt_Æloc
(
√tif
);

3816 if–
ackpkt
 ) 
	`ci_t˝_£nd_ack
(
√tif
, 
ts
,áckpkt, 
CI_FALSE
);

3818 
	`TCP_FORCE_ACK
(
ts
);

3822 if–
	`CI_UNLIKELY
(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
) ) {

3824 
	`ci_as£π
(!
pkt
->
pf
.
t˝_rx
.
∑y_Àn
);

3826 if(
	`SEQ_EQ
(
rxp
->
£q
, 
	`t˝_rcv_nxt
(
ts
))) {

3828 
	`ci_as£π
(
	`SEQ_EQ
(
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
rxp
->
£q
 + 1));

3829 
	`t˝_rcv_nxt
(
ts
Ë
pkt
->
pf
.
t˝_rx
.
íd_£q
;

3831 
	`ci_t˝_rx_¥o˚ss_fö
(
√tif
, 
ts
);

3833 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

3834 
	`TCP_FORCE_ACK
(
ts
);

3836 if–
	`ci_t˝_rx_íqueue_ooo
(
√tif
, 
ts
, 
rxp
) )

3837 
	`TCP_FORCE_ACK
(
ts
);

3842 
	`ci_as£π
(!
pkt
->
pf
.
t˝_rx
.
∑y_Àn
);

3843 
	`ci_as£π
((
t˝
->
t˝_Êags
 & ~
CI_TCP_FLAG_ACK
) == 0);

3844 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

3847 if–
	`TCP_ACK_FORCED
(
ts
) ) {

3852 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
√tif
);

3853 if–
pkt
 ) 
	`ci_t˝_£nd_ack
(
√tif
, 
ts
,Ökt, 
CI_FALSE
);

3857 
ts
->
s
.
b
.
sb_Êags
 |
CI_SB_FLAG_TCP_POST_POLL
;

3862 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_ESTABLISHED
 )

3865 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_FIN_WAIT1
 )

3866 
	`h™dÀ_rx_fö_waô_1
(
ts
, 
√tif
);

3871 if–
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_TXQ_ACTIVE
 )

3873 
ts
->
s
.
b
.
sb_Êags
 |
CI_SB_FLAG_TCP_POST_POLL
;

3875 i‡–!
	`h™dÀ_rx_mö‹_°©es
(
ts
, 
√tif
, 
rxp
) ) {

3877 
	`ci_log
("Unknow¿°©ê%d ('%s')\n", 
ts
->
s
.
b
.
°©e
, 
	`°©e_°r
(ts));

3878 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

3879 
	`ci_as£π
(0);

3884 
¥obably_u«c˚±abÀ_ack
:

3885 i‡(!(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_ACK
)) {

3888 i‡(!(
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
 &&

3889 (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
))) {

3891 
	`LOG_U
(
	`log
(
LPF
 "%d %†∑ckë wôhÇÿACK fœg†%x " 
TCP_RX_FMT
,

3892 
	`S_FMT
(
ts
), 
	`°©e_°r
—s), 
t˝
->
t˝_Êags
,

3893 
	`TCP_RX_ARGS
(
pkt
,
ts
)));

3896 
nŸ_u«c˚±abÀ_ack
;

3898 
	`h™dÀ_u«c˚±abÀ_ack
(
√tif
, 
ts
, 
rxp
);

3901 
u«c˚±abÀ_£q
:

3903 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
 &&

3904 (
t˝
->
t˝_Êags
 & (
CI_TCP_FLAG_SYN
 | 
CI_TCP_FLAG_ACK
))

3905 =
CI_TCP_FLAG_SYN
 )

3906 
nŸ_u«c˚±abÀ_£qno
;

3907 if–!
	`ci_t˝_£q_deföôñy_u«c˚±abÀ
(
	`t˝_rcv_nxt
(
ts
),

3908 
	`t˝_rcv_wnd_right_edge_£¡
(
ts
),

3909 
rxp
->
£q
,

3910 
pkt
->
pf
.
t˝_rx
.
íd_£q
) )

3911 
nŸ_u«c˚±abÀ_£qno
;

3914 if–(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_SYNCHRONISED
) &&

3915 
	`SEQ_EQ
(
rxp
->
£q
 + 1, 
	`t˝_rcv_nxt
(
ts
)) ) {

3916 
ci_uöt32
 
¢d_nxt_bef‹e
, 
¢d_nxt_a·î
;

3917 
	`LOG_TR
(
	`log
(
LNT_FMT
 "ZWINÖrobê"
TCP_RX_FMT
,

3918 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
	`TCP_RX_ARGS
(
pkt
,Ås)));

3919 
¢d_nxt_bef‹e
 = 
	`t˝_¢d_nxt
(
ts
);

3923 if–
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_TXQ_ACTIVE
 &&

3924 
	`SEQ_GE
(
	`t˝_¢d_nxt
(
ts
), 
rxp
->
ack
) &&

3925 
	`SEQ_LE
(
	`t˝_¢d_u«
(
ts
), 
rxp
->
ack
) ) {

3926 
	`ci_t˝_rx_h™dÀ_ack
(
ts
, 
√tif
, 
rxp
);

3929 
	`ci_√tif_pkt_hﬁd
(
√tif
, 
pkt
);

3937 if–!
	`h™dÀ_rx_mö‹_°©es
(
ts
, 
√tif
, 
rxp
) )

3938 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

3939 if–
	`ci_t˝_£ndq_nŸ_em±y
(
ts
) )

3940 
	`ci_t˝_tx_adv™˚
(
ts
, 
√tif
);

3943 
¢d_nxt_a·î
 = 
	`t˝_¢d_nxt
(
ts
);

3945 if–
¢d_nxt_bef‹e
 =
¢d_nxt_a·î
 ) {

3946 
pkt
 = 
	`ci_√tif_pkt_rx_to_tx
(
√tif
,Ökt);

3947 if–
pkt
 !
NULL
 )

3948 
	`ci_t˝_£nd_ack
(
√tif
, 
ts
, 
pkt
, 
CI_FALSE
);

3951 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

3952 
	`ci_t˝_wake
(
√tif
, 
ts
, 
CI_SB_FLAG_WAKE_TX
);

3958 if–(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
) &&

3959 
	`SEQ_LE
(
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
	`t˝_rcv_nxt
(
ts
)) &&

3960 
	`SEQ_LT
(
rxp
->
£q
, 
pkt
->
pf
.
t˝_rx
.
íd_£q
) ) {

3962 
ts
->
dßck_°¨t
 = 
rxp
->
£q
;

3963 
ts
->
dßck_íd
 = 
pkt
->
pf
.
t˝_rx
.
íd_£q
;

3964 
ts
->
dßck_block
 = 
OO_PP_NULL
;

3966 
	`h™dÀ_u«c˚±abÀ_£q
(
√tif
, 
ts
, 
rxp
);

3969 
u«c˚±abÀ_∑ws
:

3973 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_TIME_WAIT
 &&

3974 (
t˝
->
t˝_Êags
 & (
CI_TCP_FLAG_SYN
 | 
CI_TCP_FLAG_ACK
))

3975 =
CI_TCP_FLAG_SYN
 )

3976 
nŸ_u«c˚±abÀ_∑ws
;

3977 
	`h™dÀ_u«c˚±abÀ_£q
(
√tif
, 
ts
, 
rxp
);

3980 
mem_¥essuª
:

3981 if–
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 <= 0 )

3983 
c⁄töue_mem_¥essuª
;

3984 
	`CITP_STATS_NETIF_INC
(
√tif
, 
mem‹y_¥essuª_dr›s
);

3985 
ts
->
t˝Êags
 |
CI_TCPT_FLAG_MEM_DROP
;

3986 
	`ci_t˝_dr›_rob
(
√tif
, 
ts
);

3987 
dr›
;

3989 
h™dÀ_r°
:

3990 
	`h™dÀ_rx_r°
(
ts
, 
√tif
, 
rxp
);

3993 
bad_pkt
:

3994 
	`LOG_U
(
	`log
(
LPF
 "BAD PACKET (short TCP headerÜen %d)",

3995 (Ë
	`CI_TCP_HDR_LEN
(
t˝
)));

3996 
	`LOG_DU
(
	`ci_hex_dump
(
ci_log_‚
, 
	`PKT_START
(
pkt
), 64, 0));

3998 
dr›
:

3999 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
pkt
);

4001 
	}
}

4004 
	$h™dÀ_no_m©ch
(
ci_√tif
* 
ni
, 
ciù_t˝_rx_pkt
* 
rxp
)

4011 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

4012 
ci_ù4_hdr
* 
ù
 = 
	`oo_ù_hdr
(
pkt
);

4013 
ci_t˝_hdr
* 
t˝
 = 
rxp
->tcp;

4014 
ª£t
 = 1;

4017 
	`LOG_TR
(

4020 if–!(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_RST
) )

4021 
	`log
(
LN_FMT
 "NO MATCH %s:%u->%s:%u ["
CI_TCP_FLAGS_FMT
"] "

4022 "s=%08xá=%08x", 
	`LN_PRI_ARGS
(
ni
),

4023 
	`ù_addr_°r
(
ù
->
ù_ßddr_be32
),

4024 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_sour˚_be16
),

4025 
	`ù_addr_°r
(
ù
->
ù_daddr_be32
),

4026 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_de°_be16
),

4027 
	`CI_TCP_HDR_FLAGS_PRI_ARG
(
t˝
),

4028 
	`SEQ
(
rxp
->
£q
), SEQ‘xp->
ack
))

4037 if–! 
	`ci˝_u£r_is_loˇl_addr
(
	`CICP_HANDLE
(
ni
), &
ù
->
ù_daddr_be32
) ) {

4042 
	`LOG_U
(
	`log
(
LN_FMT
 "Non-local dest IP, ignored. Prob wrong switchÖort.",

4043 
	`LN_PRI_ARGS
(
ni
)));

4044 
ª£t
 = 0;

4046 if–
	`ci˝_u£r_is_loˇl_addr
(
	`CICP_HANDLE
(
ni
), &
ù
->
ù_ßddr_be32
) ) {

4053 
	`LOG_U
(
	`ci_log
("STRANGE: Received TCPÖkt fromÜocaláddr"));

4054 
ª£t
 = 0;

4058 if–
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_RST
 )

4060 
ª£t
 = 0;

4063 if–
ª£t
 ) {

4064 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 -
	`CI_TCP_HDR_LEN
(
t˝
);

4065 
pkt
->
pf
.
t˝_rx
.
íd_£q
 = 
rxp
->
£q
 +Ökt->pf.t˝_rx.
∑y_Àn
;

4066 
pkt
->
pf
.
t˝_rx
.
íd_£q
 +=

4067 (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
Ë>> 
CI_TCP_FLAG_SYN_BIT
;

4068 
	`CITP_STATS_NETIF_INC
(
ni
, 
r°_£¡_no_m©ch
);

4069 
	`ci_t˝_ª∂y_wôh_r°
(
ni
, 
rxp
);

4072 
	`ci_√tif_pkt_ªÀa£_rx_1ªf
(
ni
, 
pkt
);

4073 
	}
}

4076 
	$ci_t˝_rx_dñivî_to_c⁄n
(
ci_sock_cmn
* 
s
, * 
›aque_¨g
)

4078 
ciù_t˝_rx_pkt
* 
rxp
 = 
›aque_¨g
;

4079 
ci_t˝_°©e
* 
ts
 = 
	`SOCK_TO_TCP
(
s
);

4080 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

4081 
ci_t˝_hdr
* 
t˝
 = 
rxp
->tcp;

4082 
ci_√tif
* 
ni
 = 
rxp
->ni;

4083 
nŸ_Á°
;

4085 
	`CHECK_TS
(
ni
, 
ts
);

4087 #ifde‡
ONLOAD_OFE


4088 if–
s
->
o„_code_°¨t
 !
OFE_ADDR_NULL
 &&

4089 
	`o„_¥o˚ss_∑ckë
(
ni
->
o„_ch™√l
, 
s
->
o„_code_°¨t
, 
	`ci_ù_time_now
(ni),

4090 
	`oo_ëhî_hdr
(
pkt
),Ökt->
∑y_Àn
,Ökt->
vœn
,

4091 
	`CI_BSWAP_BE16
(
	`oo_ëhî_ty≥_gë
(
pkt
)),

4092 
	`oo_ù_hdr
(
pkt
))

4093 !
OFE_ACCEPT
 ) {

4094 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pkt
);

4095 
rxp
->
pkt
 = 
NULL
;

4100 
	`ci_as£π_equÆ
(
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
, 
s
->pkt.
ù
.
ù_ßddr_be32
);

4101 #i‚de‡
NDEBUG


4102 if–
	`NI_OPTS
(
ni
).
t˝_rx_checks
 )

4103 
	`ci_t˝_rx_checks
(
ni
, 
ts
, 
pkt
);

4109 
	`ci_√tif_put_⁄_po°_pﬁl
(
ni
, &
ts
->
s
.
b
);

4111 
	`CI_IP_SOCK_STATS_ADD_RXBYTE
–
ts
, 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 );

4113 
	`LOG_TR
(
	`log
(
LNTS_FMT
 
RCV_WND_FMT
 " snd=%08x-%08x-%08x",

4114 
	`LNTS_PRI_ARGS
(
ni
, 
ts
), 
	`RCV_WND_ARGS
(ts),

4115 
	`t˝_¢d_u«
(
ts
), 
	`t˝_¢d_nxt
—s),Ås->
¢d_max
);

4116 
	`log
(
LNT_FMT
 "["
CI_TCP_FLAGS_FMT
"] id=%d s=%08x-%08xá=%08x "

4117 "w=%u(%uËhÀn=%dÖayÀn=%d", 
	`LNT_PRI_ARGS
(
ni
, 
ts
),

4118 
	`CI_TCP_HDR_FLAGS_PRI_ARG
(
t˝
), 
	`OO_PKT_FMT
(
pkt
), 
rxp
->
£q
,

4119 
rxp
->
£q
 + 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 - 
	`CI_TCP_HDR_LEN
(
t˝
),

4120 
rxp
->
ack
,

4121 ()(
	`CI_BSWAP_BE16
(
t˝
->
t˝_wödow_be16
)),

4122 
	`ci_t˝_wnd_‰om_hdr
(
t˝
, 
ts
->
¢d_ws˛
),

4123 
	`CI_TCP_HDR_LEN
(
t˝
),

4124 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 - 
	`CI_TCP_HDR_LEN
(
t˝
)));

4130 
ci_uöt8
* 
›t
 = 
	`CI_TCP_HDR_OPTS
(
t˝
);

4131 if–
t˝
->
t˝_hdr_Àn_¶4
 =((
ci_t˝_hdr
) + 12u) << 2u &&

4132 *(
ci_uöt32
*Ë
›t
 =
CI_TCP_TSO_WORD
 ) {

4133 
rxp
->
time°amp
 = 
	`CI_BSWAP_BE32
(*(
ci_uöt32
*Ë&
›t
[4]);

4134 
rxp
->
time°amp_echo
 = 
	`CI_BSWAP_BE32
(*(
ci_uöt32
*Ë&
›t
[8]);

4135 
rxp
->
Êags
 = 
CI_TCPT_FLAG_TSO
;

4138 
	`ci_t˝_∑r£_›ti⁄s
(
ni
, 
rxp
, 
NULL
);

4144 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 -
ts
->
öcomög_t˝_hdr_Àn
;

4145 
pkt
->
pf
.
t˝_rx
.
íd_£q
 = 
rxp
->
£q
 +Ökt->pf.t˝_rx.
∑y_Àn
;

4147 #i‡
CI_CFG_BURST_CONTROL


4148 
ts
->
bur°_wödow
 = 0;

4155 
nŸ_Á°
 = (

4157 ((
	`CI_TCP_FAST_PATH_WORD
(
t˝
Ë& 
CI_TCP_FAST_PATH_MASK
)

4158 - 
ts
->
Á°_∑th_check
) |

4160 (
rxp
->
£q
 - 
	`t˝_rcv_nxt
(
ts
)) |

4162 
	`SEQ_LT
(
	`t˝_rcv_wnd_right_edge_£¡
(
ts
),

4163 
pkt
->
pf
.
t˝_rx
.
íd_£q
) |

4165 (
	`t˝_¢d_u«
(
ts
Ë- 
rxp
->
ack
) |

4167 (
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 <= 0) |

4169 (
ni
->
°©e
->
mem_¥essuª
 & 
OO_MEM_PRESSURE_CRITICAL
));

4175 
	`ci_ss_as£π_‹
(
ni
, 
ts
->
s
.
b
.
°©e
 =
CI_TCP_LISTEN
,

4176 
	`OO_PP_EQ
(
ts
->
dßck_block
, 
OO_PP_INVALID
));

4178 if–
nŸ_Á°
 == 0 ) {

4183 
ts
->
t_œ°_ªcv_∑ylﬂd
 = 
	`ci_t˝_time_now
(
ni
);

4189 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_ACCEPT_DATA
);

4190 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
rob
));

4192 
pkt
->
pf
.
t˝_rx
.
wödow
 =

4193 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_wödow_be16
Ë<< 
ts
->
¢d_ws˛
;

4195 if–
ts
->
t˝Êags
 & 
rxp
->
Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

4200 #i‡
CI_CFG_TCP_PAWS_ON_FASTPATH


4201 if(
	`CI_UNLIKELY
–
	`TIME_GT
(
ts
->
t§e˚¡
, 
rxp
->
time°amp
) ))

4202 
∑ws_Áû_⁄_Á°_∑th
;

4204 
	`ci_t˝_tso_upd©e
(
ni
, 
ts
, 
rxp
->
£q
,

4205 
pkt
->
pf
.
t˝_rx
.
íd_£q
, 
rxp
->
time°amp
);

4214 #i‡
CI_CFG_NOTICE_WINDOW_SHRINKAGE


4218 
	`ci_t˝_£t_¢d_max
(
ts
, 
rxp
->
£q
,Ñxp->
ack
, 
pkt
->
pf
.
t˝_rx
.
wödow
);

4220 if–
	`SEQ_LT
(
ts
->
¢d_max
, 
rxp
->
ack
 + 
pkt
->
pf
.
t˝_rx
.
wödow
) )

4221 
	`ci_t˝_£t_¢d_max
(
ts
, 
rxp
->
£q
,Ñxp->
ack
, 
pkt
->
pf
.
t˝_rx
.
wödow
);

4224 
	`TCP_NEED_ACK
(
ts
);

4225 
ts
->
s
.
b
.
sb_Êags
 |
CI_SB_FLAG_TCP_POST_POLL
;

4226 
	`ci_t˝_wake
(
ni
, 
ts
, 
CI_SB_FLAG_WAKE_RX
);

4228 
	`oo_offbuf_öô
(&
pkt
->
buf
, (*Ë
t˝
 + 
ts
->
öcomög_t˝_hdr_Àn
,

4229 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
);

4230 
	`ci_t˝_rx_íqueue_∑ckë
(
ni
, 
ts
, 
pkt
);

4232 if(
	`CI_UNLIKELY
–
ts
->
s
.
pkt
.
Êags
 & 
CI_IP_CACHE_NEED_UPDATE_SOON
 ))

4234 
	`mac_upd©e_if_mac_m©ch
(
ni
, 
ts
, 
pkt
);

4236 
rxp
->
pkt
 = 
NULL
;

4241 
	`h™dÀ_rx_¶ow
(
ts
, 
ni
, 
rxp
);

4242 
rxp
->
pkt
 = 
NULL
;

4245 #i‡
CI_CFG_TCP_PAWS_ON_FASTPATH


4246 
∑ws_Áû_⁄_Á°_∑th
:

4247 
	`LOG_U
(
	`log
(
LPF
 "%d PAWS faûed (Á°ËtsvÆ=%xÅ§e˚¡=%x", 
	`S_FMT
(
ts
),

4248 
rxp
->
time°amp
, 
ts
->
t§e˚¡
));

4249 
	`h™dÀ_u«c˚±abÀ_£q
(
ni
, 
ts
, 
rxp
);

4250 
rxp
->
pkt
 = 
NULL
;

4253 
	}
}

4256 
	$ci_t˝_rx_dñivî_to_li°í
(
ci_sock_cmn
* 
s
, * 
›aque_¨g
)

4258 
ciù_t˝_rx_pkt
* 
rxp
 = 
›aque_¨g
;

4260 #ifde‡
ONLOAD_OFE


4261 if–
s
->
o„_code_°¨t
 !
OFE_ADDR_NULL
 &&

4262 
	`o„_¥o˚ss_∑ckë
(
rxp
->
ni
->
o„_ch™√l
, 
s
->
o„_code_°¨t
,

4263 
	`ci_ù_time_now
(
rxp
->
ni
),

4264 
	`oo_ëhî_hdr
(
rxp
->
pkt
),Ñxp->pkt->
∑y_Àn
,

4265 
rxp
->
pkt
->
vœn
,

4266 
	`CI_BSWAP_BE16
(
	`oo_ëhî_ty≥_gë
(
rxp
->
pkt
)),

4267 
	`oo_ù_hdr
(
rxp
->
pkt
))

4268 !
OFE_ACCEPT
 ) {

4269 
	`ci_√tif_pkt_ªÀa£
(
rxp
->
ni
,Ñxp->
pkt
);

4270 
rxp
->
pkt
 = 
NULL
;

4275 if–
s
->
b
.
°©e
 !
CI_TCP_STATE_ACTIVE_WILD
 ) {

4276 
	`h™dÀ_rx_li°í
(
rxp
->
ni
, 
	`SOCK_TO_TCP_LISTEN
(
s
),Ñxp, 0);

4277 
rxp
->
pkt
 = 
NULL
;

4280 
	}
}

4283 
	$ci_t˝_h™dÀ_rx
(
ci_√tif
* 
√tif
, 
ci_√tif_pﬁl_°©e
* 
ps
,

4284 
ci_ù_pkt_fmt
* 
pkt
, 
ci_t˝_hdr
* 
t˝
, 
ù_∑yÀn
)

4286 
ci_ù4_hdr
* 
ù
 = 
	`oo_ù_hdr
(
pkt
);

4287 
ciù_t˝_rx_pkt
 
rxp
;

4289 
	`ci_as£π
(
√tif
);

4290 
	`ASSERT_VALID_PKT
(
√tif
, 
pkt
);

4291 
	`ci_ss_as£π_eq
(
√tif
, 
ù
->
ù_¥Ÿocﬁ
, 
IPPROTO_TCP
);

4292 
	`ci_as£π_equÆ
(
	`oo_offbuf_±r
(&
pkt
->
buf
), 
	`PKT_START
(pkt));

4294 
	`CI_TCP_STATS_INC_IN_SEGS
–
√tif
 );

4296 if–
	`OO_PP_NOT_NULL
(
pkt
->
‰ag_√xt
) )

4297 
sˇâîed
;

4299 
rxp
.
ni
 = 
√tif
;

4300 
rxp
.
pﬁl_°©e
 = 
ps
;

4301 
rxp
.
pkt
 =Ökt;

4302 
rxp
.
t˝
 =Åcp;

4303 
	`ci_as£π_gt
(
pkt
->
∑y_Àn
, 
ù_∑yÀn
);

4304 
pkt
->
pf
.
t˝_rx
.
∑y_Àn
 = 
ù_∑yÀn
;

4305 
pkt
->
pf
.
t˝_rx
.
rx_°amp
 = 
	`IPTIMER_STATE
(
√tif
)->
‰c
;

4307 
rxp
.
£q
 = 
	`CI_BSWAP_BE32
(
t˝
->
t˝_£q_be32
);

4308 
rxp
.
ack
 = 
	`CI_BSWAP_BE32
(
t˝
->
t˝_ack_be32
);

4310 if–
pkt
->
ötf_i
 =
OO_INTF_I_LOOPBACK
 ) {

4311 
ci_sock_cmn
 *
s
 = 
	`ID_TO_SOCK_CMN
(
√tif
, 
pkt
->
pf
.
t˝_rx
.
lo
.
rx_sock
);

4312 
ci_sock_cmn
 *
£ndî
 = 
	`ID_TO_SOCK_CMN
(
√tif
, 
pkt
->
pf
.
t˝_rx
.
lo
.
tx_sock
);

4313 
bad_ªcùõ¡
 = (
s
 =
NULL
) ||

4314 (~
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
) ||

4315 (
t˝
->
t˝_de°_be16
 !
	`S_TCP_HDR
(
s
)->
t˝_sour˚_be16
);

4318 if–!
bad_ªcùõ¡
 && 
£ndî
 !
NULL
 &&

4319 (
£ndî
->
b
.
°©e
 & 
CI_TCP_STATE_TCP
) &&

4320 
£ndî
->
b
.
°©e
 !
CI_TCP_LISTEN
 &&

4321 
	`SOCK_TO_TCP
(
£ndî
)->
loˇl_≥î
 =
pkt
->
pf
.
t˝_rx
.
lo
.
rx_sock
 &&

4322 
s
->
b
.
°©e
 !
CI_TCP_LISTEN
 &&

4323 
	`SOCK_TO_TCP
(
s
)->
loˇl_≥î
 =
pkt
->
pf
.
t˝_rx
.
lo
.
tx_sock
 ) {

4324 
	`ci_t˝_rx_dñivî_to_c⁄n
(
s
, &
rxp
);

4328 if–!
bad_ªcùõ¡
 && 
t˝
->
t˝_de°_be16
 !
	`S_TCP_HDR
(
s
)->
t˝_sour˚_be16
 )

4329 
bad_ªcùõ¡
 = 1;

4331 if–!
bad_ªcùõ¡
 && 
s
->
b
.
°©e
 =
CI_TCP_LISTEN
 &&

4332 –
s
->
pkt
.
ù
.
ù_ßddr_be32
 =
INADDR_ANY
 ||

4333 
s
->
pkt
.
ù
.
ù_ßddr_be32
 =ù->
ù_daddr_be32
 )) {

4334 
	`ci_as£π
–((
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
) &&

4335 ! (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_ACK
)) ||

4336 (! (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
) &&

4337 (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_ACK
) &&

4338 (
	`SOCK_TO_TCP
(
£ndî
)->
t˝Êags
 &

4339 
CI_TCPT_FLAG_LOOP_DEFERRED
)) );

4341 
rxp
.
hash
 = 
	`ci_√tif_fûãr_hash
(
√tif
,

4342 
ù
->
ù_daddr_be32
, 
t˝
->
t˝_de°_be16
,

4343 
ù
->
ù_ßddr_be32
, 
t˝
->
t˝_sour˚_be16
,

4344 
IPPROTO_TCP
);

4345 
	`ci_t˝_rx_dñivî_to_li°í
(
s
, &
rxp
);

4347 if–!
bad_ªcùõ¡
 && 
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
 &&

4348 
ù
->
ù_daddr_be32
 =
s
->
pkt
.ù.
ù_ßddr_be32
 &&

4349 
ù
->
ù_ßddr_be32
 =
s
->
pkt
.ù.
ù_daddr_be32
 &&

4350 
t˝
->
t˝_sour˚_be16
 =
	`S_TCP_HDR
(
s
)->
t˝_de°_be16
) {

4352 
	`ci_as£π
–(
t˝
->
t˝_Êags
 & (
CI_TCP_FLAG_FIN
 | 
CI_TCP_FLAG_RST
)) ||

4353 –(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
) &&

4354 (
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_ACK
) ) );

4355 
	`ci_t˝_rx_dñivî_to_c⁄n
(
s
, &
rxp
);

4358 
	`ci_log
(
FN_FMT
 "loopbackÖacketÅo destroyed socket: %d -> %d",

4359 
	`FN_PRI_ARGS
(
√tif
), 
pkt
->
pf
.
t˝_rx
.
lo
.
tx_sock
,

4360 
pkt
->
pf
.
t˝_rx
.
lo
.
rx_sock
);

4361 if–(
£ndî
->
b
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
) &&

4362 
£ndî
->
b
.
°©e
 !
CI_TCP_TIME_WAIT
 &&

4363 
ù
->
ù_daddr_be32
 =
£ndî
->
pkt
.ip.ip_daddr_be32 &&

4364 
ù
->
ù_ßddr_be32
 =
£ndî
->
pkt
.ip.ip_saddr_be32 &&

4365 
t˝
->
t˝_sour˚_be16
 =
	`S_TCP_HDR
(
£ndî
)->tcp_source_be16 &&

4366 
t˝
->
t˝_de°_be16
 =
	`S_TCP_HDR
(
£ndî
)->tcp_dest_be16 )

4367 
	`ci_t˝_dr›
(
√tif
, 
	`SOCK_TO_TCP
(
£ndî
), 
ECONNRESET
);

4368 
	`ci_√tif_pkt_ªÀa£
(
√tif
, 
pkt
);

4373 
	`ci_√tif_fûãr_f‹_óch_m©ch
(
√tif
,

4374 
ù
->
ù_daddr_be32
, 
t˝
->
t˝_de°_be16
,

4375 
ù
->
ù_ßddr_be32
, 
t˝
->
t˝_sour˚_be16
,

4376 
IPPROTO_TCP
, 
pkt
->
ötf_i
,Ökt->
vœn
,

4377 
ci_t˝_rx_dñivî_to_c⁄n
, &
rxp
,

4378 &
rxp
.
hash
);

4379 if(
	`CI_LIKELY
–
rxp
.
pkt
 =
NULL
 ))

4382 
	`ci_√tif_fûãr_f‹_óch_m©ch
(
√tif
,

4383 
ù
->
ù_daddr_be32
, 
t˝
->
t˝_de°_be16
,

4384 0, 0, 
IPPROTO_TCP
, 
pkt
->
ötf_i
,Ökt->
vœn
,

4385 
ci_t˝_rx_dñivî_to_li°í
, &
rxp
, 
NULL
);

4386 if(
	`CI_LIKELY
–
rxp
.
pkt
 =
NULL
 ))

4389 
	`ci_√tif_fûãr_f‹_óch_m©ch
(
√tif
,

4390 0, 
t˝
->
t˝_de°_be16
,

4391 0, 0, 
IPPROTO_TCP
, 
pkt
->
ötf_i
,Ökt->
vœn
,

4392 
ci_t˝_rx_dñivî_to_li°í
, &
rxp
, 
NULL
);

4393 if(
	`CI_LIKELY
–
rxp
.
pkt
 =
NULL
 ))

4396 
	`h™dÀ_no_m©ch
(
√tif
, &
rxp
);

4399 
sˇâîed
:

4400 
	`LOG_E
(
	`ci_log
(
FN_FMT
 "scatteredÖacket dropped,ÖrobablyÜarge jumbo "

4401 "(£q %08x, %d IP byãs),", 
	`FN_PRI_ARGS
(
√tif
),

4402 
	`CI_BSWAP_BE32
(
t˝
->
t˝_£q_be32
), 
ù_∑yÀn
));

4403 
	`ci_√tif_pkt_ªÀa£_rx_1ªf
(
√tif
, 
pkt
);

4404 
	}
}

	@tcp_rx.h

1 #i‚de‡
__TCP_RX_H__


2 
	#__TCP_RX_H__


	)

4 
	~<⁄lﬂd/¶ìp.h
>

7 
ci_ölöe
 
	$ci_t˝_rx_£t_i¢
(
ci_t˝_°©e
* 
ts
, 
i¢
)

9 
	`ci_as£π_equÆ
(
	`t˝_rcv_u§
(
ts
), 0);

10 
ts
->
°©s
.
rx_i¢
 = 
i¢
;

11 
	`t˝_rcv_nxt
(
ts
Ë
i¢
;

12 
ts
->
rcv_added
 =Ås->
rcv_dñivîed
 = 
i¢
;

13 
	}
}

16 
ci_ölöe
 
	$ci_t˝_√ed_ack
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

26 #i‡
CI_CFG_DYNAMIC_ACK_RATE


31 ((
ts
->
acks_≥ndög
 & 
CI_TCP_ACKS_PENDING_MASK
Ë> 
	`NI_OPTS
(
ni
).
dy«ck_thªsh
)

33 ((
ts
->
acks_≥ndög
 & 
CI_TCP_ACKS_PENDING_MASK
Ë> 
	`NI_OPTS
(
ni
).
dñack_thªsh
)

35 || ( 
	`SEQ_GE
(
ts
->
rcv_dñivîed
 +Ås->
rcv_wödow_max
,

36 
ts
->
rcv_wnd_right_edge_£¡
+
	`ci_t˝_ack_åiggî_dñè
(ts)) |

37 (
	`ci_t˝_is_ö_Á°°¨t
(
ts
) ) );

38 
	}
}

41 
ci_ölöe
 
	$ci_t˝_rx_po°_pﬁl
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

43 
	`LOG_TR
(
	`ci_log
("%s: "
NTS_FMT
 "acks=%x %s", 
__FUNCTION__
,

44 
	`NTS_PRI_ARGS
(
ni
, 
ts
),Ås->
acks_≥ndög
,

45 
	`ci_t˝_£ndq_nŸ_em±y
(
ts
) ? " SENDQ":""));

47 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

48 
	`ci_as£π
(
ts
->
s
.
b
.
sb_Êags
 & 
CI_SB_FLAG_TCP_POST_POLL
);

50 
ts
->
s
.
b
.
sb_Êags
 &=~ 
CI_SB_FLAG_TCP_POST_POLL
;

52 if–
	`ci_t˝_£ndq_nŸ_em±y
(
ts
) )

53 
	`ci_t˝_tx_adv™˚
(
ts
, 
ni
);

55 #i‡
CI_CFG_TCP_FASTSTART


56 if–
	`ci_t˝_time_now
(
ni
Ë- 
ts
->
t_¥ev_ªcv_∑ylﬂd
 > 
	`NI_CONF
“i).
tc⁄°_idÀ
 ) {

57 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_NO_QUICKACK
 )

58 
ts
->
t˝Êags
 &=~ 
CI_TCPT_FLAG_NO_QUICKACK
;

60 
ts
->
Á°°¨t_acks
 = 
	`NI_OPTS
(
ni
).
t˝_Á°°¨t_idÀ
;

62 
ts
->
t_¥ev_ªcv_∑ylﬂd
 =Ås->
t_œ°_ªcv_∑ylﬂd
;

65 if–
ts
->
acks_≥ndög
 ) {

66 #i‚de‡
NDEBUG


67 if–
	`TCP_ACK_FORCED
(
ts
) )

68 
	`ci_log
("%s: "
NTS_FMT
 "ACK_FORCED flag set unexpectedly: %x",

69 
__FUNCTION__
, 
	`NTS_PRI_ARGS
(
ni
, 
ts
),Ås->
acks_≥ndög
);

72 if–
	`OO_SP_NOT_NULL
(
ts
->
loˇl_≥î
) ) {

73 if–
ts
->
acks_≥ndög
 )

74 
	`ci_t˝_£nd_ack_lo›back
(
ni
, 
ts
, 
CI_FALSE
);

77 if–
	`ci_t˝_√ed_ack
(
ni
, 
ts
) ) {

78 
ci_ù_pkt_fmt
* 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
ni
);

79 if(
	`CI_LIKELY
–
pkt
 !
NULL
 )) {

80 
	`ci_t˝_£nd_ack
(
ni
, 
ts
, 
pkt
, 
CI_FALSE
);

84 #i‡
CI_CFG_DYNAMIC_ACK_RATE


86 if–
	`NI_OPTS
(
ni
).
dy«ck_thªsh
 > NI_OPTS“i).
dñack_thªsh
) {

93 if–(
ts
->
acks_≥ndög
 & 
CI_TCP_ACKS_PENDING_MASK
) <=

94 
	`NI_OPTS
(
ni
).
dñack_thªsh
 )

95 
	`ci_t˝_dñack_check_™d_£t
(
ni
, 
ts
);

96 if–!(
ts
->
acks_≥ndög
 & 
CI_TCP_DELACK_SOON_FLAG
) )

97 
	`ci_t˝_dñack_so⁄
(
ni
, 
ts
);

99 
	`ci_t˝_dñack_check_™d_£t
(
ni
, 
ts
);

101 
	`ci_t˝_dñack_check_™d_£t
(
ni
, 
ts
);

104 
	}
}

115 
ci_ölöe
 
	$ci_t˝_£t_¢d_max
(
ci_t˝_°©e
 *
ts
, 
ci_uöt32
 
£q
,

116 
ci_uöt32
 
ack
, ci_uöt32 
wnd
)

118 #i‡
CI_CFG_NOTICE_WINDOW_SHRINKAGE


119 
ts
->
¢d_wl1
 = 
£q
;

121 
ts
->
¢d_max
 = 
ack
 + 
wnd
;

122 
	}
}

	@tcp_send.c

14 
	~"ù_öã∫Æ.h
"

15 
	~"t˝_tx.h
"

16 
	~"ù_tx.h
"

18 #i‡!
deföed
(
__KERNEL__
)

19 
	~<sys/sockë.h
>

20 
	~<⁄lﬂd/exãnsi⁄s_zc.h
>

22 
	~<⁄lﬂd/pkt_fûÀr.h
>

23 
	~<⁄lﬂd/¶ìp.h
>

24 
	~<⁄lﬂd/tm∂.h
>

25 
	~<ci/öã∫Æ/pio_buddy.h
>

28 
	#LPF
 "TCP SEND "

	)

31 #i‡
deföed
(
__KERNEL__
Ë&& deföed(
__löux__
)

32 
	#OO_EINTR
 
ERESTARTSYS


	)

34 
	#OO_EINTR
 
EINTR


	)

40 
	#ONLOAD_MSG_DELEGATED
 0x1000

	)

49 
	#åylock
(
ni
, 
locked
) \

50 ((
locked
Ë|| (
	`ci_√tif_åylock
(
ni
Ë&& (÷ockedË1)))

	)

51 
	#si_åylock
(
ni
, 
söf
) \

52 
	`åylock
((
ni
), (
söf
)->
°ack_locked
)

	)

54 
	st˝_£nd_öfo
 {

55 
	mrc
;

56 
ci_uöt32
 
	mtimeout
;

57 
ci_uöt32
 
	mﬁd_t˝_¢d_nxt
;

58 #i‡
CI_CFG_BURST_CONTROL


59 
ci_uöt32
 
	mﬁd_bur°_wödow
;

61 
ci_uöt64
 
	m°¨t_‰c
;

62 
	m£t_î∫o
;

63 
	m°ack_locked
;

64 
	mtŸÆ_un£¡
;

65 
	mtŸÆ_£¡
;

66 
	m£ndq_¸edô
;

67 
	mn_√eded
;

68 
	mn_fûÀd
;

69 
	mfûl_li°_byãs
;

70 
	mt˝_£nd_•ö
;

71 
ci_ù_pkt_fmt
* 
	mfûl_li°
;

72 
oo_pkt_fûÀr
 
	mpf
;

76 
	$ci_t˝_tx_adv™˚_«gÀ
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

83 
ci_ù_pkt_queue
* 
£ndq
 = &
ts
->
£nd
;

84 
ci_ù_pkt_fmt
* 
pkt
 = 
NULL
;

86 
	`ci_as£π
(
	`ci_ù_queue_is_vÆid
(
ni
, 
£ndq
));

87 
	`ci_as£π
(! 
	`ci_ù_queue_is_em±y
(
£ndq
));

89 if–(
£ndq
->
num
 !1Ë| (
	`ci_t˝_öÊight
(
ts
) == 0) |

90 
	`OO_SP_NOT_NULL
(
ts
->
loˇl_≥î
)) {

91 
adv™˚_now
:

93 
	`ci_ù_time_ªsync
(
	`IPTIMER_STATE
(
ni
));

94 
	`ci_t˝_tx_adv™˚
(
ts
, 
ni
);

95 if(
	`CI_UNLIKELY
–
ni
->
Êags
 & 
CI_NETIF_FLAG_MSG_WARM
 ))

97 
pﬁl_™d_out
;

100 
	`ci_as£π
(! (
ni
->
Êags
 & 
CI_NETIF_FLAG_MSG_WARM
));

106 
pkt
 = 
	`PKT_CHK
(
ni
, 
£ndq
->
hód
);

107 
	`ci_as£π
(!(
	`TX_PKT_TCP
(
pkt
)->
t˝_Êags
 & (
CI_TCP_FLAG_SYN
|
CI_TCP_FLAG_FIN
)));

109 if–(
	`PKT_TCP_TX_SEQ_SPACE
(
pkt
Ë>
	`t˝_eff_mss
(
ts
)) |

110 (
	`SEQ_LT
(
	`t˝_¢d_u«
(
ts
), 
	`t˝_¢d_up
(ts)) ) )

111 
adv™˚_now
;

113 if–
ts
->
s
.
s_aÊags
 & 
CI_SOCK_AFLAG_NODELAY
 ) {

121 if–
ts
->
ªå™s
.
num
 < 
	`NI_OPTS
(
ni
).
n⁄agÀ_öÊight_max
 ||

122 (
ts
->
eff_mss
 *Ås->
ªå™s
.
num
 < 
	`ci_t˝_öÊight
(ts) * 2) )

123 
adv™˚_now
;

126 
	`LOG_TV
(
	`log
(
LPF
 "%d Nagle snd=%08x-%08x-%08xÉnq=%08xÖkt=%x-%x",

127 
	`S_FMT
(
ts
), 
	`t˝_¢d_u«
—s), 
	`t˝_¢d_nxt
(ts),

128 
ts
->
¢d_max
, 
	`t˝_íq_nxt
(ts),

129 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
,Ökt->pf.t˝_tx.
íd_£q
));

130 ++
ts
->
°©s
.
tx_°›_«gÀ
;

132 
pﬁl_™d_out
:

133 if–
	`ci_√tif_may_pﬁl
(
ni
Ë&& 
	`ci_√tif_has_evít
(ni) )

134 
	`ci_√tif_pﬁl
(
ni
);

135 
	}
}

138 
ci_ölöe
 
	$ci_t˝_tx_n_pkts_√eded
(
eff_mss
, 
maxbyãs
,

139 
maxbufs
, 
£ndq_¸edô
) {

143 
n
 = (
maxbyãs
 + 
eff_mss
 - 1) /Éff_mss;

144 if–
n
 > 
£ndq_¸edô
 )Ç = sendq_credit;

145 if–
n
 > 
maxbufs
 )Ç = maxbufs;

146  
n
;

147 
	}
}

150 
ci_ölöe
 
	$__ci_t˝_tx_pkt_öô
(
ci_ù_pkt_fmt
* 
pkt
, 
hdæí
, 
maxÀn
)

152 
	`oo_offbuf_öô
(&
pkt
->
buf
, (
uöt8_t
*Ë
	`oo_tx_ëhî_d©a
’ktË+ 
hdæí
, 
maxÀn
);

153 
pkt
->
buf_Àn
 =Ökt->
∑y_Àn
 = 
hdæí
 + 
	`oo_ëhî_hdr_size
(pkt);

154 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
 = 
hdæí
;

155 
pkt
->
pf
.
t˝_tx
.
íd_£q
 = 0;

156 
	}
}

159 
ci_ölöe
 
	$ci_t˝_tx_pkt_öô
(
ci_ù_pkt_fmt
* 
pkt
, 
hdæí
, 
maxÀn
)

161 
	`oo_tx_pkt_œyout_öô
(
pkt
);

162 
	`__ci_t˝_tx_pkt_öô
(
pkt
, 
hdæí
, 
maxÀn
);

163 
	}
}

167 
ci_t˝_£ndmsg_fûl_pkt
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

168 
t˝_£nd_öfo
* 
söf
,

169 
ci_iovec_±r
* 
piov
, 
hdæí
,

170 
maxÀn


171 
	$CI_KERNEL_ARG
(
ci_addr_•c_t
 
addr_•c
))

174 
n
;

175 
ci_ù_pkt_fmt
* 
pkt
 = 
	`oo_pkt_fûÀr_√xt_pkt
(
ni
, &
söf
->
pf
, söf->
°ack_locked
);

177 
	`ci_as£π
(
pkt
);

178 
	`ci_as£π
(! 
	`ci_iovec_±r_is_em±y_¥›î
(
piov
));

179 
	`ci_t˝_tx_pkt_öô
(
pkt
, 
hdæí
, 
maxÀn
);

180 
	`oo_pkt_fûÀr_öô
(&
söf
->
pf
, 
pkt
,

181 (
uöt8_t
*Ë
	`oo_tx_ëhî_d©a
(
pkt
Ë+ 
hdæí
);

183 #i‚de‡
NDEBUG


184 
	`ci_as£π_equÆ
(
pkt
->
n_buf„rs
, 1);

185 
	`ci_as£π_equÆ
(
pkt
->
buf_Àn
, 
	`TX_PKT_LEN
(pkt));

188 
n
 = 
söf
->
tŸÆ_un£¡
 - söf->
fûl_li°_byãs
;

189 
n
 = 
	`CI_MIN
(
maxÀn
,Ç);

190 
söf
->
rc
 = 
	`oo_pkt_fûl
(
ni
, &
ts
->
s
, 
NULL
 ,

191 
CI_FALSE
 , &
söf
->
pf
, 
piov
,

192 
n
 
	`CI_KERNEL_ARG
(
addr_•c
));

195 #ifde‡
__KERNEL__


196 if–
	`CI_UNLIKELY
–
söf
->
rc
 < 0 ) ) {

197 
	`ci_as£π_equÆ
(
söf
->
rc
, -
EFAULT
);

198 
fûl_Áûed
;

201 
	`ci_as£π_equÆ
(
söf
->
rc
, 0);

207 
	`ci_as£π_ge
(
	`oo_offbuf_À·
(&
pkt
->
buf
), 
n
);

208 
	`oo_offbuf_adv™˚
(&
pkt
->
buf
, 
n
);

211 
	`LOG_TV
(
	`log
("%s: iov.Àn=%d iovÀn=%dÇ=%dÖkt=%dÜe·=%d", 
__FUNCTION__
,

212 (Ë
	`CI_IOVEC_LEN
(&
piov
->
io
),Öiov->
iovÀn
, 
n
,

213 
	`OO_PKT_FMT
(
pkt
), 
	`oo_offbuf_À·
(&pkt->
buf
)));

214 #i‚de‡
__KERNEL__


217 
	`ci_as£π
(
	`ci_iovec_±r_is_em±y_¥›î
(
piov
) ||

218 
	`oo_offbuf_À·
(&
pkt
->
buf
) == 0 ||

219 
pkt
->
n_buf„rs
 =
CI_IP_PKT_SEGMENTS_MAX
);

221 #i‚de‡
NDEBUG


222 if(!(
	`ci_iovec_±r_is_em±y_¥›î
(
piov
) ||

223 
	`oo_offbuf_À·
(&
pkt
->
buf
) == 0 ||

224 
pkt
->
n_buf„rs
 =
CI_IP_PKT_SEGMENTS_MAX
))

225 
	`LOG_U
(
	`ci_log
("%s: couldn't copy data,Örobably bad user-levelÖointer",

226 
__FUNCTION__
));

235 
pkt
->
pf
.
t˝_tx
.
íd_£q
 = 
n
;

237 
	`ci_as£π_equÆ
(
	`TX_PKT_LEN
(
pkt
),

238 
	`oo_offbuf_±r
(&
pkt
->
buf
Ë- 
	`PKT_START
(pkt));

239  
n
;

241 #ifde‡
__KERNEL__


242 
fûl_Áûed
:

243 
	`LOG_U
(
	`ci_log
("%s: fû»Áûed: %d\n", 
__FUNCTION__
, 
söf
->
rc
));

244 
	`ci_as£π
(0);

247 
	}
}

250 
ci_t˝_fûl_°ﬁí_buf„r
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

251 
ci_iovec_±r
* 
piov


252 
	$CI_KERNEL_ARG
(
ci_addr_•c_t
 
addr_•c
))

257 
n
;

259 
n
 = 
	`ci_ù_c›y_pkt_‰om_piov
(
ni
, 
pkt
, 
piov
, 
addr_•c
);

262 
	`LOG_TV
(
	`log
("%s: iov.Àn=%d iovÀn=%dÇ=%dÖkt=%dÜe·=%d", 
__FUNCTION__
,

263 (Ë
	`CI_IOVEC_LEN
(&
piov
->
io
),Öiov->
iovÀn
, 
n
,

264 
	`OO_PKT_FMT
(
pkt
), 
	`oo_offbuf_À·
(&pkt->
buf
)));

265 #i‚de‡
__KERNEL__


268 
	`ci_as£π
(
	`ci_iovec_±r_is_em±y
(
piov
) ||

269 
	`oo_offbuf_À·
(&
pkt
->
buf
) == 0 ||

270 
pkt
->
n_buf„rs
 =
CI_IP_PKT_SEGMENTS_MAX
);

272 #i‚de‡
NDEBUG


273 if(!(
	`ci_iovec_±r_is_em±y
(
piov
) ||

274 
	`oo_offbuf_À·
(&
pkt
->
buf
) == 0 ||

275 
pkt
->
n_buf„rs
 =
CI_IP_PKT_SEGMENTS_MAX
))

276 
	`LOG_U
(
	`ci_log
("%s: couldn't copy data,Örobably bad user-levelÖointer",

277 
__FUNCTION__
));

281 
pkt
->
pf
.
t˝_tx
.
íd_£q
 +
n
;

283  
n
;

284 
	}
}

288 
ci_t˝_tx_fûl_£ndq_èû
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

289 
ci_iovec_±r
* 
piov
,

290 
t˝_£nd_öfo
* 
söf


291 
	$CI_KERNEL_ARG
(
ci_addr_•c_t
 
addr_•c
))

293 
ci_ù_pkt_queue
* 
£ndq
 = &
ts
->
£nd
;

294 
ci_ù_pkt_fmt
* 
pkt
;

295 
n
;

297 if–
	`ci_ù_queue_nŸ_em±y
(
£ndq
Ë&& 
ts
->
s
.
tx_î∫o
 == 0 ) {

298 
pkt
 = 
	`PKT_CHK
(
ni
, 
£ndq
->
èû
);

299 if–
	`oo_offbuf_À·
(&
pkt
->
buf
) > 0 ) {

300 
n
 = 
	`ci_t˝_fûl_°ﬁí_buf„r
(
ni
, 
pkt
, 
piov
 
	`CI_KERNEL_ARG
(
addr_•c
));

301 
	`LOG_TV
(
	`ci_log
("%s: "
NT_FMT
 "sq=%d if=%d bytes=%dÖiov.left=%d "

302 "pkt.À·=%d", 
__FUNCTION__
, 
	`NT_PRI_ARGS
(
ni
, 
ts
),

303 
	`SEQ_SUB
(
	`t˝_íq_nxt
(
ts
), 
	`t˝_¢d_nxt
(ts)),

304 
	`ci_t˝_öÊight
(
ts
), 
n
, 
	`ci_iovec_±r_byãs_cou¡
(
piov
),

305 
	`oo_offbuf_À·
(&
pkt
->
buf
)));

306 
	`t˝_íq_nxt
(
ts
Ë+
n
;

307 
söf
->
tŸÆ_£¡
 +
n
;

308 
söf
->
tŸÆ_un£¡
 -
n
;

319 
	}
}

322 
ci_ölöe
 
	$ci_t˝_£ndmsg_¥ï_pkt
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

323 
ci_ù_pkt_fmt
* 
pkt
, 
£q
)

325 
‹ig_hdæí
, 
exåa_›ts
;

328 
	`ci_pkt_öô_‰om_ùˇche
(
pkt
, &
ts
->
s
.pkt);

334 
‹ig_hdæí
 = ()
pkt
->
pf
.
t˝_tx
.
°¨t_£q
;

340 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
 = 
£q
;

341 
pkt
->
pf
.
t˝_tx
.
íd_£q
 +
£q
;

343 
pkt
->
pf
.
t˝_tx
.
block_íd
 = 
OO_PP_NULL
;

345 
	`LOG_TV
(
	`log
(
LPF
 "%s: %d: %x-%x", 
__FUNCTION__
, 
	`OO_PKT_FMT
(
pkt
),

346 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
,Ökt->pf.t˝_tx.
íd_£q
));

357 
exåa_›ts
 = 
ts
->
outgoög_hdrs_Àn
 - 
‹ig_hdæí
;

358 if–
exåa_›ts
 )

359 
	`ci_t˝_tx_ö£π_›ti⁄_•a˚
(
ni
, 
ts
, 
pkt
,

360 
‹ig_hdæí
 + 
	`oo_ëhî_hdr_size
(
pkt
),

361 
exåa_›ts
);

364 
	`ci_as£π_equÆ
((
	`oo_offbuf_±r
(&
pkt
->
buf
) -

365 (
	`PKT_START
(
pkt
Ë+ 
	`oo_ëhî_hdr_size
(pkt) +

366 (
ci_ù4_hdr
) +

367 (
ci_t˝_hdr
Ë+ 
	`CI_TCP_HDR_OPT_LEN
(
	`TX_PKT_TCP
(
pkt
)))),

368 
	`SEQ_SUB
(
pkt
->
pf
.
t˝_tx
.
íd_£q
,pkt->pf.t˝_tx.
°¨t_£q
));

371 
	`ci_t˝_tx_pkt_£t_íd
(
ts
, 
pkt
);

372 
	}
}

375 #i‡
CI_CFG_PIO


377 
	$ci_t˝_tm∂_off£t
()

379  
CI_CFG_PKT_BUF_SIZE
 - (
t˝_£nd_öfo
) -

380 (
oo_msg_ãm∂©e
);

381 
	}
}

384 
oo_msg_ãm∂©e
* 
	$ci_t˝_tm∂_pkt_to_omt
(
ci_ù_pkt_fmt
* 
pkt
)

386  (*Ë((*Ë
pkt
 + 
	`ci_t˝_tm∂_off£t
());

387 
	}
}

390 
	$__ci_t˝_tm∂_h™dÀ_nic_ª£t
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

392 
oo_pkt_p
* 
µ
;

393  
µ
 = &
ts
->
tm∂_hód
; 
	`OO_PP_NOT_NULL
(*pp); ) {

394 
ci_ù_pkt_fmt
* 
tm∂
 = 
	`PKT_CHK
(
ni
, *
µ
);

395 if–
tm∂
->
pio_addr
 >= 0 ) {

396 if–
ni
->
°©e
->
nic
[
tm∂
->
ötf_i
].
oo_vi_Êags
 & 
OO_VI_FLAGS_PIO_EN
 ) {

397 
	`CI_DEBUG_TRY
(
	`ef_pio_mem˝y
(&
ni
->
nic_hw
[
tm∂
->
ötf_i
].
vi
,

398 
	`PKT_START
(
tm∂
),

399 
tm∂
->
pio_addr
,Åm∂->
buf_Àn
));

402 
	`ci_pio_buddy_‰ì
(
ni
, &ni->
°©e
->
nic
[
tm∂
->
ötf_i
].
pio_buddy
,

403 
tm∂
->
pio_addr
,Åm∂->
pio_‹dî
);

404 
tm∂
->
pio_addr
 = -1;

407 
µ
 = &
tm∂
->
√xt
;

409 
	}
}

415 
	$ci_t˝_tm∂_h™dÀ_nic_ª£t
(
ci_√tif
* 
ni
)

417 
i
;

419  
i
 = 0; i < 
ni
->
°©e
->
n_ï_bufs
; ++i ) {

420 
côp_waôabÀ_obj
* 
wo
 = 
	`SP_TO_WAITABLE_OBJ
(
ni
, 
i
);

421 
côp_waôabÀ
* 
w
 = &
wo
->
waôabÀ
;

422 if–(
w
->
°©e
 & 
CI_TCP_STATE_TCP_CONN
Ë|| w->°©ê=
CI_TCP_CLOSED
 ) {

423 
ci_t˝_°©e
* 
ts
 = &
wo
->
t˝
;

424 if–
	`OO_PP_NOT_NULL
(
ts
->
tm∂_hód
) )

425 
	`__ci_t˝_tm∂_h™dÀ_nic_ª£t
(
ni
, 
ts
);

428 
	}
}

433 
	$ci_t˝_tm∂_ªmove
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

434 
ci_ù_pkt_fmt
* 
tm∂
)

436 
oo_msg_ãm∂©e
* 
omt
 = 
	`ci_t˝_tm∂_pkt_to_omt
(
tm∂
);

437 
oo_pkt_p
* 
µ
;

439  
µ
 = &
ts
->
tm∂_hód
; *µ !
	`OO_PKT_P
(
tm∂
); )

440 
µ
 = &(
	`PKT_CHK
(
ni
, *µ)->
√xt
);

441 *
µ
 = 
tm∂
->
√xt
;

442 --(
ts
->
°©s
.
tx_tm∂_a˘ive
);

443 
omt
->
oomt_sock_id
 = 
OO_SP_NULL
;

444 
	}
}

452 
	$ci_t˝_tm∂_‰ì
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

453 
ci_ù_pkt_fmt
* 
tm∂
, 
ö_li°
)

455 
	`ci_as£π
(
ni
);

456 
	`ci_as£π
(
ts
);

457 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

459 if–
tm∂
->
pio_addr
 >= 0 ) {

460 
	`ci_pio_buddy_‰ì
(
ni
, &ni->
°©e
->
nic
[
tm∂
->
ötf_i
].
pio_buddy
,

461 
tm∂
->
pio_addr
,Åm∂->
pio_‹dî
);

462 
tm∂
->
pio_addr
 = -1;

464 if–
ö_li°
 )

465 
	`ci_t˝_tm∂_ªmove
(
ni
, 
ts
, 
tm∂
);

466 --
ni
->
°©e
->
n_async_pkts
;

467 
	`ci_√tif_pkt_ªÀa£_1ªf
(
ni
, 
tm∂
);

468 
	}
}

475 
	$ci_t˝_tm∂_‰ì_Æl
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

477 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

478  
	`OO_PP_NOT_NULL
(
ts
->
tm∂_hód
) ) {

479 
ci_ù_pkt_fmt
* 
tm∂
 = 
	`PKT_CHK
(
ni
, 
ts
->
tm∂_hód
);

480 
ts
->
tm∂_hód
 = 
tm∂
->
√xt
;

481 
	`ci_t˝_tm∂_‰ì
(
ni
, 
ts
, 
tm∂
, 0);

483 
	}
}

486 #i‚de‡
__KERNEL__


488 
ci_ù_pkt_fmt
* 
	$ci_t˝_tm∂_omt_to_pkt
(
oo_msg_ãm∂©e
* 
omt
)

490  (*Ë((*Ë
omt
 - 
	`ci_t˝_tm∂_off£t
());

491 
	}
}

494 
t˝_£nd_öfo
*

495 
	$ci_t˝_tm∂_omt_to_söf
(
oo_msg_ãm∂©e
* 
omt
)

497  (*Ë(
omt
 + 1);

498 
	}
}

510 
	$__ci_t˝_tm∂_n‹mÆ_£nd
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

511 
ci_ù_pkt_fmt
* 
tm∂
,

512 
t˝_£nd_öfo
* 
söf
, 
Êags
)

514 
	#CI_NOT_NULL
 ((*)-1)

	)

515 
iovec
 
iov
[1];

516 
rc
;

518 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

520 
iov
[0].
iov_ba£
 = 
	`CI_TCP_PAYLOAD
(
	`PKT_TCP_HDR
(
tm∂
));

521 
iov
[0].
iov_Àn
 = 
söf
->
tŸÆ_un£¡
;

523 if–
ts
->
s
.
b
.
sb_aÊags
 & (
CI_SB_AFLAG_O_NONBLOCK
 | 
CI_SB_AFLAG_O_NDELAY
) )

524 
Êags
 |
MSG_DONTWAIT
;

526 ++
ts
->
°©s
.
tx_tm∂_£nd_¶ow
;

529 
	`ci_√tif_u∆ock
(
ni
);

530 
rc
 = 
	`ci_t˝_£ndmsg
(
ni
, 
ts
, 
iov
, 1, 
Êags
 & ~
ONLOAD_TEMPLATE_FLAGS_SEND_NOW
);

531 if–
rc
 < 0 ) {

532 
rc
 = -
î∫o
;

534 if–
rc
 < 
söf
->
tŸÆ_un£¡
 ) {

536 
rc
 = -
ts
->
s
.
tx_î∫o
;

539 
	`ci_as£π_equÆ
(
rc
, 
söf
->
tŸÆ_un£¡
);

540 
rc
 = 0;

543 
	`ci_√tif_lock
(
ni
);

544 
	`ci_t˝_tm∂_‰ì
(
ni
, 
ts
, 
tm∂
, 1);

545 
	`ci_√tif_u∆ock
(
ni
);

547  
rc
;

548 
	}
}

551 
	$ci_t˝_tm∂_Æloc
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

552 
oo_msg_ãm∂©e
** 
omt_µ
,

553 c⁄° 
iovec
* 
öôül_msg
, 
mÀn
, 
Êags
)

555 
i
, 
max_∑ylﬂd
;

556 
rc
 = 0;

557 
size_t
 
tŸÆ_un£¡
 = 0;

558 
ci_ù_ˇched_hdrs
* 
ùˇche
 = &
ts
->
s
.
pkt
;

559 
ötf_i
;

560 
ci_√tif_°©e_nic_t
* 
n¢
;

561 
ci_ù_pkt_fmt
* 
pkt
;

562 
ci_iovec_±r
 
piov
;

563 
ci_ù4_hdr
* 
ù
;

564 
oo_msg_ãm∂©e
* 
omt
;

565 
t˝_£nd_öfo
* 
söf
;

567 #i‡
	`deföed
(
__powîpc64__
)

568 
	`LOG_U
(
	`ci_log
("%s: Thi†API i†nŸ suµ‹ãd o¿PowîPC yë.", 
__FUNCTION__
));

569  -
ENOSYS
;

580 if(
	`CI_UNLIKELY
–
Êags
 & ~
ONLOAD_TEMPLATE_FLAGS_PIO_RETRY
 )) {

581 
	`LOG_E
(
	`ci_log
("%s: cÆÀd wôh unsuµ‹ãd fœgs=%x", 
__FUNCTION__
, 
Êags
));

582  -
EINVAL
;

585 
	`ci_√tif_lock
(
ni
);

587 if(
	`CI_UNLIKELY
–(~
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_SYNCHRONISED
) )) {

590 
	`LOG_U
(
	`ci_log
("ci_tcp_tmpl_alloc:Çot synchronized\n"));

591 
rc
 = -
ENOTCONN
;

592 
out
;

594 
	`ci_as£π_equÆ
(
ts
->
s
.
tx_î∫o
, 0);

598 if(
	`CI_UNLIKELY
–! 
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
), 
ùˇche
) )) {

599 
	`ci˝_u£r_ªåõve
(
ni
, 
ùˇche
, &
ts
->
s
.
˝
);

600  
ùˇche
->
°©us
 ) {

601 
ªårc_suc˚ss
:

607 
ªårc_nomac
:

618 
ªårc_loˇÃouã
:

619 
loˇl_rouã
;

622 
	`LOG_U
(
	`ci_log
("%s: c∂™ê°©us=%d", 
__FUNCTION__
, 
ùˇche
->
°©us
));

623 
rc
 = -
EHOSTUNREACH
;

624 
out
;

628 if–
ùˇche
->
Êags
 & 
CI_IP_CACHE_IS_LOCALROUTE
 ) {

629 
loˇl_rouã
:

630 
	`LOG_U
(
	`ci_log
("%s:Åemplated sendsÇot supported onÜoopback connections",

631 
__FUNCTION__
));

632 
rc
 = -
EOPNOTSUPP
;

633 
out
;

636 
ötf_i
 = 
ùˇche
->intf_i;

637 
n¢
 = &
ni
->
°©e
->
nic
[
ötf_i
];

640  
i
 = 0; i < 
mÀn
; ++i ) {

641 #i‚de‡
NDEBUG


642 if–
öôül_msg
[
i
].
iov_ba£
 =
NULL
 ) {

643 
rc
 = -
EFAULT
;

644 
out
;

647 
tŸÆ_un£¡
 +
öôül_msg
[
i
].
iov_Àn
;

661 
max_pio_pkt
, 
max_buf_pkt
;

662 
max_pio_pkt
 = 
n¢
->
pio_io_Àn
 - 
ETH_VLAN_HLEN
;

663 
max_buf_pkt
 =

664 
CI_CFG_PKT_BUF_SIZE
 - 
	`CI_MEMBER_OFFSET
(
ci_ù_pkt_fmt
, 
dma_°¨t
);

665 
max_∑ylﬂd
 = 
	`CI_MIN
(
max_buf_pkt
, 
max_pio_pkt
);

666 
max_∑ylﬂd
 -
ts
->
outgoög_hdrs_Àn
 + 
ETH_HLEN
;

667 
max_∑ylﬂd
 -(
t˝_£nd_öfo
);

668 
max_∑ylﬂd
 -(
oo_msg_ãm∂©e
);

670 if–
tŸÆ_un£¡
 > 
max_∑ylﬂd
 ) {

671 
rc
 = -
E2BIG
;

672 
out
;

676 if–(
pkt
 = 
	`ci_√tif_pkt_tx_t˝_Æloc
(
ni
, 
ts
)Ë=
NULL
 ) {

677 
rc
 = -
EBUSY
;

678 
out
;

680 ++(
ni
->
°©e
->
n_async_pkts
);

688 
	`ci_as£π_equÆ
(
pkt
->
pio_addr
, -1);

689 
pkt
->
ötf_i
 = intf_i;

690 
pkt
->
pio_‹dî
 = 
	`ci_log2_ge
(
ts
->
outgoög_hdrs_Àn
 + 
ETH_HLEN
 + 
ETH_VLAN_HLEN


691 + 
tŸÆ_un£¡
, 
CI_CFG_MIN_PIO_BLOCK_ORDER
);

692 
pkt
->
pio_addr
 = 
	`ci_pio_buddy_Æloc
(
ni
, &
n¢
->
pio_buddy
,Ökt->
pio_‹dî
);

693 if–
pkt
->
pio_addr
 < 0 ) {

694 
pkt
->
pio_addr
 = -1;

695 if–! (
Êags
 & 
ONLOAD_TEMPLATE_FLAGS_PIO_RETRY
) ) {

696 
	`ci_√tif_pkt_ªÀa£_1ªf
(
ni
, 
pkt
);

697 --(
ni
->
°©e
->
n_async_pkts
);

698 
rc
 = -
ENOMEM
;

699 
out
;

703 
omt
 = 
	`ci_t˝_tm∂_pkt_to_omt
(
pkt
);

704 *
omt_µ
 = 
omt
;

705 
omt
->
oomt_sock_id
 = 
	`S_SP
(
ts
);

707 
söf
 = 
	`ci_t˝_tm∂_omt_to_söf
(
omt
);

708 
söf
->
n_√eded
 = 1;

709 
söf
->
tŸÆ_un£¡
 =Åotal_unsent;

710 
söf
->
tŸÆ_£¡
 = 0;

711 
söf
->
pf
.
Æloc_pkt
 = 
NULL
;

712 
söf
->
fûl_li°
 = 0;

713 
söf
->
fûl_li°_byãs
 = 0;

714 
söf
->
n_fûÀd
 = 0;

715 
	`oo_pkt_fûÀr_add_pkt
(&
söf
->
pf
, 
pkt
);

716 
pkt
->
√xt
 = 
ts
->
tm∂_hód
;

717 
ts
->
tm∂_hód
 = 
	`OO_PKT_P
(
pkt
);

721 if–
ts
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_TX_HARDWARE
 )

722 
pkt
->
Êags
 |
CI_PKT_FLAG_TX_TIMESTAMPED
;

726 
	`ci_iovec_±r_öô_nz
(&
piov
, 
öôül_msg
, 
mÀn
);

727 
söf
->
fûl_li°_byãs
 +=

728 
	`ci_t˝_£ndmsg_fûl_pkt
(
ni
, 
ts
, 
söf
, &
piov
,Ås->
outgoög_hdrs_Àn
,

729 
	`t˝_eff_mss
(
ts
));

730 ++
söf
->
n_fûÀd
;

731 
	`CI_USER_PTR_SET
(
söf
->
pf
.
pkt
->pf.
t˝_tx
.
√xt
, söf->
fûl_li°
);

732 
söf
->
fûl_li°
 = söf->
pf
.
pkt
;

733 
	`ci_t˝_£ndmsg_¥ï_pkt
(
ni
, 
ts
, 
pkt
, 
	`t˝_íq_nxt
(ts));

735 
	`TX_PKT_TCP
(
söf
->
fûl_li°
)->
t˝_Êags
 =

736 
CI_TCP_FLAG_PSH
 | 
CI_TCP_FLAG_ACK
;

740 
ù
 = 
	`oo_tx_ù_hdr
(
pkt
);

741 
	`ci_t˝_tx_föish
(
ni
, 
ts
, 
pkt
);

742 
	`ci_t˝_ù_hdr_öô
(
ù
, 
	`TX_PKT_LEN
(
pkt
Ë- 
	`oo_ëhî_hdr_size
(pkt));

750 
	`ci_ù_£t_mac_™d_p‹t
(
ni
, 
ùˇche
, 
pkt
);

752 if–
pkt
->
pio_addr
 >= 0 ) {

753 
rc
 = 
	`ef_pio_mem˝y
(&
ni
->
nic_hw
[
ötf_i
].
vi
, 
	`PKT_START
(
pkt
),

754 
pkt
->
pio_addr
,Ökt->
buf_Àn
);

755 
	`ci_as£π_equÆ
(
rc
, 0);

758 ++
ts
->
°©s
.
tx_tm∂_a˘ive
;

760 
out
:

761 
	`ci_√tif_u∆ock
(
ni
);

762  
rc
;

763 
	}
}

767 
	$ci_t˝_tm∂_upd©e
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

768 
oo_msg_ãm∂©e
* 
omt
,

769 c⁄° 
⁄lﬂd_ãm∂©e_msg_upd©e_iovec
* 
upd©es
,

770 
uÀn
, 
Êags
)

779 
i
, 
diff
, 
rc
, 
˝œ√_is_vÆid
;

780 
ci_ù_ˇched_hdrs
* 
ùˇche
;

781 
ci_ù_pkt_fmt
* 
pkt
;

782 
ci_t˝_hdr
* 
t˝
;

783 
ef_vi
* 
vi
;

784 
ci_uöt8
* 
t˝_›ts
;

785 
t˝_£nd_öfo
* 
söf
;

790 if(
	`CI_UNLIKELY
–
Êags
 & ~(
ONLOAD_TEMPLATE_FLAGS_SEND_NOW
 |

791 
ONLOAD_TEMPLATE_FLAGS_DONTWAIT
) )) {

792 
	`LOG_E
(
	`ci_log
("%s: cÆÀd wôh unsuµ‹ãd fœgs=%x", 
__FUNCTION__
, 
Êags
));

793  -
EINVAL
;

796 
	`ci_√tif_lock
(
ni
);

798 
ùˇche
 = &
ts
->
s
.
pkt
;

799 
pkt
 = 
	`ci_t˝_tm∂_omt_to_pkt
(
omt
);

800 
t˝
 = 
	`TX_PKT_TCP
(
pkt
);;

801 
vi
 = &
ni
->
nic_hw
[
pkt
->
ötf_i
].vi;

802 
t˝_›ts
 = 
	`CI_TCP_HDR_OPTS
(
t˝
);

803 
söf
 = 
	`ci_t˝_tm∂_omt_to_söf
(
omt
);

805 if(
	`CI_UNLIKELY
–
omt
->
oomt_sock_id
 !
	`S_SP
(
ts
) )) {

806 
rc
 = -
EINVAL
;

807 
	`ci_t˝_tm∂_‰ì
(
ni
, 
ts
, 
pkt
, 1);

808 
out
;

810 if(
	`CI_UNLIKELY
–
ts
->
s
.
so_îr‹
 )) {

811 
rc
 = -
	`ci_gë_so_îr‹
(&
ts
->
s
);

812 if–
rc
 < 0 ) {

813 
	`ci_t˝_tm∂_‰ì
(
ni
, 
ts
, 
pkt
, 1);

814 
out
;

817 if(
	`CI_UNLIKELY
–
ts
->
s
.
tx_î∫o
 )) {

818 
rc
 = -
ts
->
s
.
tx_î∫o
;

819 
	`ci_t˝_tm∂_‰ì
(
ni
, 
ts
, 
pkt
, 1);

820 
out
;

823 if(
	`CI_UNLIKELY
–
pkt
->
pio_addr
 == -1 &&

824 ! (
Êags
 & 
ONLOAD_TEMPLATE_FLAGS_SEND_NOW
) )) {

825 
pkt
->
pio_addr
 =

826 
	`ci_pio_buddy_Æloc
(
ni
, &ni->
°©e
->
nic
[
pkt
->
ötf_i
].
pio_buddy
,

827 
pkt
->
pio_‹dî
);

828 if–
pkt
->
pio_addr
 >= 0 ) {

829 
rc
 = 
	`ef_pio_mem˝y
(&
ni
->
nic_hw
[
pkt
->
ötf_i
].
vi
, 
	`PKT_START
(pkt),

830 
pkt
->
pio_addr
,Ökt->
buf_Àn
);

831 
	`ci_as£π
(
rc
 == 0);

834 
pkt
->
pio_addr
 = -1;

840  
i
 = 0; i < 
uÀn
; ++i ) {

842 if–
upd©es
[
i
].
Ÿmu_Àn
 == 0 ||

843 
upd©es
[
i
].
Ÿmu_off£t
 < 0 ||

844 #i‚de‡
NDEBUG


845 
upd©es
[
i
].
Ÿmu_ba£
 =
NULL
 ||

847 
upd©es
[
i
].
Ÿmu_off£t
 + upd©es[i].
Ÿmu_Àn
 > 
söf
->
tŸÆ_un£¡
 ) {

848 
rc
 = -
EINVAL
;

849 
out
;

851 
	`ci_as£π
((
	`CI_TCP_PAYLOAD
(
	`PKT_TCP_HDR
(
pkt
)Ë- 
	`PKT_START
(pkt)) +

852 
upd©es
[
i
].
Ÿmu_off£t
 >= 0);

854 if(
	`CI_UNLIKELY
–
pkt
->
pio_addr
 != -1 )) {

855 
rc
 = 
	`ef_pio_mem˝y
(
vi
, 
upd©es
[
i
].
Ÿmu_ba£
,

856 
pkt
->
pio_addr
 + (
ci_uöt32
)

857 (
	`CI_TCP_PAYLOAD
(
	`PKT_TCP_HDR
(
pkt
)Ë- 
	`PKT_START
(pkt)) +

858 
upd©es
[
i
].
Ÿmu_off£t
,

859 
upd©es
[
i
].
Ÿmu_Àn
);

860 
	`ci_as£π_equÆ
(
rc
, 0);

862 
	`mem˝y
((*)
	`CI_TCP_PAYLOAD
(
	`PKT_TCP_HDR
(
pkt
)Ë+ 
upd©es
[
i
].
Ÿmu_off£t
,

863 
upd©es
[
i
].
Ÿmu_ba£
, upd©es[i].
Ÿmu_Àn
);

866 if–! (
Êags
 & 
ONLOAD_TEMPLATE_FLAGS_SEND_NOW
) ) {

872 
rc
 = 0;

873 
out
;

876 
˝œ√_is_vÆid
 = 
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
), 
ùˇche
);

877 if–
˝œ√_is_vÆid
 &&

878 ! 
	`memcmp
(
	`oo_tx_ëhî_hdr
(
pkt
), 
	`ci_ù_ˇche_ëhî_hdr
(
ùˇche
),

879 
	`oo_ëhî_hdr_size
(
pkt
)) &&

880 
pkt
->
pio_addr
 != -1 ) {

885 if–
pkt
->
pio_addr
 == -1 ) {

891  
	`__ci_t˝_tm∂_n‹mÆ_£nd
(
ni
, 
ts
, 
pkt
, 
söf
, 
Êags
);

893 if–
˝œ√_is_vÆid
 ) {

901 
	`ci_as£π_ge
(
pkt
->
pio_addr
, 0);

902 
	`ci_ù_£t_mac_™d_p‹t
(
ni
, 
ùˇche
, 
pkt
);

903 if–
	`oo_ëhî_hdr_size
(
pkt
) ==

904 (*)&
ùˇche
->
ù
 - (*)
	`ci_ù_ˇche_ëhî_hdr
(ipcache) )

906 
rc
 = 
	`ef_pio_mem˝y
(
vi
, 
	`PKT_START
(
pkt
),Ökt->
pio_addr
,

907 (*)
	`PKT_TCP_HDR
(
pkt
Ë- 
	`PKT_START
(pkt));

909 
rc
 = 
	`ef_pio_mem˝y
(
vi
, 
	`PKT_START
(
pkt
),Ökt->
pio_addr
,Ökt->
buf_Àn
);

910 
	`ci_as£π_equÆ
(
rc
, 0);

915  
	`__ci_t˝_tm∂_n‹mÆ_£nd
(
ni
, 
ts
, 
pkt
, 
söf
, 
Êags
);

918 
	`ci_as£π_ge
(
pkt
->
pio_addr
, 0);

920 if–
	`ci_ù_queue_is_em±y
(&
ts
->
£nd
Ë&& 
	`ef_vi_å™smô_•a˚
(
vi
) > 0 &&

921 
	`ci_t˝_öÊight
(
ts
Ë+Ås->
smss
 < 
	`CI_MIN
—s->
cwnd
, 
	`t˝_¢d_wnd
(ts)) ) {

926 if–
	`CI_BSWAP_BE32
(
t˝
->
t˝_£q_be32
Ë!
	`t˝_íq_nxt
(
ts
) ) {

930 
diff
 = 
	`t˝_íq_nxt
(
ts
Ë- 
	`CI_BSWAP_BE32
(
t˝
->
t˝_£q_be32
);

931 
pkt
->
pf
.
t˝_tx
.
íd_£q
 +
diff
;

932 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
 +
diff
;

933 
t˝
->
t˝_£q_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_íq_nxt
(
ts
));

937 
t˝
->
t˝_ack_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_rcv_nxt
(
ts
));

938 
	`ci_t˝_ˇlc_rcv_wnd
(
ts
, "tmpl_update");

939 
t˝
->
t˝_wödow_be16
 = 
	`TS_TCP
(
ts
)->tcp_window_be16;

942 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

943 
now
 = 
	`ci_t˝_time_now
(
ni
);

944 
	`ci_t˝_tx_›t_tso
(&
t˝_›ts
, 
now
, 
ts
->
t§e˚¡
);

947 
	`ci_√tif_pkt_hﬁd
(
ni
, 
pkt
);

948 
	`__ci_√tif_dmaq_ö£π_¥ï_pkt
(
ni
, 
pkt
);

953 
rc
 = 
	`ef_pio_mem˝y
(
vi
, 
	`TX_PKT_TCP
(
pkt
),

954 
pkt
->
pio_addr
 + (*Ë
	`TX_PKT_TCP
(pkt) -

955 
	`PKT_START
(
pkt
), 
	`CI_TCP_PAYLOAD
(
	`PKT_TCP_HDR
(pkt)) -

956 (*)
	`TX_PKT_TCP
(
pkt
));

957 
	`ci_as£π_equÆ
(
rc
, 0);

961 
rc
 = 
	`ef_vi_å™smô_pio
(
vi
, 
pkt
->
pio_addr
,Ökt->
∑y_Àn
, 
	`OO_PKT_ID
(pkt));

962 
	`ci_as£π_equÆ
(
rc
, 0);

965 
	`t˝_¢d_nxt
(
ts
Ë
pkt
->
pf
.
t˝_tx
.
íd_£q
;

966 
	`t˝_íq_nxt
(
ts
Ë
pkt
->
pf
.
t˝_tx
.
íd_£q
;

967 
pkt
->
pf
.
t˝_tx
.
block_íd
 = 
OO_PP_NULL
;

968 
	`ci_t˝_tm∂_ªmove
(
ni
, 
ts
, 
pkt
);

969 
	`ci_ù_queue_íqueue
(
ni
, &
ts
->
ªå™s
, 
pkt
);

970 --
ni
->
°©e
->
n_async_pkts
;

971 ++
ts
->
°©s
.
tx_tm∂_£nd_Á°
;

978  
	`__ci_t˝_tm∂_n‹mÆ_£nd
(
ni
, 
ts
, 
pkt
, 
söf
, 
Êags
);

981 
out
:

982 
	`ci_√tif_u∆ock
(
ni
);

983  
rc
;

984 
	}
}

987 
	$ci_t˝_tm∂_ab‹t
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

988 
oo_msg_ãm∂©e
* 
omt
)

990 
ci_ù_pkt_fmt
* 
tm∂
 = 
	`ci_t˝_tm∂_omt_to_pkt
(
omt
);

991 
rc
 = 0;

992 
	`ci_√tif_lock
(
ni
);

993 if–
omt
->
oomt_sock_id
 !
	`S_SP
(
ts
) ) {

994 
rc
 = -
EINVAL
;

995 
out
;

997 
	`ci_t˝_tm∂_‰ì
(
ni
, 
ts
, 
tm∂
, 1);

998 
out
:

999 
	`ci_√tif_u∆ock
(
ni
);

1000  
rc
;

1001 
	}
}

1007 
	$ci_t˝_£ndmsg_íqueue
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1008 
ci_ù_pkt_fmt
* 
ªvî£_li°
,

1009 
tŸÆ_byãs
,

1010 
ci_ù_pkt_queue
* 
£ndq
)

1012 
£q
 = 
	`t˝_íq_nxt
(
ts
Ë+ 
tŸÆ_byãs
;

1013 
oo_pkt_p
 
èû_pkt_id
 = 
	`OO_PKT_P
(
ªvî£_li°
);

1014 
oo_pkt_p
 
£nd_li°
 = 
OO_PP_NULL
;

1015 
ci_ù_pkt_fmt
* 
pkt
;

1016 
n_pkts
 = 0;

1018 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1019 
	`ci_as£π_equÆ
(
ts
->
s
.
tx_î∫o
, 0);

1022 
pkt
 = 
ªvî£_li°
;

1023 
ªvî£_li°
 = (
ci_ù_pkt_fmt
 *)
	`CI_USER_PTR_GET
(
pkt
->
pf
.
t˝_tx
.
√xt
);

1025 
£q
 -
pkt
->
pf
.
t˝_tx
.
íd_£q
;

1026 
	`ci_t˝_£ndmsg_¥ï_pkt
(
ni
, 
ts
, 
pkt
, 
£q
);

1028 
pkt
->
√xt
 = 
£nd_li°
;

1029 
£nd_li°
 = 
	`OO_PKT_P
(
pkt
);

1030 ++
n_pkts
;

1032  
ªvî£_li°
 );

1034 
	`ci_as£π_equÆ
(
	`t˝_íq_nxt
(
ts
), 
£q
);

1035 
	`t˝_íq_nxt
(
ts
Ë+
tŸÆ_byãs
;

1038 
ni
->
°©e
->
n_async_pkts
 -
n_pkts
;

1039 
£ndq
->
num
 +
n_pkts
;

1040 if–
	`OO_PP_IS_NULL
(
£ndq
->
hód
) )

1041 
£ndq
->
hód
 = 
£nd_li°
;

1043 
	`PKT_CHK
(
ni
, 
£ndq
->
èû
)->
√xt
 = 
£nd_li°
;

1044 
£ndq
->
èû
 = 
èû_pkt_id
;

1046 
	`LOG_TV
(
	`ci_log
("%s: "
NT_FMT
 "sendq.num=%dÉnq_nxt=%x",

1047 
__FUNCTION__
, 
	`NT_PRI_ARGS
(
ni
, 
ts
),

1048 
£ndq
->
num
, 
	`t˝_íq_nxt
(
ts
)));

1049 
	`CHECK_TS
(
ni
, 
ts
);

1051  
n_pkts
;

1052 
	}
}

1055 
	$ci_t˝_tx_¥equeue
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1056 
ci_ù_pkt_fmt
* 
fûl_li°
)

1058 
ci_ù_pkt_fmt
* 
√xt
;

1059 
ci_ù_pkt_fmt
* 
pkt
;

1060 
n_pkts
 = 0;

1063 
pkt
 = 
fûl_li°
;

1065 ++
n_pkts
;

1066 if–! (
√xt
 = 
	`CI_USER_PTR_GET
(
pkt
->
pf
.
t˝_tx
.next)) ) ;

1067 
pkt
->
√xt
 = 
	`OO_PKT_P
(next);

1068 
pkt
 = 
√xt
;

1071 
	`oo_©omic_add
(&
ts
->
£nd_¥equeue_ö
, 
n_pkts
);

1072 ++
ts
->
°©s
.
tx_de„r
;

1076 
	`OO_PP_INIT
(
ni
, 
pkt
->
√xt
, 
ts
->
£nd_¥equeue
);

1077  
	`ci_ˇs32_Áû
(&
ts
->
£nd_¥equeue
,

1078 
	`OO_PP_ID
(
pkt
->
√xt
), 
	`OO_PKT_ID
(
fûl_li°
)) );

1079 
	}
}

1082 
	$ci_t˝_£ndmsg_íqueue_¥equeue
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

1084 
ci_ù_pkt_queue
* 
£ndq
 = &
ts
->
£nd
;

1085 
ci_ù_pkt_fmt
* 
pkt
;

1086 
oo_pkt_p
 
èû_pkt_id
, 
£nd_li°
, 
id
;

1087 
byãs
, 
n_pkts
 = 0;

1088 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1089 
	`ci_as£π
(
ts
->
s
.
tx_î∫o
 == 0);

1093 
	`OO_PP_INIT
(
ni
, 
id
, 
ts
->
£nd_¥equeue
);

1094 if–
	`OO_PP_IS_NULL
(
id
) ) ;

1095 }  
	`ci_ˇs32_Áû
(&
ts
->
£nd_¥equeue
, 
	`OO_PP_ID
(
id
), 
OO_PP_ID_NULL
) );

1098 
£nd_li°
 = 
OO_PP_NULL
;

1100 
pkt
 = 
	`PKT_CHK
(
ni
, 
id
);

1101 
id
 = 
pkt
->
√xt
;

1102 
pkt
->
√xt
 = 
£nd_li°
;

1103 
£nd_li°
 = 
	`OO_PKT_P
(
pkt
);

1104 ++
n_pkts
;

1106  
	`OO_PP_NOT_NULL
(
id
) );

1110 
byãs
 = 
pkt
->
pf
.
t˝_tx
.
íd_£q
;

1111 
	`ci_t˝_£ndmsg_¥ï_pkt
(
ni
, 
ts
, 
pkt
, 
	`t˝_íq_nxt
(ts));

1112 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_PSH
 )

1113 
	`TX_PKT_TCP
(
pkt
)->
t˝_Êags
 |
CI_TCP_FLAG_PSH
;

1114 
	`t˝_íq_nxt
(
ts
Ë+
byãs
;

1116 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) ) ;

1117 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

1121 
ni
->
°©e
->
n_async_pkts
 -
n_pkts
;

1122 
£ndq
->
num
 +
n_pkts
;

1126 
èû_pkt_id
 = 
	`OO_PKT_P
(
pkt
);

1127 if–
	`OO_PP_IS_NULL
(
£ndq
->
hód
) ) {

1128 
£ndq
->
hód
 = 
£nd_li°
;

1129 
pkt
 = 
	`PKT_CHK
(
ni
, 
£nd_li°
);

1132 
pkt
 = 
	`PKT_CHK
(
ni
, 
£ndq
->
èû
);

1133 
pkt
->
√xt
 = 
£nd_li°
;

1135 
£ndq
->
èû
 = 
èû_pkt_id
;

1140  
	`OO_PP_NOT_NULL
(
pkt
->
√xt
) ) {

1141 
ci_ù_pkt_fmt
* 
√xt
 = 
	`PKT_CHK
(
ni
, 
pkt
->next);

1142 if–
	`oo_offbuf_À·
(&
pkt
->
buf
Ë>
	`PKT_TCP_TX_SEQ_SPACE
(
√xt
) ) {

1143 
	`LOG_TT
(
	`ci_log
("%s: coalesce %d (bytes=%d) into %d (space=%d)",

1144 
__FUNCTION__
, 
	`OO_PKT_FMT
(
√xt
), 
	`PKT_TCP_TX_SEQ_SPACE
(next),

1145 
	`OO_PKT_FMT
(
pkt
), 
	`oo_offbuf_À·
(&pkt->
buf
)));

1146 
	`ci_t˝_tx_cﬂÀs˚
(
ni
, 
ts
, 
£ndq
, 
pkt
, 
CI_TRUE
);

1147 if–! 
	`OO_PP_EQ
(
pkt
->
√xt
, 
	`OO_PKT_P
(next)) ) ;

1148 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) ) ;

1151 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

1154 
pkt
 = 
√xt
;

1156 
	}
}

1159 
	$ci_t˝_£ndmsg_‰ì_pkt_li°
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1160 
oo_pkt_p
 
pkt_li°
, 
√tif_locked
,

1161 
check_a›
)

1166 
ci_ù_pkt_fmt
* 
pkt
;

1167 
n_pkts
 = 0;

1169 
	`ci_as£π
(
	`OO_PP_NOT_NULL
(
pkt_li°
));

1170 
	`ci_as£π
–! 
√tif_locked
 || 
	`ci_√tif_is_locked
(
ni
));

1172 if–! 
√tif_locked
 && ! 
	`ci_√tif_åylock
(
ni
) ) {

1174 
pkt
 = 
	`PKT
(
ni
, 
pkt_li°
);

1175 
pkt_li°
 = 
pkt
->
√xt
;

1177 
	`ci_as£π_equÆ
(
pkt
->
ªfcou¡
, 1);

1178 
	`ci_as£π
(!(
pkt
->
Êags
 & 
CI_PKT_FLAG_RX
));

1179 
pkt
->
ªfcou¡
 = 0;

1180 
	`__ci_√tif_pkt_˛ón
(
pkt
);

1181 
	`ci_√tif_pkt_‰ì_n⁄b_li°
(
ni
, 
	`OO_PKT_P
(
pkt
),Ökt);

1182 ++
n_pkts
;

1183 }  
	`OO_PP_NOT_NULL
(
pkt_li°
) );

1187 
pkt
 = 
	`PKT_CHK
(
ni
, 
pkt_li°
);

1188 
pkt_li°
 = 
pkt
->
√xt
;

1189 
	`ci_√tif_pkt_ªÀa£_1ªf
(
ni
, 
pkt
);

1190 ++
n_pkts
;

1191 }  
	`OO_PP_NOT_NULL
(
pkt_li°
) );

1192 
ni
->
°©e
->
n_async_pkts
 -
n_pkts
;

1193 if–! 
√tif_locked
 ) 
	`ci_√tif_u∆ock
(
ni
);

1196  
n_pkts
;

1197 
	}
}

1203 
	$ci_√tif_pkt_c⁄vît_±r_li°
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
li°
)

1205 
ci_ù_pkt_fmt
* 
√xt
;

1206  
	`CI_USER_PTR_GET
(
li°
->
pf
.
t˝_tx
.
√xt
) ) {

1207 
√xt
 = (
ci_ù_pkt_fmt
*Ë
	`CI_USER_PTR_GET
(
li°
->
pf
.
t˝_tx
.next);

1208 
li°
->
√xt
 = 
	`OO_PKT_P
(next);

1209 
li°
 = 
√xt
;

1211 
li°
->
√xt
 = 
OO_PP_NULL
;

1212 
	}
}

1215 
	$ci_t˝_tx_‰ì_¥equeue
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1216 
√tif_locked
)

1218 
n_pkts
;

1219 
oo_pkt_p
 
id
;

1221 
	`ci_as£π
–! 
√tif_locked
 || 
	`ci_√tif_is_locked
(
ni
));

1226 
	`OO_PP_INIT
(
ni
, 
id
, 
ts
->
£nd_¥equeue
);

1227 if–
	`OO_PP_IS_NULL
(
id
) ) ;

1228 }  
	`ci_ˇs32_Áû
(&
ts
->
£nd_¥equeue
, 
	`OO_PP_ID
(
id
), 
OO_PP_ID_NULL
) );

1230 
n_pkts
 = 
	`ci_t˝_£ndmsg_‰ì_pkt_li°
(
ni
, 
ts
, 
id
, 
√tif_locked
, 1);

1232 
	`oo_©omic_add
(&
ts
->
£nd_¥equeue_ö
, -
n_pkts
);

1233 
	}
}

1236 
	$ci_t˝_£ndmsg_íqueue_¥equeue_de„ºed
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

1238 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1240 if–
ts
->
s
.
tx_î∫o
 ) {

1244 
	`LOG_TC
(
	`log
("%s: "
NTS_FMT
 "tx_î∫o=%d", 
__FUNCTION__
,

1245 
	`NTS_PRI_ARGS
(
ni
, 
ts
),Ås->
s
.
tx_î∫o
));

1246 
	`ci_t˝_tx_‰ì_¥equeue
(
ni
, 
ts
, 1 );

1250 
	`ci_t˝_£ndmsg_íqueue_¥equeue
(
ni
, 
ts
);

1252 if–
	`ci_t˝_£ndq_nŸ_em±y
(
ts
) ) {

1256 
	`ci_t˝_tx_adv™˚
(
ts
, 
ni
);

1258 
	}
}

1261 
ci_ölöe
 
	$ci_t˝_£ndmsg_‰ì_unu£d_pkts
(
ci_√tif
* 
ni
,

1262 
t˝_£nd_öfo
* 
söf
)

1264 
	`oo_pkt_fûÀr_‰ì_unu£d_pkts
(
ni
, &
söf
->
°ack_locked
, &söf->
pf
);

1265 
	}
}

1268 
	$ci_t˝_£ndmsg_nŸsynchr⁄i£d
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1269 
Êags
, 
t˝_£nd_öfo
* 
söf
)

1271 
söf
->
rc
 = 1;

1275 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSED
 )

1276 
söf
->
rc
 = 0;

1280 #ifde‡
__sun__


1282 
söf
->
rc
 = -
ENOTCONN
;

1284 if–
Êags
 & 
MSG_DONTWAIT
 )

1285 
söf
->
rc
 = -
EAGAIN
;

1288 if–
söf
->
rc
 <= 0 )

1291 
	#CONNECT_IN_PROGRESS
 ((
ts
->
s
.
b
.
°©e
 =
CI_TCP_SYN_SENT
) && \

1292 
ts
->
s
.
tx_î∫o
 =0)

	)

1294 if–!
söf
->
°ack_locked
 ) {

1295 if–(
söf
->
rc
 = 
	`ci_√tif_lock
(
ni
)) )

1297 
söf
->
°ack_locked
 = 1;

1299 
	`CI_TCP_SLEEP_WHILE
(
ni
, 
ts
, 
CI_SB_FLAG_WAKE_RX
,Ås->
s
.
so
.
rcvtimeo_m£c
,

1300 
CONNECT_IN_PROGRESS
, &
söf
->
rc
);

1301 if–
söf
->
rc
 !0 || 
ts
->
s
.
tx_î∫o
 != 0 )

1305 
	}
}

1308 
	$ci_t˝_£ndmsg_h™dÀ_rc_‹_tx_î∫o
(
ci_√tif
* 
ni
,

1309 
ci_t˝_°©e
* 
ts
,

1310 
Êags
,

1311 
t˝_£nd_öfo
* 
söf
)

1313 
söf
->
£t_î∫o
 = 0;

1315 if–
söf
->
rc
 ) {

1316 
söf
->
rc
 = -sinf->rc;

1317 
söf
->
£t_î∫o
 = 1;

1320 if–
söf
->
tŸÆ_£¡
 ) {

1321 
söf
->
rc
 = söf->
tŸÆ_£¡
;

1322 
söf
->
£t_î∫o
 = 0;

1325 #i‡!
	`deföed
(
__sun__
)

1326 if–
ts
->
s
.
so_îr‹
 ) {

1327 
ci_öt32
 
rc1
 = 
	`ci_gë_so_îr‹
(&
ts
->
s
);

1328 if–
rc1
 != 0 ) {

1329 
söf
->
rc
 = 
rc1
;

1330 
söf
->
£t_î∫o
 = 1;

1334 if–
söf
->
rc
 =0 && 
ts
->
s
.
tx_î∫o
 ) {

1335 
	`LOG_TC
(
	`log
(
LNT_FMT
 "tx_errno=%d flags=%xÅotal_sent=%d",

1336 
	`LNT_PRI_ARGS
(
ni
, 
ts
),Ås->
s
.
tx_î∫o
, 
Êags
, 
söf
->
tŸÆ_£¡
));

1337 
söf
->
rc
 = 
ts
->
s
.
tx_î∫o
;

1338 
söf
->
£t_î∫o
 = 1;

1341 
	`ci_t˝_£ndmsg_‰ì_unu£d_pkts
(
ni
, 
söf
);

1342 if–
söf
->
°ack_locked
 ) {

1343 
	`ci_√tif_u∆ock
(
ni
);

1344 
söf
->
°ack_locked
 = 0;

1346 
	}
}

1349 
	$ci_t˝_£ndmsg_h™dÀ_zîo_‹_tx_î∫o
(
ci_√tif
* 
ni
,

1350 
ci_t˝_°©e
* 
ts
,

1351 
Êags
,

1352 
t˝_£nd_öfo
* 
söf
)

1354 
söf
->
rc
 = 0;

1355  
	`ci_t˝_£ndmsg_h™dÀ_rc_‹_tx_î∫o
(
ni
, 
ts
, 
Êags
, 
söf
);

1356 
	}
}

1359 
	$ci_t˝_£ndmsg_‰ì_fûl_li°
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1360 
Êags
,

1361 
t˝_£nd_öfo
* 
söf
)

1363 if–
söf
->
fûl_li°
 ) {

1364 
	`ci_√tif_pkt_c⁄vît_±r_li°
(
ni
, 
söf
->
fûl_li°
);

1365 
	`ci_t˝_£ndmsg_‰ì_pkt_li°
(
ni
, 
ts
, 
	`OO_PKT_P
(
söf
->
fûl_li°
),

1366 
söf
->
°ack_locked
, 0);

1368 
	}
}

1371 
	$ci_t˝_£ndmsg_h™dÀ_tx_î∫o
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1372 
Êags
,

1373 
t˝_£nd_öfo
* 
söf
)

1375 
	`ci_t˝_£ndmsg_‰ì_fûl_li°
(
ni
, 
ts
, 
Êags
, 
söf
);

1376 
	`ci_t˝_£ndmsg_‰ì_unu£d_pkts
(
ni
, 
söf
);

1377 
	`ci_t˝_tx_‰ì_¥equeue
(
ni
, 
ts
, 
söf
->
°ack_locked
);

1378  
	`ci_t˝_£ndmsg_h™dÀ_zîo_‹_tx_î∫o
(
ni
, 
ts
, 
Êags
, 
söf
);

1379 
	}
}

1382 
	$ci_t˝_£ndmsg_h™dÀ_£¡_‹_rc
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1383 
Êags
,

1384 
t˝_£nd_öfo
* 
söf
)

1386 
	`ci_t˝_£ndmsg_‰ì_fûl_li°
(
ni
, 
ts
, 
Êags
, 
söf
);

1387 
	`ci_t˝_£ndmsg_‰ì_unu£d_pkts
(
ni
, 
söf
);

1388 if–
söf
->
°ack_locked
 ) {

1389 
	`ci_√tif_u∆ock
(
ni
);

1390 
söf
->
°ack_locked
 = 0;

1392 if–
söf
->
tŸÆ_£¡
 ) {

1393 
söf
->
rc
 = söf->
tŸÆ_£¡
;

1394 
söf
->
£t_î∫o
 = 0;

1397 
söf
->
rc
 = -sinf->rc;

1398 
söf
->
£t_î∫o
 = 1;

1400 
	}
}

1403 
	$ci_t˝_£ndmsg_no_pkt_buf
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1404 
Êags
, 
t˝_£nd_öfo
* 
söf
)

1406 
ci_ù_pkt_fmt
* 
pkt
;

1408 
pkt
 = 
	`ci_√tif_pkt_Æloc_n⁄b
(
ni
);

1409 if–
pkt
 )

1410 
	`oo_pkt_fûÀr_add_pkt
(&
söf
->
pf
, 
pkt
);

1413 }  --
söf
->
n_√eded
 > 0 );

1415 if–
söf
->
n_√eded
 == 0 )

1418 
	`CITP_STATS_NETIF_INC
(
ni
, 
t˝_£nd_n⁄b_poﬁ_em±y
);

1419 if–!
	`si_åylock
(
ni
, 
söf
) ) {

1420 if–
söf
->
n_fûÀd
 )

1422 if–(
söf
->
rc
 = 
	`ci_√tif_lock
(
ni
)) != 0 ) {

1423 
	`ci_t˝_£ndmsg_h™dÀ_£¡_‹_rc
(
ni
, 
ts
, 
Êags
, 
söf
);

1426 
söf
->
°ack_locked
 = 1;

1427 
	`CITP_STATS_NETIF_INC
(
ni
, 
t˝_£nd_ni_lock_c⁄ãnds
);

1429 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1431 if–
	`ci_√tif_may_pﬁl
(
ni
Ë&& 
	`ci_√tif_√ed_pﬁl
(ni) &&

1432 ! 
	`ci_√tif_pkt_tx_may_Æloc
(
ni
) )

1436 
	`ci_√tif_pﬁl
(
ni
);

1439 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1441 
pkt
 = 
	`ci_√tif_pkt_tx_t˝_Æloc
(
ni
, 
ts
);

1442 if–
pkt
 ) {

1446 
pkt
->
Êags
 = 
CI_PKT_FLAG_NONB_POOL
;

1447 ++
ni
->
°©e
->
n_async_pkts
;

1448 
	`oo_pkt_fûÀr_add_pkt
(&
söf
->
pf
, 
pkt
);

1450 if–
söf
->
n_fûÀd
 ) {

1456 }  --
söf
->
n_√eded
 > 0 );

1458 if–
söf
->
n_√eded
 == 0 )

1461 
	`ci_as£π
(
söf
->
fûl_li°
 == 0);

1464 if–(
Êags
 & 
MSG_DONTWAIT
) &&

1465 (
	`NI_OPTS
(
ni
).
t˝_n⁄block_no_pkts_mode
 == 1) ) {

1469 
söf
->
rc
 = -
ENOBUFS
;

1470 
	`ci_t˝_£ndmsg_h™dÀ_£¡_‹_rc
(
ni
, 
ts
, 
Êags
, 
söf
);

1474 
söf
->
rc
 = 
	`ci_√tif_pkt_waô
(
ni
, &
ts
->
s
, söf->
°ack_locked
 ?

1475 
CI_SLEEP_NETIF_LOCKED
 : 0);

1476 
söf
->
°ack_locked
 = 0;

1477 if–
	`ci_√tif_pkt_waô_was_öãºu±ed
(
söf
->
rc
) ) {

1478 
	`ci_t˝_£ndmsg_h™dÀ_£¡_‹_rc
(
ni
, 
ts
, 
Êags
, 
söf
);

1482 
pkt
 = 
	`ci_√tif_pkt_Æloc_n⁄b
(
ni
);

1483 if–
pkt
 )

1484 
	`oo_pkt_fûÀr_add_pkt
(&
söf
->
pf
, 
pkt
);

1487 }  --
söf
->
n_√eded
 > 0 );

1489 if–
ts
->
s
.
tx_î∫o
 ) {

1490 
	`ci_t˝_£ndmsg_h™dÀ_tx_î∫o
(
ni
, 
ts
, 
Êags
, 
söf
);

1494 if–
söf
->
n_√eded
 == 0 )

1498 
	`ci_as£π
(
söf
->
°ack_locked
 == 0);

1499 if–!
	`si_åylock
(
ni
, 
söf
) ) {

1500 if–(
söf
->
rc
 = 
	`ci_√tif_lock
(
ni
)) != 0 ) {

1501 
	`ci_t˝_£ndmsg_h™dÀ_£¡_‹_rc
(
ni
, 
ts
, 
Êags
, 
söf
);

1504 
söf
->
°ack_locked
 = 1;

1505 
	`CITP_STATS_NETIF_INC
(
ni
, 
t˝_£nd_ni_lock_c⁄ãnds
);

1510 
	`ci_as£π
(0);

1512 
	}
}

1515 
ci_ölöe
 
	$ci_t˝_£ndmsg_•ö
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1516 
Êags
, 
t˝_£nd_öfo
* 
söf
)

1518 
ci_uöt64
 
now_‰c
;

1519 
ci_uöt64
 
scheduÀ_‰c
;

1520 
ci_uöt64
 
max_•ö
 = 
ts
->
s
.
b
.
•ö_cy˛es
;

1521 
•ö_limô_by_so
 = 0;

1522 #i‚de‡
__KERNEL__


1523 
côp_sig«l_öfo
* 
si
 = 
	`côp_sig«l_gë_•ecific_öôed
();

1526 
	`ci_‰c64
(&
now_‰c
);

1527 
scheduÀ_‰c
 = 
now_‰c
;

1529 if–
ts
->
s
.
so
.
¢dtimeo_m£c
 ) {

1530 
ci_uöt64
 
max_so_•ö
 = (ci_uöt64)
ts
->
s
.
so
.
¢dtimeo_m£c
 *

1531 
	`IPTIMER_STATE
(
ni
)->
khz
;

1532 if–
max_so_•ö
 <
max_•ö
 ) {

1533 
max_•ö
 = 
max_so_•ö
;

1534 
•ö_limô_by_so
 = 1;

1539 if–
	`ci_√tif_may_pﬁl
(
ni
) ) {

1540 if–
	`ci_√tif_√ed_pﬁl_•önög
(
ni
, 
now_‰c
Ë&& 
	`si_åylock
“i, 
söf
) ) {

1541 
	`ci_√tif_pﬁl_n
(
ni
, 
	`NI_OPTS
“i).
evs_≥r_pﬁl
);

1542 
söf
->
£ndq_¸edô
 = 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
);

1543 if–
söf
->
£ndq_¸edô
 > 0 ) {

1544 
ni
->
°©e
->
is_•ö√r
 = 0;

1547 if–
ts
->
s
.
tx_î∫o
 ) {

1548 
ni
->
°©e
->
is_•ö√r
 = 0;

1549 
	`ci_t˝_£ndmsg_h™dÀ_tx_î∫o
(
ni
, 
ts
, 
Êags
, 
söf
);

1553 if–! 
ni
->
°©e
->
is_•ö√r
 )

1554 
ni
->
°©e
->
is_•ö√r
 = 1;

1556 if–
söf
->
°ack_locked
 ) {

1557 
	`ci_√tif_u∆ock
(
ni
);

1558 
söf
->
°ack_locked
 = 0;

1560 
	`ci_‰c64
(&
now_‰c
);

1561 
söf
->
rc
 = 
	`OO_SPINLOOP_PAUSE_CHECK_SIGNALS
(
ni
, 
now_‰c
, &
scheduÀ_‰c
,

1562 
ts
->
s
.
so
.
¢dtimeo_m£c
,

1563 
NULL
, 
si
);

1564 if–
söf
->
rc
 != 0 ) {

1565 
ni
->
°©e
->
is_•ö√r
 = 0;

1566 
	`ci_t˝_£ndmsg_h™dÀ_£¡_‹_rc
(
ni
, 
ts
, 
Êags
, 
söf
);

1569 #i‡
CI_CFG_SPIN_STATS


1570 
ni
->
°©e
->
°©s
.
•ö_t˝_£nd
++;

1572 }  
now_‰c
 - 
söf
->
°¨t_‰c
 < 
max_•ö
 );

1573 
ni
->
°©e
->
is_•ö√r
 = 0;

1575 if–
•ö_limô_by_so
 && 
now_‰c
 - 
söf
->
°¨t_‰c
 >
max_•ö
 ) {

1576 
söf
->
rc
 = -
EAGAIN
;

1577 
	`ci_t˝_£ndmsg_h™dÀ_£¡_‹_rc
(
ni
, 
ts
, 
Êags
, 
söf
);

1581 if–
söf
->
timeout
 ) {

1582 
ci_uöt32
 
time_•ö
 = 
	`NI_OPTS
(
ni
).
•ö_u£c
 >> 10;

1583 if–
time_•ö
 >
söf
->
timeout
 ) {

1584 
söf
->
rc
 = -
EAGAIN
;

1585 
	`ci_t˝_£ndmsg_h™dÀ_£¡_‹_rc
(
ni
, 
ts
, 
Êags
, 
söf
);

1588 
söf
->
timeout
 -
time_•ö
;

1591 
	}
}

1595 
	$ci_t˝_£ndmsg_block
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1596 
Êags
, 
t˝_£nd_öfo
* 
söf
)

1598 
ci_uöt64
 
¶ìp_£q
;

1600 
	`CI_IP_SOCK_STATS_INC_TXSTUCK
–
ts
 );

1603 if–
ts
->
s
.
tx_î∫o
 ) {

1604 
	`ci_t˝_£ndmsg_h™dÀ_tx_î∫o
(
ni
, 
ts
, 
Êags
, 
söf
);

1611 
¶ìp_£q
 = 
ts
->
s
.
b
.¶ìp_£q.
Æl
;

1612 
	`ci_rmb
();

1613 
söf
->
£ndq_¸edô
 = 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
);

1614 if–
söf
->
£ndq_¸edô
 > 0 )

1617 
	`CI_IP_SOCK_STATS_INC_TXSLEEP
–
ts
 );

1619 
söf
->
rc
 =

1620 
	`ci_sock_¶ìp
(
ni
, &
ts
->
s
.
b
, 
CI_SB_FLAG_WAKE_TX
,

1621 
söf
->
°ack_locked
 ? 
CI_SLEEP_NETIF_LOCKED
 : 0,

1622 
¶ìp_£q
, &
söf
->
timeout
);

1624 
söf
->
°ack_locked
 = 0;

1626 if–
söf
->
rc
 < 0 ) {

1627 
	`ci_t˝_£ndmsg_h™dÀ_£¡_‹_rc
(
ni
, 
ts
, 
Êags
, 
söf
);

1631 
	}
}

1634 
ci_t˝_£ndmsg_¶ow∑th
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1635 c⁄° 
ci_iovec
* 
iov
, 
iovÀn
,

1636 
Êags
, 
t˝_£nd_öfo
* 
söf


1637 
	$CI_KERNEL_ARG
(
ci_addr_•c_t
 
addr_•c
))

1647 
rc
;

1648 
íq_nxt_bef‹e
;

1650 if–!
söf
->
tŸÆ_un£¡
 ) {

1651 
söf
->
rc
 = 0;

1655 
	`ci_as£π
(
Êags
 & 
MSG_OOB
);

1657 
rc
 = 
	`ci_√tif_lock
(
ni
);

1658 if–
rc
 != 0 ) {

1659 
söf
->
rc
 =Ñc;

1664 if–
	`ci_√tif_may_pﬁl
(
ni
Ë&& 
	`ci_√tif_√ed_pﬁl
(ni) )

1665 
	`ci_√tif_pﬁl
(
ni
);

1672 
	`t˝_¢d_up
(
ts
Ë
	`t˝_íq_nxt
—sË+ 
söf
->
tŸÆ_un£¡
;

1673 
íq_nxt_bef‹e
 = 
	`t˝_íq_nxt
(
ts
);

1675 
ts
->
t˝Êags
 |
CI_TCPT_FLAG_NO_TX_ADVANCE
;

1677 
	`ci_√tif_u∆ock
(
ni
);

1679 
söf
->
rc
 = 
	`ci_t˝_£ndmsg
(
ni
, 
ts
, 
iov
, 
iovÀn
, (
Êags
 &~ 
MSG_OOB
)

1680 
	`CI_KERNEL_ARG
(
addr_•c
));

1682 
rc
 = 
	`ci_√tif_lock
(
ni
);

1683 if–
rc
 != 0 ) {

1688 
söf
->
rc
 =Ñc;

1697 if–
söf
->
rc
 > 0 ) {

1699 
	`t˝_¢d_up
(
ts
Ë
íq_nxt_bef‹e
 + 
söf
->
rc
;

1700 
ts
->
t˝Êags
 &~
CI_TCPT_FLAG_NO_TX_ADVANCE
;

1701 
	`ci_t˝_tx_adv™˚
(
ts
, 
ni
);

1704 
	`ci_√tif_u∆ock
(
ni
);

1706 
	}
}

1709 
	$ˇn_do_msg_w¨m
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1710 
t˝_£nd_öfo
* 
söf
, 
tŸÆ_un£¡
,

1711 
Êags
)

1723  
	`si_åylock
(
ni
, 
söf
) &&

1724 
	`ci_ù_queue_is_em±y
(&
ts
->
£nd
) &&

1725 
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
) &&

1726 ! (
Êags
 & 
MSG_MORE
) &&

1727 
tŸÆ_un£¡
 < 
	`t˝_eff_mss
(
ts
) &&

1728 
tŸÆ_un£¡
 > 0 &&

1729 ! (
ts
->
s
.
s_aÊags
 & 
CI_SOCK_AFLAG_CORK
) &&

1730 ! 
ts
->
s
.
tx_î∫o
 &&

1731 
	`SEQ_LE
(
	`t˝_íq_nxt
(
ts
Ë+ 
tŸÆ_un£¡
,Ås->
¢d_max
) &&

1732 #i‡
CI_CFG_PORT_STRIPING


1733 ! (
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_STRIPE
) &&

1735 ! (
ts
->
s
.
pkt
.
Êags
 & 
CI_IP_CACHE_IS_LOCALROUTE
);

1736 
	}
}

1739 
__©åibuã__
 ((
__noölöe__
)) 

1740 
	$uƒﬁl_msg_w¨m
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
, 
t˝_£nd_öfo
* 
söf
,

1741 
is_zc_£nd
)

1743 
ci_ù_pkt_fmt
* 
pkt
;

1744 ++
ts
->
°©s
.
tx_msg_w¨m
;

1745 
ni
->
Êags
 &~
CI_NETIF_FLAG_MSG_WARM
;

1746 
	`ci_ù_queue_öô
(&
ts
->
£nd
);

1747 
ts
->
£nd_ö
 = 0;

1748 
	`t˝_íq_nxt
(
ts
Ë-
söf
->
fûl_li°_byãs
;

1749 #i‡
CI_CFG_BURST_CONTROL


1750 
ts
->
bur°_wödow
 = 
söf
->
ﬁd_bur°_wödow
;

1752 
	`t˝_¢d_nxt
(
ts
Ë
söf
->
ﬁd_t˝_¢d_nxt
;

1753 --
ts
->
°©s
.
tx_°›_≠p
;

1754 
	`CI_TCP_STATS_DEC_OUT_SEGS
(
ni
);

1755 if–! 
is_zc_£nd
 ) {

1756 
pkt
 = 
	`PKT_CHK
(
ni
, 
ts
->
£nd
.
èû
);

1757 
	`ci_√tif_pkt_ªÀa£_1ªf
(
ni
, 
pkt
);

1763 
ni
->
°©e
->
n_async_pkts
++;

1765 
	}
}

1770 
	$ci_t˝_£nd_Æloc_pkts
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1771 
t˝_£nd_öfo
* 
söf
, 
gŸ
)

1773 
ci_ù_pkt_fmt
* 
pkt
;

1774 
rc
;

1776 
	`ci_as£π_gt
(
söf
->
tŸÆ_un£¡
, 0);

1777 
	`ci_as£π_gt
(
söf
->
£ndq_¸edô
, 0);

1779 
söf
->
n_√eded
 = 
	`ci_t˝_tx_n_pkts_√eded
(
ts
->
eff_mss
, söf->
tŸÆ_un£¡
,

1780 
CI_CFG_TCP_TX_BATCH
,

1781 
söf
->
£ndq_¸edô
);

1782 
rc
 = 
söf
->
n_√eded
;

1783 
söf
->
fûl_li°
 = 0;

1784 
söf
->
fûl_li°_byãs
 = 0;

1785 
söf
->
n_fûÀd
 = 0;

1787 
söf
->
n_√eded
 -
gŸ
;

1789  
söf
->
n_√eded
 > 0 ) {

1790 if–
	`si_åylock
(
ni
, 
söf
) ) {

1791 if–(
pkt
 = 
	`ci_√tif_pkt_tx_t˝_Æloc
(
ni
, 
ts
)) ) {

1792 ++
ni
->
°©e
->
n_async_pkts
;

1793 
	`oo_pkt_fûÀr_add_pkt
(&
söf
->
pf
, 
pkt
);

1796  
rc
;;

1798  
rc
;

1799 
söf
->
n_√eded
--;

1802  
rc
;

1803 
	}
}

1806 
ci_t˝_£nd_fûl_pkts
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1807 
t˝_£nd_öfo
* 
söf
, 
ci_iovec_±r
* 
piov
,

1808 
n_pkts


1809 
	$CI_KERNEL_ARG
(
ci_addr_•c_t
 
addr_•c
))

1811 
	`ci_as£π
(! 
	`ci_iovec_±r_is_em±y_¥›î
(
piov
));

1812 
	`ci_as£π_equÆ
(
söf
->
n_√eded
, 0);

1815 
söf
->
fûl_li°_byãs
 +=

1816 
	`ci_t˝_£ndmsg_fûl_pkt
(
ni
, 
ts
, 
söf
, 
piov
,Ås->
outgoög_hdrs_Àn
,

1817 
ts
->
eff_mss
 
	`CI_KERNEL_ARG
(
addr_•c
));

1818 ++
söf
->
n_fûÀd
;

1820 
	`CI_USER_PTR_SET
(
söf
->
pf
.
pkt
->pf.
t˝_tx
.
√xt
, söf->
fûl_li°
);

1821 
söf
->
fûl_li°
 = söf->
pf
.
pkt
;

1823  --
n_pkts
 > 0 );

1824 
	}
}

1828 
ci_t˝_£ndmsg
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1829 c⁄° 
ci_iovec
* 
iov
, 
iovÀn
,

1830 
Êags


1831 
	$CI_KERNEL_ARG
(
ci_addr_•c_t
 
addr_•c
))

1833 
ci_ù_pkt_queue
* 
£ndq
 = &
ts
->
£nd
;

1834 
ci_ù_pkt_fmt
* 
pkt
;

1835 
ci_iovec_±r
 
piov
;

1836 
m
;

1837 
t˝_£nd_öfo
 
söf
;

1839 
	`ci_as£π
(
iov
 !
NULL
);

1840 
	`ci_as£π_gt
(
iovÀn
, 0);

1841 
	`ci_as£π
(
ts
);

1842 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 !
CI_TCP_LISTEN
);

1844 if–
ts
->
¢d_dñeg©ed
 ) {

1845 
rc
;

1848 
	`CI_SET_ERROR
(
rc
, 
EBUSY
);

1849  
rc
;

1852 
söf
.
rc
 = 0;

1853 
söf
.
°ack_locked
 = 0;

1854 
söf
.
tŸÆ_un£¡
 = 0;

1855 
söf
.
tŸÆ_£¡
 = 0;

1856 
söf
.
pf
.
Æloc_pkt
 = 
NULL
;

1857 
söf
.
timeout
 = 
ts
->
s
.
so
.
¢dtimeo_m£c
;

1858 
söf
.
£ndq_¸edô
 = 0;

1859 #i‚de‡
__KERNEL__


1860 
söf
.
t˝_£nd_•ö
 =

1861 
	`oo_≥r_thªad_gë
()->
•ö°©e
 & (1 << 
ONLOAD_SPIN_TCP_SEND
);

1862 if–
söf
.
t˝_£nd_•ö
 )

1863 
	`ci_‰c64
(&
söf
.
°¨t_‰c
);

1865 
söf
.
t˝_£nd_•ö
 = 0;

1869 if(
	`CI_UNLIKELY
–(~
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_SYNCHRONISED
) ))

1870 
nŸ_synchr⁄i£d
;

1872 
is_sync
:

1873  
m
 = 0; m < ()
iovÀn
; ++m ) {

1874 
söf
.
tŸÆ_un£¡
 +
	`CI_IOVEC_LEN
(&
iov
[
m
]);

1875 if(
	`CI_UNLIKELY
–
	`CI_IOVEC_BASE
(&
iov
[
m
]Ë=
NULL
 &&

1876 
	`CI_IOVEC_LEN
(&
iov
[
m
]) > 0 )) {

1877 
söf
.
rc
 = -
EFAULT
;

1878 
	`ci_t˝_£ndmsg_h™dÀ_rc_‹_tx_î∫o
(
ni
, 
ts
, 
Êags
, &
söf
);

1879 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

1880  
söf
.
rc
;

1884 if(
	`CI_UNLIKELY
–! 
söf
.
tŸÆ_un£¡
 ||

1885 (
Êags
 & (
MSG_OOB
 | 
ONLOAD_MSG_WARM
)) ))

1886 
¶ow_∑th
;

1888 
Á°_∑th
:

1889 
	`ci_iovec_±r_öô_nz
(&
piov
, 
iov
, 
iovÀn
);

1891 
	`ci_as£π_À
(
	`t˝_eff_mss
(
ts
),

1892 
CI_MAX_ETH_DATA_LEN
 - (
ci_t˝_hdr
Ë- (
ci_ù4_hdr
));

1894 if–
	`si_åylock
(
ni
, &
söf
Ë&& 
	`ci_ù_queue_nŸ_em±y
(
£ndq
) ) {

1895 
	`ci_as£π
(! (
Êags
 & 
ONLOAD_MSG_WARM
));

1900 
	`ci_t˝_tx_fûl_£ndq_èû
(
ni
, 
ts
, &
piov
, &
söf
 
	`CI_KERNEL_ARG
(
addr_•c
));

1902 if–
söf
.
tŸÆ_un£¡
 > 0 )

1903 
n⁄_Á°
;

1907 
pkt
 = 
	`PKT_CHK
(
ni
, 
£ndq
->
èû
);

1908 if–(
Êags
 & 
MSG_MORE
Ë|| (
ts
->
s
.
s_aÊags
 & 
CI_SOCK_AFLAG_CORK
) )

1909 
pkt
->
Êags
 |
CI_PKT_FLAG_TX_MORE
;

1911 
pkt
->
Êags
 &~
CI_PKT_FLAG_TX_MORE
;

1912 
	`TX_PKT_TCP
(
pkt
)->
t˝_Êags
 |
CI_TCP_FLAG_PSH
;

1924 #ifde‡
MSG_SENDPAGE_NOTLAST


1925 if–~
Êags
 & 
MSG_SENDPAGE_NOTLAST
 ||

1926 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
) <= 0 )

1928 
	`ci_t˝_tx_adv™˚_«gÀ
(
ni
, 
ts
);

1930 if–
söf
.
°ack_locked
 ) 
	`ci_√tif_u∆ock
(
ni
);

1931  
söf
.
tŸÆ_£¡
;

1934 
n⁄_Á°
:

1935 
	`ci_as£π
(
söf
.
tŸÆ_un£¡
 > 0);

1936 
	`ci_as£π
(! 
	`ci_iovec_±r_is_em±y_¥›î
(&
piov
));

1939 
söf
.
£ndq_¸edô
 = 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
);

1946 if–
söf
.
£ndq_¸edô
 <0 && 
	`NI_OPTS
(
ni
).
t˝_¢dbuf_mode
 &&

1947 
söf
.
tŸÆ_£¡
 &&

1948 –
ts
->
c⁄g°©e
 =
CI_TCP_CONG_OPEN
 ||

1949 
ts
->
c⁄g°©e
 =
CI_TCP_CONG_FAST_RECOV
 ) )

1950 
söf
.
£ndq_¸edô
 +
ts
->
ªå™s
.
num
 >> 1;

1952 if–
söf
.
£ndq_¸edô
 <0 ) 
£nd_q_fuŒ
;

1954 
åy_agaö
:

1957 
m
 = 
	`ci_t˝_£nd_Æloc_pkts
(
ni
, 
ts
, &
söf
, 0);

1958 if–
söf
.
n_√eded
 > 0 )

1959 
no_pkt_buf
;

1961 
gŸ_pkt_buf
:

1962 
	`ci_t˝_£nd_fûl_pkts
(
ni
, 
ts
, &
söf
, &
piov
, 
m
 
	`CI_KERNEL_ARG
(
addr_•c
));

1963 
m
 = 0;

1964 #ifde‡
__unix__


1966 if–(
Êags
 & 
MSG_MORE
Ë|| (
ts
->
s
.
s_aÊags
 & 
CI_SOCK_AFLAG_CORK
) ) {

1967 
söf
.
pf
.
pkt
->
Êags
 |
CI_PKT_FLAG_TX_MORE
;

1971 
fûÀd_some_pkts
:

1972 if–
ts
->
s
.
tx_î∫o
 ) {

1973 
	`ci_as£π
(! (
Êags
 & 
ONLOAD_MSG_WARM
));

1974 
	`ci_t˝_£ndmsg_h™dÀ_tx_î∫o
(
ni
, 
ts
, 
Êags
, &
söf
);

1975 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

1976  
söf
.
rc
;

1982 if–
	`si_åylock
(
ni
, &
söf
) ) {

1984 
ts
->
£nd_ö
 +
	`ci_t˝_£ndmsg_íqueue
(
ni
,Ås,

1985 
söf
.
fûl_li°
,

1986 
söf
.
fûl_li°_byãs
,

1987 &
ts
->
£nd
);

1988 
söf
.
tŸÆ_£¡
 +söf.
fûl_li°_byãs
;

1989 
söf
.
tŸÆ_un£¡
 -söf.
fûl_li°_byãs
;

1995 if–
söf
.
tŸÆ_un£¡
 == 0 ) {

1996 if–(
söf
.
fûl_li°
->
Êags
 & 
CI_PKT_FLAG_TX_MORE
) )

1997 
	`TX_PKT_TCP
(
söf
.
fûl_li°
)->
t˝_Êags
 = 
CI_TCP_FLAG_ACK
;

1999 
	`TX_PKT_TCP
(
söf
.
fûl_li°
)->
t˝_Êags
 =

2000 
CI_TCP_FLAG_PSH
 | 
CI_TCP_FLAG_ACK
;

2001 #ifde‡
MSG_SENDPAGE_NOTLAST


2002 if–~
Êags
 & 
MSG_SENDPAGE_NOTLAST
 ||

2003 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
) <= 0 )

2006 
	`ci_t˝_tx_adv™˚_«gÀ
(
ni
, 
ts
);

2007 if(
	`CI_UNLIKELY
–
Êags
 & 
ONLOAD_MSG_WARM
 ))

2008 
	`uƒﬁl_msg_w¨m
(
ni
, 
ts
, &
söf
, 0);

2011 
	`ci_as£π_equÆ
(
söf
.
pf
.
Æloc_pkt
, 
NULL
);

2012 if–
söf
.
°ack_locked
 ) 
	`ci_√tif_u∆ock
(
ni
);

2013  
söf
.
tŸÆ_£¡
;

2016 #ifde‡
MSG_SENDPAGE_NOTLAST


2017 if–(~
Êags
 & 
MSG_SENDPAGE_NOTLAST
) ||

2018 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
) <= 0 )

2022 
	`ci_as£π
(! (
Êags
 & 
ONLOAD_MSG_WARM
));

2023 if–
	`ci_√tif_may_pﬁl
(
ni
Ë&& 
	`ci_√tif_√ed_pﬁl
(ni) )

2024 
	`ci_√tif_pﬁl
(
ni
);

2025 
söf
.
fûl_li°
 = 0;

2026 if–
ts
->
s
.
tx_î∫o
 ) {

2027 
	`ci_t˝_£ndmsg_h™dÀ_tx_î∫o
(
ni
, 
ts
, 
Êags
, &
söf
);

2028 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2029  
söf
.
rc
;

2031 if(
	`CI_LIKELY
–! 
	`ci_ù_queue_is_em±y
(
£ndq
) ))

2032 
	`ci_t˝_tx_adv™˚
(
ts
, 
ni
);

2036 if–
söf
.
tŸÆ_un£¡
 =söf.
fûl_li°_byãs
 )

2038 i‡–! (
söf
.
fûl_li°
->
Êags
 & 
CI_PKT_FLAG_TX_MORE
) )

2039 
söf
.
fûl_li°
->
Êags
 |
CI_PKT_FLAG_TX_PSH
;

2042 
	`ci_t˝_tx_¥equeue
(
ni
, 
ts
, 
söf
.
fûl_li°
);

2043 
söf
.
tŸÆ_£¡
 +söf.
fûl_li°_byãs
;

2044 
söf
.
tŸÆ_un£¡
 -söf.
fûl_li°_byãs
;

2045 
	`ci_as£π_equÆ
(
söf
.
°ack_locked
, 0);

2046 if–
	`ci_√tif_lock_‹_de„r_w‹k
(
ni
, &
ts
->
s
.
b
) ) {

2047 
söf
.
°ack_locked
 = 1;

2048 
söf
.
fûl_li°
 = 0;

2049 if–
ts
->
s
.
tx_î∫o
 ) {

2050 
	`ci_t˝_£ndmsg_h™dÀ_tx_î∫o
(
ni
, 
ts
, 
Êags
, &
söf
);

2051 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2052  
söf
.
rc
;

2054 
	`ci_t˝_£ndmsg_íqueue_¥equeue
(
ni
, 
ts
);

2055 if(
	`CI_LIKELY
–! 
	`ci_ù_queue_is_em±y
(
£ndq
) )) {

2056 if–
söf
.
tŸÆ_un£¡
 =0 ) 
	`ci_t˝_tx_adv™˚_«gÀ
(
ni
, 
ts
);

2057 
	`ci_t˝_tx_adv™˚
(
ts
, 
ni
);

2060 if–
söf
.
tŸÆ_un£¡
 == 0 ) {

2062 
	`ci_as£π_equÆ
(
söf
.
pf
.
Æloc_pkt
, 
NULL
);

2063 if–
söf
.
°ack_locked
 ) 
	`ci_√tif_u∆ock
(
ni
);

2064  
söf
.
tŸÆ_£¡
;

2069 
söf
.
£ndq_¸edô
 -söf.
n_fûÀd
;

2070 if–
söf
.
£ndq_¸edô
 <= 0 ) {

2073 
söf
.
£ndq_¸edô
 = 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
);

2074 if–
söf
.
£ndq_¸edô
 <0 ) 
£nd_q_fuŒ
;

2078 
£nd_q_fuŒ
:

2080 
	`ci_as£π
(! (
Êags
 & 
ONLOAD_MSG_WARM
));

2081 
	`ci_as£π
(
söf
.
tŸÆ_un£¡
 > 0);

2082 
söf
.
fûl_li°
 = 0;

2084 if–
	`ci_√tif_may_pﬁl
(
ni
Ë&& 
	`ci_√tif_√ed_pﬁl
(ni) &&

2085 
	`si_åylock
(
ni
, &
söf
) ) {

2086 
	`ci_√tif_pﬁl
(
ni
);

2087 if–
ts
->
s
.
tx_î∫o
 ) {

2088 
	`ci_t˝_£ndmsg_h™dÀ_tx_î∫o
(
ni
, 
ts
, 
Êags
, &
söf
);

2089 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2090  
söf
.
rc
;

2092 
söf
.
£ndq_¸edô
 = 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
);

2093 if–
söf
.
£ndq_¸edô
 > 0 ) 
åy_agaö
;

2100 if–
Êags
 & 
MSG_DONTWAIT
 ) {

2106 
söf
.
rc
 = -
EAGAIN
;

2107 
	`ci_t˝_£ndmsg_h™dÀ_£¡_‹_rc
(
ni
, 
ts
, 
Êags
, &
söf
);

2108 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2109  
söf
.
rc
;

2112 if–
söf
.
t˝_£nd_•ö
 ) {

2113 
rc
;

2114 
rc
 = 
	`ci_t˝_£ndmsg_•ö
(
ni
, 
ts
, 
Êags
, &
söf
);

2115 if–
rc
 == 0 )

2116 
åy_agaö
;

2117 if–
rc
 == -1 ) {

2118 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2119  
söf
.
rc
;

2121 
söf
.
t˝_£nd_•ö
 = 0;

2124 if–
	`ci_t˝_£ndmsg_block
(
ni
, 
ts
, 
Êags
, &
söf
) == 0 )

2125 
åy_agaö
;

2127 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2128  
söf
.
rc
;

2131 
no_pkt_buf
:

2133 
rc
;

2134 if(
	`CI_UNLIKELY
–
Êags
 & 
ONLOAD_MSG_WARM
 )) {

2139 ++
ts
->
°©s
.
tx_msg_w¨m_ab‹t
;

2140 
	`ci_as£π_equÆ
(
söf
.
pf
.
Æloc_pkt
, 
NULL
);

2141 if–
söf
.
°ack_locked
 )

2142 
	`ci_√tif_u∆ock
(
ni
);

2145 
rc
 = 
	`ci_t˝_£ndmsg_no_pkt_buf
(
ni
, 
ts
, 
Êags
, &
söf
);

2146 if–
rc
 == 0 )

2147 
gŸ_pkt_buf
;

2148 if–
rc
 == 1 )

2149 
fûÀd_some_pkts
;

2151 
	`ci_as£π
(
rc
 == -1);

2152 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2153  
söf
.
rc
;

2157 
nŸ_synchr⁄i£d
:

2158 if(
	`CI_UNLIKELY
–
Êags
 & 
ONLOAD_MSG_WARM
 )) {

2159 ++
ts
->
°©s
.
tx_msg_w¨m_ab‹t
;

2160 if–
söf
.
°ack_locked
 )

2161 
	`ci_√tif_u∆ock
(
ni
);

2165 if–
	`ci_t˝_£ndmsg_nŸsynchr⁄i£d
(
ni
, 
ts
, 
Êags
, &
söf
) == -1 ) {

2166 
	`ci_t˝_£ndmsg_h™dÀ_rc_‹_tx_î∫o
(
ni
, 
ts
, 
Êags
, &
söf
);

2167 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2168  
söf
.
rc
;

2170 
is_sync
;

2172 
¶ow_∑th
:

2173 if(
	`CI_UNLIKELY
–
Êags
 & 
ONLOAD_MSG_WARM
 )) {

2174 if–
	`ˇn_do_msg_w¨m
(
ni
, 
ts
, &
söf
, söf.
tŸÆ_un£¡
, 
Êags
) ) {

2175 
ni
->
Êags
 |
CI_NETIF_FLAG_MSG_WARM
;

2176 #i‡
CI_CFG_BURST_CONTROL


2177 
söf
.
ﬁd_bur°_wödow
 = 
ts
->
bur°_wödow
;

2179 
söf
.
ﬁd_t˝_¢d_nxt
 = 
	`t˝_¢d_nxt
(
ts
);

2180 
Á°_∑th
;

2182 ++
ts
->
°©s
.
tx_msg_w¨m_ab‹t
;

2183 if–
söf
.
°ack_locked
 )

2184 
	`ci_√tif_u∆ock
(
ni
);

2185 if–
söf
.
tŸÆ_un£¡
 >
	`t˝_eff_mss
(
ts
) )

2186  -
EINVAL
;

2189 if–
	`ci_t˝_£ndmsg_¶ow∑th
(
ni
, 
ts
, 
iov
, 
iovÀn
, 
Êags
, &
söf


2190 
	`CI_KERNEL_ARG
(
addr_•c
)) == -1 ) {

2191 
	`ci_t˝_£ndmsg_h™dÀ_rc_‹_tx_î∫o
(
ni
, 
ts
, 
Êags
, &
söf
);

2192 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2193  
söf
.
rc
;

2195  
söf
.
rc
;

2196 
	}
}

2199 #i‚de‡
__KERNEL__


2210 
	$ci_t˝_zc_£nd
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
, 
⁄lﬂd_zc_mmsg
* 
msg
,

2211 
Êags
)

2213 
t˝_£nd_öfo
 
söf
;

2214 
ci_ù_pkt_fmt
* 
pkt
;

2215 
j
;

2216 
eff_mss
;

2218 
	`ci_as£π
(
msg
 !
NULL
);

2219 
	`ci_as£π
(
ts
);

2220 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 !
CI_TCP_LISTEN
);

2221 
	`ci_as£π
(
msg
->msg.
msghdr
.
msg_iovÀn
);

2223 if–!(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_SYNCHRONISED
) ) {

2224 
msg
->
rc
 = 
ts
->
s
.
tx_î∫o
 ? -ts->s.tx_î∫ÿ: -
EPIPE
;

2228 
söf
.
rc
 = 0;

2229 
söf
.
°ack_locked
 = 0;

2230 
söf
.
fûl_li°
 = 0;

2231 
söf
.
fûl_li°_byãs
 = 0;

2232 
söf
.
n_fûÀd
 = 0;

2233 
söf
.
tŸÆ_£¡
 = 0;

2234 
söf
.
pf
.
Æloc_pkt
 = 
NULL
;

2235 
söf
.
timeout
 = 
ts
->
s
.
so
.
¢dtimeo_m£c
;

2236 #i‚de‡
__KERNEL__


2237 
söf
.
t˝_£nd_•ö
 =

2238 
	`oo_≥r_thªad_gë
()->
•ö°©e
 & (1 << 
ONLOAD_SPIN_TCP_SEND
);

2239 if–
söf
.
t˝_£nd_•ö
 )

2240 
	`ci_‰c64
(&
söf
.
°¨t_‰c
);

2242 
söf
.
t˝_£nd_•ö
 = 0;

2245 
eff_mss
 = 
	`t˝_eff_mss
(
ts
);

2246 
	`ci_as£π_À
(
eff_mss
,

2247 
CI_MAX_ETH_DATA_LEN
 - (
ci_t˝_hdr
Ë- (
ci_ù4_hdr
));

2249 
j
 = 0;

2251 
söf
.
£ndq_¸edô
 = 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
);

2255 if–
söf
.
£ndq_¸edô
 <0 || 
Êags
 & 
ONLOAD_MSG_WARM
 ) {

2256 if(
	`CI_UNLIKELY
–
Êags
 & 
ONLOAD_MSG_WARM
 )) {

2257 if–! 
	`ˇn_do_msg_w¨m
(
ni
, 
ts
, &
söf
, 
msg
->msg.
iov
[0].
iov_Àn
, 
Êags
) ) {

2258 ++
ts
->
°©s
.
tx_msg_w¨m_ab‹t
;

2259 if–
söf
.
°ack_locked
 )

2260 
	`ci_√tif_u∆ock
(
ni
);

2261 
msg
->
rc
 = 0;

2262 if–
msg
->msg.
iov
[0].
iov_Àn
 >
	`t˝_eff_mss
(
ts
) )

2263 
msg
->
rc
 = -
EINVAL
;

2266 
ni
->
Êags
 |
CI_NETIF_FLAG_MSG_WARM
;

2267 #i‡
CI_CFG_BURST_CONTROL


2268 
söf
.
ﬁd_bur°_wödow
 = 
ts
->
bur°_wödow
;

2270 
söf
.
ﬁd_t˝_¢d_nxt
 = 
	`t˝_¢d_nxt
(
ts
);

2273 
£nd_q_fuŒ
;

2277 
£nd_q_nŸ_fuŒ
:

2278  
j
 < 
msg
->msg.
msghdr
.
msg_iovÀn
 ) {

2279 
pkt
 = (
ci_ù_pkt_fmt
*)
msg
->msg.
iov
[
j
].
buf
;

2281 
	`ci_as£π_equÆ
(
pkt
->
°ack_id
, 
ni
->
°©e
->stack_id);

2282 
	`ci_as£π
(
msg
->msg.
iov
[
j
].
iov_ba£
 !
NULL
);

2283 
	`ci_as£π_gt
(
msg
->msg.
iov
[
j
].
iov_Àn
, 0);

2284 
	`ci_as£π_À
(
msg
->msg.
iov
[
j
].
iov_Àn
, 
eff_mss
);

2285 
	`ci_as£π_gt
((*)
msg
->msg.
iov
[
j
].
iov_ba£
,

2286 
	`PKT_START
(
pkt
Ë+ 
ts
->
outgoög_hdrs_Àn
);

2287 
	`ci_as£π_…
((*)
msg
->msg.
iov
[
j
].
iov_ba£
 +

2288 
msg
->msg.
iov
[
j
].
iov_Àn
,

2289 ((*)
pkt
Ë+ 
CI_CFG_PKT_BUF_SIZE
);

2291 if–
pkt
->
°ack_id
 !
ni
->
°©e
->stack_id ||

2292 
msg
->msg.
iov
[
j
].
iov_Àn
 <= 0 ||

2293 
msg
->msg.
iov
[
j
].
iov_Àn
 > 
eff_mss
 ||

2294 (*)
msg
->msg.
iov
[
j
].
iov_ba£
 <

2295 
	`PKT_START
(
pkt
Ë+ 
ts
->
outgoög_hdrs_Àn
 ||

2296 (*)
msg
->msg.
iov
[
j
].
iov_ba£
 + msg->msg.iov[j].
iov_Àn
 >

2297 ((*)
pkt
Ë+ 
CI_CFG_PKT_BUF_SIZE
 )

2298 
bad_buf„r
;

2300 
	`__ci_t˝_tx_pkt_öô
(
pkt
, ((
uöt8_t
*Ë
msg
->msg.
iov
[
j
].
iov_ba£
 -

2301 (
uöt8_t
*Ë
	`oo_tx_ëhî_d©a
(
pkt
)), 
eff_mss
);

2302 
pkt
->
n_buf„rs
 = 1;

2303 
pkt
->
buf_Àn
 +
msg
->msg.
iov
[
j
].
iov_Àn
;

2304 
pkt
->
∑y_Àn
 +
msg
->msg.
iov
[
j
].
iov_Àn
;

2305 
	`oo_offbuf_adv™˚
(&
pkt
->
buf
, 
msg
->msg.
iov
[
j
].
iov_Àn
);

2306 
pkt
->
pf
.
t˝_tx
.
íd_£q
 = 
msg
->msg.
iov
[
j
].
iov_Àn
;

2308 
	`ci_as£π_equÆ
(
	`TX_PKT_LEN
(
pkt
), 
	`oo_offbuf_±r
(&pkt->
buf
Ë- 
	`PKT_START
(pkt));

2310 
	`CI_USER_PTR_SET
(
pkt
->
pf
.
t˝_tx
.
√xt
, 
söf
.
fûl_li°
);

2311 
söf
.
fûl_li°
 = 
pkt
;

2312 
söf
.
fûl_li°_byãs
 +
msg
->msg.
iov
[
j
].
iov_Àn
;

2315 if–
j
 == 0 )

2316 
msg
->
rc
 = msg->msg.
iov
[
j
].
iov_Àn
;

2318 
msg
->
rc
 +msg->msg.
iov
[
j
].
iov_Àn
;

2320 ++
söf
.
n_fûÀd
;

2321 ++
j
;

2322 --
söf
.
£ndq_¸edô
;

2323 if–
söf
.
£ndq_¸edô
 <= 0 )

2327 if–((
Êags
 & 
MSG_MORE
Ë|| (
ts
->
s
.
s_aÊags
 & 
CI_SOCK_AFLAG_CORK
)) )

2328 
söf
.
fûl_li°
->
Êags
 |
CI_PKT_FLAG_TX_MORE
;

2333 if–
	`si_åylock
(
ni
, &
söf
) ) {

2334 if–
ts
->
s
.
tx_î∫o
 )

2335 
tx_î∫o
;

2336 
ts
->
£nd_ö
 +
	`ci_t˝_£ndmsg_íqueue
(
ni
,Ås,

2337 
söf
.
fûl_li°
,

2338 
söf
.
fûl_li°_byãs
,

2339 &
ts
->
£nd
);

2341 if–(
söf
.
fûl_li°
->
Êags
 & 
CI_PKT_FLAG_TX_MORE
) )

2342 
	`TX_PKT_TCP
(
söf
.
fûl_li°
)->
t˝_Êags
 = 
CI_TCP_FLAG_ACK
;

2344 
	`TX_PKT_TCP
(
söf
.
fûl_li°
)->
t˝_Êags
 = 
CI_TCP_FLAG_PSH
|
CI_TCP_FLAG_ACK
;

2345 
	`ci_t˝_tx_adv™˚_«gÀ
(
ni
, 
ts
);

2346 if(
	`CI_UNLIKELY
–
Êags
 & 
ONLOAD_MSG_WARM
 )) {

2347 
	`uƒﬁl_msg_w¨m
(
ni
, 
ts
, &
söf
, 1);

2351 if–
ts
->
s
.
tx_î∫o
 )

2352 
tx_î∫o
;

2354 if–!(
söf
.
fûl_li°
->
Êags
 & 
CI_PKT_FLAG_TX_MORE
) )

2355 
söf
.
fûl_li°
->
Êags
 |
CI_PKT_FLAG_TX_PSH
;

2357 
	`ci_t˝_tx_¥equeue
(
ni
, 
ts
, 
söf
.
fûl_li°
);

2358 
söf
.
fûl_li°
 = 0;

2360 
	`ci_as£π_equÆ
(
söf
.
°ack_locked
, 0);

2361 if–
	`ci_√tif_lock_‹_de„r_w‹k
(
ni
, &
ts
->
s
.
b
) ) {

2362 
söf
.
°ack_locked
 = 1;

2363 if–
ts
->
s
.
tx_î∫o
 )

2364 
tx_î∫o
;

2365 
	`ci_t˝_£ndmsg_íqueue_¥equeue
(
ni
, 
ts
);

2366 if(
	`CI_LIKELY
–! 
	`ci_ù_queue_is_em±y
(&
ts
->
£nd
) ))

2367 
	`ci_t˝_tx_adv™˚_«gÀ
(
ni
, 
ts
);

2371 if–
söf
.
n_fûÀd
 < 
msg
->msg.
msghdr
.
msg_iovÀn
 ) {

2372 
söf
.
fûl_li°
 = 0;

2373 
söf
.
fûl_li°_byãs
 = 0;

2374 
söf
.
£ndq_¸edô
 = 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
);

2375 if–
söf
.
£ndq_¸edô
 > 0 )

2376 
£nd_q_nŸ_fuŒ
;

2378 
£nd_q_fuŒ
;

2380 if–
söf
.
°ack_locked
 )

2381 
	`ci_√tif_u∆ock
(
ni
);

2384 
£nd_q_fuŒ
:

2385 if–
	`ci_√tif_may_pﬁl
(
ni
Ë&& 
	`ci_√tif_√ed_pﬁl
(ni) &&

2386 
	`si_åylock
(
ni
, &
söf
) ) {

2387 
	`ci_√tif_pﬁl
(
ni
);

2388 if–
ts
->
s
.
tx_î∫o
 )

2389 
tx_î∫o
;

2390 
söf
.
£ndq_¸edô
 = 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
);

2391 if–
söf
.
£ndq_¸edô
 > 0 )

2392 
£nd_q_nŸ_fuŒ
;

2395 if–
Êags
 & 
MSG_DONTWAIT
 ) {

2396 if–
j
 == 0 )

2397 
msg
->
rc
 = -
EAGAIN
;

2398 if–
söf
.
°ack_locked
 )

2399 
	`ci_√tif_u∆ock
(
ni
);

2403 if–
söf
.
t˝_£nd_•ö
 ) {

2404 
rc
;

2405 
rc
 = 
	`ci_t˝_£ndmsg_•ö
(
ni
, 
ts
, 
Êags
, &
söf
);

2406 if–
rc
 == 0 )

2407 
£nd_q_nŸ_fuŒ
;

2408 if–
rc
 == -1 ) {

2409 if–
söf
.
°ack_locked
 )

2410 
	`ci_√tif_u∆ock
(
ni
);

2411 if–
j
 == 0 )

2415 
msg
->
rc
 = -
söf
.rc;

2420 if–
	`ci_t˝_£ndmsg_block
(
ni
, 
ts
, 
Êags
, &
söf
) == 0 )

2421 
£nd_q_nŸ_fuŒ
;

2423 if–
söf
.
°ack_locked
 )

2424 
	`ci_√tif_u∆ock
(
ni
);

2425 if–
j
 == 0 )

2429 
msg
->
rc
 = -
söf
.rc;

2434 
bad_buf„r
:

2435 if(
	`CI_UNLIKELY
–
ni
->
Êags
 & 
CI_NETIF_FLAG_MSG_WARM
 )) {

2436 ++
ts
->
°©s
.
tx_msg_w¨m_ab‹t
;

2437 if–
söf
.
°ack_locked
 )

2438 
	`ci_√tif_u∆ock
(
ni
);

2439 
msg
->
rc
 = -
EINVAL
;

2443 if–
söf
.
fûl_li°
 ) {

2444 if–
	`si_åylock
(
ni
, &
söf
) ) {

2445 if–
ts
->
s
.
tx_î∫o
 )

2446 
tx_î∫o
;

2447 
ts
->
£nd_ö
 +
	`ci_t˝_£ndmsg_íqueue
(
ni
,Ås,

2448 
söf
.
fûl_li°
,

2449 
söf
.
fûl_li°_byãs
,

2450 &
ts
->
£nd
);

2451 
söf
.
fûl_li°
 = 0;

2454 if–
ts
->
s
.
tx_î∫o
 )

2455 
tx_î∫o
;

2457 
	`ci_t˝_tx_¥equeue
(
ni
, 
ts
, 
söf
.
fûl_li°
);

2458 
söf
.
fûl_li°
 = 0;

2459 
	`ci_as£π_equÆ
(
söf
.
°ack_locked
, 0);

2460 if–
	`ci_√tif_lock_‹_de„r_w‹k
(
ni
, &
ts
->
s
.
b
) ) {

2461 
söf
.
°ack_locked
 = 1;

2462 if–
ts
->
s
.
tx_î∫o
 )

2463 
tx_î∫o
;

2464 
	`ci_t˝_£ndmsg_íqueue_¥equeue
(
ni
, 
ts
);

2466 if(
	`CI_LIKELY
–! 
	`ci_ù_queue_is_em±y
(&
ts
->
£nd
) ))

2467 
	`ci_t˝_tx_adv™˚
(
ts
, 
ni
);

2471 if–
j
 == 0 )

2472 
msg
->
rc
 = -
EINVAL
;

2473 if–
söf
.
°ack_locked
 )

2474 
	`ci_√tif_u∆ock
(
ni
);

2477 
tx_î∫o
:

2481 
	`ci_t˝_£ndmsg_‰ì_fûl_li°
(
ni
, 
ts
, 
Êags
, &
söf
);

2482 
	`ci_t˝_tx_‰ì_¥equeue
(
ni
, 
ts
, 
söf
.
°ack_locked
);

2483 
msg
->
rc
 = -
ts
->
s
.
tx_î∫o
;

2484 if–
söf
.
°ack_locked
 )

2485 
	`ci_√tif_u∆ock
(
ni
);

2487 
	}
}

2490 
	$ci_t˝_ds_gë_¨p
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

2492 
i
;

2494 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

2496 
	`ci˝_u£r_ªåõve
(
ni
, &
ts
->
s
.
pkt
, &ts->s.
˝
);

2497 if–
ts
->
s
.
pkt
.
°©us
 =
ªårc_suc˚ss
 )

2499 if–
ts
->
s
.
pkt
.
°©us
 !
ªårc_nomac
 )

2500 
Áû
;

2502 if–! 
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
) )

2503 
	`ci_t˝_ªå™s_⁄e
(
ts
, 
ni
, 
	`PKT_CHK
“i,Ås->
ªå™s
.
hód
));

2505 
ci_ù_pkt_fmt
* 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
ni
);

2506 if–
pkt
 =
NULL
 )

2507 
Áû
;

2509 
	`ci_t˝_£nd_ack
(
ni
, 
ts
, 
pkt
, 0);

2513  
i
 = 0; i < 1000; i++ ) {

2514 
	`ci˝_u£r_ªåõve
(
ni
, &
ts
->
s
.
pkt
, &ts->s.
˝
);

2515 if–
ts
->
s
.
pkt
.
°©us
 =
ªårc_suc˚ss
 )

2517 if–
ts
->
s
.
pkt
.
°©us
 !
ªårc_nomac
 )

2518 
Áû
;

2519 
	`u¶ìp
(1);

2522 
Áû
:

2524 
	`ci_ù_ˇche_övÆid©e
(&
ts
->
s
.
pkt
);

2526 
	}
}

2528 
	#MAX_HEADERS_LEN
 \

2529 –
ETH_HLEN
 + 
ETH_VLAN_HLEN
 + (
ci_ù4_hdr
) + \

2530 0x‡* (
ci_uöt32
Ë)

	)

2532 
⁄lﬂd_dñeg©ed_£nd_rc


2533 
	$ci_t˝_ds_fûl_hódîs
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
, 
Êags
,

2534 * 
hódîs
, * 
hódîs_Àn_öout
,

2535 * 
ù_t˝_hdr_Àn_out
,

2536 * 
t˝_£q_off£t_out
, * 
ù_Àn_off£t_out
)

2538 
hódîs_Àn
;

2539 
ëhî_hódî_Àn
;

2540 
ci_t˝_hdr
* 
t˝
;

2541 
ci_ù4_hdr
* 
ù
;

2545 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

2548 if–! 
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
), &
ts
->
s
.
pkt
) &&

2549 (~
Êags
 & 
ONLOAD_DELEGATED_SEND_FLAG_IGNORE_ARP
 ) &&

2550 ! 
	`ci_t˝_ds_gë_¨p
(
ni
, 
ts
) ) {

2551  
ONLOAD_DELEGATED_SEND_RC_NOARP
;

2555 
ëhî_hódî_Àn
 = 
ETH_HLEN
 + 
ETH_VLAN_HLEN
 - 
ts
->
s
.
pkt
.
ëhî_off£t
;

2556 
hódîs_Àn
 = 
ëhî_hódî_Àn
 + 
ts
->
outgoög_hdrs_Àn
;

2557 
	`ci_as£π_À
(
hódîs_Àn
, 
MAX_HEADERS_LEN
);

2559 if–*
hódîs_Àn_öout
 < 
hódîs_Àn
 ) {

2560 *
hódîs_Àn_öout
 = 
hódîs_Àn
;

2561  
ONLOAD_DELEGATED_SEND_RC_SMALL_HEADER
;

2563 *
hódîs_Àn_öout
 = 
hódîs_Àn
;

2566 
	`mem˝y
(
hódîs
, 
	`ci_ù_ˇche_ëhî_hdr
(&
ts
->
s
.
pkt
), 
hódîs_Àn
);

2568 
ù
 = (*)((
ci_uöçå_t
)
hódîs
 + 
ëhî_hódî_Àn
);

2569 
t˝
 = (*)((
ci_uöçå_t
)
hódîs
 + 
ëhî_hódî_Àn
 + (
ci_ù4_hdr
));

2573 
t˝
->
t˝_£q_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_¢d_nxt
(
ts
));

2574 
t˝
->
t˝_Êags
 = 
CI_TCP_FLAG_ACK
;

2575 
t˝
->
t˝_ack_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_rcv_nxt
(
ts
));

2576 
	`ci_t˝_ˇlc_rcv_wnd
(
ts
, "ds_fill_headers");

2577 
t˝
->
t˝_wödow_be16
 = 
	`TS_TCP
(
ts
)->tcp_window_be16;

2578 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

2579 
ci_uöt8
* 
›t
 = 
	`CI_TCP_HDR_OPTS
(
t˝
);

2580 
	`ci_t˝_tx_›t_tso
(&
›t
, 
	`ci_t˝_time_now
(
ni
), 
ts
->
t§e˚¡
);

2582 
ù
->
ù_tŸ_Àn_be16
 =

2583 
	`CI_BSWAP_BE16
(
ts
->
outgoög_hdrs_Àn
 +Ås->
eff_mss
);

2584 
	`ci_as£π_equÆ
(
	`CI_TCP_HDR_LEN
(
t˝
),

2585 
ts
->
outgoög_hdrs_Àn
 - (
ci_t˝_hdr
));

2586 
	`ci_as£π_equÆ
(
ù
->
ù_check_be16
, 0);

2587 
	`ci_as£π_equÆ
(
ù
->
ù_id_be16
, 0);

2588 
	`ci_as£π_equÆ
(
t˝
->
t˝_check_be16
, 0);

2589 
	`ci_as£π_equÆ
(
t˝
->
t˝_urg_±r_be16
, 0);

2592 *
ù_t˝_hdr_Àn_out
 = 
ts
->
outgoög_hdrs_Àn
;

2593 *
t˝_£q_off£t_out
 = 
ëhî_hódî_Àn
 + (
ci_ù4_hdr
) +

2594 
	`CI_MEMBER_OFFSET
(
ci_t˝_hdr
, 
t˝_£q_be32
);

2595 *
ù_Àn_off£t_out
 = 
ëhî_hódî_Àn
 +

2596 
	`CI_MEMBER_OFFSET
(
ci_ù4_hdr
, 
ù_tŸ_Àn_be16
);

2598  
ONLOAD_DELEGATED_SEND_RC_OK
;

2599 
	}
}

2602 
	$ci_t˝_ds_d⁄e
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

2603 c⁄° 
ci_iovec
 *
iov
, 
iovÀn
, 
Êags
)

2605 
Æªady_acked
, 
i
;

2606 
ci_iovec_±r
 
piov
;

2607 
t˝_£nd_öfo
 
söf
;

2608 
œ°_√eded
 
	`CI_DEBUG
(= 0x7fffffff);

2609 
gŸ
 = 0;

2610 
iov_off£t
 = 0;

2612 
söf
.
tŸÆ_un£¡
 = 0;

2613 
söf
.
tŸÆ_£¡
 = 0;

2614 
söf
.
°ack_locked
 = 0;

2615 
söf
.
rc
 = 0;

2616 
söf
.
pf
.
Æloc_pkt
 = 
NULL
;

2617 
söf
.
timeout
 = 0;

2618 
söf
.
t˝_£nd_•ö
 =

2619 
	`oo_≥r_thªad_gë
()->
•ö°©e
 & (1 << 
ONLOAD_SPIN_TCP_SEND
);

2620 
söf
.
fûl_li°
 = 0;

2622  
i
 = 0; i < 
iovÀn
; ++i )

2623 
söf
.
tŸÆ_un£¡
 +
	`CI_IOVEC_LEN
(&
iov
[
i
]);

2627 if–
söf
.
tŸÆ_un£¡
 > 
ts
->
¢d_dñeg©ed
 )

2628 
	`RET_WITH_ERRNO
(
EMSGSIZE
);

2630 
åy_agaö
:

2632 if–! 
	`si_åylock
(
ni
, &
söf
) ) {

2633 
	`ci_√tif_lock
(
ni
);

2634 
söf
.
°ack_locked
 = 1;

2637 
Æªady_acked
 = 
	`SEQ_SUB
(
ts
->
¢d_u«
,Ås->
¢d_nxt
);

2643 if–
Æªady_acked
 < 0 )

2644 
Æªady_acked
 = 0;

2645 if–
Æªady_acked
 > 0 ) {

2646 
Æªady_acked
 = 
	`CI_MIN
◊Ãódy_acked, 
söf
.
tŸÆ_un£¡
);

2648 
ts
->
¢d_dñeg©ed
 -
Æªady_acked
;

2649 
ts
->
¢d_nxt
 +
Æªady_acked
;

2650 
söf
.
tŸÆ_un£¡
 -
Æªady_acked
;

2651 
söf
.
tŸÆ_£¡
 +
Æªady_acked
;

2652 
	`t˝_íq_nxt
(
ts
Ë+
Æªady_acked
;

2658 
	`ci_as£π_…
(
iov_off£t
, 
	`CI_IOVEC_LEN
(
iov
));

2661  
iov_off£t
 + 
Æªady_acked
 > 
	`CI_IOVEC_LEN
(
iov
) ) {

2662 
Æªady_acked
 -(
	`CI_IOVEC_LEN
(
iov
Ë- 
iov_off£t
);

2663 
iov
++;

2664 
iovÀn
--;

2665 
iov_off£t
 = 0;

2668 if–
söf
.
tŸÆ_un£¡
 == 0)

2669 
out
;

2672 
söf
.
£ndq_¸edô
 = 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
);

2680 
	`ci_iovec_±r_öô_nz
(&
piov
, 
iov
, 
iovÀn
);

2681 
	`ci_iovec_±r_adv™˚
(&
piov
, 
Æªady_acked
 + 
iov_off£t
);

2682 
	`ci_as£π
(! 
	`ci_iovec_±r_is_em±y_¥›î
(&
piov
));

2684 if–
söf
.
£ndq_¸edô
 <0 ) 
£nd_q_fuŒ
;

2693 
	`ci_as£π_À
(
gŸ
, 
œ°_√eded
);

2694 
œ°_√eded
 = 
	`ci_t˝_£nd_Æloc_pkts
(
ni
, 
ts
, &
söf
, 
gŸ
);

2696 if–
söf
.
n_√eded
 > 0 )

2697 
no_pkt_buf
;

2706 
	`ci_as£π_equÆ
(
söf
.
n_fûÀd
, 0);

2712 
	`ci_t˝_£nd_fûl_pkts
(
ni
, 
ts
, &
söf
, &
piov
, 
œ°_√eded
);

2715 
	`ci_as£π_equÆ
(
söf
.
n_fûÀd
, 
œ°_√eded
);

2716 
gŸ
 = 0;

2718 if–
ts
->
s
.
tx_î∫o
 ) {

2719 
	`ci_as£π
(! (
Êags
 & 
ONLOAD_MSG_WARM
));

2720 
	`ci_t˝_£ndmsg_h™dÀ_tx_î∫o
(
ni
, 
ts
, 
Êags
, &
söf
);

2721 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2722  
söf
.
rc
;

2725 
	`ci_t˝_£ndmsg_íqueue
(
ni
, 
ts
, 
söf
.
fûl_li°
, söf.
fûl_li°_byãs
,

2726 &
ts
->
ªå™s
);

2727 
söf
.
tŸÆ_£¡
 +söf.
fûl_li°_byãs
;

2728 
söf
.
tŸÆ_un£¡
 -söf.
fûl_li°_byãs
;

2729 
ts
->
¢d_nxt
 +
söf
.
fûl_li°_byãs
;

2730 
ts
->
¢d_dñeg©ed
 -
söf
.
fûl_li°_byãs
;

2731 if–
söf
.
tŸÆ_un£¡
 == 0 )

2732 
out
;

2735 
iov_off£t
 +
Æªady_acked
 + 
söf
.
fûl_li°_byãs
;

2736  
iov_off£t
 > 
	`CI_IOVEC_LEN
(
iov
) ) {

2737 
iov_off£t
 -
	`CI_IOVEC_LEN
(
iov
);

2738 
iov
++;

2739 
iovÀn
--;

2743 if–
	`ci_√tif_may_pﬁl
(
ni
Ë&& 
	`ci_√tif_√ed_pﬁl
(ni) )

2744 
	`ci_√tif_pﬁl
(
ni
);

2747 
söf
.
fûl_li°
 = 0;

2748 
söf
.
n_fûÀd
 = 0;

2750 if–
ts
->
s
.
tx_î∫o
 ) {

2751 
	`ci_t˝_£ndmsg_h™dÀ_tx_î∫o
(
ni
, 
ts
, 
Êags
, &
söf
);

2752 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2753  
söf
.
rc
;

2756 
söf
.
£ndq_¸edô
 -söf.
n_fûÀd
;

2757 if–
söf
.
£ndq_¸edô
 <= 0 ) {

2760 
söf
.
£ndq_¸edô
 = 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
);

2761 if–
söf
.
£ndq_¸edô
 <0 ) 
£nd_q_fuŒ
;

2766 
out
:

2767 
	`ci_as£π
(
söf
.
°ack_locked
);

2772 if–
söf
.
tŸÆ_£¡
 > 
Æªady_acked
 && !
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
))

2773 
	`ci_t˝_πo_check_™d_£t
(
ni
, 
ts
);

2778 if–
gŸ
 > 0 )

2779 
	`ci_t˝_£ndmsg_‰ì_unu£d_pkts
(
ni
, &
söf
);

2781 
	`ci_√tif_u∆ock
(
ni
);

2783  
söf
.
tŸÆ_£¡
;

2785 
£nd_q_fuŒ
:

2786 
	`ci_as£π_equÆ
(
söf
.
fûl_li°
, 
NULL
);

2788 if–
	`ci_√tif_may_pﬁl
(
ni
Ë&& 
	`ci_√tif_√ed_pﬁl
(ni) &&

2789 
	`si_åylock
(
ni
, &
söf
) ) {

2790 
	`ci_√tif_pﬁl
(
ni
);

2791 if–
ts
->
s
.
tx_î∫o
 ) {

2792 
	`ci_t˝_£ndmsg_h™dÀ_tx_î∫o
(
ni
, 
ts
, 
Êags
, &
söf
);

2793 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2794  
söf
.
rc
;

2796 
söf
.
£ndq_¸edô
 = 
	`ci_t˝_tx_£nd_•a˚
(
ni
, 
ts
);

2797 if–
söf
.
£ndq_¸edô
 > 0 ) 
åy_agaö
;

2802 
	`ci_as£π
(
	`OO_PP_NOT_NULL
(
ts
->
ªå™s
.
num
));

2805 if–
Êags
 & 
MSG_DONTWAIT
 ) {

2806 
söf
.
rc
 = -
EAGAIN
;

2807 
	`ci_t˝_£ndmsg_h™dÀ_£¡_‹_rc
(
ni
, 
ts
, 
Êags
, &
söf
);

2808 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2809  
söf
.
rc
;

2812 if–
söf
.
t˝_£nd_•ö
 ) {

2813 
rc
;

2814 
rc
 = 
	`ci_t˝_£ndmsg_•ö
(
ni
, 
ts
, 
Êags
, &
söf
);

2815 if–
rc
 == 0 )

2816 
åy_agaö
;

2817 if–
rc
 == -1 ) {

2818 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2819  
söf
.
rc
;

2821 
söf
.
t˝_£nd_•ö
 = 0;

2824 if–
	`ci_t˝_£ndmsg_block
(
ni
, 
ts
, 
Êags
, &
söf
) == 0 )

2825 
åy_agaö
;

2827 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2828  
söf
.
rc
;

2831 
no_pkt_buf
:

2833 
rc
;

2834 
rc
 = 
	`ci_t˝_£ndmsg_no_pkt_buf
(
ni
, 
ts
, 
Êags
, &
söf
);

2835 if–
rc
 == 0 ) {

2836 
gŸ
 = 
œ°_√eded
 - 
söf
.
n_√eded
;

2837 
åy_agaö
;

2844 
	`ci_as£π
(
rc
 == -1);

2845 if–
söf
.
£t_î∫o
 ) 
	`CI_SET_ERROR
(söf.
rc
, sinf.rc);

2846  
söf
.
rc
;

2850 
	}
}

	@tcp_sleep.c

13 
	~"ù_öã∫Æ.h
"

16 #i‡
deföed
(
__unix__
Ë&& !deföed(
__KERNEL__
)

17 
	~<ci/öã∫Æ/ù_sig«l.h
>

18 
	#HANDLE_SIGNALS
 1

	)

20 
	#HANDLE_SIGNALS
 0

	)

30 #i‚de‡
__KERNEL__


32 
	$ci_sock_¶ìp
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
, 
ci_bôs
 
why
,

33 
lock_Êags
, 
ci_uöt64
 
¶ìp_£q
,

34 
ci_uöt32
 *
timeout_ms_p
)

36 #i‡
HANDLE_SIGNALS


37 
côp_sig«l_öfo
* 
si
;

39 
oo_t˝_sock_¶ìp_t
 
›
;

40 
rc
;

42 
	`LOG_TV
(
	`ci_log
("%d:%d SLEEP why=%s%†Êags=%s%s%s%†¶ìp_£q=%"
CI_PRIu64
,

43 
	`NI_ID
(
ni
), 
	`W_FMT
(
w
),

44 (
why
 & 
CI_SB_FLAG_WAKE_RX
) ? "R":"",

45 (
why
 & 
CI_SB_FLAG_WAKE_TX
) ? "T":"",

46 (
lock_Êags
 & 
CI_SLEEP_NETIF_LOCKED
) ? "NetifLocked":"",

47 (
lock_Êags
 & 
CI_SLEEP_SOCK_LOCKED
) ? "SockLocked":"",

48 (
lock_Êags
 & 
CI_SLEEP_NETIF_RQ
) ? "NetifRq":"",

49 (
lock_Êags
 & 
CI_SLEEP_SOCK_RQ
) ? "SockRq":"",

50 
¶ìp_£q
));

52 
	`ci_as£π
(
why
);

53 
	`ci_as£π
(!(
why
 &~ (
CI_SB_FLAG_WAKE_RX
|
CI_SB_FLAG_WAKE_TX
)));

54 
	`ci_as£π
(!(
lock_Êags
 & 
CI_SLEEP_NETIF_LOCKED
Ë|| 
	`ci_√tif_is_locked
(
ni
));

55 
	`ci_as£π
(!(
lock_Êags
 & 
CI_SLEEP_SOCK_LOCKED
Ë|| 
	`ci_sock_is_locked
(
ni
, 
w
));

57 
›
.
sock_id
 = 
	`W_SP
(
w
);

58 
›
.
why
 = why;

59 
›
.
¶ìp_£q
 = sleep_seq;

60 
›
.
lock_Êags
 =Üock_flags;

61 if–
timeout_ms_p
 =
NULL
 )

62 
›
.
timeout_ms
 = 0;

64 
›
.
timeout_ms
 = *
timeout_ms_p
;

65 #i‡
HANDLE_SIGNALS


66 
si
 = 
	`côp_sig«l_gë_•ecific_öôed
();

67 
	`CI_USER_PTR_SET
(
›
.
sig_°©e
, 
si
);

68 
	`ci_as£π
(
si
->
öside_lib
 != 0);

69 
agaö
:

73 
rc
 = 
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
), 
OO_IOC_TCP_SOCK_SLEEP
,

74 &
›
);

75 #i‡
HANDLE_SIGNALS


76 
	`ci_as£π
(
si
->
öside_lib
 == 0);

77 if(
	`CI_UNLIKELY
–
rc
 =-
EBUSY
 )) {

78 if–
si
->
aÊags
 & 
OO_SIGNAL_FLAG_HAVE_PENDING
 )

79 
	`côp_sig«l_run_≥ndög
(
si
);

80 
	`ci_as£π
(~
si
->
aÊags
 & 
OO_SIGNAL_FLAG_HAVE_PENDING
 );

81 
›
.
lock_Êags
 &~(
CI_SLEEP_NETIF_LOCKED
 | 
CI_SLEEP_SOCK_LOCKED
);

82 
agaö
;

84 
si
->
öside_lib
 = 1;

86 if–
timeout_ms_p
 !
NULL
 )

87 *
timeout_ms_p
 = 
›
.
timeout_ms
;

89 
	`LOG_TV
(
	`ci_log
("%d:%d AWAKE why=%s%†¶ìp=%"
CI_PRIu64
",%"CI_PRIu64"Ñc=%d",

90 
	`NI_ID
(
ni
), 
	`W_FMT
(
w
),

91 (
why
 & 
CI_SB_FLAG_WAKE_RX
) ? "R":"",

92 (
why
 & 
CI_SB_FLAG_WAKE_TX
Ë? "T":"", 
¶ìp_£q
,

93 
w
->
¶ìp_£q
.
Æl
, 
rc
));

95  
rc
;

96 
	}
}

101 
	$ci_sock_¶ìp
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
, 
ci_bôs
 
why
,

102 
lock_Êags
, 
ci_uöt64
 
¶ìp_£q
,

103 
ci_uöt32
 *
timeout_ms_p
)

105 
oo_t˝_sock_¶ìp_t
 
›
;

106 
rc
;

108 
	`LOG_TV
(
	`ci_log
("%d:%d SLEEP why=%s%†Êags=%s%s%s%†¶ìp_£q=%"
CI_PRIu64
,

109 
	`NI_ID
(
ni
), 
	`W_FMT
(
w
),

110 (
why
 & 
CI_SB_FLAG_WAKE_RX
) ? "R":"",

111 (
why
 & 
CI_SB_FLAG_WAKE_TX
) ? "T":"",

112 (
lock_Êags
 & 
CI_SLEEP_NETIF_LOCKED
) ? "NetifLocked":"",

113 (
lock_Êags
 & 
CI_SLEEP_SOCK_LOCKED
) ? "SockLocked":"",

114 (
lock_Êags
 & 
CI_SLEEP_NETIF_RQ
) ? "NetifRq":"",

115 (
lock_Êags
 & 
CI_SLEEP_SOCK_RQ
) ? "SockRq":"",

116 
¶ìp_£q
));

118 
	`ci_as£π
(
why
);

119 
	`ci_as£π
(!(
why
 &~ (
CI_SB_FLAG_WAKE_RX
|
CI_SB_FLAG_WAKE_TX
)));

120 
	`ci_as£π
(!(
lock_Êags
 & 
CI_SLEEP_NETIF_LOCKED
Ë|| 
	`ci_√tif_is_locked
(
ni
));

121 
	`ci_as£π
(!(
lock_Êags
 & 
CI_SLEEP_SOCK_LOCKED
Ë|| 
	`ci_sock_is_locked
(
ni
, 
w
));

123 
›
.
sock_id
 = 
	`W_SP
(
w
);

124 
›
.
why
 = why;

125 
›
.
¶ìp_£q
 = sleep_seq;

126 
›
.
lock_Êags
 =Üock_flags;

127 if–
timeout_ms_p
 =
NULL
 )

128 
›
.
timeout_ms
 = 0;

130 
›
.
timeout_ms
 = *
timeout_ms_p
;

131 #ifde‡
__unix__


132 
	`CI_USER_PTR_SET
(
›
.
sig_°©e
, 
NULL
);

135 
rc
 = 
	`eÁb_t˝_hñ≥r_sock_¶ìp
(
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
), &
›


136 
	`CI_BLOCKING_CTX_ARG
(
	`ci_blockög_˘x_¨g_√eded
()));

137 
	`ci_as£π
((
›
.
lock_Êags
 & (
CI_SLEEP_NETIF_LOCKED
 |

138 
CI_SLEEP_SOCK_LOCKED
)) == 0);

139 if–
timeout_ms_p
 !
NULL
 )

140 *
timeout_ms_p
 = 
›
.
timeout_ms
;

142 
	`LOG_TV
(
	`ci_log
("%d:%d AWAKE why=%s%†¶ìp=%"
CI_PRIu64
",%"CI_PRIu64"Ñc=%d",

143 
	`NI_ID
(
ni
), 
	`W_FMT
(
w
),

144 (
why
 & 
CI_SB_FLAG_WAKE_RX
) ? "R":"",

145 (
why
 & 
CI_SB_FLAG_WAKE_TX
Ë? "T":"", 
¶ìp_£q
,

146 
w
->
¶ìp_£q
.
Æl
, 
rc
));

148  
rc
;

149 
	}
}

160 #ifde‡
__KERNEL__


162 
	$ci_sock_lock_block
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
)

164 #ifde‡
_WIN32


166 
	`ci_•ölo›_∑u£
();

169  
	`eÁb_t˝_hñ≥r_sock_lock_¶ow
(
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
),

170 
	`W_SP
(
w
)

171 
	`CI_BLOCKING_CTX_ARG
(
	`ci_blockög_˘x_¨g_√eded
()));

173 
	}
}

177 
	$ci_sock_lock_block
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
)

179 
oo_•
 
w_•
 = 
	`W_SP
(
w
);

180  
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
), 
OO_IOC_TCP_SOCK_LOCK
,

181 &
w_•
);

182 
	}
}

187 
	$ci_sock_lock_¶ow
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
)

189 #i‚de‡
__KERNEL__


190 
ci_uöt64
 
°¨t_‰c
, 
now_‰c
;

192 
ﬁd
, 
√w
;

193 
rc
;

195 if–
	`ci_sock_åylock
(
ni
, 
w
) )

198 #i‚de‡
__KERNEL__


202 if–
	`oo_≥r_thªad_gë
()->
•ö°©e
 & (1 << 
ONLOAD_SPIN_SOCK_LOCK
) ) {

203 
	`CITP_STATS_NETIF
(++
ni
->
°©e
->
°©s
.
sock_lock_buzz
);

204 
	`ci_‰c64
(&
now_‰c
);

205 
°¨t_‰c
 = 
now_‰c
;

206  
now_‰c
 - 
°¨t_‰c
 < 
ni
->
°©e
->
buzz_cy˛es
 ) {

207 
	`ci_‰c64
(&
now_‰c
);

208 if–
	`ci_sock_åylock
(
ni
, 
w
) )

210 
	`ci_•ölo›_∑u£
();

216 if–(
rc
 = 
	`ci_sock_lock_block
(
ni
, 
w
)) < 0 ) {

217 #i‚de‡
__KERNEL__


218 if–
rc
 =-
EINTR
 )

223 
	`LOG_E
(
	`ci_log
("%s: ERROR:Ñc=%d", 
__FUNCTION__
, 
rc
));

224 
	`CI_TEST
(0);

227 
	`LOG_E
(
	`ci_log
("%s: ERROR:Ñc=%d", 
__FUNCTION__
, 
rc
));

228  
rc
;

231 
agaö
:

235 
ﬁd
 = 
w
->
lock
.
wl_vÆ
;

236 if–! (
ﬁd
 & 
OO_WAITABLE_LK_LOCKED
) ) {

237 
√w
 = 
ﬁd
 | 
OO_WAITABLE_LK_LOCKED
;

238 if–
	`ci_ˇs32u_suc˚ed
(&
w
->
lock
.
wl_vÆ
, 
ﬁd
, 
√w
) )

241 
agaö
;

244 
	}
}

247 
	$ci_sock_u∆ock_¶ow
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
)

249 
l
;

251 
	`ci_as£π
(
	`ci_sock_is_locked
(
ni
, 
w
));

253 
agaö
:

254 
l
 = 
w
->
lock
.
wl_vÆ
;

255 if–! (
l
 & 
OO_WAITABLE_LK_NEED_WAKE
) ) {

256 if(
	`CI_LIKELY
–
	`ci_ˇs32u_suc˚ed
(&
w
->
lock
.
wl_vÆ
, 
l
,

257 (
l
 & ~
OO_WAITABLE_LK_LOCKED
)) ))

259 
agaö
;

262 #ifde‡
__KERNEL__


263 
	`eÁb_t˝_hñ≥r_sock_u∆ock_¶ow
(
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
), 
	`W_SP
(
w
));

266 
oo_•
 
w_•
 = 
	`W_SP
(
w
);

267 
	`CI_DEBUG_TRY
(
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

268 
OO_IOC_TCP_SOCK_UNLOCK
, &
w_•
));

271 
	}
}

280 #i‚de‡
__KERNEL__


282 
	$ci_√tif_pkt_waô_•ö
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
,

283 * 
lock_Êags
, * 
d⁄e
)

285 
ci_uöt64
 
°¨t_‰c
, 
now_‰c
;

286 
rc
 = 1;

288 
	`ci_‰c64
(&
°¨t_‰c
);

289 
now_‰c
 = 
°¨t_‰c
;

290 
ni
->
°©e
->
is_•ö√r
 = 1;

291 
	`CITP_STATS_NETIF
(++
ni
->
°©e
->
°©s
.
pkt_waô_•ö
);

294 if–
	`ci_√tif_may_pﬁl
(
ni
Ë&& 
	`ci_√tif_√ed_pﬁl_•önög
“i, 
now_‰c
) &&

295 ((*
lock_Êags
 & 
CI_SLEEP_NETIF_LOCKED
Ë|| 
	`ci_√tif_åylock
(
ni
)) ) {

296 *
lock_Êags
 |
CI_SLEEP_NETIF_LOCKED
;

297 
	`ci_√tif_pﬁl
(
ni
);

299 if–
	`ci_√tif_pkt_tx_ˇn_Æloc_now
(
ni
) ) {

300 
rc
 = 0;

301 *
d⁄e
 = 1;

302 if–*
lock_Êags
 & 
CI_SLEEP_NETIF_RQ
 ) {

303 if–! (*
lock_Êags
 & 
CI_SLEEP_NETIF_LOCKED
) )

304 
rc
 = 
	`ci_√tif_lock
(
ni
);

306 if–*
lock_Êags
 & 
CI_SLEEP_NETIF_LOCKED
 )

307 
	`ci_√tif_u∆ock
(
ni
);

310 if–*
lock_Êags
 & 
CI_SLEEP_NETIF_LOCKED
 ) {

311 
	`ci_√tif_u∆ock
(
ni
);

312 *
lock_Êags
 &=~ 
CI_SLEEP_NETIF_LOCKED
;

314 
	`ci_‰c64
(&
now_‰c
);

315 
	`ci_•ölo›_∑u£
();

318 #i‡
CI_CFG_SPIN_STATS


319 
ni
->
°©e
->
°©s
.
•ö_pkt_waô
++;

321 }  
now_‰c
 - 
°¨t_‰c
 < 
s
->
b
.
•ö_cy˛es
 );

323 
ni
->
°©e
->
is_•ö√r
 = 0;

324  
rc
;

325 
	}
}

330 
	$ci_√tif_pkt_waô
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
, 
lock_Êags
)

332 
rc
;

334 
	`ci_as£π
(!(
lock_Êags
 & 
CI_SLEEP_NETIF_LOCKED
Ë|| 
	`ci_√tif_is_locked
(
ni
));

336 #i‚de‡
__KERNEL__


337 if–
	`oo_≥r_thªad_gë
()->
•ö°©e
 & (1 << 
ONLOAD_SPIN_PKT_WAIT
) &&

338 
s
 !
NULL
) {

339 
d⁄e
 = 0;

340 
rc
 = 
	`ci_√tif_pkt_waô_•ö
(
ni
, 
s
, &
lock_Êags
, &
d⁄e
);

341 if–
d⁄e
 )

342  
rc
;

346 if–
	`ci_√tif_may_pﬁl
(
ni
Ë&& 
	`ci_√tif_has_evít
(ni) )

347 if–(
lock_Êags
 & 
CI_SLEEP_NETIF_LOCKED
Ë|| 
	`ci_√tif_åylock
(
ni
) ) {

348 
lock_Êags
 |
CI_SLEEP_NETIF_LOCKED
;

349 
	`ci_√tif_pﬁl
(
ni
);

350 if–
	`ci_√tif_pkt_tx_ˇn_Æloc_now
(
ni
) ) {

351 if–! (
lock_Êags
 & 
CI_SLEEP_NETIF_RQ
) )

352 
	`ci_√tif_u∆ock
(
ni
);

361 if–
lock_Êags
 & 
CI_SLEEP_NETIF_LOCKED
 ) {

362 
	`ci_√tif_u∆ock
(
ni
);

363 
lock_Êags
 &~
CI_SLEEP_NETIF_LOCKED
;

365 #ifde‡
__KERNEL__


366 
rc
 = 
	`eÁb_t˝_hñ≥r_pkt_waô
(
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
),

367 &
lock_Êags


368 
	`CI_BLOCKING_CTX_ARG
(
	`ci_blockög_˘x_¨g_√eded
()));

370 
rc
 = 
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
), 
OO_IOC_TCP_PKT_WAIT
,

371 &
lock_Êags
);

374 if–
rc
 =-
EINTR
 )

382 if–
rc
 < 0 || ! (
lock_Êags
 & 
CI_SLEEP_NETIF_RQ
) )

383  
rc
;

385 
rc
 = 
	`ci_√tif_lock
(
ni
);

386 if–
rc
 < 0 ) Ñc;

387 
lock_Êags
 |
CI_SLEEP_NETIF_LOCKED
;

389  ! 
	`ci_√tif_pkt_tx_ˇn_Æloc_now
(
ni
) );

392 
	}
}

	@tcp_sockopts.c

14 
	~"ù_öã∫Æ.h
"

15 
	~<ci/öã∫Æ/ù_°©s.h
>

16 
	~<ci/√t/sock›ts.h
>

18 #i‡!
deföed
(
__KERNEL__
)

19 
	~<√töë/t˝.h
>

21 
	#LPF
 "TCP SOCKOPTS "

	)

23 #ifde‡
__löux__


25 c⁄° 
	gsock_c⁄g°©e_löux_m≠
[] = {

26 
CI_TCPF_CA_O≥n
,

27 
CI_TCPF_CA_Loss
,

28 
CI_TCPF_CA_Recovîy
,

29 
CI_TCPF_CA_Loss
,

30 
CI_TCPF_CA_Recovîy
 | 
CI_TCPF_CA_Loss


35 
	$ci_t˝_öfo_gë
(
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
, 
ci_t˝_öfo
* 
uöfo
,

36 
sockÀn_t
* 
›éí
)

38 
ci_ùtime_t
 
now
 = 
	`ci_ù_time_now
(
√tif
);

39 
ci_t˝_öfo
 
öfo
;

41 
	`mem£t
(&
öfo
, 0, (info));

43 
öfo
.
t˝i_°©e
 = 
ci_sock_°©es_löux_m≠
[
	`CI_TCP_STATE_NUM
(
s
->
b
.
°©e
)];

46 
öfo
.
t˝i_©o
 =

47 
	`ci_ù_time_ticks2ms
(
√tif
,Çëif->
°©e
->
c⁄f
.
tc⁄°_dñack
) * 1000;

48 
öfo
.
t˝i_rcv_mss
 = 
CI_CFG_TCP_DEFAULT_MSS
;

57 if–
s
->
b
.
°©e
 !
CI_TCP_LISTEN
 ) {

58 
ci_t˝_°©e
* 
ts
 = 
	`SOCK_TO_TCP
(
s
);

60 
öfo
.
t˝i_pmtu
 = 
ts
->
pmtus
.
pmtu
;

61 
öfo
.
t˝i_ˇ_°©e
 = 
sock_c⁄g°©e_löux_m≠
[
ts
->
c⁄g°©e
];

62 
öfo
.
t˝i_ªå™smôs
 = 
ts
->
ªå™smôs
;

63 
öfo
.
t˝i_¥obes
 = 
ts
->
ka_¥obes
;

66 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 )

67 
öfo
.
t˝i_›ti⁄s
 |
CI_TCPI_OPT_TIMESTAMPS
;

68 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_ECN
 )

69 
öfo
.
t˝i_›ti⁄s
 |
CI_TCPI_OPT_ECN
;

70 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
 )

71 
öfo
.
t˝i_›ti⁄s
 |
CI_TCPI_OPT_SACK
;

73 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_WSCL
 ) {

74 
öfo
.
t˝i_›ti⁄s
 |
CI_TCPI_OPT_WSCALE
;

75 
öfo
.
t˝i_¢d_wsˇÀ
 = 
ts
->
¢d_ws˛
;

76 
öfo
.
t˝i_rcv_wsˇÀ
 = 
ts
->
rcv_ws˛
;

79 
öfo
.
t˝i_πo
 = 
	`ci_ù_time_ticks2ms
(
√tif
, 
ts
->
πo
) * 1000;

80 
öfo
.
t˝i_¢d_mss
 = 
ts
->
eff_mss
;

81 
öfo
.
t˝i_u«cked
 = 
ts
->
acks_≥ndög
 & 
CI_TCP_ACKS_PENDING_MASK
;

82 #i‡
CI_CFG_TCP_SOCK_STATS


83 
öfo
.
t˝i_ªå™s
 = 
ts
->
°©s_cumuœtive
.
cou¡
.
tx_ªå™s_pkt
;

85 #i‡
CI_CFG_CONGESTION_WINDOW_VALIDATION


86 
öfo
.
t˝i_œ°_d©a_£¡
 = 
	`ci_ù_time_ticks2ms
(
√tif
,

87 
now
 - 
ts
->
t_œ°_£¡
);

89 
öfo
.
t˝i_œ°_d©a_£¡
 = 0;

91 
öfo
.
t˝i_œ°_d©a_ªcv
 = 
	`ci_ù_time_ticks2ms
(
√tif
,

92 
now
 - 
ts
->
t•aws
);

94 
öfo
.
t˝i_πt
 = 
	`ci_ù_time_ticks2ms
(
√tif
, 
ts
->
ß
) * 1000 / 8;

95 
öfo
.
t˝i_πtv¨
 = 
	`ci_ù_time_ticks2ms
(
√tif
, 
ts
->
sv
) * 1000 / 4;

96 
öfo
.
t˝i_rcv_s°hªsh
 = 
ts
->
s°hªsh
;

97 if–
	`t˝_eff_mss
(
ts
) != 0 ) {

98 
öfo
.
t˝i_¢d_s°hªsh
 = 
ts
->
s°hªsh
 / 
	`t˝_eff_mss
(ts);

99 
öfo
.
t˝i_¢d_cwnd
 = 
ts
->
cwnd
 / 
	`t˝_eff_mss
(ts);

102 
öfo
.
t˝i_¢d_s°hªsh
 = 0;

103 
öfo
.
t˝i_¢d_cwnd
 = 0;

105 
öfo
.
t˝i_advmss
 = 
ts
->
amss
;

107 i‡–
	`NI_OPTS
(
√tif
).
t˝_rcvbuf_mode
 == 1 ) {

108 
öfo
.
t˝i_rcv_πt
 = info.
t˝i_πt
;

109 
öfo
.
t˝i_rcv_•a˚
 = 
ts
->
rcvbuf_drs
.
byãs
;

112 
öfo
.
t˝i_rcv_πt
 = 0;

113 
öfo
.
t˝i_rcv_•a˚
 = 
	`t˝_rcv_wnd_right_edge_£¡
(
ts
Ë-Ås->
rcv_added
;

115 
öfo
.
t˝i_tŸÆ_ªå™s
 = 
ts
->
°©s
.
tŸÆ_ªå™s
;

123 if–*
›éí
 > (
öfo
) )

124 *
›éí
 = (
öfo
);

125 
	`mem˝y
(
uöfo
, &
öfo
, *
›éí
);

128 
	}
}

133 
	$ci_gë_sﬁ_t˝
(
ci_√tif
* 
√tif
, 
ci_sock_cmn
* 
s
, 
›äame
, *
›tvÆ
,

134 
sockÀn_t
 *
›éí
 )

136 #i‡
	`deföed
(
__löux__
) || \

137 
	`deföed
(
__sun__
Ë&& deföed(
TCP_KEEPALIVE_THRESHOLD
) || \

138 
	`deföed
(
__sun__
Ë&& deföed(
TCP_KEEPALIVE_ABORT_THRESHOLD
)

139 
ci_t˝_sockë_cmn
 *
c
 = &(
	`SOCK_TO_WAITABLE_OBJ
(
s
)->
t˝
.c);

141 
u
 = 0;

143 
›äame
){

144 
TCP_NODELAY
:

146 
u
 = ((
s
->
s_aÊags
 & 
CI_SOCK_AFLAG_NODELAY
) != 0);

147 
u_out
;

148 #ifde‡ 
__unix__


149 
TCP_MAXSEG
:

151 i‡((
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
)) {

152 
u
 = 
	`t˝_eff_mss
(
	`SOCK_TO_TCP
(
s
));

154 
u
 = 536;

156 
u_out
;

157 #ifde‡
TCP_CORK


158 
TCP_CORK
:

161 
u
 = ((
s
->
s_aÊags
 & 
CI_SOCK_AFLAG_CORK
) != 0);

162 
u_out
;

165 #i‡
	`deföed
(
__sun__
)

166 #ifde‡
TCP_KEEPALIVE_THRESHOLD


167 
TCP_KEEPALIVE_THRESHOLD
:

169 
u
 = (Ë
c
->
t_ka_time_ö_£cs
 * 1000;

171 
u_out
;

174 #ifde‡
TCP_KEEPALIVE_ABORT_THRESHOLD


175 
TCP_KEEPALIVE_ABORT_THRESHOLD
:

177 
u
 = 
c
->
ka_¥obe_th
 * 
CI_TCP_TCONST_RTO_INITIAL
;

179 
u_out
;

183 #ifde‡
__löux__


184 
TCP_KEEPIDLE
:

187 
u
 = (Ë
c
->
t_ka_time_ö_£cs
;

189 
u_out
;

190 
TCP_KEEPINTVL
:

193 
u
 = (Ë
c
->
t_ka_ötvl_ö_£cs
;

195 
u_out
;

196 
TCP_KEEPCNT
:

199 
u
 = 
c
->
ka_¥obe_th
;

201 
u_out
;

202 
TCP_INFO
:

203 #i‚de‡
__KERNEL__


205  
	`ci_t˝_öfo_gë
(
√tif
, 
s
, (
ci_t˝_öfo
*Ë
›tvÆ
, 
›éí
);

210 
	`ci_as£π
(0);

212 
TCP_DEFER_ACCEPT
:

214 
u
 = 0;

215 if–
c
->
t˝_de„r_ac˚±
 !
OO_TCP_DEFER_ACCEPT_OFF
 ) {

216 
u
 = 
	`ci_ù_time_ticks2ms
(
√tif
, 
	`NI_CONF
“ëif).
tc⁄°_πo_öôül
);

217 
u
 = ((u + 500Ë/ 1000Ë* ( (1 << 
c
->
t˝_de„r_ac˚±
) - 1);

219 
u_out
;

221 
TCP_QUICKACK
:

223 
u
 = 0;

224 if–
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
 ) {

225 
ci_t˝_°©e
* 
ts
 = 
	`SOCK_TO_TCP
(
s
);

226 
u
 = 
	`ci_t˝_is_ö_Á°°¨t
(
ts
);

228 
u_out
;

233 #i‚de‡
__KERNEL__


234 
	`LOG_TC
–
	`log
(
LPF
 "getsockopt: unimplemented or bad option: %i",

235 
›äame
));

236 
	`RET_WITH_ERRNO
(
ENOPROTOOPT
);

241 
	`ci_as£π
(0);

247 
u_out
:

248  
	`ci_gësock›t_föÆ
(
›tvÆ
, 
›éí
, 
IPPROTO_TCP
, &
u
, (u));

249 
	}
}

252 #i‡!
deföed
(
__KERNEL__
)

253 
	$ci_t˝_gësock›t
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
, 
Àvñ
,

254 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
 )

256 
ci_sock_cmn
* 
s
 = 
ï
->s;

257 
ci_√tif
* 
√tif
 = 
ï
->netif;

270 if(
Àvñ
 =
SOL_SOCKET
) {

271 #i‡
	`deföed
(
__sun__
)

272 if–
	`CI_UNLIKELY
(*(
sockÀn_t
 *)
›éí
 == 0) )

273 
	`RET_WITH_ERRNO
(
EINVAL
);

276 if–
›äame
 =
SO_SNDBUF
 &&

277 
	`NI_OPTS
(
√tif
).
t˝_¢dbuf_mode
 == 2 &&

278 
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
 ) {

280 
ci_t˝_°©e
* 
ts
 = 
	`SOCK_TO_TCP
(
s
);

281 
	`ci_t˝_£t_¢dbuf_‰om_¢dbuf_pkts
(
√tif
, 
ts
);

285  
	`ci_gë_sﬁ_sockë
(
√tif
, 
s
, 
›äame
, 
›tvÆ
, 
›éí
);

288 i‡(
Àvñ
 =
IPPROTO_IP
) {

290  
	`ci_gë_sﬁ_ù
(
√tif
, 
s
, 
fd
, 
›äame
, 
›tvÆ
, 
›éí
);

292 #i‡
CI_CFG_FAKE_IPV6


294 i‡(
Àvñ
 =
IPPROTO_IPV6
 && 
s
->
domaö
 =
AF_INET6
) {

296  
	`ci_gë_sﬁ_ù6
(
s
, 
fd
, 
›äame
, 
›tvÆ
, 
›éí
);

300 i‡(
Àvñ
 =
IPPROTO_TCP
) {

302  
	`ci_gë_sﬁ_t˝
(
√tif
, 
s
, 
›äame
, 
›tvÆ
, 
›éí
);

305 
	`SOCKOPT_RET_INVALID_LEVEL
(
s
);

307 
	}
}

309 
	$ci_t˝_£tsock›t_lk
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
, 
Àvñ
,

310 
›äame
, c⁄° * 
›tvÆ
,

311 
sockÀn_t
 
›éí
 )

313 
ci_sock_cmn
* 
s
 = 
ï
->s;

314 #i‡
	`deföed
(
__löux__
) || \

315 
	`deföed
(
__sun__
Ë&& deföed(
TCP_KEEPALIVE_THRESHOLD
) || \

316 
	`deföed
(
__sun__
Ë&& deföed(
TCP_KEEPALIVE_ABORT_THRESHOLD
)

317 
ci_t˝_sockë_cmn
* 
c
 = &(
	`SOCK_TO_WAITABLE_OBJ
(
s
)->
t˝
.c);

319 
ci_√tif
* 
√tif
 = 
ï
->netif;

320 
zîovÆ
 = 0;

321 
rc
;

328 i‡(
›éí
 == 0) {

332 
›tvÆ
 = &
zîovÆ
;

333 
›éí
 = (
zîovÆ
);

339 if(
Àvñ
 =
SOL_SOCKET
) {

340 
›äame
) {

341 
SO_KEEPALIVE
:

344 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

345 
Áû_övÆ
;

347 if–*(*Ë
›tvÆ
 ) {

348 
¥ev_Êags
 = 
s
->
s_Êags
;

349 
s
->
s_Êags
 |
CI_SOCK_FLAG_KALIVE
;

352 if–
s
->
b
.
°©e
 !
CI_TCP_CLOSED
 && s->b.°©ê!
CI_TCP_LISTEN
 &&

353 !(
¥ev_Êags
 & 
CI_SOCK_FLAG_KALIVE
) ) {

354 
ci_t˝_°©e
* 
ts
 = 
	`SOCK_TO_TCP
(
s
);

355 
	`LOG_TV
(
	`log
("%s: "
NSS_FMT
"Ñun KEEPALIVEÅimer from setsockopt()",

356 
__FUNCTION__
, 
	`NSS_PRI_ARGS
(
√tif
, 
s
)));

357 
	`ci_as£π
(
ts
->
ka_¥obes
 == 0);

358 
	`ci_t˝_kÆive_ª°¨t
(
√tif
, 
ts
, 
	`ci_t˝_kÆive_idÀ_gë
(ts));

362 
s
->
s_Êags
 &=~ 
CI_SOCK_FLAG_KALIVE
;

363 if–
s
->
b
.
°©e
 !
CI_TCP_LISTEN
 ) {

364 
ci_t˝_°©e
* 
ts
 = 
	`SOCK_TO_TCP
(
s
);

365 
	`ci_t˝_kÆive_check_™d_˛ór
(
√tif
, 
ts
);

366 
ts
->
ka_¥obes
 = 0;

374  
	`ci_£t_sﬁ_sockë
(
√tif
, 
s
, 
›äame
, 
›tvÆ
, 
›éí
);

378 if–
Àvñ
 =
IPPROTO_IP
 ) {

380  
	`ci_£t_sﬁ_ù
(
√tif
, 
s
, 
›äame
, 
›tvÆ
, 
›éí
);

382 if–
Àvñ
 =
IPPROTO_TCP
 ) {

383 
›äame
) {

384 #ifde‡
__unix__


385 #ifde‡
TCP_CORK


386 
TCP_CORK
:

387 if–*(*Ë
›tvÆ
 ) {

388 
	`ci_bô_£t
(&
s
->
s_aÊags
, 
CI_SOCK_AFLAG_CORK_BIT
);

390 
	`ci_bô_˛ór
(&
s
->
s_aÊags
, 
CI_SOCK_AFLAG_CORK_BIT
);

400 if–
s
->
b
.
°©e
 !
CI_TCP_LISTEN
 ) {

401 
ci_t˝_°©e
* 
ts
 = 
	`SOCK_TO_TCP
(
s
);

402 if–
ts
->
£nd
.
num
 == 1 ) {

403 
	`TX_PKT_TCP
(
	`PKT_CHK
(
√tif
, 
ts
->
£nd
.
hód
))->
t˝_Êags
 |=

404 
CI_TCP_FLAG_PSH
;

405 
	`ci_t˝_tx_adv™˚
(
ts
, 
√tif
);

412 
TCP_NODELAY
:

413 if–
	`NI_OPTS
(
√tif
).
t˝_f‹˚_nodñay
 )

415 if–*(*Ë
›tvÆ
 ) {

416 
	`ci_bô_£t
(&
s
->
s_aÊags
, 
CI_SOCK_AFLAG_NODELAY_BIT
);

418 if–
s
->
b
.
°©e
 !
CI_TCP_LISTEN
 ) {

419 
ci_t˝_°©e
* 
ts
 = 
	`SOCK_TO_TCP
(
s
);

420 
ci_uöt32
 
c‹k
;

422 if–
ts
->
£nd
.
num
 == 1 ) {

426 if–(
c‹k
 = (
s
->
s_aÊags
 & 
CI_SOCK_AFLAG_CORK
)) )

427 
	`ci_bô_˛ór
(&
s
->
s_aÊags
, 
CI_SOCK_AFLAG_CORK_BIT
);

429 if–
	`ci_ù_queue_nŸ_em±y
(&
ts
->
£nd
) )

430 
	`ci_t˝_tx_adv™˚
(
ts
, 
√tif
);

432 i‡–
c‹k
 )

433 
	`ci_bô_£t
(&
s
->
s_aÊags
, 
CI_SOCK_AFLAG_CORK_BIT
);

438 
	`ci_bô_˛ór
(&
s
->
s_aÊags
, 
CI_SOCK_AFLAG_NODELAY_BIT
);

441 #i‡
	`deföed
(
__sun__
)

442 #ifde‡
TCP_KEEPALIVE_THRESHOLD


443 
TCP_KEEPALIVE_THRESHOLD
:

444 
c
->
t_ka_time
 = 
	`ci_ù_time_ms2ticks_¶ow
(
√tif
, *(*)
›tvÆ
);

445 
c
->
t_ka_time_ö_£cs
 = *(*)
›tvÆ
 / 1000;

449 #ifde‡
TCP_KEEPALIVE_ABORT_THRESHOLD


450 
TCP_KEEPALIVE_ABORT_THRESHOLD
:

452 
c
->
ka_¥obe_th
 = *(*)
›tvÆ
 / 
CI_TCP_TCONST_RTO_INITIAL
;

457 #ifde‡
__löux__


458 
TCP_MAXSEG
:

460 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

461 
Áû_övÆ
;

462 if–(*(*)
›tvÆ
 < 8) ||

463 (*(*)
›tvÆ
 > 
CI_CFG_TCP_MAX_WINDOW
)) {

464 
rc
 = -
EINVAL
;

465 
Áû_övÆ
;

467 
c
->
u£r_mss
 = (
ci_uöt16
Ë*(*Ë
›tvÆ
;

470 
TCP_KEEPIDLE
:

472 
c
->
t_ka_time
 = 
	`ci_ù_time_ms2ticks_¶ow
(
√tif
, *(*)
›tvÆ
*1000);

473 
c
->
t_ka_time_ö_£cs
 = *(*)
›tvÆ
;

476 
TCP_KEEPINTVL
:

478 
c
->
t_ka_ötvl
 = 
	`ci_ù_time_ms2ticks_¶ow
(
√tif
, *(*)
›tvÆ
*1000);

479 
c
->
t_ka_ötvl_ö_£cs
 = *(*)
›tvÆ
;

482 
TCP_KEEPCNT
:

484 
c
->
ka_¥obe_th
 = *(*)
›tvÆ
;

486 
TCP_DEFER_ACCEPT
:

487 if–*(*Ë
›tvÆ
 > 0 ) {

489 
timeo
 = 
	`CI_MIN
(*(*Ë
›tvÆ
, 100000) * 1000;

490 
timeo
 = 
	`ci_ù_time_ms2ticks_¶ow
(
√tif
,Åimeo);

491 
timeo
 = 
	`CI_MIN
—imeo, 
	`NI_CONF
(
√tif
).
tc⁄°_πo_max
);

492 
c
->
t˝_de„r_ac˚±
 = 1;

493  
timeo
 > ((Ë
	`NI_CONF
(
√tif
).
tc⁄°_πo_öôül
 *

494 ((1 << 
c
->
t˝_de„r_ac˚±
) - 1)) &&

495 
c
->
t˝_de„r_ac˚±
 <
CI_CFG_TCP_SYNACK_RETRANS_MAX
 )

496 ++
c
->
t˝_de„r_ac˚±
;

499 
c
->
t˝_de„r_ac˚±
 = 
OO_TCP_DEFER_ACCEPT_OFF
;

501 
TCP_QUICKACK
:

503 if–
s
->
b
.
°©e
 & 
CI_TCP_STATE_TCP_CONN
 ) {

504 
ci_t˝_°©e
* 
ts
 = 
	`SOCK_TO_TCP
(
s
);

505 if–*(*Ë
›tvÆ
 != 0 ) {

506 
	`CITP_TCP_FASTSTART
(
ts
->
Á°°¨t_acks
 =

507 
	`NI_OPTS
(
√tif
).
t˝_Á°°¨t_idÀ
);

508 if–
ts
->
acks_≥ndög
 ) {

509 
ci_ù_pkt_fmt
* 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
√tif
);

510 if–
	`CI_LIKELY
(
pkt
 !
NULL
) )

511 
	`ci_t˝_£nd_ack
(
√tif
, 
ts
, 
pkt
, 
CI_FALSE
);

515 
ts
->
t˝Êags
 |
CI_TCPT_FLAG_NO_QUICKACK
;

516 
	`CITP_TCP_FASTSTART
(
ts
->
Á°°¨t_acks
 = 0);

523 
	`LOG_TC
(
	`log
("%s: "
NSS_FMT
" option %i unimplemented (ENOPROTOOPT)",

524 
__FUNCTION__
, 
	`NSS_PRI_ARGS
(
√tif
,
s
), 
›äame
));

525 
	`RET_WITH_ERRNO
(
ENOPROTOOPT
);

529 
	`LOG_U
(
	`log
(
FNS_FMT
 "unknownÜevel=%d optname=%dáccepted by O/S",

530 
	`FNS_PRI_ARGS
(
√tif
, 
s
), 
Àvñ
, 
›äame
));

535 
Áû_övÆ
:

536 
	`LOG_TC
(
	`log
("%s: "
NSS_FMT
" option %i badÖaram (EINVAL or EFAULT)",

537 
__FUNCTION__
, 
	`NSS_PRI_ARGS
(
√tif
,
s
), 
›äame
));

538 
	`RET_WITH_ERRNO
(-
rc
);

539 
	}
}

551 
	$ci_t˝_£tsock›t
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
, 
Àvñ
,

552 
›äame
, c⁄° * 
›tvÆ
,

553 
sockÀn_t
 
›éí
 )

555 
ci_sock_cmn
* 
s
 = 
ï
->s;

556 
ci_√tif
* 
ni
 = 
ï
->
√tif
;

557 
rc
 = 0;

559 
	`ci_√tif_lock_cou¡
(
ni
, 
£tsock›t_ni_lock_c⁄ãnds
);

569 if–! (
s
->
b
.
°©e
 & 
CI_TCP_STATE_SYNCHRONISED
) ) {

570 
ci_fd_t
 
os_sock
 = 
CI_FD_BAD
;

571 if–
s
->
b
.
sb_aÊags
 & 
CI_SB_AFLAG_OS_BACKED
 )

572 
os_sock
 = 
	`ci_gë_os_sock_fd
(
fd
);

573 if–
	`CI_IS_VALID_SOCKET
(
os_sock
) ) {

574 
rc
 = 
	`ci_sys_£tsock›t
(
os_sock
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
);

575 
	`ci_ªl_os_sock_fd
(
os_sock
);

576 if–
rc
 != 0 &&

577 ! 
	`ci_£tsock›t_os_Áû_ign‹e
(
ni
, 
s
, 
î∫o
, 
Àvñ
, 
›äame
,

578 
›tvÆ
, 
›éí
) ) {

579 
u∆ock_out
;

581 
rc
 = 0;

585 if–
Àvñ
 =
SOL_SOCKET
 ) {

586 
rc
 = 
	`ci_£t_sﬁ_sockë_nﬁock
(
ni
, 
s
, 
›äame
, 
›tvÆ
, 
›éí
);

587 if–
rc
 <0 ) 
u∆ock_out
;

589 if–
Àvñ
 =
IPPROTO_IPV6
 ) {

590 #ifde‡
IPV6_V6ONLY


591 if–
›äame
 =
IPV6_V6ONLY
 && *(*Ë
›tvÆ
 )

592 
rc
 = 
CI_SOCKET_HANDOVER
;

596 
u∆ock_out
;

599 
rc
 = 
	`ci_t˝_£tsock›t_lk
(
ï
, 
fd
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
);

601 
u∆ock_out
:

602 
	`ci_√tif_u∆ock
(
ni
);

603  
rc
;

604 
	}
}

	@tcp_stats.c

13 
	~"ù_öã∫Æ.h
"

16 #i‡
CI_CFG_TCP_SOCK_STATS


25 
ci_ölöe
 

26 
	$ci_t˝_°©s_h™dÀ_timî
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

27 
ci_ùtime_t
 
timeout
)

29 
ci_ù_timî
* 
ô
;

30 
	`ci_as£π
–
ni
 && 
ts
 );

31 
ô
 = &
ts
->
°©s_tid
;

33 
	`LOG_STATS
–
	`ci_log
–"%s–%p, %p, %d)", 
__FUNCTION__
, 
ni
, 
ts
, ()
timeout
));

34 if–
	`ci_ù_timî_≥ndög
(
ni
, 
ô
 ) ) {

35 if–
timeout
 == 0 )

36 
	`ci_ù_timî_˛ór
(
ni
, 
ô
 );

38 
	`ci_ù_timî_modify
(
ni
, 
ô
, 
	`ci_t˝_time_now
“i)+
timeout
);

40 if–
timeout
 != 0 )

41 
	`ci_ù_timî_£t
(
ni
, 
ô
, 
	`ci_t˝_time_now
“i)+
timeout
);

43 
	}
}

46 
ci_ölöe
 

47 
	$ci_t˝_°©s_öô_d©a
–
ci_ù_sock_°©s
* 
t˝_°©s
)

49 
˘r
;

50 
CI_IP_STATS_TYPE
* 
de°
;

52 
	`ci_as£π
–
t˝_°©s
 );

53 
	`mem£t
–&
t˝_°©s
->
cou¡
, 0,

54 (
t˝_°©s
->
cou¡
));

56 
	`mem£t
–&
t˝_°©s
->
a˘uÆ
, 0,

57 (
t˝_°©s
->
a˘uÆ
));

59 
de°
 = (
CI_IP_STATS_TYPE
*)&
t˝_°©s
->
mö
;

60  
˘r
 =0; cå < 
CI_IP_SOCK_STATS_MIN_LEN
; ctr++ )

61 
de°
[
˘r
] = 
CI_IP_STATS_MAX_VAL
;

63 
de°
 = (
CI_IP_STATS_TYPE
*)&
t˝_°©s
->
max
;

64  
˘r
 =0; cå < 
CI_IP_SOCK_STATS_MAX_LEN
; ctr++ )

65 
de°
[
˘r
] = 
CI_IP_STATS_MIN_VAL
;

66 
	}
}

71 
	$ci_t˝_°©s_öô
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

73 
vÆ
;

75 
	`ci_as£π
–
ni
 && 
ts
 );

76 
	`LOG_STATS
–
	`ci_log
("%s(%p, %p)", 
__FUNCTION__
, 
ni
, 
ts
 ));

78 
ts
->
°©s_fmt
 = 
CI_IP_STATS_OUTPUT_DEFAULT
;

79 
vÆ
 = 
CI_TCONST_STATS
;

81 
	`NI_CONF
(
ni
).
tc⁄°_°©s
 = 
vÆ
 ? 
	`ci_t˝_time_ms2ticks
(ni, val) : 0;

83 
	`LOG_STATS
–
	`ci_log
("Statistics: %uÅicks, %dmS, (format:%s)",

84 
	`NI_CONF
(
ni
).
tc⁄°_°©s
, 
vÆ
,

85 
ts
->
°©s_fmt
 ? "Text" : "XML" ));

86 
	`ci_t˝_°©s_öô_d©a
–&
ts
->
°©s_¢≠shŸ
 );

87 
	`ci_t˝_°©s_öô_d©a
–&
ts
->
°©s_cumuœtive
 );

90 if–
vÆ
 )

91 
	`ci_t˝_°©s_a˘i⁄
–
ni
, 
ts
, 
CI_IP_STATS_START
,

92 
CI_IP_STATS_OUTPUT_DEFAULT
, 
NULL
, NULL );

93 
	}
}

98 
	$ci_t˝_°©s_upd©e
–
ci_t˝_°©e
* 
ts
 )

100 
˘r
;

101 
CI_IP_STATS_TYPE
* 
§c
;

102 
CI_IP_STATS_TYPE
* 
de°
;

104 
ts
->
°©s_cumuœtive
.
now
 =Ås->
°©s_¢≠shŸ
.now;

106 
§c
 = (
CI_IP_STATS_TYPE
*)&
ts
->
°©s_¢≠shŸ
.
cou¡
;

107 
de°
 = (
CI_IP_STATS_TYPE
*)&
ts
->
°©s_cumuœtive
.
cou¡
;

108  
˘r
 =0; cå < 
CI_IP_SOCK_STATS_COUNT_LEN
; ctr++ )

109 
de°
[
˘r
] +
§c
[ctr];

111 
§c
 = (
CI_IP_STATS_TYPE
*)&
ts
->
°©s_¢≠shŸ
.
a˘uÆ
;

112 
de°
 = (
CI_IP_STATS_TYPE
*)&
ts
->
°©s_cumuœtive
.
a˘uÆ
;

113  
˘r
 =0; cå < 
CI_IP_SOCK_STATS_ACTUAL_LEN
; ctr++ ) {

114 
de°
[
˘r
] = 
§c
[ctr];

117 
§c
 = (
CI_IP_STATS_TYPE
*)&
ts
->
°©s_¢≠shŸ
.
mö
;

118 
de°
 = (
CI_IP_STATS_TYPE
*)&
ts
->
°©s_cumuœtive
.
mö
;

119  
˘r
 =0; cå < 
CI_IP_SOCK_STATS_MIN_LEN
; ctr++ ) {

120 if–
de°
[
˘r
] > 
§c
[ctr] )

121 
de°
[
˘r
] = 
§c
[ctr];

124 
§c
 = (
CI_IP_STATS_TYPE
*)&
ts
->
°©s_¢≠shŸ
.
max
;

125 
de°
 = (
CI_IP_STATS_TYPE
*)&
ts
->
°©s_cumuœtive
.
max
;

126  
˘r
 =0; cå < 
CI_IP_SOCK_STATS_MAX_LEN
; ctr++ ) {

127 if–
de°
[
˘r
] < 
§c
[ctr] )

128 
de°
[
˘r
] = 
§c
[ctr];

131 
	`ci_t˝_°©s_öô_d©a
–&
ts
->
°©s_¢≠shŸ
 );

132 
	}
}

134 
	#__SS
(
s
Ë(s)->
°©s_¢≠shŸ


	)

135 
	#__CU
(
s
Ë(s)->
°©s_cumuœtive


	)

137 
	#__TEXT_TCP_COUNT_FMT
 "%u/%u"

	)

138 
	#__TEXT_TCP_COUNT
(
s
,
Fld
) \

139 (
s
)->
°©s_¢≠shŸ
.
cou¡
.
Fld
, (s)->
°©s_cumuœtive
.cou¡.
	)
Fld

141 
	#__TEXT_TCP_MINMAX_FMT
 " Mn:%u/%u Mx:%u/%u"

	)

142 
	#__TEXT_TCP_MINMAX
(
s
,
Fld
) \

143 
	`__SS
(
s
).
mö
.
Fld
 =
CI_IP_STATS_MAX_VAL
 ? 0 : __SS(s).min.Fld, \

144 
	`__CU
(
s
).
mö
.
Fld
 =
CI_IP_STATS_MAX_VAL
 ? 0 : __CU(s).min.Fld, \

145 (
s
)->
°©s_¢≠shŸ
.
max
.
Fld
, \

146 (
s
)->
°©s_cumuœtive
.
max
.
Fld


	)

148 
	#__TEXT_TCP_CUR_MINMAX_FMT
 "%u Mn:%u/%u Mx:%u/%u"

	)

149 
	#__TEXT_TCP_CUR_MINMAX
(
s
,
Fld
Ë(s)->
°©s_¢≠shŸ
.
a˘uÆ
.Fld, \

150 
	`__SS
(
s
).
mö
.
Fld
 =
CI_IP_STATS_MAX_VAL
 ? 0 : __SS(s).min.Fld, \

151 
	`__CU
(
s
).
mö
.
Fld
 =
CI_IP_STATS_MAX_VAL
 ? 0 : __CU(s).min.Fld, \

152 (
s
)->
°©s_¢≠shŸ
.
max
.
Fld
, \

153 (
s
)->
°©s_cumuœtive
.
max
.
Fld


	)

155 #i‡
CI_CFG_SEND_STATS_TO_LOG


156 
	#__TEXT_TCP_LOG
 
log


	)

158 
	#__TEXT_TCP_LOG
(
fmt
, 
¨gs
...) \

159 i‡(
Àn
 < 
cou¡
) { \

160 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
cou¡
 -Üí, 
fmt
 "\n", 
¨gs
); \

161 }

	)

164 
	#__TEXT_TCP_COUNT_LOG
(
«me
, 
group
, 
fõld
) \

165 
	`__TEXT_TCP_LOG
(
__TEXT_NETIF_COUNT_FMT
, \

166 (
«me
), 
	`__TEXT_NETIF_COUNT
(
√tif
, 
group
, 
fõld
)); \

167 }

	)

172 
	$ci_t˝_°©s_ªp‹t_ãxt
(
ci_t˝_°©e
* 
ts
, *
buf
, 
cou¡
)

174 #i‡
CI_CFG_SEND_STATS_TO_LOG
==0

175 
Àn
 = 0;

177 i‡(
cou¡
 <= 0)

182 
	`__TEXT_TCP_LOG
–"STATS f‹ %d (%sPËtime: %u/%u (%uËmS", 
	`S_SP
(
ts
),

183 
ts
->
udpÊags
 & 
CI_UDPF_IN_USE
 ? "UD" : "TC",

184 
ts
->
°©s_¢≠shŸ
.
now
,Ås->
°©s_cumuœtive
.now,

185 
ts
->
°©s_¢≠shŸ
.
now
 -Ås->
°©s_cumuœtive
.now);

188 
	`__TEXT_TCP_LOG
–"Tx: byã:" 
__TEXT_TCP_COUNT_FMT
 "Ökt:" __TEXT_TCP_COUNT_FMT,

189 
	`__TEXT_TCP_COUNT
(
ts
, 
tx_byã
), __TEXT_TCP_COUNT—s, 
tx_pkt
));

191 
	`__TEXT_TCP_LOG
–" slow:" 
__TEXT_TCP_COUNT_FMT
 " ReTx:"

192 
__TEXT_TCP_COUNT_FMT
,

193 
	`__TEXT_TCP_COUNT
(
ts
, 
tx_¶ow∑th
),

194 
	`__TEXT_TCP_COUNT
(
ts
, 
tx_ªå™s_pkt
));

196 
	`__TEXT_TCP_LOG
–" sÀï:" 
__TEXT_TCP_COUNT_FMT
 "Åime:"

197 
__TEXT_TCP_MINMAX_FMT
,

198 
	`__TEXT_TCP_COUNT
(
ts
, 
tx_¶ìp
),

199 
	`__TEXT_TCP_MINMAX
(
ts
, 
tx_¶ì±ime
) );

201 
	`__TEXT_TCP_LOG
–" Wö:" 
__TEXT_TCP_CUR_MINMAX_FMT
,

202 
	`__TEXT_TCP_CUR_MINMAX
(
ts
, 
tx_wö
));

204 
	`__TEXT_TCP_LOG
–" WSCL:" 
__TEXT_TCP_CUR_MINMAX_FMT
,

205 
	`__TEXT_TCP_CUR_MINMAX
(
ts
, 
tx_ws˛
));

207 
	`__TEXT_TCP_LOG
–"Rx: byã:" 
__TEXT_TCP_COUNT_FMT
 "Ökt:"

208 
__TEXT_TCP_COUNT_FMT
 " slow:" __TEXT_TCP_COUNT_FMT,

209 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_byã
), __TEXT_TCP_COUNT—s, 
rx_pkt
),

210 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_¶ow∑th
));

212 
	`__TEXT_TCP_LOG
–" SeqEr:" 
__TEXT_TCP_COUNT_FMT
 " AckEr:"

213 
__TEXT_TCP_COUNT_FMT
 " PawsEr:" __TEXT_TCP_COUNT_FMT,

214 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_£qîr
), __TEXT_TCP_COUNT—s, 
rx_ackîr
),

215 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_∑w£º
));

217 
	`__TEXT_TCP_LOG
–" DupAk:" 
__TEXT_TCP_COUNT_FMT
 " daFRec:"

218 
__TEXT_TCP_COUNT_FMT
 " daCongFRec:" __TEXT_TCP_COUNT_FMT,

219 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_du∑ck
),

220 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_du∑ck_‰ec
),

221 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_du∑ck_c⁄g‰ec
));

223 
	`__TEXT_TCP_LOG
–" Zwö:" 
__TEXT_TCP_COUNT_FMT
" Ooo:" __TEXT_TCP_COUNT_FMT,

224 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_zwö
), __TEXT_TCP_COUNT—s, 
rx_ooo
));

226 
	`__TEXT_TCP_LOG
–" BadSyn:" 
__TEXT_TCP_COUNT_FMT
 " bsSeq:" __TEXT_TCP_COUNT_FMT,

227 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_badsyn
),

228 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_badsyn£q
));

230 
	`__TEXT_TCP_LOG
–" SynDup:" 
__TEXT_TCP_COUNT_FMT
 " SynNonAk:"

231 
__TEXT_TCP_COUNT_FMT
 " SynBadAk:" __TEXT_TCP_COUNT_FMT,

232 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_syndup
),

233 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_sy¬⁄ack
),

234 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_synbadack
));

236 
	`__TEXT_TCP_LOG
–" waô:" 
__TEXT_TCP_COUNT_FMT
,

237 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_waô
));

239 
	`__TEXT_TCP_LOG
–" sÀï:" 
__TEXT_TCP_COUNT_FMT


240 "Åime:" 
__TEXT_TCP_MINMAX_FMT
,

241 
	`__TEXT_TCP_COUNT
(
ts
, 
rx_¶ìp
),

242 
	`__TEXT_TCP_MINMAX
(
ts
, 
rx_¶ì±ime
) );

244 
	`__TEXT_TCP_LOG
–" Wö:" 
__TEXT_TCP_CUR_MINMAX_FMT
,

245 
	`__TEXT_TCP_CUR_MINMAX
(
ts
, 
rx_wö
));

247 
	`__TEXT_TCP_LOG
–" WSCL:" 
__TEXT_TCP_CUR_MINMAX_FMT
,

248 
	`__TEXT_TCP_CUR_MINMAX
(
ts
, 
rx_ws˛
));

250 
	`__TEXT_TCP_LOG
–" RTT:" 
__TEXT_TCP_CUR_MINMAX_FMT
,

251 
	`__TEXT_TCP_CUR_MINMAX
(
ts
, 
πt
));

253 
	`__TEXT_TCP_LOG
–" SRTT:" 
__TEXT_TCP_CUR_MINMAX_FMT
,

254 
	`__TEXT_TCP_CUR_MINMAX
(
ts
, 
§â
));

256 
	`__TEXT_TCP_LOG
–" RTO:" 
__TEXT_TCP_CUR_MINMAX_FMT
,

257 
	`__TEXT_TCP_CUR_MINMAX
(
ts
, 
πo
));

259 
	`__TEXT_TCP_LOG
–" RTTO:" 
__TEXT_TCP_COUNT_FMT
,

260 
	`__TEXT_TCP_COUNT
(
ts
, 
πto
));

262 
	`__TEXT_TCP_LOG
–" C⁄g:" 
__TEXT_TCP_COUNT_FMT
,

263 
	`__TEXT_TCP_COUNT
(
ts
, 
c⁄g
));

265 #i‡
CI_CFG_SEND_STATS_TO_LOG
==0

266 i‡(
Àn
 =
cou¡
)

267 
Àn
--;

269 
buf
[
Àn
++] = '\0';

271  
Àn
;

275 
	}
}

277 
	#__XML_TCP_DATASTART_FMT
 \

282 " <cumuœtive_time>%u</cumuœtive_time>\n"

	)

284 
	#__XML_TCP_DATASTART
(
ST
) \

285 
	`S_SP
(
ST
), \

286 (
ST
)->
udpÊags
 & 
CI_UDPF_IN_USE
 ? 1 : 0, \

287 (
ST
)->
°©s_¢≠shŸ
.
now
,(ST)->
°©s_cumuœtive
.
	)
now

289 
	#__XML_TCP_DATAEND_FMT
 "</ªc‹d>\n"

	)

291 
	#__XML_TCP_COUNT_FMT
 \

295 " </íåy>\n"

	)

296 
	#__XML_TCP_COUNT
(
NM
, 
ST
,
FLD
) \

297 (
NM
), (
ST
)->
°©s_¢≠shŸ
.
cou¡
.
FLD
, (ST)->
°©s_cumuœtive
.cou¡.
	)
FLD

300 
	#__XML_TCP_RANGE_FMT
 \

304 " </íåy>\n"

	)

306 
	#__XML_TCP_RANGE
(
NM
,
ST
,
FLD
) (NM), \

307 (
ST
)->
°©s_¢≠shŸ
.
a˘uÆ
.
FLD
, (ST)->°©s_¢≠shŸ.
mö
.FLD, \

308 (
ST
)->
°©s_¢≠shŸ
.
max
.
FLD
, \

309 (
ST
)->
°©s_cumuœtive
.
a˘uÆ
.
FLD
, (ST)->°©s_cumuœtive.
mö
.FLD, \

310 (
ST
)->
°©s_cumuœtive
.
max
.
FLD


	)

312 #i‡
CI_CFG_SEND_STATS_TO_LOG


313 
	#__XML_TCP_LOG
 
ci_log


	)

315 
	#__XML_TCP_LOG
(
x
...) \

316 i‡(
Àn
 < 
cou¡
) { \

317 
Àn
 +
	`¢¥ötf
(
buf
 +Üí, 
cou¡
 -Üí, 
x
); \

318 }

	)

321 
	#__XML_TCP_COUNT_LOG
(
«me
, 
ts
, 
fõld
) \

322 
	`__XML_TCP_LOG
–
__XML_TCP_COUNT_FMT
, \

323 
	`__XML_TCP_COUNT
(
«me
, 
ts
, 
fõld
))

	)

325 
	#__XML_TCP_RANGE_LOG
(
«me
, 
ts
, 
fõld
) \

326 
	`__XML_TCP_LOG
–
__XML_TCP_RANGE_FMT
, \

327 
	`__XML_TCP_RANGE
(
«me
, 
ts
, 
fõld
))

	)

331 
	$ci_t˝_°©s_ªp‹t_xml
–
ci_t˝_°©e
* 
ts
, *
buf
, 
cou¡
 )

333 
Àn
 = 0;

335 #i‡
CI_CFG_SEND_STATS_TO_LOG
==0

336 i‡(
cou¡
 <= 0)

341 
	`__XML_TCP_LOG
–
__XML_TCP_DATASTART_FMT
, 
	`__XML_TCP_DATASTART
(
ts
));

344 
	`__XML_TCP_COUNT_LOG
("Round-åùÅimeout", 
ts
, 
πto
);

345 
	`__XML_TCP_COUNT_LOG
("C⁄ge°i⁄", 
ts
, 
c⁄g
);

346 
	`__XML_TCP_COUNT_LOG
("Rx byãs", 
ts
, 
rx_byã
);

347 
	`__XML_TCP_COUNT_LOG
("RxÖackës", 
ts
, 
rx_pkt
);

348 
	`__XML_TCP_COUNT_LOG
("Rx slowÖ©h", 
ts
, 
rx_¶ow∑th
);

349 
	`__XML_TCP_COUNT_LOG
("Rx sequí˚Ço.Éº", 
ts
, 
rx_£qîr
);

350 
	`__XML_TCP_COUNT_LOG
("RxáckÉº", 
ts
, 
rx_ackîr
);

351 
	`__XML_TCP_COUNT_LOG
("Rx PAWSÉº", 
ts
, 
rx_∑w£º
);

352 
	`__XML_TCP_COUNT_LOG
("Rx dup.áck", 
ts
, 
rx_du∑ck
);

353 
	`__XML_TCP_COUNT_LOG
("Rx dup.áck, fa°Ñx", 
ts
, 
rx_du∑ck_‰ec
 );

354 
	`__XML_TCP_COUNT_LOG
("Rx dup.áck, c⁄ge°, fa°Ñx", 
ts
, 
rx_du∑ck_c⁄g‰ec
 );

355 
	`__XML_TCP_COUNT_LOG
("Rx zîÿwödow", 
ts
, 
rx_zwö
);

356 
	`__XML_TCP_COUNT_LOG
("Rx ouào‡‹dî", 
ts
, 
rx_ooo
);

357 
	`__XML_TCP_COUNT_LOG
("Rx bad syn", 
ts
, 
rx_badsyn
);

358 
	`__XML_TCP_COUNT_LOG
("Rx bad sy¿£q.", 
ts
, 
rx_badsyn£q
);

359 
	`__XML_TCP_COUNT_LOG
("Rx dup. syn", 
ts
, 
rx_syndup
);

360 
	`__XML_TCP_COUNT_LOG
("Rx sy¿badáck", 
ts
, 
rx_synbadack
);

361 
	`__XML_TCP_COUNT_LOG
("Rx sy¿n⁄-ack", 
ts
, 
rx_sy¬⁄ack
);

362 
	`__XML_TCP_COUNT_LOG
("Rx sÀïs", 
ts
, 
rx_¶ìp
);

364 
	`__XML_TCP_COUNT_LOG
("Tx byãs", 
ts
, 
tx_byã
);

365 
	`__XML_TCP_COUNT_LOG
("TxÖackës", 
ts
, 
tx_pkt
);

366 
	`__XML_TCP_COUNT_LOG
("Tx slowÖ©h", 
ts
, 
tx_¶ow∑th
);

367 
	`__XML_TCP_COUNT_LOG
("TxÑëønsmô", 
ts
, 
tx_ªå™s_pkt
);

368 
	`__XML_TCP_COUNT_LOG
("Tx sÀïs", 
ts
, 
tx_¶ìp
);

369 
	`__XML_TCP_COUNT_LOG
("Tx stuck", 
ts
, 
tx_°uck
);

371 
	`__XML_TCP_RANGE_LOG
("Rx wödow", 
ts
, 
rx_wö
);

372 
	`__XML_TCP_RANGE_LOG
("Rx wödow sˇÀ", 
ts
, 
rx_ws˛
);

373 
	`__XML_TCP_RANGE_LOG
("Tx wödow", 
ts
, 
tx_wö
);

374 
	`__XML_TCP_RANGE_LOG
("Tx wödow sˇÀ", 
ts
, 
tx_ws˛
);

376 
	`__XML_TCP_RANGE_LOG
("RoundÅrùÅime", 
ts
, 
πt
);

377 
	`__XML_TCP_RANGE_LOG
("SmoŸhedÑoundÅrùÅime", 
ts
, 
§â
);

378 
	`__XML_TCP_RANGE_LOG
("RoundÅrùÅimeout", 
ts
, 
πo
);

379 
	`__XML_TCP_RANGE_LOG
("Tx buf„r†‰ì", 
ts
, 
tx_buf‰ì
);

380 
	`__XML_TCP_RANGE_LOG
("Tx sÀïÅime", 
ts
, 
tx_¶ì±ime
);

381 
	`__XML_TCP_RANGE_LOG
("Rx sÀïÅime", 
ts
, 
rx_¶ì±ime
);

383 
	`__XML_TCP_LOG
–
__XML_TCP_DATAEND_FMT
 );

385 i‡(
Àn
 =
cou¡
)

386 
Àn
--;

388 
buf
[
Àn
++] = '\0';

390  
Àn
;

391 
	}
}

395 
	$ci_t˝_°©s_ªp‹t
–
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
, 
ty≥
, *
buf
, 
cou¡
 )

397 
rc
 = 0;

399 
	`ci_as£π
–
ni
 && 
ts
 );

401  
ty≥
 ) {

402 
CI_IP_STATS_OUTPUT_NONE
:

403 #i‡
CI_CFG_SEND_STATS_TO_LOG


404 
rc
 = 
	`ci_t˝_°©s_ªp‹t_ãxt
(
ts
, 
NULL
, 0 );

406 
rc
 = 0;

410 
CI_IP_STATS_OUTPUT_TEXT
:

411 
rc
 = 
	`ci_t˝_°©s_ªp‹t_ãxt
(
ts
, 
buf
, 
cou¡
 );

414 
CI_IP_STATS_OUTPUT_XML
:

415 
rc
 = 
	`ci_t˝_°©s_ªp‹t_xml
(
ts
, 
buf
, 
cou¡
 );

419 
rc
 = -1;

423  
rc
;

424 
	}
}

438 
	$ci_t˝_°©s_a˘i⁄
(
__NI_STRUCT__
 *
ni
,

439 
__STATE_STRUCT__
 *
ts
,

440 
ci_ù_°©s_a˘i⁄_ty≥
 
a˘i⁄
,

441 
ci_ù_°©s_ouçut_fmt
 
fmt
,

442 *
d©a
,

443 
sockÀn_t
 *
size
)

445 
ci_ùtime_t
 
ô
;

447 
	`ci_as£π
(
ni
);

448 
	`ci_as£π
–
	`IPTIMER_STATE
(
ni
) );

449 
	`ci_as£π
(
ts
);

451 
	`LOG_STATS
–
	`ci_log
–"%s–%p, %p, %d, %d, %∞)", 
__FUNCTION__
, 
ni
, 
ts
,

452 
a˘i⁄
, 
fmt
, 
d©a
));

455 
	`ci_ù_time_gë
(
	`IPTIMER_STATE
(
ni
), &
ô
);

458 #i‚de‡
__KERNEL__


459 
ts
->
°©s_¢≠shŸ
.
now
 = 
	`ci_ù_time_ticks2ms
(
ni
, 
ô
);

462 
a˘i⁄
) {

463 
CI_IP_STATS_START
:

464 
	`ci_t˝_°©s_öô_d©a
–&
ts
->
°©s_¢≠shŸ
);

465 
	`ci_t˝_°©s_öô_d©a
–&
ts
->
°©s_cumuœtive
);

467 
ô
 = 
	`NI_CONF
(
ni
).
tc⁄°_°©s
;

468 
	`ci_t˝_°©s_h™dÀ_timî
(
ni
, 
ts
, 
ô
 );

471 
CI_IP_STATS_GET
:

472 i‡((
d©a
 !
NULL
Ë&& (
size
 !NULLË&& (*sizê>2 * (
ci_ù_°©s
))){

474 
ci_ù_sock_°©s
* 
ii
 = (ci_ù_sock_°©s*)
d©a
;

475 
	`mem˝y
–&
ii
[0], &
ts
->
°©s_¢≠shŸ
, (*ii) );

476 
	`mem˝y
–&
ii
[1], &
ts
->
°©s_cumuœtive
, (*ii));

477 *
size
 = 2 * (
ci_ù_sock_°©s
);

481 
CI_IP_STATS_REPORT
:

482 #i‡
CI_CFG_SEND_STATS_TO_LOG


483 
	`ci_t˝_°©s_ªp‹t
(
ni
, 
ts
,Çi->
°©e
->
°©s_fmt
, 
NULL
, 0);

485 i‡((
d©a
 !
NULL
Ë&& (
size
 != NULL))

487 *
size
 = 
	`ci_t˝_°©s_ªp‹t
(
ni
, 
ts
,Çi->
°©e
->
°©s_fmt
, 
d©a
, *size);

492 
CI_IP_STATS_END
:

493 
CI_IP_STATS_FLUSH
:

494 
	`ci_t˝_°©s_upd©e
–
ts
 );

497 
ô
 = 
a˘i⁄
 !
CI_IP_STATS_END
 ? 
	`NI_CONF
(
ni
).
tc⁄°_°©s
 : 0;

498 
	`ci_t˝_°©s_h™dÀ_timî
(
ni
, 
ts
, 
ô
 );

504 
	}
}

	@tcp_syncookie.c

2 
	~<ci/öã∫Æ/ù.h
>

4 
	gsyncookõ_mss
[8] =

20 
	ssùhash
 {

21 
ci_uöt64
 
	mv0
, 
	mv1
, 
	mv2
, 
	mv3
;

23 
	mbuf
[8];

24 * 
	mp
;

25 
ci_uöt64
 
	mc
;

28 
	#SIP_ROTL
(
x
, 
b
Ë(
ci_uöt64
)(((xË<< (b)Ë| ( (xË>> (64 - (b))))

	)

31 
	$sù_round
(
sùhash
* 
h
, 
rounds
)

33 
i
;

35  
i
 = 0; i < 
rounds
; i++ ) {

36 
h
->
v0
 +h->
v1
;

37 
h
->
v1
 = 
	`SIP_ROTL
(h->v1, 13);

38 
h
->
v1
 ^h->
v0
;

39 
h
->
v0
 = 
	`SIP_ROTL
(h->v0, 32);

41 
h
->
v2
 +h->
v3
;

42 
h
->
v3
 = 
	`SIP_ROTL
(h->v3, 16);

43 
h
->
v3
 ^h->
v2
;

45 
h
->
v0
 +h->
v3
;

46 
h
->
v3
 = 
	`SIP_ROTL
(h->v3, 21);

47 
h
->
v3
 ^h->
v0
;

49 
h
->
v2
 +h->
v1
;

50 
h
->
v1
 = 
	`SIP_ROTL
(h->v1, 17);

51 
h
->
v1
 ^h->
v2
;

52 
h
->
v2
 = 
	`SIP_ROTL
(h->v2, 32);

54 
	}
}

56 
ci_uöt64


57 
	$sù_hash
(
ci_uöt64
* 
key
, c⁄° * 
d©a
, 
Àn
)

59 
sùhash
 
h
;

60 c⁄° *
p
 = 
d©a
, *
≥
 =Ö + 
Àn
;

61 
ci_uöt64
 
m
;

62 
À·
;

63 
ci_uöt64
 
b
;

66 
	`mem£t
(&
h
, 0, (h));

67 
h
.
v0
 = 0x736f6d6570736575ULL ^ 
key
[0];

68 
h
.
v1
 = 0x646f72616e646f6dULL ^ 
key
[1];

69 
h
.
v2
 = 0x6c7967656e657261ULL ^ 
key
[0];

70 
h
.
v3
 = 0x7465646279746573ULL ^ 
key
[1];

71 
h
.
p
 = h.
buf
;

75  
p
 < 
≥
 && 
h
.∞- h.
buf
 < (h.buf) )

76 *
h
.
p
++ = *p++;

78 if–
h
.
p
 - h.
buf
 < (h.buf) )

81 
m
 = ((
ci_uöt64
)
h
.
buf
[0] << 0) | ((ci_uint64)h.buf[1] << 8) |

82 ((
ci_uöt64
)
h
.
buf
[2] << 16) | ((ci_uint64)h.buf[3] << 24) |

83 ((
ci_uöt64
)
h
.
buf
[2] << 32) | ((ci_uint64)h.buf[3] << 40) |

84 ((
ci_uöt64
)
h
.
buf
[2] << 48) | ((ci_uint64)h.buf[3] << 56);

85 
h
.
v3
 ^
m
;

86 
	`sù_round
(&
h
, 2);

87 
h
.
v0
 ^
m
;

89 
h
.
p
 = h.
buf
;

90 
h
.
c
 += 8;

91 }  
≥
 - 
p
 > 0 );

94 
À·
 = 
h
.
p
 - h.
buf
;

95 
b
 = (
h
.
c
 + 
À·
) << 56;

97 
À·
) {

98 7: 
b
 |(
uöt64_t
)
h
.
buf
[6] << 48;

99 6: 
b
 |(
uöt64_t
)
h
.
buf
[5] << 40;

100 5: 
b
 |(
uöt64_t
)
h
.
buf
[4] << 32;

101 4: 
b
 |(
uöt64_t
)
h
.
buf
[3] << 24;

102 3: 
b
 |(
uöt64_t
)
h
.
buf
[2] << 16;

103 2: 
b
 |(
uöt64_t
)
h
.
buf
[1] << 8;

104 1: 
b
 |(
uöt64_t
)
h
.
buf
[0] << 0;

108 
h
.
v3
 ^
b
;

109 
	`sù_round
(&
h
, 2);

110 
h
.
v0
 ^
b
;

111 
h
.
v2
 ^= 0xff;

112 
	`sù_round
(&
h
, 4);

114  
h
.
v0
 ^ h.
v1
 ^ h.
v2
 ^ h.
v3
;

115 
	}
}

117 
ci_uöt32


118 
	$ci_t˝_syncookõ_hash
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
,

119 
ci_t˝_°©e_syƒecv
* 
t§
, 
t
, 
m
)

121 
ci_uöt8
 
hash_d©a
[13];

123 
hash_d©a
[0] = 
	`t˝_Õ‹t_be16
(
és
) & 0xff;

124 
hash_d©a
[1] = 
	`t˝_Õ‹t_be16
(
és
) >> 8;

125 
hash_d©a
[2] = 
t§
->
r_p‹t
 & 0xff;

126 
hash_d©a
[3] = 
t§
->
r_p‹t
 >> 8;

127 
hash_d©a
[4] = 
t§
->
l_addr
 & 0xff;

128 
hash_d©a
[5] = (
t§
->
l_addr
 & 0xff00) >> 8;

129 
hash_d©a
[6] = (
t§
->
l_addr
 & 0xff0000) >> 16;

130 
hash_d©a
[7] = (
t§
->
l_addr
 & 0xff000000) >> 24;

131 
hash_d©a
[8] = 
t§
->
r_addr
 & 0xff;

132 
hash_d©a
[9] = (
t§
->
r_addr
 & 0xff00) >> 8;

133 
hash_d©a
[10] = (
t§
->
r_addr
 & 0xff0000) >> 16;

134 
hash_d©a
[11] = (
t§
->
r_addr
 & 0xff000000) >> 24;

135 
hash_d©a
[12] = 
t
 << 3 | 
m
;

137 
	`ci_as£π_equÆ
((
√tif
->
°©e
->
hash_ß…
),

138 2 * (
ci_uöt64
));

139  (
ci_uöt32
)
	`sù_hash
((*)
√tif
->
°©e
->
hash_ß…
,

140 
hash_d©a
, (hash_data));

141 
	}
}

147 
ci_öt16
 
	$ci_t˝_syncookõ_gë_t
(
ci_√tif
* 
√tif
)

150  (
	`ci_ù_time_now
(
√tif
) >>

151 (
	`IPTIMER_STATE
(
√tif
)->
ci_ù_time_‰c2us
 + 23

152 - 
	`IPTIMER_STATE
(
√tif
)->
ci_ù_time_‰c2tick
)

154 
	}
}

157 
	$ci_t˝_syncookõ_syn
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
,

158 
ci_t˝_°©e_syƒecv
* 
t§
)

160 
t
, 
m
;

162 
t
 = 
	`ci_t˝_syncookõ_gë_t
(
√tif
);

164 if–
t§
->
t˝›ts
.
smss
 >
√tif
->
°©e
->
max_mss
 )

165 
m
 = 7;

167  
m
 = 6; m > 0; m-- )

168 if–
t§
->
t˝›ts
.
smss
 > 
syncookõ_mss
[
m
] )

173 
t§
->
¢d_i¢
 = (
t
 << 3Ë| 
m
 |

174 (
	`ci_t˝_syncookõ_hash
(
√tif
, 
és
, 
t§
, 
t
, 
m
) << 8);

177 if–
t§
->
t˝›ts
.
Êags
 & 
	`NI_OPTS
(
√tif
).
syn_›ts
 & 
CI_TCPT_FLAG_TSO
 ) {

178 
t§
->
t˝›ts
.
Êags
 |
CI_TCPT_FLAG_SYNCOOKIE
;

179 
t§
->
time°
 &= ~0x1ff;

180 if–
t§
->
t˝›ts
.
Êags
 & 
	`NI_OPTS
(
√tif
).
syn_›ts
 & 
CI_TCPT_FLAG_WSCL
 ) {

181 
t§
->
time°
 |t§->
rcv_ws˛
;

182 
t§
->
time°
 |t§->
t˝›ts
.
ws˛_sh·
 << 4;

184 if–
t§
->
t˝›ts
.
Êags
 & 
	`NI_OPTS
(
√tif
).
syn_›ts
 & 
CI_TCPT_FLAG_SACK
 )

185 
t§
->
time°
 |= 1 << 8;

186 
t§
->
t˝›ts
.
Êags
 &~
CI_TCPT_FLAG_ECN
;

188 if–
t§
->
time°
 > 
	`ci_t˝_time_now
(
√tif
) ) {

189 
t§
->
time°
 -= 1 << 9;

193 
t§
->
t˝›ts
.
Êags
 = 
CI_TCPT_FLAG_SYNCOOKIE
;

195 
	`CITP_STATS_TCP_LISTEN
(++
és
->
°©s
.
n_syncookõ_syn
);

196 
	}
}

199 
	$ci_t˝_syncookõ_ack
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
,

200 
ciù_t˝_rx_pkt
* 
rxp
,

201 
ci_t˝_°©e_syƒecv
** 
t§_p
)

203 
t
, 
m
, 
t_now
;

204 
ci_t˝_°©e_syƒecv
* 
t§
;

205 
ci_uöt32
 
i¢
 = 
rxp
->
ack
 - 1;

207 
	`CITP_STATS_TCP_LISTEN
(++
és
->
°©s
.
n_syncookõ_ack_ªcv
);

208 *
t§_p
 = 
NULL
;

210 
t_now
 = 
	`ci_t˝_syncookõ_gë_t
(
√tif
);

212 
m
 = 
i¢
 & 7;

213 
t
 = (
i¢
 >> 3) & 0x1f;

215 if–
t
 !
t_now
 &&Å != ((t_now - 1) & 0x1f) ) {

216 
	`CITP_STATS_TCP_LISTEN
(++
és
->
°©s
.
n_syncookõ_ack_ts_ªj
);

220 
t§
 = 
	`ci_Æloc
((
ci_t˝_°©e_syƒecv
));

221 if–
t§
 =
NULL
 )

223 
	`mem£t
(
t§
, 0, (
ci_t˝_°©e_syƒecv
));

224 
t§
->
t˝›ts
.
Êags
 = 
CI_TCPT_FLAG_SYNCOOKIE
;

226 
t§
->
r_p‹t
 = 
rxp
->
t˝
->
t˝_sour˚_be16
;

227 
t§
->
l_addr
 = 
	`oo_ù_hdr
(
rxp
->
pkt
)->
ù_daddr_be32
;

228 
t§
->
r_addr
 = 
	`oo_ù_hdr
(
rxp
->
pkt
)->
ù_ßddr_be32
;

229 
t§
->
t˝›ts
.
smss
 = 
syncookõ_mss
[
m
];

230 
t§
->
¢d_i¢
 = 
i¢
;

231 
t§
->
rcv_nxt
 = 
rxp
->
£q
;

233 if–(
i¢
 >> 8) !=

234 (
	`ci_t˝_syncookõ_hash
(
√tif
, 
és
, 
t§
, 
t
, 
m
) & 0xffffff) ) {

235 
	`CITP_STATS_TCP_LISTEN
(++
és
->
°©s
.
n_syncookõ_ack_hash_ªj
);

236 
	`ci_‰ì
(
t§
);

240 
t§
->
loˇl_≥î
 = 
OO_SP_NULL
;

242 *
t§_p
 = 
t§
;

244 if–
rxp
->
Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

245 
t§
->
time°
 = (
rxp
->
time°amp_echo
 & ~0x1ff);

246 if–
rxp
->
time°amp_echo
 & 0xff ) {

247 
t§
->
t˝›ts
.
Êags
 |
CI_TCPT_FLAG_WSCL
;

248 
t§
->
rcv_ws˛
 = 
rxp
->
time°amp_echo
 & 0xf;

249 
t§
->
t˝›ts
.
ws˛_sh·
 = (
rxp
->
time°amp_echo
 >> 4) & 0xf;

251 if–
rxp
->
time°amp_echo
 & 0x100 )

252 
t§
->
t˝›ts
.
Êags
 |
CI_TCPT_FLAG_SACK
;

255 
	`CITP_STATS_TCP_LISTEN
(++
és
->
°©s
.
n_syncookõ_ack_™sw
);

256 
	}
}

	@tcp_synrecv.c

14 
	~"ù_öã∫Æ.h
"

15 
	~"t˝_rx.h
"

18 #unde‡
LOG_TV


19 
	#LOG_TV
(
x
Ë
	)
x

22 
	#LPF
 "TCP SYNRECV "

	)

24 
	#TSR_FMT
 "±r:%xÇext:%x hash:%xÜ:%†r:%s:%d"

	)

25 
	#TSR_ARGS
(
t§
) \

26 
	`ci_t˝_syƒecv2p
(
ni
, 
t§
),Å§->
buckë_lök
,Å§->
hash
, \

27 
	`ù_addr_°r
(
t§
->
l_addr
), \

28 
	`ù_addr_°r
(
t§
->
r_addr
), 
	`CI_BSWAP_BE16
—§->
r_p‹t
)

	)

30 #ifde‡
__KERNEL__


37 
	#CI_LISTENQ_BUCKET_LIST_LIMIT
(
ni
Ë
	`NI_OPTS
“i).
t˝_backlog_max


	)

47 
	#CI_LISTENQ_BUCKET_MAX_DEPTH
(
ni
) \

48 ((
	`ci_log2_À
(
	`NI_OPTS
(
ni
).
t˝_backlog_max
Ë- 1Ë/ 4)

	)

50 
ci_ölöe
 
	$ci_t˝_li°íq_hash2idx
(
ci_uöt32
 
hash
, 
Àvñ
)

52  (
hash
 >> (
CI_TCP_LISTEN_BUCKET_S
 * 
Àvñ
)) &

53 ((1 << 
CI_TCP_LISTEN_BUCKET_S
) - 1);

54 
	}
}

58 
	$ci_t˝_li°íq_buckë_dr›
(
ci_√tif
* 
ni
, 
ci_t˝_li°í_buckë
* 
buckë
)

60 
ci_ni_aux_mem
* 
aux
;

61 
idx
;

62 
oo_p
 
t§_p
;

63 
ci_t˝_°©e_syƒecv
* 
t§
;

64 
ªt
 = 0;

66  
idx
 = 0; idx < 
CI_TCP_LISTEN_BUCKET_SIZE
; idx++ ) {

67 if–
	`OO_P_IS_NULL
(
buckë
->buckë[
idx
]) )

69 
aux
 = 
	`ci_ni_aux_p2aux
(
ni
, 
buckë
->buckë[
idx
]);

70 if–
aux
->
ty≥
 =
CI_TCP_AUX_TYPE_BUCKET
 )

71 
ªt
 +
	`ci_t˝_li°íq_buckë_dr›
(
ni
, &
aux
->
u
.
buckë
);

73 
t§_p
 = 
buckë
->buckë[
idx
];

75 
t§
 = &
	`ci_ni_aux_p2aux
(
ni
, 
t§_p
)->
u
.
syƒecv
;

76 
t§_p
 = 
t§
->
buckë_lök
;

77 if–
	`OO_SP_IS_NULL
(
t§
->
loˇl_≥î
) )

78 
	`ci_ni_dŒi°_ªmove
(
ni
, 
	`ci_t˝_syƒecv2lök
(
t§
));

81 
	`ci_t˝_syƒecv_‰ì
(
ni
, 
t§
);

82 
ªt
++;

83 }  
	`OO_P_NOT_NULL
(
t§_p
) );

86 
	`ci_ni_aux_‰ì
(
ni
, 
	`CI_CONTAINER
(
ci_ni_aux_mem
, 
u
.
buckë
, bucket));

88  
ªt
;

89 
	}
}

93 
	$ci_t˝_li°íq_buckë_ö£π
(
ci_√tif
* 
ni
, 
ci_t˝_sockë_li°í
* 
és
,

94 
ci_t˝_li°í_buckë
* 
buckë
,

95 
ci_t˝_°©e_syƒecv
* 
t§
, 
Àvñ
)

97 
ci_ni_aux_mem
* 
aux
;

98 
idx
 = 
	`ci_t˝_li°íq_hash2idx
(
t§
->
hash
, 
Àvñ
);

99 
oo_p
 
t§_p
 = 
	`ci_t˝_syƒecv2p
(
ni
, 
t§
);

100 #ifde‡
__KERNEL__


101 
i
 = 0;

104 
	`LOG_TV
(
	`ci_log
("%s([%d]Üevñ=%d "
TSR_FMT
")", 
__func__
,

105 
	`NI_ID
(
ni
), 
Àvñ
, 
	`TSR_ARGS
(
t§
)));

107 if–
	`OO_P_IS_NULL
(
buckë
->buckë[
idx
]) ) {

108 
buckë
->buckë[
idx
] = 
t§_p
;

112 
Àvñ
++;

113 
aux
 = 
	`ci_ni_aux_p2aux
(
ni
, 
buckë
->buckë[
idx
]);

114 if–
aux
->
ty≥
 =
CI_TCP_AUX_TYPE_BUCKET
 ) {

115 
	`ci_t˝_li°íq_buckë_ö£π
(
ni
, 
és
, &
aux
->
u
.
buckë
, 
t§
, 
Àvñ
);

122 
t§
->
buckë_lök
 = 
buckë
->buckë[
idx
];

123 
buckë
->buckë[
idx
] = 
t§_p
;

125 if–
Àvñ
 > 
	`CI_LISTENQ_BUCKET_MAX_DEPTH
(
ni
) )

128 
buckë
->buckë[
idx
] = 
	`ci_ni_aux_Æloc_buckë
(
ni
);

129 if–
	`OO_P_IS_NULL
(
buckë
->buckë[
idx
]) )

131 
buckë
 = 
	`ci_ni_aux_p2buckë
(
ni
, buckë->buckë[
idx
]);

132 
és
->
n_buckës
++;

134  
	`OO_P_NOT_NULL
(
t§_p
) ) {

135 
t§
 = &
	`ci_ni_aux_p2aux
(
ni
, 
t§_p
)->
u
.
syƒecv
;

136 #ifde‡
__KERNEL__


137 if–
i
++ > 
	`CI_LISTENQ_BUCKET_LIST_LIMIT
(
ni
) ) {

138 
	`ci_t˝_li°íq_buckë_ö£π
(
ni
, 
és
, 
buckë
, 
t§
, 
Àvñ
);

139 
	`ci_√tif_îr‹_dëe˘ed
(
ni
, 
CI_NETIF_ERROR_SYNRECV_TABLE
,

140 
__FUNCTION__
);

144 
t§_p
 = 
t§
->
buckë_lök
;

145 
t§
->
buckë_lök
 = 
OO_P_NULL
;

146 
	`ci_t˝_li°íq_buckë_ö£π
(
ni
, 
és
, 
buckë
, 
t§
, 
Àvñ
);

148 
	}
}

152 
	$ci_t˝_li°íq_buckë_ªmove
(
ci_√tif
* 
ni
, 
ci_t˝_sockë_li°í
* 
és
,

153 
ci_t˝_li°í_buckë
* 
buckë
,

154 
ci_t˝_°©e_syƒecv
* 
t§
, 
Àvñ
)

156 
ci_ni_aux_mem
* 
aux
;

157 
idx
 = 
	`ci_t˝_li°íq_hash2idx
(
t§
->
hash
, 
Àvñ
);

158 
oo_p
 
t§_p
 = 
	`ci_t˝_syƒecv2p
(
ni
, 
t§
);

163 
em±y
 = 0;

164 #ifde‡
__KERNEL__


165 
i
 = 0;

167 if–
Àvñ
 > 
	`CI_LISTENQ_BUCKET_MAX_DEPTH
(
ni
) ) {

168 
	`ci_√tif_îr‹_dëe˘ed
(
ni
, 
CI_NETIF_ERROR_SYNRECV_TABLE
, 
__FUNCTION__
);

173 
	`LOG_TV
(
	`ci_log
("%s([%d]Üevñ=%d "
TSR_FMT
")", 
__func__
,

174 
	`NI_ID
(
ni
), 
Àvñ
, 
	`TSR_ARGS
(
t§
)));

175 
	`ci_as£π
–
	`OO_P_NOT_NULL
(
buckë
->buckë[
idx
]) );

176 #ifde‡
__KERNEL__


177 if–
	`OO_P_IS_NULL
(
buckë
->buckë[
idx
]) ) {

178 
	`ci_√tif_îr‹_dëe˘ed
(
ni
, 
CI_NETIF_ERROR_SYNRECV_TABLE
,

179 
__FUNCTION__
);

184 
Àvñ
++;

185 
aux
 = 
	`ci_ni_aux_p2aux
(
ni
, 
buckë
->buckë[
idx
]);

186 if–
aux
->
ty≥
 =
CI_TCP_AUX_TYPE_BUCKET
 ) {

187 
em±y
 = 
	`ci_t˝_li°íq_buckë_ªmove
(
ni
, 
és
, &
aux
->
u
.
buckë
, 
t§
, 
Àvñ
);

188 if–
em±y
 ) {

189 
buckë
->buckë[
idx
] = 
OO_P_NULL
;

190 
	`ci_ni_aux_‰ì
(
ni
, 
aux
);

191 
és
->
n_buckës
--;

195 if–
buckë
->buckë[
idx
] =
t§_p
 ) {

196 
buckë
->buckë[
idx
] = 
t§
->
buckë_lök
;

197 
em±y
 = 
	`OO_P_IS_NULL
(
buckë
->buckë[
idx
]);

200 
ci_t˝_°©e_syƒecv
* 
¥ev
 = &
aux
->
u
.
syƒecv
;

201  
¥ev
->
buckë_lök
 !
t§_p
 ) {

202 
aux
 = 
	`ci_ni_aux_p2aux
(
ni
, 
¥ev
->
buckë_lök
);

203 
¥ev
 = &
aux
->
u
.
syƒecv
;

204 #ifde‡
__KERNEL__


205 if–
i
++ > 
	`CI_LISTENQ_BUCKET_LIST_LIMIT
(
ni
) ) {

206 
	`ci_√tif_îr‹_dëe˘ed
(
ni
, 
CI_NETIF_ERROR_SYNRECV_TABLE
,

207 
__FUNCTION__
);

212 
¥ev
->
buckë_lök
 = 
t§
->bucket_link;

216 if–
em±y
 ) {

217 
i
;

218  
i
 = 0; i < 
CI_TCP_LISTEN_BUCKET_SIZE
; i++ )

219 if–
	`OO_P_NOT_NULL
(
buckë
->buckë[
i
]) )

224 
	}
}

226 
ci_t˝_°©e_syƒecv
*

227 
	$ci_t˝_li°íq_buckë_lookup
(
ci_√tif
* 
ni
, 
ci_t˝_li°í_buckë
* 
buckë
,

228 
ciù_t˝_rx_pkt
* 
rxp
,

229 
Àvñ
)

231 
ci_ni_aux_mem
* 
aux
;

232 
idx
 = 
	`ci_t˝_li°íq_hash2idx
(
rxp
->
hash
, 
Àvñ
);

233 
ci_t˝_°©e_syƒecv
* 
t§
;

234 
ßddr
, 
daddr
, 
•‹t
;

235 #ifde‡
__KERNEL__


236 
i
 = 0;

238 if–
Àvñ
 > 
	`CI_LISTENQ_BUCKET_MAX_DEPTH
(
ni
) ) {

239 
	`ci_√tif_îr‹_dëe˘ed
(
ni
, 
CI_NETIF_ERROR_SYNRECV_TABLE
,

240 
__FUNCTION__
);

245 
	`LOG_TV
(
	`ci_log
("%s([%d]Üevñ=%d hash:%xÜ:%†r:%s:%d)", 
__func__
,

246 
	`NI_ID
(
ni
), 
Àvñ
, 
rxp
->
hash
,

247 
	`ù_addr_°r
(
	`oo_ù_hdr
(
rxp
->
pkt
)->
ù_daddr_be32
),

248 
	`ù_addr_°r
(
	`oo_ù_hdr
(
rxp
->
pkt
)->
ù_ßddr_be32
),

249 
	`CI_BSWAP_BE16
(
rxp
->
t˝
->
t˝_sour˚_be16
)));

250 if–
	`OO_P_IS_NULL
(
buckë
->buckë[
idx
]) )

251  
NULL
;

253 
Àvñ
++;

254 
aux
 = 
	`ci_ni_aux_p2aux
(
ni
, 
buckë
->buckë[
idx
]);

255 if–
aux
->
ty≥
 =
CI_TCP_AUX_TYPE_BUCKET
 )

256  
	`ci_t˝_li°íq_buckë_lookup
(
ni
, &
aux
->
u
.
buckë
, 
rxp
, 
Àvñ
);

258 
ßddr
 = 
	`oo_ù_hdr
(
rxp
->
pkt
)->
ù_ßddr_be32
;

259 
daddr
 = 
	`oo_ù_hdr
(
rxp
->
pkt
)->
ù_daddr_be32
;

260 
•‹t
 = 
rxp
->
t˝
->
t˝_sour˚_be16
;

262 
t§
 = &
aux
->
u
.
syƒecv
;

264 if–! ((
ßddr
 - 
t§
->
r_addr
Ë| (
daddr
 -Å§->
l_addr
) |

265 (
•‹t
 - 
t§
->
r_p‹t
)) )

266  
t§
;

267 if–
	`OO_P_IS_NULL
(
t§
->
buckë_lök
) )

268  
NULL
;

269 
aux
 = 
	`ci_ni_aux_p2aux
(
ni
, 
t§
->
buckë_lök
);

270 
t§
 = &
aux
->
u
.
syƒecv
;

271 #ifde‡
__KERNEL__


272 if–
i
++ > 
	`CI_LISTENQ_BUCKET_LIST_LIMIT
(
ni
) ) {

273 
	`ci_√tif_îr‹_dëe˘ed
(
ni
, 
CI_NETIF_ERROR_SYNRECV_TABLE
,

274 
__FUNCTION__
);

275  
NULL
;

281  
NULL
;

282 
	}
}

285 
	$ci_t˝_li°í_timî_£t
(
ci_√tif
* 
ni
, 
ci_t˝_sockë_li°í
* 
és
,

286 
ci_ùtime_t
 
timeout
)

288 
i
;

290 if–! 
	`ci_ù_timî_≥ndög
(
ni
, &
és
->
li°íq_tid
) ) {

291 
	`ci_ù_timî_£t
(
ni
, &
és
->
li°íq_tid
, 
timeout
);

295  
i
 = 0; i <
CI_CFG_TCP_SYNACK_RETRANS_MAX
; i++ ) {

296 
ci_t˝_°©e_syƒecv
* 
t§
 =

297 
	`ci_t˝_lök2syƒecv
(
	`ci_ni_dŒi°_°¨t
(
ni
, &
és
->
li°íq
[
i
]));

298 if–
	`TIME_LT
(
t§
->
timeout
,Åimeout) )

301 
	`ci_ù_timî_modify
(
ni
, &
és
->
li°íq_tid
, 
timeout
);

302 
	}
}

305 
	$ci_t˝_li°íq_dr›_Æl
(
ci_√tif
* 
ni
, 
ci_t˝_sockë_li°í
* 
és
)

308 
	`ci_t˝_li°íq_buckë_dr›
(
ni
,

309 
	`ci_ni_aux_p2buckë
(
ni
, 
és
->
buckë
));

310 
	}
}

312 
	$ci_t˝_li°íq_ö£π
(
ci_√tif
* 
ni
, 
ci_t˝_sockë_li°í
* 
és
,

313 
ci_t˝_°©e_syƒecv
* 
t§
)

315 
is_fú°
;

317 
és
->
n_li°íq
++;

319 
	`ci_t˝_li°íq_buckë_ö£π
(
ni
, 
és
,

320 
	`ci_ni_aux_p2buckë
(
ni
, 
és
->
buckë
),

321 
t§
, 0);

323 if–
	`OO_SP_NOT_NULL
(
t§
->
loˇl_≥î
) )

326 
is_fú°
 = 
	`ci_ni_dŒi°_is_em±y
(
ni
, &
és
->
li°íq
[0]);

327 
	`ci_ni_dŒi°_push_èû
(
ni
, &
és
->
li°íq
[0], 
	`ci_t˝_syƒecv2lök
(
t§
));

328 
t§
->
ªåõs
 = 0;

329 
t§
->
timeout
 = 
	`ci_t˝_time_now
(
ni
Ë+ 
	`NI_CONF
“i).
tc⁄°_πo_öôül
;

331 ++
és
->
n_li°íq_√w
;

332 if–
is_fú°
 )

333 
	`ci_t˝_li°í_timî_£t
(
ni
, 
és
, 
t§
->
timeout
);

334 
	}
}

337 
	$ci_t˝_li°íq_ªmove
(
ci_√tif
* 
ni
, 
ci_t˝_sockë_li°í
* 
és
,

338 
ci_t˝_°©e_syƒecv
* 
t§
)

340 
	`ci_as£π
(
ni
);

341 
	`ci_as£π
(
t§
);

342 
	`ci_as£π
(
és
);

344 
	`ci_t˝_li°íq_buckë_ªmove
(
ni
, 
és
,

345 
	`ci_ni_aux_p2buckë
(
ni
, 
és
->
buckë
),

346 
t§
, 0);

347 if–
	`OO_SP_IS_NULL
(
t§
->
loˇl_≥î
) ) {

348 
	`ci_ni_dŒi°_ªmove
(
ni
, 
	`ci_t˝_syƒecv2lök
(
t§
));

350 if–(
t§
->
ªåõs
 & 
CI_FLAG_TSR_RETRIES_MASK
) == 0 )

351 --
és
->
n_li°íq_√w
;

355 if–--
és
->
n_li°íq
 == 0 &&

356 (~
és
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_BOUND_ALIEN
) )

357 
	`ci_ù_timî_˛ór
(
ni
, &
és
->
li°íq_tid
);

358 
	}
}

360 
	$ci_t˝_li°íq_dr›
(
ci_√tif
* 
ni
, 
ci_t˝_sockë_li°í
* 
és
,

361 
ci_t˝_°©e_syƒecv
* 
t§
)

365 if–
t§
->
ªåõs
 & 
CI_FLAG_TSR_RETRIES_ACKED
 ) {

366 
ci_ù_pkt_fmt
* 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
ni
);

367 if–
pkt
 !
NULL
 )

368 
	`ci_t˝_syƒecv_£nd
(
ni
, 
és
, 
t§
, 
pkt
,

369 
CI_TCP_FLAG_RST
 | 
CI_TCP_FLAG_ACK
, 
NULL
);

371 
	`ci_t˝_li°íq_ªmove
(
ni
, 
és
, 
t§
);

372 
	}
}

378 
ci_t˝_°©e_syƒecv
*

379 
	$ci_t˝_li°íq_lookup
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
,

380 
ciù_t˝_rx_pkt
* 
rxp
)

382 
ci_t˝_°©e_syƒecv
* 
t§
;

384 
t§
 = 
	`ci_t˝_li°íq_buckë_lookup
(

385 
√tif
, 
	`ci_ni_aux_p2buckë
“ëif, 
és
->
buckë
),

386 
rxp
, 0);

387 if–
t§
 =
NULL
 ) {

388 
	`LOG_TV
(
	`log
(
LPF
 "no match for %s:%d->%s:%d",

389 
	`ù_addr_°r
(
	`oo_ù_hdr
(
rxp
->
pkt
)->
ù_ßddr_be32
),

390 (Ë
	`CI_BSWAP_BE16
(
rxp
->
t˝
->
t˝_sour˚_be16
),

391 
	`ù_addr_°r
(
	`oo_ù_hdr
(
rxp
->
pkt
)->
ù_daddr_be32
),

392 (Ë
	`CI_BSWAP_BE16
(
rxp
->
t˝
->
t˝_de°_be16
)));

395  
t§
;

396 
	}
}

399 
	$ci_t˝_li°íq_dr›_ﬁde°
(
ci_√tif
* 
ni
, 
ci_t˝_sockë_li°í
* 
és
)

401 
ci_t˝_°©e_syƒecv
* 
t§
;

402 
i
;

404  
i
 = 
CI_CFG_TCP_SYNACK_RETRANS_MAX
; i >= 0; --i ) {

405 if–
	`ci_ni_dŒi°_nŸ_em±y
(
ni
, &
és
->
li°íq
[
i
]) )

408 
	`ci_as£π
(
	`ci_ni_dŒi°_nŸ_em±y
(
ni
, &
és
->
li°íq
[
i
]));

409 
t§
 = 
	`ci_t˝_lök2syƒecv
(
	`ci_ni_dŒi°_hód
(
ni
, &
és
->
li°íq
[
i
]));

410 
	`ci_t˝_li°íq_dr›
(
ni
, 
és
, 
t§
);

411 
	`ci_t˝_syƒecv_‰ì
(
ni
, 
t§
);

412 
	`CITP_STATS_NETIF
(++
ni
->
°©e
->
°©s
.
syƒecv_purge
);

413 
	}
}

416 
ci_ölöe
 
ci_t˝_°©e
*

417 
	$gë_ts_‰om_ˇche
(
ci_√tif
 *
√tif
,

418 
ci_t˝_°©e_syƒecv
* 
t§
,

419 
ci_t˝_sockë_li°í
* 
és
)

421 
ci_t˝_°©e
 *
ts
 = 
NULL
;

422 #i‡
CI_CFG_FD_CACHING


423 if–
	`ci_ni_dŒi°_nŸ_em±y
(
√tif
, &
és
->
ïˇche
.
ˇche
) ) {

425 
ci_ni_dŒi°_lök
 *
lök
 = 
	`ci_ni_dŒi°_p›
(
√tif
, &
és
->
ïˇche
.
ˇche
);

426 
ts
 = 
	`CI_CONTAINER
 (
ci_t˝_°©e
, 
ïˇche_lök
, 
lök
);

427 
	`ci_as£π
 (
ts
);

428 
	`ci_ni_dŒi°_£lf_lök
(
√tif
, &
ts
->
ïˇche_lök
);

430 
	`LOG_EP
(
	`ci_log
("Taking cached fd %d off cachedÜist, (ontoácceptq)",

431 
ts
->
ˇched_⁄_fd
));

433 if–
	`t˝_œddr_be32
(
ts
Ë=
t§
->
l_addr
 ) {

434 
	`ci_t˝_°©e_öô
(
√tif
, 
ts
, 1);

436 
	`ci_as£π
(!(
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
));

437 
	`ci_as£π
(
	`ci_t˝_is_ˇched
(
ts
));

439 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
sockˇche_hô
);

440 
	`CITP_STATS_TCP_LISTEN
(++
és
->
°©s
.
n_sockˇche_hô
);

449 
	`LOG_EP
(
	`ci_log
("changed interface of cached EP,Ñe-queueing"));

450 
	`ci_ni_dŒi°_push_èû
(
√tif
, &
és
->
ïˇche
.
ˇche
, &
ts
->
ïˇche_lök
);

451 
ts
 = 
NULL
;

452 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
sockˇche_miss_ötmism©ch
);

456  
ts
;

457 
	}
}

467 
	$ci_t˝_öhîô_›ti⁄s
(
ci_√tif
* 
ni
, 
ci_sock_cmn
* 
s
,

468 
ci_t˝_sockë_cmn
* 
c
,

469 
ci_t˝_°©e
* 
ts
, c⁄° * 
˘xt
)

471 
	`ci_as£π
(
ni
);

472 
	`ci_as£π
(
s
);

473 
	`ci_as£π
(
c
);

474 
	`ci_as£π
(
ts
);

476 
ts
->
s
.
so
 = s->so;

477 
ts
->
s
.
˝
.
so_bödtodevi˚
 = s->cp.so_bindtodevice;

478 
ts
->
s
.
˝
.
ù_âl
 = s->cp.ip_ttl;

479 
ts
->
s
.
rx_böd2dev_ifödex
 = s->rx_bind2dev_ifindex;

480 
ts
->
s
.
rx_böd2dev_ba£_ifödex
 = s->rx_bind2dev_base_ifindex;

481 
ts
->
s
.
rx_böd2dev_vœn
 = s->rx_bind2dev_vlan;

482 
	`ci_t˝_£t_¢dbuf
(
ni
, 
ts
);

483 
	`ci_t˝_£t_rcvbuf
(
ni
, 
ts
);

488 
öhîôed_sÊags
 = 
CI_SOCK_AFLAG_TCP_INHERITED
;

489 
öhîôed_sbÊags
 = 0;

491 if–
	`NI_OPTS
(
ni
).
ac˚±_öhîô_n⁄block
 )

492 
öhîôed_sbÊags
 |
CI_SB_AFLAG_O_NONBLOCK
 | 
CI_SB_AFLAG_O_NDELAY
;

494 
	`ci_as£π
((
ts
->
s
.
s_aÊags
 & 
öhîôed_sÊags
) == 0);

495 
	`ci_©omic32_‹
(&
ts
->
s
.
s_aÊags
, s->s_aÊag†& 
öhîôed_sÊags
);

497 if–
	`NI_OPTS
(
ni
).
t˝_f‹˚_nodñay
 == 1 )

498 
	`ci_bô_£t
(&
ts
->
s
.
s_aÊags
, 
CI_SOCK_AFLAG_NODELAY_BIT
);

499 if–
	`NI_OPTS
(
ni
).
t˝_f‹˚_nodñay
 == 2 )

500 
	`ci_bô_˛ór
(&
ts
->
s
.
s_aÊags
, 
CI_SOCK_AFLAG_NODELAY_BIT
);

502 
	`ci_as£π
((
ts
->
s
.
b
.
sb_aÊags
 & 
öhîôed_sbÊags
) == 0);

503 
	`ci_©omic32_‹
(&
ts
->
s
.
b
.
sb_aÊags
, s->b.sb_aÊag†& 
öhîôed_sbÊags
);

505 
	`ci_as£π_equÆ
((
ts
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_TCP_INHERITED
),

506 
CI_SOCK_FLAG_PMTU_DO
);

507 
ts
->
s
.
s_Êags
 &~
CI_SOCK_FLAG_PMTU_DO
;

508 
ts
->
s
.
s_Êags
 |s->s_Êag†& 
CI_SOCK_FLAG_TCP_INHERITED
;

514 
ts
->
c
.
t_ka_time
 = c->t_ka_time;

515 
ts
->
c
.
t_ka_time_ö_£cs
 = c->t_ka_time_in_secs;

516 #i‚de‡
__sun__


517 
ts
->
c
.
t_ka_ötvl
 = c->t_ka_intvl;

518 
ts
->
c
.
t_ka_ötvl_ö_£cs
 = c->t_ka_intvl_in_secs;

520 
ts
->
c
.
ka_¥obe_th
 = c->ka_probe_th;

521 
	`ci_ù_hdr_öô_fixed
(&
ts
->
s
.
pkt
.
ù
, 
IPPROTO_TCP
,

522 
s
->
pkt
.
ù
.
ù_âl
,

523 
s
->
pkt
.
ù
.
ù_tos
);

524 
ts
->
s
.
cmsg_Êags
 = s->cmsg_flags;

525 
ts
->
s
.
time°ampög_Êags
 = s->timestamping_flags;

528 
	`ci_t˝_öô_rcv_wnd
(
ts
, 
˘xt
);

529 
	}
}

535 
	$ci_t˝_öhîô_ac˚±_›ti⁄s
(
ci_√tif
* 
ni
,

536 
ci_t˝_sockë_li°í
* 
és
,

537 
ci_t˝_°©e
* 
ts
, c⁄° * 
˘xt
)

539 
	`ci_t˝_öhîô_›ti⁄s
(
ni
, &
és
->
s
, &és->
c
, 
ts
, 
˘xt
);

540 
	}
}

543 
ci_ölöe
 
	$ci_t˝_£t_addr_⁄_¥omŸe
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

544 
ci_t˝_°©e_syƒecv
* 
t§
,

545 
ci_t˝_sockë_li°í
* 
és
)

548 
ts
->
s
.
pkt
.
ù
.
ù_ßddr_be32
 = 
t§
->
l_addr
;

549 
	`TS_TCP
(
ts
)->
t˝_sour˚_be16
 = 
	`sock_Õ‹t_be16
(&
és
->
s
);

550 
ts
->
s
.
˝
.
ù_œddr_be32
 = 
t§
->
l_addr
;

551 
ts
->
s
.
˝
.
Õ‹t_be16
 = 
	`sock_Õ‹t_be16
(&
és
->s);

552 
	`ci_t˝_£t_≥î
(
ts
, 
t§
->
r_addr
,Å§->
r_p‹t
);

555 if–
	`OO_SP_NOT_NULL
(
t§
->
loˇl_≥î
) ) {

556 
ci_t˝_°©e
 *
≥î
 = 
	`ID_TO_TCP
(
√tif
, 
t§
->
loˇl_≥î
);

557 
ts
->
loˇl_≥î
 = 
t§
->local_peer;

558 
≥î
->
loˇl_≥î
 = 
	`S_SP
(
ts
);

560 
	}
}

572 
	$ci_t˝_li°íq_åy_¥omŸe
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
,

573 
ci_t˝_°©e_syƒecv
* 
t§
,

574 
ci_ù_ˇched_hdrs
* 
ùˇche
,

575 
ci_t˝_°©e
** 
ts_out
)

577 
rc
 = 0;

579 
	`ci_as£π
(
√tif
);

580 
	`ci_as£π
(
és
);

581 
	`ci_as£π
(
és
->
s
.
b
.
°©e
 =
CI_TCP_LISTEN
);

582 
	`ci_as£π
(
t§
);

584 if–(Ë
	`ci_t˝_ac˚±q_n
(
és
Ë<Åls->
ac˚±q_max
 ) {

585 
ci_t˝_°©e
* 
ts
;

590 
ts
 = 
	`gë_ts_‰om_ˇche
 (
√tif
, 
t§
, 
és
);

591 if–!
ts
 ) {

593 
ts
 = 
	`ci_t˝_gë_°©e_buf
(
√tif
);

594 #i‡
CI_CFG_FD_CACHING


595 if–
ts
 =
NULL
 ) {

597 
ts
 = 
	`gë_ts_‰om_ˇche
(
√tif
, 
t§
, 
és
);

598 i‡(
ts
 =
NULL
 ) {

600 
ts
 = 
	`ci_t˝_gë_°©e_buf
(
√tif
);

603 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
sockˇche_hô_ª≠
);

607 if–
ts
 =
NULL
 ) {

608 
	`LOG_TV
(
	`ci_log
("%s: [%d] out of socket buffers",

609 
__FUNCTION__
, 
	`NI_ID
(
√tif
)));

610 
	`CITP_STATS_TCP_LISTEN
(++
és
->
°©s
.
n_ac˚±q_no_sock
);

611 
	`CI_SET_SO_ERROR
(&
és
->
s
, 
ENOMEM
);

612 
	`côp_waôabÀ_wake
(
√tif
, &
és
->
s
.
b
, 
CI_SB_FLAG_WAKE_RX
);

613  -
ENOMEM
;

617 
	`ci_as£π
(
	`ci_t˝_is_ˇched
(
ts
) ||

618 (
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
));

621 #ifde‡
ONLOAD_OFE


622 
ts
->
s
.
o„_code_°¨t
 = 
és
->
o„_¥omŸe
;

625 if–! 
	`ci_t˝_is_ˇched
(
ts
) ) {

627 
	`ci_t˝_£t_addr_⁄_¥omŸe
(
√tif
, 
ts
, 
t§
, 
és
);

632 
rc
 = 
	`ci_t˝_ï_£t_fûãrs
(
√tif
, 
	`S_SP
(
ts
),Ås->
s
.
˝
.
so_bödtodevi˚
,

633 
	`S_SP
(
és
));

634 if–
rc
 < 0 ) {

635 
	`LOG_U
(
	`ci_log
("%s: U«bÀÅÿ£àfûãr†%d", 
__FUNCTION__
, 
rc
));

637 
	`ci_t˝_°©e_‰ì
(
√tif
, 
ts
);

638  
rc
;

641 #i‡
CI_CFG_FD_CACHING


648 
rc
 = 
	`ci_√tif_fûãr_ö£π
(
√tif
, 
	`S_SP
(
ts
), 
t§
->
l_addr
,

649 
	`sock_Õ‹t_be16
(&
és
->
s
), 
t§
->
r_addr
,

650 
t§
->
r_p‹t
, 
	`t˝_¥Ÿocﬁ
(
ts
));

652 i‡(
rc
 < 0) {

654 
	`LOG_EP
(
	`ci_log
("UnableÅo create s/w filter!"));

655 
	`ci_ni_dŒi°_push
(
√tif
, &
és
->
ïˇche
.
ˇche
, &
ts
->
ïˇche_lök
);

656  
rc
;

664 
	`ci_t˝_£t_addr_⁄_¥omŸe
(
√tif
, 
ts
, 
t§
, 
és
);

666 
	`LOG_EP
(
	`ci_log
("Cached fd %d from cachedÅÿc⁄√˘ed", 
ts
->
ˇched_⁄_fd
));

667 
	`ci_ni_dŒi°_push
(
√tif
, &
és
->
ïˇche_c⁄√˘ed
, &
ts
->
ïˇche_lök
);

671 
	`ci_as£π
(
	`IS_VALID_SOCK_P
(
√tif
, 
	`S_SP
(
ts
)));

672 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSED
);

673 
ts
->
s
.
domaö
 = 
és
->s.domain;

675 
	`ci˝_ù_ˇche_upd©e_‰om
(
√tif
, &
ts
->
s
.
pkt
, 
ùˇche
);

676 
	`ci_pmtu_°©e_öô
(
√tif
, &
ts
->
s
, &ts->
pmtus
,

677 
CI_IP_TIMER_PMTU_DISCOVER
);

678 
	`ci_pmtu_£t
(
√tif
, &
ts
->
pmtus
,

679 
	`CI_MIN
(
ts
->
s
.
pkt
.
mtu
,

680 
t§
->
t˝›ts
.
smss
 + (
ci_t˝_hdr
)

681 + (
ci_ù4_hdr
)));

684 
	`ci_as£π_equiv
(
ts
->
s
.
pkt
.
°©us
 =
ªårc_loˇÃouã
,

685 
	`OO_SP_NOT_NULL
(
t§
->
loˇl_≥î
));

686 if–
ts
->
s
.
pkt
.
°©us
 =
ªårc_loˇÃouã
 )

687 
ts
->
s
.
pkt
.
Êags
 |
CI_IP_CACHE_IS_LOCALROUTE
;

689 
ts
->
amss
 = 
t§
->amss;

692 
ts
->
t˝Êags
 = 0;

693 
ts
->
t˝Êags
 |
t§
->
t˝›ts
.
Êags
;

694 
ts
->
t˝Êags
 |
CI_TCPT_FLAG_PASSIVE_OPENED
;

695 if–
	`NI_OPTS
(
√tif
).
t˝_li°í_ª∂õs_back
 )

696 
ts
->
s
.
˝
.
so_bödtodevi˚
 = 
ùˇche
->
ifödex
;

697 
ts
->
outgoög_hdrs_Àn
 = (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
);

698 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_WSCL
 ) {

699 
ts
->
¢d_ws˛
 = 
t§
->
t˝›ts
.
ws˛_sh·
;

700 
ts
->
rcv_ws˛
 = 
t§
->rcv_wscl;

702 
ts
->
¢d_ws˛
 =Ås->
rcv_ws˛
 = 0u;

704 
	`CI_IP_SOCK_STATS_VAL_TXWSCL
–
ts
,Ås->
¢d_ws˛
);

705 
	`CI_IP_SOCK_STATS_VAL_RXWSCL
–
ts
,Ås->
rcv_ws˛
);

708 
	`t˝_¢d_u«
(
ts
Ë
	`t˝_¢d_nxt
—sË
	`t˝_íq_nxt
—sË
	`t˝_¢d_up
(ts) =

709 
t§
->
¢d_i¢
 + 1;

710 
	`ci_t˝_£t_¢d_max
(
ts
, 
t§
->
rcv_nxt
, 
	`t˝_¢d_u«
(ts), 0);

711 
	`ci_t˝_rx_£t_i¢
(
ts
, 
t§
->
rcv_nxt
);

712 
	`t˝_rcv_up
(
ts
Ë
	`SEQ_SUB
(
	`t˝_rcv_nxt
(ts), 1);

714 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

715 
ts
->
öcomög_t˝_hdr_Àn
 += 12;

716 
ts
->
outgoög_hdrs_Àn
 += 12;

717 
ts
->
t•aws
 = 
	`ci_t˝_time_now
(
√tif
);

718 
ts
->
t§e˚¡
 = 
t§
->
t•ìr
;

719 
ts
->
t¶a°ack
 = 
t§
->
rcv_nxt
;

723 
	`ci_t˝_˛ór_πt_timög
(
ts
);

724 
ts
->
timed_ts
 = 
t§
->
time°
;

729 
	`ci_t˝_£t_hdr_Àn
(
ts
, (ts->
outgoög_hdrs_Àn
 - (
ci_ù4_hdr
)));

731 
ts
->
smss
 = 
t§
->
t˝›ts
.smss;

732 
ts
->
c
.
u£r_mss
 = 
és
->c.user_mss;

733 i‡(
ts
->
c
.
u£r_mss
 &&Ås->c.u£r_ms†<Ås->
smss
)

734 
ts
->
smss
 =Ås->
c
.
u£r_mss
;

735 #i‡
CI_CFG_LIMIT_SMSS


736 
ts
->
smss
 = 
	`ci_t˝_limô_mss
—s->smss, 
√tif
, 
__FUNCTION__
);

738 
	`ci_as£π
(
ts
->
smss
>0);

739 
	`ci_t˝_£t_eff_mss
(
√tif
, 
ts
);

740 
	`ci_t˝_£t_öôülcwnd
(
√tif
, 
ts
);

748 #i‚de‡
_WIN32


749 
	`ci_t˝_öhîô_ac˚±_›ti⁄s
(
√tif
, 
és
, 
ts
, "SYN RECV (LISTENQ PROMOTE)");

751 
ts
->
s
.
s_Êags
 |(
és
->s.s_Êag†& 
CI_SOCK_FLAG_SET_RCVBUF
);

752 
ts
->
s
.
so
.
rcvbuf
 = 
és
->s.so.rcvbuf;

753 
	`ci_t˝_öô_rcv_wnd
(
ts
, "SYN RECV (LISTENQ PROMOTE)");

757 
	`ci_t˝_£t_e°ablished_°©e
(
√tif
, 
ts
);

758 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
syƒecv2e°ablished
);

760 
	`ci_as£π
(
ts
->
ka_¥obes
 == 0);

761 
	`ci_t˝_kÆive_ª°¨t
(
√tif
, 
ts
, 
	`ci_t˝_kÆive_idÀ_gë
(ts));

762 
	`ci_t˝_£t_Êags
(
ts
, 
CI_TCP_FLAG_ACK
);

766 if–
t§
->
t˝›ts
.
Êags
 & 
CI_TCPT_FLAG_SYNCOOKIE
 )

767 
	`ci_‰ì
(
t§
);

769 
	`ci_t˝_li°íq_ªmove
(
√tif
, 
és
, 
t§
);

770 
	`ci_t˝_syƒecv_‰ì
(
√tif
, 
t§
);

773 
	`ci_bô_£t
(&
ts
->
s
.
b
.
sb_aÊags
, 
CI_SB_AFLAG_TCP_IN_ACCEPTQ_BIT
);

774 
	`ci_t˝_ac˚±q_put
(
√tif
, 
és
, &
ts
->
s
.
b
);

776 
	`LOG_TC
(
	`log
(
LNT_FMT
 "newÅs=%d SYN-RECV->ESTABLISHED flags=0x%x",

777 
	`LNT_PRI_ARGS
(
√tif
, 
és
), 
	`S_FMT
(
ts
),Ås->
t˝Êags
);

778 
	`log
(
LNTS_FMT
 
RCV_WND_FMT
 " snd=%08x-%08x-%08xÉnq=%08x",

779 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
), 
	`RCV_WND_ARGS
(ts),

780 
	`t˝_¢d_u«
(
ts
),

781 
	`t˝_¢d_nxt
(
ts
),Ås->
¢d_max
, 
	`t˝_íq_nxt
(ts)));

783 
	`côp_waôabÀ_wake
(
√tif
, &
és
->
s
.
b
, 
CI_SB_FLAG_WAKE_RX
);

784 *
ts_out
 = 
ts
;

787 
	`CI_TCP_EXT_STATS_INC_LISTEN_OVERFLOWS
–
√tif
 );

788 
	`LOG_U
(
	`log
(
LPF
 
LNT_FMT
"áccept queue is full (n=%d max=%d)",

789 
	`LNT_PRI_ARGS
(
√tif
, 
és
), 
	`ci_t˝_ac˚±q_n
—ls),Åls->
ac˚±q_max
));

790 
	`CITP_STATS_TCP_LISTEN
(++
és
->
°©s
.
n_ac˚±q_ovîÊow
);

792  -
ENOSPC
;

793 
	}
}

	@tcp_timer.c

14 
	~"ù_öã∫Æ.h
"

15 
	~"t˝_rx.h
"

17 
	#LPF
 "TCP TIMER "

	)

20 #i‚de‡
__KERNEL__


21 #i‚de‡
NDEBUG


22 
	$ci_t˝_timî_dump_c⁄°s
(
ci_√tif
* 
√tif
)

24 
	`log
(
LPF
 "time constants forÅhis CPU\n"

30 
	`NI_CONF
(
√tif
).
tc⁄°_πo_öôül
, 
	`NI_OPTS
“ëif).
πo_öôül
,

31 
	`NI_CONF
(
√tif
).
tc⁄°_πo_mö
, 
	`NI_OPTS
“ëif).
πo_mö
,

32 
	`NI_CONF
(
√tif
).
tc⁄°_πo_max
, 
	`NI_OPTS
“ëif).
πo_max
,

33 
	`NI_CONF
(
√tif
).
tc⁄°_dñack
, 
CI_TCP_TCONST_DELACK
,

34 
	`NI_CONF
(
√tif
).
tc⁄°_idÀ
, 
CI_TCP_TCONST_IDLE
);

35 
	`log
(" keepalive_time: %uticks (%ums)\n"

39 
	`NI_CONF
(
√tif
).
tc⁄°_kì∑live_time
, 
	`NI_OPTS
“ëif).
kì∑live_time
,

40 
	`NI_CONF
(
√tif
).
tc⁄°_kì∑live_ötvl
, 
	`NI_OPTS
“ëif).
kì∑live_ötvl
,

41 
	`NI_OPTS
(
√tif
).
kì∑live_¥obes
,

42 
	`NI_CONF
(
√tif
).
tc⁄°_zwö_max
, 
CI_TCP_TCONST_ZWIN_MAX
);

43 
	`log
("Öaws_idle: %uticks (%ums)",

44 
	`NI_CONF
(
√tif
).
tc⁄°_∑ws_idÀ
, 
CI_TCP_TCONST_PAWS_IDLE
);

45 
	`log
(" PMTU slow discover: %uticks (%ums)\n"

48 
	`NI_CONF
(
√tif
).
tc⁄°_pmtu_discovî_¶ow
, 
CI_PMTU_TCONST_DISCOVER_SLOW
,

49 
	`NI_CONF
(
√tif
).
tc⁄°_pmtu_discovî_Á°
, 
CI_PMTU_TCONST_DISCOVER_FAST
,

50 
	`NI_CONF
(
√tif
).
tc⁄°_pmtu_discovî_ªcovî
,

51 
CI_PMTU_TCONST_DISCOVER_RECOVER
);

52 
	`log
(" Intrumentation: %uticks (%ums)",

53 
	`NI_CONF
(
√tif
).
tc⁄°_°©s
, 
CI_TCONST_STATS
);

54 
	}
}

65 
	$ci_t˝_timî_öô
(
ci_√tif
* 
√tif
)

67 
	`NI_CONF
(
√tif
).
tc⁄°_πo_öôül
 =

68 
	`ci_t˝_time_ms2ticks
(
√tif
, 
	`NI_OPTS
“ëif).
πo_öôül
);

73 
	`NI_CONF
(
√tif
).
tc⁄°_πo_mö
 =

74 
	`ci_t˝_time_ms2ticks
(
√tif
, 
	`NI_OPTS
“ëif).
πo_mö
) + 1;

75 
	`NI_CONF
(
√tif
).
tc⁄°_πo_max
 =

76 
	`ci_t˝_time_ms2ticks
(
√tif
, 
	`NI_OPTS
“ëif).
πo_max
);

78 
	`NI_CONF
(
√tif
).
tc⁄°_dñack
 =

79 
	`ci_t˝_time_ms2ticks
(
√tif
, 
CI_TCP_TCONST_DELACK
);

81 
	`NI_CONF
(
√tif
).
tc⁄°_idÀ
 =

82 
	`ci_t˝_time_ms2ticks
(
√tif
, 
CI_TCP_TCONST_IDLE
);

84 
	`NI_CONF
(
√tif
).
tc⁄°_kì∑live_time
 =

85 
	`ci_t˝_time_ms2ticks
(
√tif
, 
	`NI_OPTS
“ëif).
kì∑live_time
);

86 
	`NI_CONF
(
√tif
).
tc⁄°_kì∑live_ötvl
 =

87 
	`ci_t˝_time_ms2ticks
(
√tif
, 
	`NI_OPTS
“ëif).
kì∑live_ötvl
);

89 
	`NI_CONF
(
√tif
).
tc⁄°_zwö_max
 =

90 
	`ci_t˝_time_ms2ticks
(
√tif
, 
CI_TCP_TCONST_ZWIN_MAX
);

92 
	`NI_CONF
(
√tif
).
tc⁄°_∑ws_idÀ
 =

93 
	`ci_t˝_time_ms2ticks
(
√tif
, 
CI_TCP_TCONST_PAWS_IDLE
);

95 
	`NI_CONF
(
√tif
).
tc⁄°_2m¶_time
 =

96 
	`ci_t˝_time_ms2ticks
(
√tif
, 2*
	`NI_OPTS
“ëif).
m¶_£c⁄ds
*1000);

97 
	`NI_CONF
(
√tif
).
tc⁄°_fö_timeout
 =

98 
	`ci_t˝_time_ms2ticks
(
√tif
, 
	`NI_OPTS
“ëif).
fö_timeout
*1000);

101 
	`NI_CONF
(
√tif
).
tc⁄°_pmtu_discovî_¶ow
 =

102 
	`ci_t˝_time_ms2ticks
(
√tif
, 
CI_PMTU_TCONST_DISCOVER_SLOW
);

104 
	`NI_CONF
(
√tif
).
tc⁄°_pmtu_discovî_Á°
 =

105 
	`ci_t˝_time_ms2ticks
(
√tif
, 
CI_PMTU_TCONST_DISCOVER_FAST
);

107 
	`NI_CONF
(
√tif
).
tc⁄°_pmtu_discovî_ªcovî
 =

108 
	`ci_t˝_time_ms2ticks
(
√tif
, 
CI_PMTU_TCONST_DISCOVER_RECOVER
);

110 
	`NI_CONF
(
√tif
).
tc⁄°_°©s
 =

111 
	`ci_t˝_time_ms2ticks
(
√tif
, 
CI_TCONST_STATS
);

113 #i‚de‡
__KERNEL__


114 
	`LOG_S
(
	`ci_t˝_timî_dump_c⁄°s
(
√tif
));

116 
	}
}

120 
	$ci_t˝_timeout_li°í
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
)

122 
ci_ni_dŒi°_lök
* 
l
;

123 
max_ªåõs
, 
ªåõs
, 
syƒecv_timeout
 = 0;

124 
out_of_∑ckës
 = 0;

125 
ci_ùtime_t
 
√xt_timeout
 = 
	`ci_t˝_time_now
(
√tif
);

127 
	`ci_as£π
(
√tif
);

128 
	`ci_as£π
(
és
);

129 
	`ci_as£π
(
és
->
s
.
b
.
°©e
 =
CI_TCP_LISTEN
);

131 
	`ci_as£π
(
és
->
n_li°íq
 > 0);

133 if–
és
->
c
.
t˝_de„r_ac˚±
 !
OO_TCP_DEFER_ACCEPT_OFF
 )

134 
max_ªåõs
 = 
és
->
c
.
t˝_de„r_ac˚±
;

136 
max_ªåõs
 = 
	`NI_OPTS
(
√tif
).
ªå™smô_thªshﬁd_sy«ck
;

141  
ªåõs
 = 0;Ñërõ†< 
max_ªåõs
; ++retries ) {

142 
ci_ni_dŒi°_t
* 
li°
 = &
és
->
li°íq
[
ªåõs
];

143 
ci_ni_dŒi°_lök
* 
œ°_l
 = 
NULL
;

145  
l
 = 
	`ci_ni_dŒi°_°¨t
(
√tif
, 
li°
);

146 
l
 !
	`ci_ni_dŒi°_íd
(
√tif
, 
li°
);

147 
	`ci_ni_dŒi°_ôî
(
√tif
, 
l
) ) {

148 
ci_t˝_°©e_syƒecv
* 
t§
 = 
	`ci_t˝_lök2syƒecv
(
l
);

150 
	`ci_as£π
–
	`OO_SP_IS_NULL
(
t§
->
loˇl_≥î
) );

153 if–
	`TIME_GT
(
t§
->
timeout
, 
	`ci_t˝_time_now
(
√tif
)) ) {

154 if–
√xt_timeout
 =
	`ci_t˝_time_now
(
√tif
) ||

155 
	`TIME_LT
(
t§
->
timeout
, 
√xt_timeout
) )

156 
√xt_timeout
 = 
t§
->
timeout
;

160 
	`ci_as£π_equÆ
(
t§
->
ªåõs
 & 
CI_FLAG_TSR_RETRIES_MASK
,Ñetries);

161 
œ°_l
 = 
l
;

169 if–
és
->
c
.
t˝_de„r_ac˚±
 !
OO_TCP_DEFER_ACCEPT_OFF
 &&

170 (
t§
->
ªåõs
 & 
CI_FLAG_TSR_RETRIES_MASK
Ë=
max_ªåõs
 - 1 )

171 
t§
->
ªåõs
 &~
CI_FLAG_TSR_RETRIES_ACKED
;

172 if–(~
t§
->
ªåõs
 & 
CI_FLAG_TSR_RETRIES_ACKED
) ||

173 
és
->
c
.
t˝_de„r_ac˚±
 =
OO_TCP_DEFER_ACCEPT_OFF
 ) {

174 
rc
 = 0;

175 
ci_ù_pkt_fmt
* 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
√tif
);

177 if–
pkt
 =
NULL
 )

178 
out_of_∑ckë
;

179 
rc
 = 
	`ci_t˝_syƒecv_£nd
(
√tif
, 
és
, 
t§
, 
pkt
,

180 
CI_TCP_FLAG_SYN
 | 
CI_TCP_FLAG_ACK
, 
NULL
);

181 if–
rc
 == 0 ) {

182 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
syƒecv_ªå™smôs
);

183 
	`LOG_TC
(
	`log
(
LPF
 "SYNRECVÑetransmited %d SYNACK%s\n"

185 
t§
->
ªåõs
 & 
CI_FLAG_TSR_RETRIES_MASK
,

186 (
t§
->
ªåõs
 & 
CI_FLAG_TSR_RETRIES_ACKED
) ?

188 
t§
->
timeout
));

191 
	`LOG_U
(
	`ci_log
("%s:Çÿªtu∫ÑouãÉxi°†"
CI_IP_PRINTF_FORMAT
,

192 
__FUNCTION__
, 
	`CI_IP_PRINTF_ARGS
(&
t§
->
r_addr
)));

196 if–
ªåõs
 == 0 )

197 --
és
->
n_li°íq_√w
;

198 
t§
->
ªåõs
++;

199 
	`ci_as£π_equÆ
(
t§
->
ªåõs
 & 
CI_FLAG_TSR_RETRIES_MASK
,Ñetries + 1);

201 
t§
->
timeout
 = 
	`NI_CONF
(
√tif
).
tc⁄°_πo_öôül
 << (
ªåõs
 + 1);

202 
t§
->
timeout
 = 
	`CI_MIN
—§->timeout, 
	`NI_CONF
(
√tif
).
tc⁄°_πo_max
);

203 
t§
->
timeout
 +
	`ci_t˝_time_now
(
√tif
);

208 if–
œ°_l
 !
NULL
 ) {

209 
ci_ni_dŒi°_t
* 
√xt_li°
 = &
és
->
li°íq
[
ªåõs
 + 1];

210 
ci_ni_dŒi°_lök
* 
°¨t_l
 = 
	`ci_ni_dŒi°_°¨t
(
√tif
, 
li°
);

211 
ci_ni_dŒi°_lök
* 
lök_to_l
 = 
	`ci_ni_dŒi°_°¨t_œ°
(
√tif
, 
√xt_li°
);

212 
ci_ni_dŒi°_lök
* 
u∆ök_‰om_l
 =

213 (
ci_ni_dŒi°_lök
*Ë
	`CI_NETIF_PTR
(
√tif
, 
œ°_l
->
√xt
);

216 
li°
->
l
.
√xt
 = 
	`ci_ni_dŒi°_lök_addr
(
√tif
, 
u∆ök_‰om_l
);

217 
u∆ök_‰om_l
->
¥ev
 = 
	`ci_ni_dŒi°_lök_addr
(
√tif
, &
li°
->
l
);

221 
°¨t_l
->
¥ev
 = 
	`ci_ni_dŒi°_lök_addr
(
√tif
, 
lök_to_l
);

222 
lök_to_l
->
√xt
 = 
	`ci_ni_dŒi°_lök_addr
(
√tif
, 
°¨t_l
);

223 
œ°_l
->
√xt
 = 
	`ci_ni_dŒi°_lök_addr
(
√tif
, &
√xt_li°
->
l
);

224 
√xt_li°
->
l
.
¥ev
 = 
	`ci_ni_dŒi°_lök_addr
(
√tif
, 
œ°_l
);

231  
ªåõs
 = 
max_ªåõs
;

232 
ªåõs
 <
CI_CFG_TCP_SYNACK_RETRANS_MAX
;

233 ++
ªåõs
 ) {

234 
l
 = 
	`ci_ni_dŒi°_°¨t
(
√tif
, &
és
->
li°íq
[
ªåõs
]);

235  
l
 !
	`ci_ni_dŒi°_íd
(
√tif
, &
és
->
li°íq
[
ªåõs
]) ) {

236 
ci_t˝_°©e_syƒecv
* 
t§
 = 
	`ci_t˝_lök2syƒecv
(
l
);

239 
	`ci_ni_dŒi°_ôî
(
√tif
, 
l
);

241 
	`ci_as£π
–
	`OO_SP_IS_NULL
(
t§
->
loˇl_≥î
) );

244 if–
	`TIME_GT
(
t§
->
timeout
, 
	`ci_t˝_time_now
(
√tif
)) ) {

245 if–
√xt_timeout
 =
	`ci_t˝_time_now
(
√tif
) ||

246 
	`TIME_LT
(
t§
->
timeout
, 
√xt_timeout
) )

247 
√xt_timeout
 = 
t§
->
timeout
;

251 
	`ci_as£π_equÆ
(
t§
->
ªåõs
 & 
CI_FLAG_TSR_RETRIES_MASK
,Ñetries);

253 
	`ci_t˝_li°íq_dr›
(
√tif
, 
és
, 
t§
);

254 
	`ci_t˝_syƒecv_‰ì
(
√tif
, 
t§
);

255 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
syƒecv_timeouts
);

257 
	`LOG_TC
(
	`log
(
LPF
 "SYNRECVÑetries %dÉxceeded %d,"

259 
t§
->
ªåõs
 & 
CI_FLAG_TSR_RETRIES_MASK
,

260 
	`NI_OPTS
(
√tif
).
ªå™smô_thªshﬁd_sy«ck
));

262 ++
syƒecv_timeout
;

266 
out
:

267 if–
syƒecv_timeout
 )

268 
	`NI_LOG
(
√tif
, 
CONN_DROP
, "%s: [%d] %d hÆf-›íÅimeouts\n", 
__func__
,

269 
	`NI_ID
(
√tif
), 
syƒecv_timeout
);

272 if–
√xt_timeout
 !
	`ci_t˝_time_now
(
√tif
) ) {

276 
	`ci_ù_timî_£t
(
√tif
, &
és
->
li°íq_tid
,

277 
out_of_∑ckës
 ?

278 
	`ci_t˝_time_now
(
√tif
Ë+ 1 : 
√xt_timeout
);

282 
out_of_∑ckë
:

283 
	`LOG_TV
(
	`ci_log
(
LNT_FMT
"SYNRECV[retries=%d]Ço buffers,ÇotÑe-sending synacks "

285 
	`LNT_PRI_ARGS
(
√tif
, 
és
), 
ªåõs
,

286 
és
->
n_li°íq
 -Åls->
n_li°íq_√w
));

287 
	`CITP_STATS_NETIF_INC
(
√tif
, 
t˝_li°í_sy«ck_ªå™s_no_buf„r
);

288 
out_of_∑ckës
 = 1;

289 
out
;

290 
	}
}

294 
	$ci_t˝_timeout_kÆive
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

296 
ci_ùtime_t
 
t_œ°_ªcv
 =

297 
	`CI_MAX
(
ts
->
t_œ°_ªcv_∑ylﬂd
,Ås->
t_œ°_ªcv_ack
);

299 
	`ci_as£π
(
√tif
);

300 
	`ci_as£π
(
ts
);

301 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 !
CI_TCP_CLOSED
);

304 i‡(
ts
->
ka_¥obes
 == 0 &&

305 
	`ci_t˝_time_now
(
√tif
Ë- 
t_œ°_ªcv
 < 
	`ci_t˝_kÆive_idÀ_gë
(
ts
)) {

312 
	`ci_t˝_kÆive_ª°¨t
(
√tif
, 
ts
,

313 
	`ci_t˝_kÆive_idÀ_gë
(
ts
) -

314 (
	`ci_t˝_time_now
(
√tif
Ë- 
t_œ°_ªcv
));

318 i‡(
ts
->
ka_¥obes
 != 0 &&

319 
	`ci_t˝_time_now
(
√tif
Ë- 
t_œ°_ªcv
 <

320 
	`ci_t˝_kÆive_ötvl_gë
(
√tif
, 
ts
)) {

321 
	`ci_t˝_kÆive_ª°¨t
(
√tif
, 
ts
,

322 
	`ci_t˝_kÆive_ötvl_gë
(
√tif
, 
ts
) -

323 (
	`ci_t˝_time_now
(
√tif
Ë- 
t_œ°_ªcv
));

327 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
));

330 if–
	`OO_SP_NOT_NULL
(
ts
->
loˇl_≥î
) ) {

331 
côp_waôabÀ
* 
≥î
 = 
	`ID_TO_WAITABLE
(
√tif
, 
ts
->
loˇl_≥î
);

332 if–~
≥î
->
°©e
 & 
CI_TCP_STATE_TCP_CONN
 )

333 
	`ci_t˝_dr›
(
√tif
, 
ts
, 
ETIMEDOUT
);

337 
	`LOG_TL
(
	`log
(
LPF
 "%d KALIVE: 0x%xÑto:%u\n",

338 
	`S_FMT
(
ts
), 
	`ci_t˝_time_now
(
√tif
),Ås->
πo
));

339 i‡(
ts
->
ka_¥obes
 > 
	`ci_t˝_kÆive_¥obes_gë
(ts) )

340 
	`CI_TCP_EXT_STATS_INC_TCP_ABORT_ON_TIMEOUT
–
√tif
 );

341 if–
ts
->
ka_¥obes
 >
	`ci_t˝_kÆive_¥obes_gë
(ts) ) {

342 
	`LOG_U
(
	`log
(
LPF
 "%d KALIVE: (should drop) ka_probes=%u ka_probe_th=%u",

343 
	`S_FMT
(
ts
),Ås->
ka_¥obes
, 
	`ci_t˝_kÆive_¥obes_gë
(ts)));

345 
	`ci_t˝_£nd_r°
(
√tif
, 
ts
);

346 
	`ci_t˝_dr›
(
√tif
, 
ts
, 
ETIMEDOUT
);

350 
	`ci_t˝_£nd_zwö_¥obe
(
√tif
, 
ts
);

352 ++
ts
->
ka_¥obes
;

353 
	`ci_t˝_kÆive_ª°¨t
(
√tif
, 
ts
, 
	`ci_t˝_kÆive_ötvl_gë
(netif,Ås));

354 
	}
}

358 
	$ci_t˝_timeout_zwö
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

360 
	`ci_as£π
(
√tif
);

361 
	`ci_as£π
(
ts
);

362 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 !
CI_TCP_CLOSED
);

372 if–
	`t˝_¢d_wnd
(
ts
Ë>
	`t˝_eff_mss
(ts) ||

373 ! (
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_TXQ_ACTIVE
) ||

374 
	`ci_ù_queue_nŸ_em±y
(&
ts
->
ªå™s
) ) {

375 
ts
->
zwö_¥obes
 = 0;

376 
ts
->
zwö_acks
 = 0;

379 if–
	`ci_t˝_£ndq_is_em±y
(
ts
) ) {

383 
	`ci_t˝_zwö_£t
(
√tif
, 
ts
);

387 
	`LOG_TT
(
	`log
(
LNTS_FMT
 "ZWIN:Çow=0x%xÑto=%u snd_wnd=%dÖrobes=%d,%d",

388 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
), 
	`ci_t˝_time_now
“ëif),Ås->
πo
,

389 
	`t˝_¢d_wnd
(
ts
),Ås->
zwö_¥obes
,Ås->
zwö_acks
));

391 if–
	`CI_UNLIKELY
(
	`t˝_¢d_wnd
(
ts
) > 0) ) {

392 
ci_ù_pkt_fmt
* 
fú°_pkt
 = 
	`PKT_CHK
(
√tif
, 
ts
->
£nd
.
hód
);

403 if–
	`CI_UNLIKELY
(
	`t˝_¢d_wnd
(
ts
Ë+ ((1 <<Ås->
¢d_ws˛
) - 1) >=

404 
	`PKT_TCP_TX_SEQ_SPACE
(
fú°_pkt
)) ) {

410 if–
	`SEQ_GT
(
fú°_pkt
->
pf
.
t˝_tx
.
íd_£q
, 
ts
->
¢d_max
) )

411 
ts
->
¢d_max
 +(1 <<Ås->
¢d_ws˛
) - 1;

412 
	`ci_t˝_tx_adv™˚
(
ts
, 
√tif
);

415 if–
ts
->
zwö_¥obes
 =0 &&Ås->
zwö_acks
 > 2 ) {

418 
	`ci_t˝_£t_¢d_max
(
ts
, 
	`t˝_rcv_nxt
—sË- 1,Ås->
¢d_max
,

419 
	`t˝_eff_mss
(
ts
Ë- 
	`t˝_¢d_wnd
(ts));

420 
	`ci_as£π_equÆ
(
	`t˝_¢d_wnd
(
ts
), 
	`t˝_eff_mss
(ts));

421 
	`ci_t˝_tx_adv™˚
(
ts
, 
√tif
);

422 
ts
->
zwö_acks
 = 0;

427 
	`ci_t˝_£nd_zwö_¥obe
(
√tif
, 
ts
);

430 
	`ci_t˝_£nd_zwö_¥obe
(
√tif
, 
ts
);

431 
	`ci_t˝_zwö_£t
(
√tif
, 
ts
);

432 
ts
->
zwö_¥obes
++;

433 
	}
}

437 
	$ci_t˝_timeout_dñack
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

439 
ci_ù_pkt_fmt
* 
pkt
;

441 
	`ci_as£π
(
√tif
);

442 
	`ci_as£π
(
ts
);

443 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 !
CI_TCP_CLOSED
);

444 
	`ci_as£π
((
ts
->
acks_≥ndög
 & 
CI_TCP_ACKS_PENDING_MASK
) > 0);

446 
	`LOG_TV
(
	`log
(
LNT_FMT
 "DELACKÇow=0x%xácks_≥ndög=%x", 
	`LNT_PRI_ARGS
(
√tif
,
ts
),

447 
	`ci_t˝_time_now
(
√tif
), 
ts
->
acks_≥ndög
));

449 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
√tif
);

450 if–
pkt
 ) {

451 
	`CI_TCP_EXT_STATS_INC_DELAYED_ACK
–
√tif
 );

452 
	`CITP_STATS_NETIF_INC
(
√tif
, 
acks_£¡
);

453 
	`ci_t˝_£nd_ack
(
√tif
, 
ts
, 
pkt
, 
CI_FALSE
);

456 
	`LOG_TR
(
	`log
(
LNT_FMT
 "DELACKÇow=%xácks_pending=%x NO BUFS (willÑetry)",

457 
	`LNT_PRI_ARGS
(
√tif
, 
ts
),

458 
	`ci_t˝_time_now
(
√tif
), 
ts
->
acks_≥ndög
));

459 
	`ci_ù_timî_£t
(
√tif
, &
ts
->
dñack_tid
,

460 
	`ci_t˝_time_now
(
√tif
Ë+ 
	`NI_CONF
“ëif).
tc⁄°_dñack
);

462 
	}
}

465 
	$ci_t˝_dr›_due_to_πo
(
ci_√tif
 *
ni
, 
ci_t˝_°©e
 *
ts
,

466 
max_ªå™s
)

468 
	`LOG_U
(
	`log
(
LNTS_FMT
 " (%s) state=%u so_error=%dÑetransmits=%u max=%u",

469 
	`LNTS_PRI_ARGS
(
ni
, 
ts
), 
__FUNCTION__
,

470 
ts
->
s
.
b
.
°©e
,Ås->s.
so_îr‹
,Ås->
ªå™smôs
, 
max_ªå™s
));

472 
ts
->
ªå™smôs
 = 0;

473 
	`ci_t˝_dr›
(
ni
, 
ts
, 
ETIMEDOUT
);

475 
	}
}

478 
	$ci_t˝_timeout_c‹k
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

484 if–
ts
->
£nd
.
num
 == 1 ) {

485 
	`TX_PKT_TCP
(
	`PKT_CHK
(
√tif
, 
ts
->
£nd
.
hód
))->
t˝_Êags
 |
CI_TCP_FLAG_PSH
;

486 
	`ci_t˝_tx_adv™˚
(
ts
, 
√tif
);

489 
	}
}

492 
	$ci_t˝_timeout_πo
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

494 
ci_ù_pkt_queue
* 
πq
 = &
ts
->
ªå™s
;

495 
max_ªå™s
;

497 
	`ci_as£π
(
√tif
);

498 
	`ci_as£π
(
ts
);

499 
	`ci_as£π
(
ts
->
s
.
b
.
°©e
 !
CI_TCP_CLOSED
);

502 
	`ci_as£π
(!
	`ci_ù_queue_is_em±y
(
πq
));

504 
	`LOG_TL
(
ci_ù_pkt_fmt
* 
pkt
 = 
	`PKT
(
√tif
, 
πq
->
hód
);

505 
	`log
(
LNTS_FMT
 "RTOÇow=%x srtt=%uÑttvar=%uÑto=%uÑetransmits=%d",

506 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
), 
	`ci_t˝_time_now
(netif),

507 
	`t˝_§â
(
ts
), 
	`t˝_πtv¨
—s),Ås->
πo
,Ås->
ªå™smôs
);

508 
	`log
(" "
TCP_SND_FMT
, 
	`TCP_SND_PRI_ARG
(
ts
));

509 
	`log
(" "
TCP_CONG_FMT
, 
	`TCP_CONG_PRI_ARG
(
ts
));

510 
	`log
(" head=%08x-%08xÅsval=%xÖkt_flag=%u",

511 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
,Ökt->pf.t˝_tx.
íd_£q
,

512 (
ts
->
t˝Êags
&
CI_TCPT_FLAG_TSO
Ë? 
	`PKT_TCP_TSO_TSVAL
(
pkt
):0x0,

513 
pkt
->
Êags
));

514 
	`CI_IP_SOCK_STATS_INC_RTTO
–
ts
 );

516 #i‡
CI_CFG_BURST_CONTROL


520 
ts
->
bur°_wödow
 = 0;

523 #i‡
CI_CFG_TAIL_DROP_PROBE


526 if(
	`NI_OPTS
(
√tif
).
èû_dr›_¥obe
 &&

527 
ts
->
èûdr›_°©e
 !
CI_TCP_TAIL_DROP_ACTIVE
){

528 
ts
->
èûdr›_°©e
 = 
CI_TCP_TAIL_DROP_ACTIVE
;

532 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_SYN_SENT
 ) {

533 
max_ªå™s
 = 
	`NI_OPTS
(
√tif
).
ªå™smô_thªshﬁd_syn
;

535 if–
ts
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
 ) {

536 
max_ªå™s
 = 
	`NI_OPTS
(
√tif
).
ªå™smô_thªshﬁd_‹ph™
;

537 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
t˝_πos
);

540 
max_ªå™s
 = 
	`NI_OPTS
(
√tif
).
ªå™smô_thªshﬁd
;

541 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
t˝_πos
);

544 if–
ts
->
ªå™smôs
 >
max_ªå™s
 || 
	`NI_OPTS
(
√tif
).
r°_dñayed_c⁄n
 ) {

545 
ts
->
s
.
so_îr‹
 = 
ETIMEDOUT
;

546 
	`ci_t˝_dr›_due_to_πo
(
√tif
, 
ts
, 
max_ªå™s
);

550 if–
ts
->
s
.
b
.
°©e
 =
CI_TCP_SYN_SENT
 &&Ås->s.
so_îr‹
 != 0 &&

551 
ts
->
ªå™smôs
 > 0 )

553 
	`ci_t˝_dr›_due_to_πo
(
√tif
, 
ts
, 
max_ªå™s
);

557 if–
ts
->
c⁄g°©e
 =
CI_TCP_CONG_RTO
 ){

566 
ts
->
s°hªsh
 = 
	`t˝_eff_mss
(ts) << 1u;

572 if–
ts
->
c⁄g°©e
 =
CI_TCP_CONG_FAST_RECOV
 &&

573 !(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
) ) {

574 
x
 = 
ts
->
s°hªsh
 >> 1u;

575 
y
 = 
	`t˝_eff_mss
(
ts
) << 1u;

576 
ts
->
s°hªsh
 = 
	`CI_MAX
(
x
, 
y
);

579 
ts
->
s°hªsh
 = 
	`ci_t˝_losswnd
(ts);

581 
ts
->
c⁄g°©e
 = 
CI_TCP_CONG_RTO
;

582 
ts
->
cwnd_exåa
 = 0;

583 ++
ts
->
°©s
.
πos
;

586 
ts
->
c⁄gªcovî
 = 
	`t˝_¢d_nxt
(ts);

589 
ts
->
cwnd
 = 
	`CI_MAX
(
	`t˝_eff_mss
—s), 
	`NI_OPTS
(
√tif
).
loss_mö_cwnd
);

590 
ts
->
byãs_acked
 = 0;

593 
ts
->
πo
 <<= 1u;

594 
ts
->
πo
 = 
	`CI_MIN
—s->πo, 
	`NI_CONF
(
√tif
).
tc⁄°_πo_max
);

595 
	`ci_t˝_πo_£t
(
√tif
, 
ts
);

601 
	`ci_t˝_˛ór_ßcks
(
√tif
, 
ts
);

603 if–
	`ci_t˝_öÊight
(
ts
Ë< (
	`t˝_eff_mss
—sË>> 1Ë*Ås->
ªå™s
.
num
 )

607 
	`ci_t˝_ªå™s_cﬂÀs˚_block
(
√tif
, 
ts
, 
	`PKT_CHK
“ëif, 
πq
->
hód
));

612 ++
ts
->
ªå™smôs
;

613 
	`ci_t˝_ªå™s_ªcovî
(
√tif
, 
ts
, 0);

614 
	}
}

617 #i‡
CI_CFG_TAIL_DROP_PROBE


619 
	$ci_t˝_timeout_èûdr›
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

621 
ci_ù_pkt_queue
 *
πq
 = &
ts
->
ªå™s
;

622 
ci_ù_pkt_fmt
 *
πq_èû
;

623 
πq_èû_£q
;

625 
	`ci_as£π
(
	`NI_OPTS
(
√tif
).
èû_dr›_¥obe
);

628 if(
ts
->
èûdr›_°©e
 =
CI_TCP_TAIL_DROP_PRIMED


629 && 
πq
->
num
 > 1){

631 
πq_èû
 = 
	`PKT_CHK
(
√tif
, 
ts
->
ªå™s
.
èû
);

632 
πq_èû_£q
 = 
	`CI_BSWAP_BE32
(
	`TX_PKT_TCP
(
πq_èû
)->
t˝_£q_be32
);

634 i‡(
	`SEQ_LE
(
πq_èû_£q
, 
ts
->
èûdr›_m¨k
)){

635 if(
	`ci_t˝_£nd_èûdr›_¥obe
(
√tif
, 
ts
)){

636 
	`LOG_TV
(
	`log
("SendingÅail dropÖrobe, mark %08x, una %08x seq %08x-%08x",

637 
ts
->
èûdr›_m¨k
, 
	`t˝_¢d_u«
—s), 
πq_èû_£q
,

638 
πq_èû
->
pf
.
t˝_tx
.
íd_£q
));

640 
ts
->
èûdr›_°©e
 = 
CI_TCP_TAIL_DROP_PROBED
;

644 
	`ci_t˝_èûdr›_check_™d_£t
(
√tif
, 
ts
);

651 
ts
->
èûdr›_°©e
 = 
CI_TCP_TAIL_DROP_ACTIVE
;

652 
	}
}

	@tcp_tx.c

14 
	~"ù_öã∫Æ.h
"

15 
	~<⁄lﬂd/¶ìp.h
>

16 
	~"ù_tx.h
"

17 
	~<ci/öã∫Æ/pio_buddy.h
>

18 #i‡
deföed
(
__ci_drivî__
Ë&& deföed(
__löux__
)

19 
	~<˝œ√/exp‹ãd.h
>

21 
	~"t˝_tx.h
"

24 
	#LPF
 "TCP TX "

	)

27 
ci_ölöe
 
	$ci_ù_t˝_li°_to_dmaq
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

28 
oo_pkt_p
 
hód_id
,

29 
ci_ù_pkt_fmt
* 
èû_pkt
)

31 
ci_ù_pkt_fmt
* 
pkt
;

32 
oo_pktq
* 
dmaq
;

33 
oo_pkt_p
 
µ
;

34 
ef_vi
* 
vi
;

35 
n
;

36 #i‡
CI_CFG_USE_PIO


37 
rc
;

38 
ci_uöt8
 
‹dî
;

39 
ci_öt32
 
off£t
;

40 
ci_pio_buddy_Æloˇt‹
* 
buddy
;

43 
µ
 = 
hód_id
;

44 
n
 = 0;

46 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

47 
µ
 = 
pkt
->
√xt
;

48 if–(
ts
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_TX_HARDWARE
) &&

49 
	`CI_TCP_PAYLEN
(
	`oo_tx_ù_hdr
(
pkt
), 
	`TX_PKT_TCP
(pkt)) != 0 )

50 
pkt
->
Êags
 |
CI_PKT_FLAG_TX_TIMESTAMPED
;

51 
	`ci_ù_£t_mac_™d_p‹t
(
ni
, &
ts
->
s
.
pkt
,Ökt);

52 
	`ci_√tif_pkt_hﬁd
(
ni
, 
pkt
);

53 
	`__ci_√tif_dmaq_ö£π_¥ï_pkt
(
ni
, 
pkt
);

54 
pkt
->
√tif
.
tx
.
dmaq_√xt
 =Ökt->
√xt
;

55 ++
n
;

56 }  
pkt
 !
èû_pkt
 );

58 
	`ci_√tif_dmaq_™d_vi_f‹_pkt
(
ni
, 
èû_pkt
, &
dmaq
, &
vi
);

60 #i‡
CI_CFG_USE_PIO


64 
‹dî
 = 
	`ci_log2_ge
(
èû_pkt
->
∑y_Àn
, 
CI_CFG_MIN_PIO_BLOCK_ORDER
);

65 
buddy
 = &
ni
->
°©e
->
nic
[
èû_pkt
->
ötf_i
].
pio_buddy
;

66 if–
n
 =1 && 
	`oo_pktq_is_em±y
(
dmaq
) &&

67 (
ni
->
°©e
->
nic
[
èû_pkt
->
ötf_i
].
oo_vi_Êags
 & 
OO_VI_FLAGS_PIO_EN
) ) {

68 if–
èû_pkt
->
∑y_Àn
 <
	`NI_OPTS
(
ni
).
pio_thªsh
 ) {

69 if–(
off£t
 = 
	`ci_pio_buddy_Æloc
(
ni
, 
buddy
, 
‹dî
)) >= 0 ) {

70 if(
	`CI_UNLIKELY
–
ni
->
Êags
 & 
CI_NETIF_FLAG_MSG_WARM
 )) {

71 
	`__ci_√tif_dmaq_ö£π_¥ï_pkt_w¨m_undo
(
ni
, 
èû_pkt
);

72 
	`ci_pio_buddy_‰ì
(
ni
, &ni->
°©e
->
nic
[
èû_pkt
->
ötf_i
].
pio_buddy
,

73 
off£t
, 
‹dî
);

76 
rc
 = 
	`ef_vi_å™smô_c›y_pio
(
vi
, 
off£t
, 
	`PKT_START
(
èû_pkt
),

77 
èû_pkt
->
buf_Àn
, 
	`OO_PKT_ID
(
pkt
));

78 if–
rc
 == 0 ) {

79 
	`CITP_STATS_NETIF_INC
(
ni
, 
pio_pkts
);

80 
	`ci_as£π
(
èû_pkt
->
pio_addr
 == -1);

81 
èû_pkt
->
pio_addr
 = 
off£t
;

82 
èû_pkt
->
pio_‹dî
 = 
‹dî
;

86 
	`CITP_STATS_NETIF_INC
(
ni
, 
no_pio_îr
);

87 
	`ci_pio_buddy_‰ì
(
ni
, 
buddy
, 
off£t
, 
‹dî
);

92 
	`CI_DEBUG
(
	`CITP_STATS_NETIF_INC
(
ni
, 
no_pio_busy
));

96 
	`CI_DEBUG
(
	`CITP_STATS_NETIF_INC
(
ni
, 
no_pio_too_l⁄g
));

101 if(
	`CI_LIKELY
–! (
ni
->
Êags
 & 
CI_NETIF_FLAG_MSG_WARM
) )) {

102 
	`__oo_pktq_put_li°
(
ni
, 
dmaq
, 
hód_id
, 
èû_pkt
, 
n
, 
√tif
.
tx
.
dmaq_√xt
);

103 
	`ci_√tif_dmaq_shove2
(
ni
, 
èû_pkt
->
ötf_i
);

106 
	`__ci_√tif_dmaq_ö£π_¥ï_pkt_w¨m_undo
(
ni
, 
èû_pkt
);

108 
	}
}

111 #i‡
CI_CFG_PORT_STRIPING


112 
	$ci_ù_t˝_li°_to_dmaq_°rùög
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

113 
oo_pkt_p
 
hód_id
,

114 
ci_ù_pkt_fmt
* 
èû_pkt
)

116 
shove_ötf_i
[2] = {-1, -1};

117 
ci_ù_pkt_fmt
* 
pkt
;

118 
ci_ù_pkt_fmt
* 
√xt_pkt
;

119 
oo_pktq
* 
dmaq
;

120 
oo_pkt_p
 
µ
;

121 
ef_vi
* 
vi
;

122 
n
;

124 
µ
 = 
hód_id
;

125 
n
 = 0;

127 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

128 if–
ts
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_TX_HARDWARE
 &&

129 
	`CI_TCP_PAYLEN
(
	`oo_tx_ù_hdr
(
pkt
), 
	`TX_PKT_TCP
(pkt)) != 0 )

130 
pkt
->
Êags
 |
CI_PKT_FLAG_TX_TIMESTAMPED
;

131 
	`ci_ù_£t_mac_™d_p‹t
(
ni
, &
ts
->
s
.
pkt
,Ökt);

132 
µ
 = 
pkt
->
√xt
;

133 
	`ci_√tif_pkt_hﬁd
(
ni
, 
pkt
);

134 
	`__ci_√tif_dmaq_ö£π_¥ï_pkt
(
ni
, 
pkt
);

135 
pkt
->
√tif
.
tx
.
dmaq_√xt
 =Ökt->
√xt
;

136 ++
n
;

138 if–
pkt
 =
èû_pkt
 ) {

140 
	`ci_√tif_dmaq_™d_vi_f‹_pkt
(
ni
, 
èû_pkt
, &
dmaq
, &
vi
);

141 
	`__oo_pktq_put_li°
(
ni
, 
dmaq
, 
hód_id
, 
èû_pkt
, 
n
, 
√tif
.
tx
.
dmaq_√xt
);

144 
	`ci_as£π
((
shove_ötf_i
[
pkt
->
√tif
.
tx
.
ötf_sw≠
] == -1) ||

145 (
shove_ötf_i
[
pkt
->
√tif
.
tx
.
ötf_sw≠
] =pkt->
ötf_i
));

146 
shove_ötf_i
[
pkt
->
√tif
.
tx
.
ötf_sw≠
] =Ökt->
ötf_i
;

151 
√xt_pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

152 if–
pkt
->
√tif
.
tx
.
ötf_sw≠
 !
√xt_pkt
->netif.tx.intf_swap ) {

154 
	`ci_√tif_dmaq_™d_vi_f‹_pkt
(
ni
, 
pkt
, &
dmaq
, &
vi
);

155 
	`__oo_pktq_put_li°
(
ni
, 
dmaq
, 
hód_id
, 
pkt
, 
n
, 
√tif
.
tx
.
dmaq_√xt
);

158 
	`ci_as£π
((
shove_ötf_i
[
pkt
->
√tif
.
tx
.
ötf_sw≠
] == -1) ||

159 (
shove_ötf_i
[
pkt
->
√tif
.
tx
.
ötf_sw≠
] =pkt->
ötf_i
));

160 
shove_ötf_i
[
pkt
->
√tif
.
tx
.
ötf_sw≠
] =Ökt->
ötf_i
;

163 
hód_id
 = 
µ
;

164 
n
 = 0;

169 if–
shove_ötf_i
[0] != -1 )

170 
	`ci_√tif_dmaq_shove2
(
ni
, 
shove_ötf_i
[0]);

171 if–
shove_ötf_i
[1] != -1 )

172 
	`ci_√tif_dmaq_shove2
(
ni
, 
shove_ötf_i
[1]);

173 
	}
}

176 
	$ci_ù_£nd_t˝_li°_lo›back
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

177 
oo_pkt_p
 
hód_id
,

178 
ci_ù_pkt_fmt
* 
èû_pkt
)

180 
ci_ù_pkt_fmt
* 
pkt
;

181 
oo_pkt_p
 
µ
;

183 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

184 
	`ci_as£π
(
ts
->
s
.
pkt
.
Êags
 & 
CI_IP_CACHE_IS_LOCALROUTE
);

186 
µ
 = 
hód_id
;

188 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

189 
µ
 = 
pkt
->
√xt
;

190 
pkt
->
pf
.
t˝_tx
.
lo
.
tx_sock
 = 
	`S_SP
(
ts
);

191 
pkt
->
pf
.
t˝_tx
.
lo
.
rx_sock
 = 
ts
->
loˇl_≥î
;

192 if–
	`CI_UNLIKELY
(
	`OO_SP_IS_NULL
(
pkt
->
pf
.
t˝_tx
.
lo
.
rx_sock
)) ) {

193 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pkt
);

196 
pkt
->
√xt
 = 
ni
->
°©e
->
lo›pkts
;

197 
ni
->
°©e
->
lo›pkts
 = 
	`OO_PKT_ID
(
pkt
);

198 
ni
->
°©e
->
n_lo›pkts
++;

199 
	`LOG_NT
(
	`ci_log
(
NS_FMT
 "lo›back TXÖkà%dÅÿ%d", 
	`NS_PRI_ARGS
(
ni
, &
ts
->
s
),

200 
	`OO_PKT_FMT
(
pkt
), 
	`OO_SP_FMT
’kt->
pf
.
t˝_tx
.
lo
.
rx_sock
)));

201 }  
pkt
 !
èû_pkt
 );

204 if–
	`CI_UNLIKELY
(
	`OO_SP_IS_NULL
(
pkt
->
pf
.
t˝_tx
.
lo
.
rx_sock
)) ) {

205 
	`ci_t˝_dr›
(
ni
, 
ts
, 
ECONNRESET
);

210 if–
	`SEQ_LE
(
ts
->
ack_åiggî
,Ås->
rcv_dñivîed
) )

211 
	`ci_t˝_£nd_ack_lo›back
(
ni
, 
ts
, 
CI_FALSE
);

212 if–!
ni
->
°©e
->
ö_pﬁl
 )

213 
	`ci_√tif_pﬁl
(
ni
);

215 
	}
}

217 
	$ci_ù_£nd_t˝_li°
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

218 
oo_pkt_p
 
hód_id
, 
ci_ù_pkt_fmt
* 
èû_pkt
)

220 
ci_ù_pkt_fmt
* 
pkt
;

222 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

223 
	`ci_as£π
(~
ts
->
s
.
pkt
.
Êags
 & 
CI_IP_CACHE_IS_LOCALROUTE
);

225 if(
	`CI_LIKELY
–
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
), &
ts
->
s
.
pkt
) )) {

226 
Á°
:

227 #i‡
CI_CFG_PORT_STRIPING


228 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_STRIPE
 ) {

229 
	`ci_as£π
(! (
ni
->
Êags
 & 
CI_NETIF_FLAG_MSG_WARM
));

230 
	`ci_ù_t˝_li°_to_dmaq_°rùög
(
ni
, 
ts
, 
hód_id
, 
èû_pkt
);

234 
	`ci_ù_t˝_li°_to_dmaq
(
ni
, 
ts
, 
hód_id
, 
èû_pkt
);

237 if(
	`CI_UNLIKELY
–
ni
->
Êags
 & 
CI_NETIF_FLAG_MSG_WARM
 )) {

238 
	`ci˝_u£r_ªåõve
(
ni
, &
ts
->
s
.
pkt
, &ts->s.
˝
);

242 
pkt
 = 
	`PKT_CHK
(
ni
, 
hód_id
);

243 
hód_id
 = 
pkt
->
√xt
;

245 if–(
ts
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_TX_HARDWARE
) &&

246 
	`CI_TCP_PAYLEN
(
	`oo_tx_ù_hdr
(
pkt
), 
	`TX_PKT_TCP
(pkt)) != 0 )

247 
pkt
->
Êags
 |
CI_PKT_FLAG_TX_TIMESTAMPED
;

249 
	`ci_ù_£nd_t˝_¶ow
(
ni
, 
ts
, 
pkt
);

250 if–
pkt
 =
èû_pkt
 )

252 if–
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
), &
ts
->
s
.
pkt
) )

253 
Á°
;

256 
	}
}

261 
	$ci_t˝_öô_rcv_wnd
(
ci_t˝_°©e
* 
ts
, c⁄° * 
ˇŒî
)

263 
	`t˝_rcv_wnd_right_edge_£¡
(
ts
Ë
	`t˝_rcv_nxt
—sË+Ås->
rcv_wödow_max
;

264 
	`ci_t˝_ˇlc_rcv_wnd
(
ts
, 
ˇŒî
);

265 
	}
}

271 
ci_ölöe
 
	$ci_t˝_tx_›t_mss
(
ci_uöt8
** 
›t
, 
ci_uöt16
 
amss
)

273 *(*
›t
Ë
CI_TCP_OPT_MSS
;

274 *(*
›t
+1) = 0x4;

275 *(
ci_uöt16
*)(*
›t
+2Ë
	`CI_BSWAP_BE16
(
amss
);

276 *
›t
 += 4;

278 
	}
}

283 
ci_ölöe
 
	$ci_t˝_tx_›t_ws˛
(
ci_uöt8
** 
›t
, ci_uöt8 
ws˛
)

285 *(*
›t
Ë
CI_TCP_OPT_WINSCALE
;

286 *(*
›t
+1) = 0x3;

287 *(*
›t
+2Ë
ws˛
;

288 *(*
›t
+3Ë
CI_TCP_OPT_NOP
;

289 *
›t
 += 4;

291 
	}
}

296 
ci_ölöe
 
	$ci_t˝_tx_›t_ßck_≥rm
(
ci_uöt8
** 
›t
)

298 (*
›t
)[0] = 
CI_TCP_OPT_SACK_PERM
;

299 (*
›t
)[1] = 0x2;

300 *
›t
 += 2;

302 
	}
}

308 
	$ci_t˝_tx_›t_ßck
(
ci_uöt8
** 
›t
, 
u£d_Àngth
,

309 
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

311 
ci_ù_pkt_queue
* 
rob
 = &
ts
->rob;

312 
ci_ù_pkt_fmt
* 
pkt
;

313 
i
, 
j
 = 0;

314 
oo_pkt_p
 
u£d
[
CI_TCP_SACK_MAX_BLOCKS
];

315 
oo_pkt_p
 
cid
;

316 
ci_uöt32
 *
ßck_blocks
;

317 
block
 = 0;

318 
ci_uöt32
 
°¨t_be32
, 
íd_be32
;

320 
	`ci_as£π
(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
);

323 if–(
	`OO_PP_EQ
(
ts
->
dßck_block
, 
OO_PP_INVALID
) &&

324 
	`ci_ù_queue_is_em±y
(
rob
)) ||

325 
u£d_Àngth
 + 5 + 8 > 
CI_TCP_MAX_OPTS_LEN
 ){

327 
ts
->
dßck_block
 = 
OO_PP_INVALID
;

330 *(*
›t
 + 1Ë*(*›tË
CI_TCP_OPT_NOP
;

331 *(*
›t
 + 2Ë
CI_TCP_OPT_SACK
;

332 *(*
›t
 + 3) = 0x2;

333 
ßck_blocks
 = (
ci_uöt32
 *)(*
›t
 + 4);

335 
	#ADD_SACK_BLOCK
(
id
, 
£t_u£
, 
logmesßge
) \

337 
ßck_blocks
[2 * 
block
] = 
°¨t_be32
; \

338 
ßck_blocks
[2 * 
block
 + 1] = 
íd_be32
; \

339 
block
++; \

340 if–
£t_u£
 ) \

341 
u£d
[
j
++] = 
id
; \

342 
	`LOG_TL
(
	`log
(
LNT_FMT
 
logmesßge
 " %x - %x", 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), \

343 
	`CI_BSWAP_BE32
(
°¨t_be32
), CI_BSWAP_BE32(
íd_be32
))); \

344 } 0)

	)

346 if–
	`NI_OPTS
(
√tif
).
u£_dßck
 &&

347 ! 
	`OO_PP_EQ
(
ts
->
dßck_block
, 
OO_PP_INVALID
) ) {

348 
°¨t_be32
 = 
	`CI_BSWAP_BE32
(
ts
->
dßck_°¨t
);

349 
íd_be32
 = 
	`CI_BSWAP_BE32
(
ts
->
dßck_íd
);

350 
	`ADD_SACK_BLOCK
(
OO_PP_INVALID
, 0, "DSACKing");

351 if–! 
	`OO_PP_EQ
(
ts
->
dßck_block
, 
OO_PP_NULL
) &&

352 
u£d_Àngth
 + 4 + 8 * 2 < 
CI_TCP_MAX_OPTS_LEN
) {

353 
pkt
 = 
	`PKT_CHK
(
√tif
, 
ts
->
dßck_block
);

354 
°¨t_be32
 = 
	`PKT_TCP_HDR
(
pkt
)->
t˝_£q_be32
;

355 
íd_be32
 = 
	`CI_BSWAP_BE32
(
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block_£q
);

356 
	`ADD_SACK_BLOCK
(
ts
->
dßck_block
, 1, "DSACK companion SACKing");

358 
ts
->
dßck_block
 = 
OO_PP_INVALID
;

363  
i
 = 0; i <
CI_TCP_SACK_MAX_BLOCKS
 &&

364 
u£d_Àngth
 + 4 + 8 * (
block
 + 1Ë< 
CI_TCP_MAX_OPTS_LEN
;

365 
i
++ ) {

366 if–
	`OO_PP_NOT_NULL
(
ts
->
œ°_ßck
[
i
]) ) {

367 
pkt
 = 
	`PKT_CHK
(
√tif
, 
ts
->
œ°_ßck
[
i
]);

368 if–
j
 > 0 && 
	`OO_PP_EQ
(
	`OO_PKT_P
(
pkt
), 
u£d
[0]) )

370 
°¨t_be32
 = 
	`PKT_TCP_HDR
(
pkt
)->
t˝_£q_be32
;

371 
íd_be32
 = 
	`CI_BSWAP_BE32
(
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block_£q
);

372 
	`ADD_SACK_BLOCK
(
ts
->
œ°_ßck
[
i
], 1, "SACKing (last_sack)");

380 
cid
 = 
rob
->
hód
;

381  
	`OO_PP_NOT_NULL
(
cid
) &&

382 
u£d_Àngth
 + 4 + 8 * (
block
 + 1Ë< 
CI_TCP_MAX_OPTS_LEN
 ) {

383 
pkt
 = 
	`PKT_CHK
(
√tif
, 
cid
);

384  
i
 = 0; i < 
j
; i++ ) {

385 if–
	`OO_PP_EQ
(
cid
, 
u£d
[
i
]) )

386 
√xt_block
;

388 
°¨t_be32
 = 
	`PKT_TCP_HDR
(
pkt
)->
t˝_£q_be32
;

389 
íd_be32
 = 
	`CI_BSWAP_BE32
(
	`PKT_TCP_RX_ROB
(
pkt
)->
íd_block_£q
);

390 
	`ADD_SACK_BLOCK
(
cid
, 1, "SACKing (ROB)");

391 
√xt_block
:

392 
cid
 = 
	`PKT_TCP_RX_ROB
(
pkt
)->
√xt_block
;

395 
ts
->
œ°_ßck
[0] = 
OO_PP_NULL
;

396  
i
 = 0; i < 
j
; i++ )

397 
ts
->
œ°_ßck
[
i
 + 1] = 
u£d
[i];

398  ; 
i
 < 
CI_TCP_SACK_MAX_BLOCKS
; i++ )

399 
ts
->
œ°_ßck
[
i
 + 1] = 
OO_PP_NULL
;

400 *(*
›t
 + 3Ë2 + 8 * 
block
;

401 *
›t
 +4 + 8 * 
block
;

402 
	`LOG_TV
(
	`log
(
LNT_FMT
 "SACKög %d blocks", 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
block
));

403  4 + 8 * 
block
;

404 #unde‡
ADD_SACK_BLOCK


405 
	}
}

413 
ci_ölöe
 

414 
	$ci_t˝_tx_£t_urg_±r
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
, 
ci_t˝_hdr
* 
t˝
)

417 if(
	`CI_LIKELY
–
	`SEQ_GE
(
	`t˝_¢d_nxt
(
ts
Ë+Ås->
¢d_dñeg©ed
, 
	`t˝_¢d_up
(ts)) )) {

418 
	`t˝_¢d_up
(
ts
Ë
	`t˝_¢d_u«
(ts);

421 
t˝
->
t˝_Êags
 |
CI_TCP_FLAG_URG
;

422 
t˝
->
t˝_urg_±r_be16
 = 
	`t˝_¢d_urg_off
(
ts
,Å˝Ë- 
	`NI_OPTS
(
√tif
).
urg_rfc
;

423 
t˝
->
t˝_urg_±r_be16
 = 
	`CI_BSWAP_BE16
(tcp->tcp_urg_ptr_be16);

424 
	`LOG_URG
(
	`ci_log
("%s: snd_nxt=%u, snd_up=%u, urg_off=%u flags=%X",

425 
__FUNCTION__
, 
	`t˝_¢d_nxt
(
ts
), 
	`t˝_¢d_up
(ts),

426 
	`CI_BSWAP_BE16
(
t˝
->
t˝_urg_±r_be16
),Å˝->
t˝_Êags
));

428 
	}
}

432 
ci_ölöe
 
	$ci_t˝_tx_cwv_idÀ
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

434 #i‡
CI_CFG_CONGESTION_WINDOW_VALIDATION


435 
wö
, 
i
;

439 
i
 = 
	`ci_t˝_time_now
(
√tif
Ë- 
ts
->
t_œ°_£¡
;

440 if–
i
 > 
ts
->
πo
 ) {

443 
wö
 = (3*
ts
->
cwnd
)>>2u;

444 
ts
->
s°hªsh
 = 
	`CI_MAX
—s->s°hªsh, 
wö
);

448 
ts
->
cwnd
 = 
	`CI_MIN
—s->cwnd, 
	`t˝_¢d_wnd
(ts));

451 
ts
->
cwnd
 =Ås->cwnd >> 1u;

452 
i
 -
ts
->
πo
;

453 }  
i
 > 
ts
->
πo
 );

454 #i‡
CI_CFG_CONGESTION_WINDOW_VALIDATION_DELACK_SCALING


456 
ts
->
cwnd
 = 
	`CI_MAX
—s->cwnd,Ås->
smss
 * 2);

459 
ts
->
cwnd
 = 
	`CI_MAX
—s->cwnd,Ås->
smss
);

462 
ts
->
t_œ°_fuŒ
 = 
	`ci_t˝_time_now
(
√tif
);

464 
ts
->
cwnd_u£d
 = 0;

465 
	`ci_as£π
(
ts
->
cwnd
 >
	`t˝_eff_mss
(ts));

468 
	}
}

470 
ci_ölöe
 
	$ci_t˝_tx_cwv_≠p_lmtd
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

472 #i‡
CI_CFG_CONGESTION_WINDOW_VALIDATION


473 
wö
;

477 if–
	`ci_t˝_öÊight
(
ts
Ë+Ås->
smss
 >
	`CI_MIN
—s->
cwnd
, 
	`t˝_¢d_wnd
(ts)) ) {

481 
ts
->
t_œ°_fuŒ
 = 
	`ci_t˝_time_now
(
√tif
);

483 if–
	`ci_t˝_£ndq_is_em±y
(
ts
) ) {

487 
ts
->
cwnd_u£d
 = 
	`CI_MAX
—s->cwnd_u£d, 
	`ci_t˝_öÊight
(ts));

490 if–
	`ci_t˝_time_now
(
√tif
Ë- 
ts
->
t_œ°_fuŒ
 >Ås->
πo
 ) {

492 
wö
 = (3*
ts
->
cwnd
) >> 2u;

493 
ts
->
s°hªsh
 = 
	`CI_MAX
—s->s°hªsh, 
wö
);

498 
wö
 = 
	`CI_MIN
(
ts
->
cwnd
, 
	`t˝_¢d_wnd
(ts));

500 
ts
->
cwnd
 = 
	`CI_MAX
—s->
smss
, (
wö
+ts->
cwnd_u£d
) >> 1u);

501 
	`ci_as£π
(
ts
->
cwnd
 >
	`t˝_eff_mss
(ts));

503 
ts
->
t_œ°_fuŒ
 = 
	`ci_t˝_time_now
(
√tif
);

505 
ts
->
cwnd_u£d
 = 0;

509 
	}
}

512 
	$ci_t˝_tx_ª£t_q_íd
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

513 
ci_ù_pkt_queue
* 
q
)

515 
ci_ù_pkt_fmt
* 
pkt
;

516 
oo_pkt_p
 
id
;

517 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

523  
id
 = 
q
->
hód
; 
	`OO_PP_NOT_NULL
(id); id = 
pkt
->
√xt
 ) {

524 
pkt
 = 
	`PKT_CHK
(
ni
, 
id
);

525 
	`ci_t˝_tx_pkt_£t_íd
(
ts
, 
pkt
);

527 
	}
}

530 
	$ci_t˝_tx_ch™ge_mss
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
)

532 
¥ev_eff_mss
 = 
	`t˝_eff_mss
(
ts
);

533 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

535 
	`ci_t˝_£t_eff_mss
(
ni
, 
ts
);

537 
	`LOG_TL
(
	`ci_log
(
LNTS_FMT
 "%s: bef‹e=%dá·î=%d", 
	`LNTS_PRI_ARGS
(
ni
, 
ts
),

538 
__FUNCTION__
, 
¥ev_eff_mss
, 
	`t˝_eff_mss
(
ts
)));

540 
	`ci_t˝_tx_ª£t_q_íd
(
ni
, 
ts
, &ts->
£nd
);

541 
	`ci_t˝_tx_ª£t_q_íd
(
ni
, 
ts
, &ts->
ªå™s
);

543 if–
	`t˝_eff_mss
(
ts
Ë< (Ë
¥ev_eff_mss
 &&

544 ! 
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
) ) {

547 
ts
->
c⁄g°©e
 = 
CI_TCP_CONG_RTO_RECOV
;

548 
ts
->
cwnd_exåa
 = 0;

549 
	`ci_t˝_˛ór_ßcks
(
ni
, 
ts
);

550 
ts
->
c⁄gªcovî
 = 
	`t˝_¢d_nxt
(ts);

551 
	`ci_t˝_πo_ª°¨t
(
ni
, 
ts
);

552 
	`ci_t˝_ªå™s_ªcovî
(
ni
, 
ts
, 0);

554 
	}
}

557 
	$ci_t˝_tx_ö£π_syn_›ti⁄s
(
ci_√tif
* 
ni
, 
ci_uöt16
 
amss
,

558 
›tÊags
, 
rcv_ws˛
,

559 
ci_uöt8
** 
›t
)

561 
›éí
 = 0;

564 
›éí
 +
	`ci_t˝_tx_›t_mss
(
›t
, 
amss
);

567 if–
›tÊags
 & 
CI_TCPT_FLAG_WSCL
 )

568 
›éí
 +
	`ci_t˝_tx_›t_ws˛
(
›t
, (
ci_uöt8
)
rcv_ws˛
);

571 if–
›tÊags
 & 
CI_TCPT_FLAG_SACK
 )

572 
›éí
 +
	`ci_t˝_tx_›t_ßck_≥rm
(
›t
);

574 #i‡
CI_CFG_PORT_STRIPING


575 if–
›tÊags
 & 
CI_TCPT_FLAG_STRIPE
 ) {

576 (*
›t
)[0] = (
ci_uöt8
Ë
	`NI_OPTS
(
ni
).
°rùe_t˝_›t
;

577 (*
›t
)[1] = 2;

578 *
›t
 += 2;

579 
›éí
 += 2;

584  
›éí
 & 3 ) {

585 *(*
›t
)++ = 
CI_TCP_OPT_END
;

586 ++
›éí
;

589  
›éí
;

590 
	}
}

597 
	$ci_t˝_íqueue_no_d©a
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
,

598 
ci_ù_pkt_fmt
* 
pkt
)

600 
ci_t˝_hdr
* 
thdr
;

601 
›éí
 = 
	`t˝_outgoög_›ts_Àn
(
ts
);

603 
	`ci_as£π
(
ts
);

604 
	`ci_as£π
(
√tif
);

605 
	`ASSERT_VALID_PKT_ID
(
√tif
, 
	`OO_PKT_P
(
pkt
));

607 
	`ci_as£π
(
pkt
->
ªfcou¡
 == 1 );

608 
	`ci_as£π
(
	`TS_TCP
(
ts
)->
t˝_Êags
 & (
CI_TCP_FLAG_SYN
|
CI_TCP_FLAG_FIN
));

610 
	`oo_tx_pkt_œyout_öô
(
pkt
);

611 
	`ci_pkt_öô_‰om_ùˇche
(
pkt
, &
ts
->
s
.pkt);

614 
thdr
 = 
	`PKT_TCP_HDR
(
pkt
);

615 if–
	`TS_TCP
(
ts
)->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
 ) {

616 
ci_uöt8
* 
›t
 = 
	`CI_TCP_HDR_OPTS
(
thdr
);

617 
›t
 +
›éí
;

618 
›éí
 +
	`ci_t˝_tx_ö£π_syn_›ti⁄s
(
√tif
, 
ts
->
amss
,

619 
ts
->
t˝Êags
,Ås->
rcv_ws˛
, &
›t
);

623 
	`ci_t˝_£t_πt_timög
(
√tif
, 
ts
, 
	`t˝_íq_nxt
(ts));

626 
	`CI_TCP_HDR_SET_LEN
(
thdr
, (*thdrË+ 
›éí
);

628 
pkt
->
buf_Àn
 =Ökt->
∑y_Àn
 =

629 
	`oo_ëhî_hdr_size
(
pkt
Ë+ (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
Ë+ 
›éí
;

630 
	`oo_offbuf_öô
(&
pkt
->
buf
, 
	`PKT_START
’ktË+Ökt->
buf_Àn
, 0);

631 
pkt
->
Êags
 &
CI_PKT_FLAG_NONB_POOL
;

632 
	`ASSERT_VALID_PKT
(
√tif
, 
pkt
);

634 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
 = 
	`t˝_íq_nxt
(
ts
);

635 
	`t˝_íq_nxt
(
ts
) += 1;

636 
pkt
->
pf
.
t˝_tx
.
íd_£q
 = 
	`t˝_íq_nxt
(
ts
);

637 
pkt
->
pf
.
t˝_tx
.
block_íd
 = 
OO_PP_NULL
;

639 
	`ci_ù_queue_íqueue
(
√tif
, &
ts
->
£nd
, 
pkt
);

640 ++
ts
->
£nd_ö
;

642 
	`LOG_TC
(
	`log
(
LNTS_FMT
 "íqueuê["
CI_TCP_FLAGS_FMT
"] seq=%x",

643 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
),

644 
	`CI_TCP_HDR_FLAGS_PRI_ARG
(
	`TX_PKT_TCP
(
pkt
)), 
	`t˝_íq_nxt
(
ts
) - 1));

646 
	`ci_t˝_tx_adv™˚
(
ts
, 
√tif
);

647 
	}
}

650 
	$ci_t˝_£nd_sim_sy«ck
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
 *
ts
)

652 
ci_ù_pkt_fmt
* 
pkt
;

653 
ci_t˝_hdr
* 
t˝
;

654 
›éí
 = 0;

655 
ci_uöt8
* 
›t
;

657 
	`ci_as£π
(
√tif
);

658 
	`ci_as£π
(
ts
);

661 
	`ci_as£π
(!
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
));

662 
	`ci_as£π
(
	`ci_ù_queue_is_vÆid
(
√tif
, &
ts
->
ªå™s
));

664 
pkt
 = 
	`PKT_CHK
(
√tif
, 
ts
->
ªå™s
.
hód
);

665 
t˝
 = 
	`TX_PKT_TCP
(
pkt
);

668 
	`ci_as£π
(
t˝
->
t˝_Êags
 & 
CI_TCP_FLAG_SYN
);

674 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_PENDING
 ) {

675 
	`LOG_U
(
	`ci_log
(
LNT_FMT


677 
	`LNT_PRI_ARGS
(
√tif
,
ts
), 
	`S_FMT
—s), 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
,

678 
pkt
->
pf
.
t˝_tx
.
íd_£q
));

683 
›t
 = 
	`CI_TCP_HDR_OPTS
(
t˝
);

684 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 )

685 
›éí
 +
	`ci_t˝_tx_›t_tso
(&
›t
, 
	`ci_t˝_time_now
(
√tif
), 0);

687 
›éí
 +
	`ci_t˝_tx_ö£π_syn_›ti⁄s
(
√tif
, 
ts
->
amss
,

688 
ts
->
t˝Êags
,Ås->
rcv_ws˛
, &
›t
);

690 
	`CI_TCP_HDR_SET_LEN
(
t˝
, (*t˝Ë+ 
›éí
);

691 
t˝
->
t˝_Êags
 |
CI_TCP_FLAG_ACK
;

693 
	`oo_offbuf_öô
(&
pkt
->
buf
,

694 (
uöt8_t
*Ë
	`oo_tx_ù_d©a
(
pkt
Ë+ (
ci_t˝_hdr
Ë+ 
›éí
,

697 
	`LOG_TC
(
	`log
(
LNTS_FMT
 "simu…™eou†SYN-ACK ["
CI_TCP_FLAGS_FMT
"]",

698 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
),

699 
	`CI_TCP_HDR_FLAGS_PRI_ARG
(
	`TX_PKT_TCP
(
pkt
))));

702 
pkt
->
buf_Àn
 =Ökt->
∑y_Àn
 =

703 (
ci_öt32
)(
	`oo_offbuf_±r
(&
pkt
->
buf
Ë- 
	`PKT_START
(pkt));

706 
	`ci_t˝_ªå™s_⁄e
(
ts
, 
√tif
, 
pkt
);

708 
	}
}

718 
	$ci_t˝_syƒecv_£nd
(
ci_√tif
* 
√tif
, 
ci_t˝_sockë_li°í
* 
és
,

719 
ci_t˝_°©e_syƒecv
* 
t§
,

720 
ci_ù_pkt_fmt
* 
pkt
, 
ci_uöt8
 
t˝_Êags
,

721 
ci_ù_ˇched_hdrs
* 
ùˇche
)

723 
ci_ù_ˇched_hdrs
 
ùˇche_°‹age
;

724 
ci_t˝_hdr
* 
thdr
;

725 
ci_ù4_hdr
* 
ùhdr
;

726 
ci_uöt8
* 
›t
;

727 
ci_uöt32
 
£q
;

728 
rc
, 
›éí
;

730 
	`ci_as£π
(
√tif
);

731 
	`ci_as£π
(
és
);

733 
	`ci_as£π
(
és
->
s
.
b
.
°©e
 =
CI_TCP_LISTEN
 ||Åls->s.b.°©ê=
CI_TCP_CLOSED
);

734 
	`ci_as£π
(
t§
);

735 if–
ùˇche
 !
NULL
 ) {

736 
	`ci_as£π
(
ùˇche
->
°©us
 =
ªårc_suc˚ss
 ||

737 
ùˇche
->
°©us
 =
ªårc_nomac
 ||

738 (
ùˇche
->
°©us
 =
ªårc_loˇÃouã
 &&

739 (
ùˇche
->
Êags
 & 
CI_IP_CACHE_IS_LOCALROUTE
)));

740 
	`ci_as£π_equÆ
(
ùˇche
->
ù
.
ù_daddr_be32
, 
t§
->
r_addr
);

741 
	`ci_as£π_equÆ
(
ùˇche
->
ù_ßddr_be32
, 
t§
->
l_addr
);

742 
	`ci_as£π_equÆ
(
ùˇche
->
dp‹t_be16
, 
t§
->
r_p‹t
);

745 
	`LOG_TC
(
	`log
(
LNT_FMT
 "SYNRECV ["
CI_TCP_FLAGS_FMT
"] isn=%08x "

746 "rcv=%08x-%08x", 
	`LNT_PRI_ARGS
(
√tif
, 
és
),

747 
	`CI_TCP_FLAGS_PRI_ARG
(
t˝_Êags
),

748 
t§
->
¢d_i¢
,Å§->
rcv_nxt
,

749 
t§
->
rcv_nxt
 +

750 
	`ci_t˝_rcvbuf2wödow
(
és
->
s
.
so
.
rcvbuf
, 
t§
->
amss
,

751 
t§
->
rcv_ws˛
)));

753 
	`ci_as£π
(
pkt
);

756 
	`oo_tx_pkt_œyout_öô
(
pkt
);

757 
	`oo_tx_ëhî_ty≥_£t
(
pkt
, 
CI_ETHERTYPE_IP
);

758 
ùhdr
 = 
	`oo_tx_ù_hdr
(
pkt
);

759 
	`ci_ù_hdr_öô_fixed
(
ùhdr
, 
IPPROTO_TCP
, 
CI_IP_DFLT_TTL
, 
CI_IP_DFLT_TOS
);

760 
ùhdr
->
ù_ßddr_be32
 = 
t§
->
l_addr
;

761 
ùhdr
->
ù_daddr_be32
 = 
t§
->
r_addr
;

766 
£q
 = (
t˝_Êags
 & 
CI_TCP_FLAG_SYN
Ë? 
t§
->
¢d_i¢
 :Åsr->snd_isn + 1;

768 
thdr
 = 
	`PKT_TCP_HDR
(
pkt
);

769 
thdr
->
t˝_urg_±r_be16
 = 0;

770 
thdr
->
t˝_sour˚_be16
 = 
	`sock_Õ‹t_be16
(&
és
->
s
);

771 
thdr
->
t˝_de°_be16
 = 
t§
->
r_p‹t
;

772 
thdr
->
t˝_£q_be32
 = 
	`CI_BSWAP_BE32
(
£q
);

773 
thdr
->
t˝_ack_be32
 = 
	`CI_BSWAP_BE32
(
t§
->
rcv_nxt
);

774 
thdr
->
t˝_Êags
 =Åcp_flags;

777 
›t
 = 
	`CI_TCP_HDR_OPTS
(
thdr
);

778 
›éí
 = 0;

781 if–
t§
->
t˝›ts
.
Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

782 
now
;

783 if–
t§
->
t˝›ts
.
Êags
 & 
CI_TCPT_FLAG_SYNCOOKIE
 )

784 
now
 = 
t§
->
time°
;

786 
now
 = 
	`ci_t˝_time_now
(
√tif
);

787 
›éí
 +
	`ci_t˝_tx_›t_tso
(&
›t
, 
now
, 
t§
->
t•ìr
);

790 if–
ùˇche
 =
NULL
 ) {

791 
ùˇche
 = &
ùˇche_°‹age
;

792 
	`ci_ù_£nd_pkt_lookup
(
√tif
, &
és
->
s
.
˝
, 
pkt
, 
ùˇche
);

793 if–(
t§
->
ªåõs
 & 
CI_FLAG_TSR_RETRIES_MASK
) > 0 )

794 
	`ci˝_ù_ˇche_mac_upd©e
(
√tif
, 
ùˇche
, 0);

797 if–(
t˝_Êags
 & 
CI_TCP_FLAG_SYN
) &&

798 (
ùˇche
->
°©us
 =
ªårc_suc˚ss
 ||

799 
ùˇche
->
°©us
 =
ªårc_nomac
 ||

800 
	`OO_SP_NOT_NULL
(
t§
->
loˇl_≥î
)) ) {

801 
t§
->
amss
 = 
ùˇche
->
mtu
 - (
ci_t˝_hdr
Ë- (
ci_ù4_hdr
);

802 #i‡
CI_CFG_LIMIT_AMSS


803 
t§
->
amss
 = 
	`ci_t˝_limô_mss
—§->amss, 
√tif
, 
__FUNCTION__
);

805 
›éí
 +
	`ci_t˝_tx_ö£π_syn_›ti⁄s
(
√tif
, 
t§
->
amss
,

806 
t§
->
t˝›ts
.
Êags
,

807 
t§
->
rcv_ws˛
, &
›t
);

813 
thdr
->
t˝_wödow_be16
 = 
	`ci_t˝_rcvbuf2wödow
(
és
->
s
.
so
.
rcvbuf
,

814 
t§
->
amss
,Å§->
rcv_ws˛
);

815 
thdr
->
t˝_wödow_be16
 = 
	`CI_BSWAP_BE16
(thdr->tcp_window_be16);

817 
ùhdr
->
ù_check_be16
 = 0;

818 
ùhdr
->
ù_id_be16
 = 0;

819 
	`ci_t˝_ù_hdr_öô
(
ùhdr
, (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
Ë+ 
›éí
);

820 
	`CI_TCP_HDR_SET_LEN
(
thdr
, (*thdrË+ 
›éí
);

822 
pkt
->
buf_Àn
 =Ökt->
∑y_Àn
 =

823 
	`oo_ëhî_hdr_size
(
pkt
Ë+ (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
Ë+ 
›éí
;

825 if–
	`OO_SP_NOT_NULL
(
t§
->
loˇl_≥î
) ) {

826 
	`ci_ù_loˇl_£nd
(
√tif
, 
pkt
, 
	`S_SP
(
és
), 
t§
->
loˇl_≥î
);

827 
rc
 = 0;

830 
rc
 = 
	`ci_ù_£nd_pkt_£nd
(
√tif
, 
pkt
, 
ùˇche
);

831 
	`ci_√tif_pkt_ªÀa£
(
√tif
, 
pkt
);

833 if(
	`CI_UNLIKELY
–
rc
 != 0 ))

834 
	`CITP_STATS_NETIF
(++
√tif
->
°©e
->
°©s
.
syƒecv_£nd_Áûs
);

836 
	`CI_TCP_STATS_INC_OUT_SEGS
(
√tif
);

837  
rc
;

838 
	}
}

843 
	$ci_t˝_ªå™s_⁄e
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
√tif
, 
ci_ù_pkt_fmt
* 
pkt
)

845 
ci_t˝_hdr
* 
t˝
;

846 
ci_ù4_hdr
* 
ùhdr
;

847 
	`ci_as£π
(
ts
);

848 
	`ci_as£π
(
√tif
);

851 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_PENDING
 )  1;

859 if–
	`NI_OPTS
(
√tif
).
r°_dñayed_c⁄n
 &&

860 
ts
->
c⁄g°©e
 =
CI_TCP_CONG_FAST_RECOV
 )

863 
	`CITP_STATS_NETIF_INC
(
√tif
, 
ªå™smôs
);

864 ++
ts
->
°©s
.
tŸÆ_ªå™s
;

866 
ùhdr
 = 
	`oo_tx_ù_hdr
(
pkt
);

867 
t˝
 = 
	`TX_PKT_TCP
(
pkt
);

872 
	`ci_as£π
(
	`SEQ_LT
(
pkt
->
pf
.
t˝_tx
.
°¨t_£q
, 
	`t˝_¢d_nxt
(
ts
)) &&

873 
	`SEQ_LE
(
pkt
->
pf
.
t˝_tx
.
íd_£q
, 
	`t˝_¢d_nxt
(
ts
)));

875 #i‚de‡
NDEBUG


879 i‡(!(
t˝
->
t˝_Êags
 & (
CI_TCP_FLAG_SYN
|
CI_TCP_FLAG_FIN
)))

880 
	`ci_as£π_equÆ
(
	`TX_PKT_LEN
(
pkt
Ë- 
	`oo_ëhî_hdr_size
(pkt) -

881 (
ci_ù4_hdr
Ë- (
ci_t˝_hdr
) -

882 
	`CI_TCP_HDR_OPT_LEN
(
t˝
),

883 
	`SEQ_SUB
(
pkt
->
pf
.
t˝_tx
.
íd_£q
,Ökt->pf.t˝_tx.
°¨t_£q
));

887 
	`ci_t˝_tx_föish
(
√tif
, 
ts
, 
pkt
);

890 
	`ci_t˝_tx_£t_urg_±r
(
ts
, 
√tif
, 
t˝
);

893 
	`ci_t˝_ˇlc_rcv_wnd
(
ts
, "retrans_one");

896 
t˝
->
t˝_ack_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_rcv_nxt
(
ts
));

897 
t˝
->
t˝_wödow_be16
 = 
	`TS_TCP
(
ts
)->tcp_window_be16;

899 
	`ci_t˝_ù_hdr_öô
(
ùhdr
, 
	`TX_PKT_LEN
(
pkt
Ë- 
	`oo_ëhî_hdr_size
(pkt));

901 
	`LOG_TL
(
	`log
(
LNT_FMT
 "RETRANSMIT id=%d ["
CI_TCP_FLAGS_FMT
"] s=%08x-%08x "

902 "∑yÀn=%d", 
	`LNT_PRI_ARGS
(
√tif
,
ts
), 
	`OO_PKT_FMT
(
pkt
),

903 
	`CI_TCP_HDR_FLAGS_PRI_ARG
(
t˝
), 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
,

904 
pkt
->
pf
.
t˝_tx
.
íd_£q
,

905 
	`CI_BSWAP_BE16
(
ùhdr
->
ù_tŸ_Àn_be16
) -

906 (
	`CI_IP4_IHL
(
ùhdr
Ë+ 
	`CI_TCP_HDR_LEN
(
t˝
)));

907 
	`log
(
LNT_FMT
" "
TCP_RCV_FMT
,

908 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
	`TCP_RCV_PRI_ARG
(ts));

909 
	`log
(
LNT_FMT
" "
TCP_SND_FMT
,

910 
	`LNT_PRI_ARGS
(
√tif
, 
ts
), 
	`TCP_SND_PRI_ARG
(ts)));

912 #i‡
CI_CFG_CONGESTION_WINDOW_VALIDATION


913 
ts
->
t_œ°_£¡
 = 
	`ci_t˝_time_now
(
√tif
);

916 if–(
pkt
->
Êags
 & (
CI_PKT_FLAG_RTQ_RETRANS
 | 
CI_PKT_FLAG_TX_TIMESTAMPED
)) ==

917 
CI_PKT_FLAG_TX_TIMESTAMPED
 )

918 
pkt
->
pf
.
t˝_tx
.
fú°_tx_hw_°amp
 =Ökt->
tx_hw_°amp
;

919 
	`ci_t˝_tx_maybe_do_°rùög
(
pkt
, 
ts
);

920 
	`__ci_ù_£nd_t˝
(
√tif
, 
pkt
, 
ts
);

921 
	`CI_TCP_STATS_INC_OUT_SEGS
(
√tif
);

924 
	`CI_TCP_STATS_INC_RETRAN_SEGS
–
√tif
 );

925 
	`CI_IP_SOCK_STATS_ADD_TXBYTE
(
ts
, 
	`TX_PKT_LEN
(
pkt
));

926 
	`CI_IP_SOCK_STATS_INC_RETX
–
ts
 );

928 if(
	`CI_UNLIKELY
–
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSED
 ))

932 
	`ci_as£π
–
	`ci_ù_timî_≥ndög
(
√tif
, &
ts
->
πo_tid
) );

935 
	}
}

952 
	$ci_t˝_ªå™s
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
, 
£q_limô
,

953 
bef‹e_ßcked_⁄ly
, * 
£q_u£d
)

955 
ci_ù_pkt_fmt
* 
pkt
;

956 
©_°¨t_of_block
 = 0;

957 
£q
 = 0;

960 
	`ci_as£π
(
	`OO_PP_NOT_NULL
(
ts
->
ªå™s_±r
));

962 *
£q_u£d
 = 0;

963 
pkt
 = 
	`PKT_CHK
(
ni
, 
ts
->
ªå™s_±r
);

964 
	`LOG_TV
(
	`log
(
LPF
 "πq: %d -> %d ->...-> %d, %dÖackës", 
	`OO_PKT_FMT
(
pkt
),

965 
	`OO_PKT_FMT
(
pkt
), 
	`OO_PP_FMT
(
ts
->
ªå™s
.
èû
),Ås->ªå™s.
num
));

969 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
 ) {

970 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
pf
.
t˝_tx
.
block_íd
);

971 
ts
->
ªå™s_±r
 = 
pkt
->
√xt
;

972 if–
	`OO_PP_IS_NULL
(
ts
->
ªå™s_±r
) ) ;

973 
pkt
 = 
	`PKT_CHK
(
ni
, 
ts
->
ªå™s_±r
);

974 
ts
->
ªå™s_£q
 = 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
;

975 
©_°¨t_of_block
 = 1;

976 
	`ci_as£π
(~
pkt
->
Êags
 & 
CI_PKT_FLAG_RTQ_SACKED
);

979 if–
©_°¨t_of_block
 ) 
	`ci_t˝_ªå™s_cﬂÀs˚_block
(
ni
, 
ts
, 
pkt
);

981 if–
	`PKT_TCP_TX_SEQ_SPACE
(
pkt
Ë> 
	`t˝_eff_mss
(
ts
) ) {

985 
	`ci_t˝_˛ór_ßcks
(
ni
, 
ts
);

986 if–
	`ci_t˝_tx_•lô
(
ni
,
ts
, &ts->
ªå™s
, 
pkt
, 
	`t˝_eff_mss
(ts), 0) < 0 )

991 
£q
 = 
	`SEQ_SUB
(
pkt
->
pf
.
t˝_tx
.
íd_£q
,Ökt->pf.t˝_tx.
°¨t_£q
);

996 if–
bef‹e_ßcked_⁄ly
 && 
	`OO_PP_IS_NULL
(
pkt
->
pf
.
t˝_tx
.
block_íd
) )

1000 if–
	`SEQ_LE
(
ts
->
c⁄gªcovî
, 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
) )  1;

1002 #i‡
CI_CFG_BURST_CONTROL


1003 if(
ts
->
bur°_wödow
 && 
	`ci_t˝_bur°_exhau°ed
(
ni
,Ås)){

1004 
	`LOG_TV
(
	`log
(
LNT_FMT
 "txÜimited by burstávoidance",

1005 
	`LNT_PRI_ARGS
(
ni
, 
ts
)));

1011 if–
£q
 > 
£q_limô
 )  0;

1013 if–
	`ci_t˝_ªå™s_⁄e
(
ts
, 
ni
, 
pkt
) ) {

1020 if–
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
), &
ts
->
s
.
pkt
) )

1021 
	`ci˝_ù_ˇche_mac_upd©e
(
ni
, &
ts
->
s
.
pkt
, 0);

1023 
pkt
->
Êags
 |
CI_PKT_FLAG_RTQ_RETRANS
;

1024 *
£q_u£d
 +
£q
;

1025 
£q_limô
 -
£q
;

1026 
ts
->
ªå™s_£q
 = 
pkt
->
pf
.
t˝_tx
.
íd_£q
;

1027 
ts
->
ªå™s_±r
 = 
pkt
->
√xt
;

1028 if–
	`OO_PP_IS_NULL
(
ts
->
ªå™s_±r
) ) ;

1029 
pkt
 = 
	`PKT_CHK
(
ni
, 
ts
->
ªå™s_±r
);

1030 
ts
->
ªå™s_£q
 = 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
;

1034 
	}
}

1037 
	$ci_t˝_ªå™s_ªcovî
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

1038 
f‹˚_ªå™s_fú°
)

1040 
ci_ù_pkt_queue
* 
πq
 = &
ts
->
ªå™s
;

1041 
bef‹e_ßcked_⁄ly
 = 0;

1042 
cwnd_avaû
, 
rc
, 
£q_u£d
;

1043 
ªå™s_d©a
;

1044 
Áck
;

1047 
	`ci_as£π
((
ts
->
c⁄g°©e
 =
CI_TCP_CONG_RTO
) ||

1048 (
ts
->
c⁄g°©e
 =
CI_TCP_CONG_RTO_RECOV
) ||

1049 (
ts
->
c⁄g°©e
 =
CI_TCP_CONG_FAST_RECOV
 &&

1050 (
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
)));

1051 
	`ci_as£π
(
	`SEQ_LE
(
ts
->
c⁄gªcovî
, 
	`t˝_¢d_nxt
(ts)));

1053 if–
	`SEQ_LE
(
ts
->
c⁄gªcovî
, 
	`t˝_¢d_u«
(ts)) ) {

1054 
	`ci_t˝_ªcovîed
(
ni
, 
ts
);

1058 
	`ci_as£π
(
	`SEQ_LT
(
ts
->
ªå™s_£q
,Ås->
c⁄gªcovî
));

1061 if–
	`SEQ_LT
(
ts
->
ªå™s_£q
, 
	`t˝_¢d_u«
(ts)) ) {

1062 
ts
->
ªå™s_±r
 = 
πq
->
hód
;

1063 
ts
->
ªå™s_£q
 = 
	`t˝_¢d_u«
(ts);

1069 
	`ci_t˝_gë_Áck
(
ni
, 
ts
, &
Áck
, &
ªå™s_d©a
);

1071 if–
ts
->
c⁄g°©e
 =
CI_TCP_CONG_FAST_RECOV
 ) {

1072 
ts
->
cwnd_exåa
 = 
	`SEQ_SUB
(
Áck
, 
	`t˝_¢d_u«
—s)Ë- 
ªå™s_d©a
;

1073 
ts
->
cwnd_exåa
 = 
	`CI_MAX
(ts->cwnd_extra, 0);

1074 
cwnd_avaû
 = 
ts
->
cwnd
 +Ås->
cwnd_exåa
 - 
	`ci_t˝_öÊight
(ts);

1075 
bef‹e_ßcked_⁄ly
 = 1;

1076 if–
f‹˚_ªå™s_fú°
 ) {

1081 
ci_ù_pkt_fmt
* 
pkt
 = 
	`PKT_CHK
(
ni
, 
ts
->
ªå™s_±r
);

1082 
n
 = 
	`SEQ_SUB
(
pkt
->
pf
.
t˝_tx
.
íd_£q
,Ökt->pf.t˝_tx.
°¨t_£q
);

1083 
cwnd_avaû
 = 
	`CI_MAX
(cwnd_avaû, 
n
);

1085 #i‡
CI_CFG_BURST_CONTROL


1087 #i‡
CI_CFG_CONG_AVOID_NOTIFIED


1088 
ts
->
c⁄g°©e
 !
CI_TCP_CONG_OPEN
 &&

1090 (!
ts
->
bur°_wödow
Ë&& 
	`NI_OPTS
(
ni
).
bur°_c⁄åﬁ_limô
)

1091 
ts
->
bur°_wödow
 = 
	`ci_t˝_öÊight
(ts) +

1092 (
	`NI_OPTS
(
ni
).
bur°_c⁄åﬁ_limô
 *

1093 
	`t˝_eff_mss
(
ts
)Ë-Ås->
cwnd_exåa
;

1102 
	`ci_as£π
(
ts
->
cwnd_exåa
 == 0);

1103 
cwnd_avaû
 = 
ts
->
cwnd
 - 
	`ci_t˝_öÊight
(ts);

1104 
cwnd_avaû
 +
	`SEQ_SUB
(
ts
->
c⁄gªcovî
,Ås->
ªå™s_£q
);

1105 
cwnd_avaû
 +
	`SEQ_SUB
(
Áck
, 
	`t˝_¢d_u«
(
ts
));

1107 
cwnd_avaû
 = 
	`CI_MAX
(cwnd_avail, 0);

1109 
	`LOG_TL
(
	`log
("%s: %s %s una=%08x cwnd=%05d cwnd_avail=%05d inf=%05dá=%05d "

1110 "b=%05d c=%d", 
__FUNCTION__
,

1111 
ts
->
cwnd
 <Ås->
s°hªsh
 ? "SS":"CA", 
	`c⁄g°©e_°r
(ts),

1112 
	`t˝_¢d_u«
(
ts
),Ås->
cwnd
, 
cwnd_avaû
, 
	`ci_t˝_öÊight
(ts),

1113 
	`SEQ_SUB
(
ts
->
ªå™s_£q
, 
	`t˝_¢d_u«
(ts)),

1114 
	`SEQ_SUB
(
ts
->
c⁄gªcovî
,Ås->
ªå™s_£q
),

1115 
	`SEQ_SUB
(
	`t˝_¢d_nxt
(
ts
),Ås->
c⁄gªcovî
)));

1117 
rc
 = 
	`ci_t˝_ªå™s
(
ni
, 
ts
, 
cwnd_avaû
, 
bef‹e_ßcked_⁄ly
, &
£q_u£d
);

1119 if–
ts
->
c⁄g°©e
 =
CI_TCP_CONG_FAST_RECOV
 ) {

1120 
	`ci_as£π
(
£q_u£d
 <
cwnd_avaû
);

1121 
ªå™s_d©a
 +
£q_u£d
;

1122 
ts
->
cwnd_exåa
 = 
	`SEQ_SUB
(
Áck
, 
	`t˝_¢d_u«
—s)Ë- 
ªå™s_d©a
;

1123 
ts
->
cwnd_exåa
 = 
	`CI_MAX
(ts->cwnd_extra, 0);

1126 
	`ci_as£π
(
	`SEQ_LT
(
	`t˝_¢d_u«
(
ts
),Ås->
c⁄gªcovî
));

1128 if–
rc
 ) 
ts
->
c⁄g°©e
 = 
CI_TCP_CONG_COOLING
;

1129 
	}
}

1134 
	~"ci/öã∫Æ/ù.h
"

1135 
	$ci_t˝_tx_adv™˚
(
ci_t˝_°©e
* 
ts
, 
ci_√tif
* 
ni
)

1137 
ci_ù_pkt_queue
* 
£ndq
 = &
ts
->
£nd
;

1138 
ci_ù_pkt_fmt
 *
pkt
, *
œ°_pkt
 = 0;

1139 
ci_t˝_hdr
* 
t˝
;

1140 
ci_ù4_hdr
* 
ù
;

1141 
cwnd_right_edge
;

1142 
∑yÀn
, 
£¡_num
 = 0;

1143 
oo_pkt_p
 
id
;

1145 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

1146 
	`ci_as£π
(
	`ci_ù_queue_nŸ_em±y
(
£ndq
));

1147 
	`ci_as£π
(
	`OO_PP_NOT_NULL
(
£ndq
->
hód
));

1149 
	`LOG_TV
(
	`ci_log
("%s: "
NTS_FMT
 "£ndq.num=%d inÊight=%d", 
__FUNCTION__
,

1150 
	`NTS_PRI_ARGS
(
ni
, 
ts
), 
£ndq
->
num
, 
	`ci_t˝_öÊight
(ts)));

1152 if–
	`CI_UNLIKELY
(
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_NO_TX_ADVANCE
) )

1155 
	`ci_t˝_tx_cwv_idÀ
(
ni
, 
ts
);

1157 #i‡
CI_CFG_BURST_CONTROL


1158 #i‡
CI_CFG_CONG_AVOID_NOTIFIED


1159 if–
ts
->
c⁄g°©e
 !
CI_TCP_CONG_OPEN
 &&

1160 (!
ts
->
bur°_wödow
Ë&& 
	`NI_OPTS
(
ni
).
bur°_c⁄åﬁ_limô
 )

1162 if–(!
ts
->
bur°_wödow
Ë&& 
	`NI_OPTS
(
ni
).
bur°_c⁄åﬁ_limô
 )

1164 
ts
->
bur°_wödow
 = 
	`ci_t˝_öÊight
(ts) +

1165 
	`NI_OPTS
(
ni
).
bur°_c⁄åﬁ_limô
 * 
	`t˝_eff_mss
(
ts
);

1168 if–
	`OO_SP_NOT_NULL
(
ts
->
loˇl_≥î
) )

1169 
cwnd_right_edge
 = 
ts
->
¢d_max
;

1171 
cwnd_right_edge
 = 
ts
->
¢d_nxt
 +Ås->
cwnd
 +Ås->
cwnd_exåa


1172 - 
	`ci_t˝_öÊight
(
ts
);

1174 
id
 = 
£ndq
->
hód
;

1176 
pkt
 = 
	`PKT_CHK
(
ni
, 
id
);

1177 
ù
 = 
	`oo_tx_ù_hdr
(
pkt
);

1180 
	`ci_as£π
(
	`SEQ_EQ
(
pkt
->
pf
.
t˝_tx
.
°¨t_£q
, 
	`t˝_¢d_nxt
(
ts
)));

1182 
t˝
 = 
	`TX_PKT_TCP
(
pkt
);

1183 
∑yÀn
 = 
	`PKT_TCP_TX_SEQ_SPACE
(
pkt
);

1184 if(
	`CI_UNLIKELY
–
∑yÀn
 > 
	`t˝_eff_mss
(
ts
) )) {

1185 
	`ci_as£π
(! (
ni
->
Êags
 & 
CI_NETIF_FLAG_MSG_WARM
));

1186 
	`ci_t˝_tx_•lô
(
ni
, 
ts
, 
£ndq
, 
pkt
, 
	`t˝_eff_mss
(ts), 1);

1191 
∑yÀn
 = 
	`PKT_TCP_TX_SEQ_SPACE
(
pkt
);

1195 if–! (
t˝
->
t˝_Êags
 & (
CI_TCP_FLAG_SYN
|
CI_TCP_FLAG_FIN
)) ) {

1196 
	`ci_as£π_equÆ
(
	`TX_PKT_LEN
(
pkt
Ë- 
	`oo_ëhî_hdr_size
(pkt)

1197 - (
ci_ù4_hdr
)

1198 - (
ci_t˝_hdr
Ë- 
	`CI_TCP_HDR_OPT_LEN
(
t˝
),

1199 
∑yÀn
);

1200 
	`ci_as£π_ge
(
	`CI_TCP_HDR_OPT_LEN
(
t˝
), 
	`t˝_outgoög_›ts_Àn
(
ts
));

1203 if–
	`SEQ_GT
(
pkt
->
pf
.
t˝_tx
.
íd_£q
, 
ts
->
¢d_max
) ) {

1204 ++
ts
->
°©s
.
tx_°›_rwnd
;

1207 if–
	`SEQ_GT
(
pkt
->
pf
.
t˝_tx
.
íd_£q
, 
cwnd_right_edge
) ) {

1208 ++
ts
->
°©s
.
tx_°›_cwnd
;

1211 #i‡
CI_CFG_BURST_CONTROL


1212 if(
	`CI_UNLIKELY
–
ts
->
bur°_wödow
 && 
	`ci_t˝_öÊight
(ts) >

1213 
ts
->
bur°_wödow
 )) {

1214 ++
ts
->
°©s
.
tx_°›_bur°
;

1225 if–(
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_MORE
Ë&& 
	`OO_PP_IS_NULL
’kt->
√xt
) &&

1226 
ts
->
s
.
tx_î∫o
 == 0 &&

1227 (
	`PKT_TCP_TX_SEQ_SPACE
(
pkt
Ë< 
	`t˝_eff_mss
(
ts
)) &&

1228 (
pkt
->
n_buf„rs
 < 
CI_IP_PKT_SEGMENTS_MAX
)) {

1230 
	`ci_as£π
(! (
ni
->
Êags
 & 
CI_NETIF_FLAG_MSG_WARM
));

1240 if–!
	`ci_t˝_öÊight
(
ts
) ) {

1241 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
));

1242 
	`ci_as£π
(!(
ts
->
s
.
b
.
°©e
 & 
CI_TCP_STATE_NO_TIMERS
));

1248 if–
	`ci_ù_timî_≥ndög
(
ni
, &
ts
->
c‹k_tid
) )

1249 
	`ci_ù_timî_modify
(
ni
, &
ts
->
c‹k_tid
, 
	`ci_t˝_time_now
(ni) +

1250 (
	`NI_CONF
(
ni
).
tc⁄°_dñack
 << 1));

1252 
	`ci_ù_timî_£t
(
ni
, &
ts
->
c‹k_tid
, 
	`ci_t˝_time_now
(ni) +

1253 (
	`NI_CONF
(
ni
).
tc⁄°_dñack
 << 1));

1257 
pkt
->
Êags
 &~
CI_PKT_FLAG_TX_MORE
;

1258 ++
ts
->
°©s
.
tx_°›_m‹e
;

1262 #i‡
CI_CFG_CONG_AVOID_NOTIFIED


1264 if–
	`ef_vi_å™smô_fûl_Àvñ
(&
ni
->
ï
Ë> 
	`NI_OPTS
“i).
c⁄g_nŸify_thªsh


1265 && 
ts
->
c⁄g°©e
 =
CI_TCP_CONG_OPEN
 ) {

1266 
ts
->
c⁄g°©e
 = 
CI_TCP_CONG_NOTIFIED
;

1267 
ts
->
c⁄gªcovî
 = 
	`t˝_¢d_nxt
(ts);

1274 
	`ci_t˝_ˇlc_rcv_wnd
(
ts
, "tx_advance");

1277 
	`ci_t˝_tx_föish
(
ni
, 
ts
, 
pkt
);

1280 
	`ci_t˝_ù_hdr_öô
(
ù
, 
	`TX_PKT_LEN
(
pkt
Ë- 
	`oo_ëhî_hdr_size
(pkt));

1283 
	`ci_t˝_tx_£t_urg_±r
(
ts
, 
ni
, 
t˝
);

1286 
t˝
->
t˝_ack_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_rcv_nxt
(
ts
));

1287 
t˝
->
t˝_wödow_be16
 = 
	`TS_TCP
(
ts
)->tcp_window_be16;

1288 
	`ci_t˝_tx_maybe_do_°rùög
(
pkt
, 
ts
);

1290 
	`LOG_TT
(
	`log
(
LNTS_FMT
 
RCV_WND_FMT
 " snd=%08x-%08x-%08xÉnq=%08x",

1291 
	`LNTS_PRI_ARGS
(
ni
,
ts
), 
	`RCV_WND_ARGS
(ts),

1292 
	`t˝_¢d_u«
(
ts
), 
	`t˝_¢d_nxt
—s),Ås->
¢d_max
, 
	`t˝_íq_nxt
(ts));

1293 
	`log
(
LNT_FMT
 "["
CI_TCP_FLAGS_FMT
"] id=%d s=%08x-%08xá=%08x w=%u "

1294 "∑yÀn=%d", 
	`LNT_PRI_ARGS
(
ni
,
ts
),

1295 
	`CI_TCP_HDR_FLAGS_PRI_ARG
(
t˝
),

1296 
	`OO_PKT_FMT
(
pkt
), (Ë
	`CI_BSWAP_BE32
(
t˝
->
t˝_£q_be32
),

1297 
pkt
->
pf
.
t˝_tx
.
íd_£q
,

1298 (Ë
	`CI_BSWAP_BE32
(
t˝
->
t˝_ack_be32
),

1299 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_wödow_be16
),

1300 
	`CI_BSWAP_BE16
(
ù
->
ù_tŸ_Àn_be16
) -

1301 (
	`CI_IP4_IHL
(
ù
Ë+ 
	`CI_TCP_HDR_LEN
(
t˝
))));

1303 
	`t˝_¢d_nxt
(
ts
Ë
pkt
->
pf
.
t˝_tx
.
íd_£q
;

1304 
£¡_num
++;

1305 
	`CI_TCP_STATS_INC_OUT_SEGS
(
ni
);

1306 
œ°_pkt
 = 
pkt
;

1309 
	`ci_as£π
–! (
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_PENDING
));

1310 
	`ci_as£π_equÆ
(
pkt
->
Êags
 & ~
CI_PKT_FLAG_TX_MASK_ALLOWED
, 0);

1312 
	`CI_IP_SOCK_STATS_ADD_TXBYTE
(
ts
, 
	`TX_PKT_LEN
(
pkt
));

1314 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) ) {

1315 ++
ts
->
°©s
.
tx_°›_≠p
;

1318 
id
 = 
pkt
->
√xt
;

1321 if–
ni
->
Êags
 & 
CI_NETIF_FLAG_MSG_WARM
 )

1322 
	`ci_as£π
(
£¡_num
 == 1);

1324 if–
£¡_num
 != 0 ) {

1325 
	`LOG_TT
(
	`log
(
LNT_FMT
 "%dÖackets sent inÅx_advance: from %dÅo %d",

1326 
	`LNT_PRI_ARGS
(
ni
,
ts
), 
£¡_num
, 
	`OO_PP_FMT
(
£ndq
->
hód
),

1327 
	`OO_PKT_FMT
(
œ°_pkt
)));

1329 if–
ts
->
s
.
pkt
.
Êags
 & 
CI_IP_CACHE_IS_LOCALROUTE
 ) {

1330 
oo_pkt_p
 
hód
 = 
£ndq
->head;

1331 
	`ci_as£π
(! (
ni
->
Êags
 & 
CI_NETIF_FLAG_MSG_WARM
 ));

1334 
£ndq
->
hód
 = 
œ°_pkt
->
√xt
;

1335 
£ndq
->
num
 -
£¡_num
;

1336 
ts
->
£nd_out
 +
£¡_num
;

1337 
	`ci_as£π_equiv
(
	`ci_ù_queue_nŸ_em±y
(
£ndq
),

1338 
	`OO_PP_NOT_NULL
(
£ndq
->
hód
));

1341 i‡–
	`ci_t˝_tx_advîti£_•a˚
(
ni
, 
ts
) )

1342 
	`ci_t˝_wake_possibly_nŸ_ö_pﬁl
(
ni
, 
ts
, 
CI_SB_FLAG_WAKE_TX
);

1344 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_LOOP_DEFERRED
 ) {

1345 
ci_ù_pkt_fmt
 *
pkt
 = 
	`PKT_CHK
(
ni
, 
hód
);

1346 
hód
 = 
pkt
->
√xt
;

1347 
	`ci_ù_loˇl_£nd
(
ni
, 
pkt
, 
	`S_SP
(
ts
),Ås->
loˇl_≥î
);

1351 
	`ci_√tif_pﬁl
(
ni
);

1352 
ts
->
t˝Êags
 &~
CI_TCPT_FLAG_LOOP_DEFERRED
;

1354 if–
	`OO_PP_NOT_NULL
(
hód
) )

1355 
	`ci_ù_£nd_t˝_li°_lo›back
(
ni
, 
ts
, 
hód
, 
œ°_pkt
);

1358 
	`ci_ù_£nd_t˝_li°_lo›back
(
ni
, 
ts
, 
hód
, 
œ°_pkt
);

1362 
	`ci_ù_£nd_t˝_li°
(
ni
, 
ts
, 
£ndq
->
hód
, 
œ°_pkt
);

1363 if(
	`CI_UNLIKELY
–
ni
->
Êags
 & 
CI_NETIF_FLAG_MSG_WARM
 ))

1372 if(
	`CI_UNLIKELY
–
ts
->
s
.
b
.
°©e
 =
CI_TCP_CLOSED
 )) {

1375 
	`ci_as£π_equÆ
(
£¡_num
, 1);

1378 
	`ci_ù_queue_move
(
ni
, 
£ndq
, &
ts
->
ªå™s
, 
œ°_pkt
, 
£¡_num
);

1379 
ts
->
£nd_out
 +
£¡_num
;

1382 if–
	`NI_OPTS
(
ni
).
t˝_¢dbuf_mode
 == 0 &&

1383 
	`ci_t˝_tx_advîti£_•a˚
(
ni
, 
ts
) )

1384 
	`ci_t˝_wake_possibly_nŸ_ö_pﬁl
(
ni
, 
ts
, 
CI_SB_FLAG_WAKE_TX
);

1386 #i‡
CI_CFG_CONGESTION_WINDOW_VALIDATION


1387 
ts
->
t_œ°_£¡
 = 
	`ci_t˝_time_now
(
ni
);

1390 
	`ci_t˝_kÆive_check_™d_˛ór
(
ni
, 
ts
);

1391 
	`ci_t˝_πo_check_™d_£t
(
ni
, 
ts
);

1392 
	`ci_t˝_dñack_˛ór
(
ni
, 
ts
);

1393 
ts
->
acks_≥ndög
 = 0;

1395 #i‡
CI_CFG_TAIL_DROP_PROBE


1396 if(
	`NI_OPTS
(
ni
).
èû_dr›_¥obe
 &&

1397 
ts
->
èûdr›_°©e
 =
CI_TCP_TAIL_DROP_PRIMED
){

1399 
ts
->
èûdr›_°©e
 = 
CI_TCP_TAIL_DROP_ACTIVE
;

1400 
	`ci_t˝_èûdr›_˛ór
(
ni
, 
ts
);

1404 if(
ts
->
èûdr›_°©e
 =
CI_TCP_TAIL_DROP_ACTIVE


1405 && 
ts
->
ªå™s
.
num
 > 1){

1407 
ts
->
èûdr›_m¨k
 = 
	`CI_BSWAP_BE32
(
	`TX_PKT_TCP
(
œ°_pkt
)->
t˝_£q_be32
);

1408 
ts
->
èûdr›_°©e
 = 
CI_TCP_TAIL_DROP_PRIMED
;

1409 
	`ci_t˝_èûdr›_check_™d_£t
(
ni
, 
ts
);

1415 
	`ci_t˝_tx_cwv_≠p_lmtd
(
ni
, 
ts
);

1416 
	}
}

1421 
	$ci_t˝_£nd_r°
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

1423 
ci_ù_pkt_fmt
* 
pkt
;

1424 
ci_t˝_hdr
* 
t˝
;

1426 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
√tif
);

1427 if–
	`CI_UNLIKELY
(! 
pkt
) ) {

1428 
	`CI_TCP_EXT_STATS_INC_TCP_ABORT_FAILED
–
√tif
 );

1429 
	`LOG_U
(
	`log
(
LNTS_FMT
 "%s: out ofÖkt buffers, RSTÇot sent",

1430 
	`LNTS_PRI_ARGS
(
√tif
,
ts
), 
__FUNCTION__
));

1434 
	`oo_tx_pkt_œyout_öô
(
pkt
);

1435 
	`ci_pkt_öô_‰om_ùˇche
(
pkt
, &
ts
->
s
.pkt);

1436 
	`ci_t˝_ù_hdr_öô
(
	`oo_tx_ù_hdr
(
pkt
), (
ci_ù4_hdr
)+(
ci_t˝_hdr
));

1438 
t˝
 = 
	`TX_PKT_TCP
(
pkt
);

1439 
t˝
->
t˝_urg_±r_be16
 = 0;

1440 
t˝
->
t˝_Êags
 = 
CI_TCP_FLAG_RST
 | 
CI_TCP_FLAG_ACK
;

1441 
t˝
->
t˝_£q_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_¢d_nxt
(
ts
Ë+Ås->
¢d_dñeg©ed
);

1442 
t˝
->
t˝_ack_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_rcv_nxt
(
ts
));

1443 
t˝
->
t˝_wödow_be16
 = 0;

1444 
	`CI_TCP_HDR_SET_LEN
(
t˝
, (
ci_t˝_hdr
));

1446 
	`LOG_TV
(
	`log
(
LNT_FMT
 "RST %s:%u->%s:%u s=%08xá=%08x",

1447 
	`LNT_PRI_ARGS
(
√tif
,
ts
),

1448 
	`ù_addr_°r
(
	`oo_tx_ù_hdr
(
pkt
)->
ù_ßddr_be32
),

1449 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_sour˚_be16
),

1450 
	`ù_addr_°r
(
	`oo_tx_ù_hdr
(
pkt
)->
ù_daddr_be32
),

1451 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_de°_be16
),

1452 (Ë
	`CI_BSWAP_BE32
(
t˝
->
t˝_£q_be32
),

1453 (Ë
	`CI_BSWAP_BE32
(
t˝
->
t˝_ack_be32
)));

1455 
pkt
->
buf_Àn
 =Ökt->
∑y_Àn
 =

1456 
	`oo_ëhî_hdr_size
(
pkt
Ë+ (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
);

1457 
	`ci_ù_£nd_t˝
(
√tif
, 
pkt
, 
ts
);

1458 
	`CI_TCP_STATS_INC_OUT_SEGS
(
√tif
);

1459 
	`CI_IP_SOCK_STATS_ADD_TXBYTE
(
ts
, 
pkt
->
buf_Àn
);

1460 
	`ci_√tif_pkt_ªÀa£
(
√tif
, 
pkt
);

1462 
	`CI_TCP_STATS_INC_OUT_RSTS
–
√tif
 );

1463 
	}
}

1465 #ifde‡
__KERNEL__


1466 
	$ci_t˝_ª£t_u¡ru°ed
(
ci_√tif
 *
√tif
, 
ci_t˝_°©e
 *
ts
)

1468 
ci_ù4_hdr
 *
ù
;

1469 
ci_t˝_hdr
 *
t˝
;

1470 
rc
, 
ù_Àn
;

1474 if–
	`OO_SP_NOT_NULL
(
ts
->
loˇl_≥î
) )

1477 
ù
 = 
	`ci_Æloc
((
ci_t˝_hdr
Ë+ (
ci_ù4_hdr
));

1478 if–!
ù
 )

1479  -
ENOMEM
;

1482 if–
ts
->
outgoög_hdrs_Àn
 < (
ci_t˝_hdr
Ë+ (
ci_ù4_hdr
) ||

1483 
ts
->
s
.
pkt
.
ù
.
ù_ihl_vîsi⁄
 !=

1484 
	`CI_IP4_IHL_VERSION
–(
ci_ù4_hdr
) ) ||

1485 
ts
->
s
.
pkt
.
ù
.
ù_¥Ÿocﬁ
 !
IPPROTO_TCP
 ||

1486 
ts
->
s
.
pkt
.
ù
.
ù_‰ag_off_be16
 !
CI_IP4_FRAG_DONT
 )

1487  -
EFAULT
;

1489 
	`mem˝y
(
ù
, &
ts
->
s
.
pkt
.ù, (
ci_ù4_hdr
));

1490 
ù_Àn
 = (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
);

1491 
ù
->
ù_tŸ_Àn_be16
 = 
	`CI_BSWAP_BE16
(
ù_Àn
);

1492 
	`ci_as£π_equÆ
(
ù
->
ù_check_be16
, 0);

1493 
	`ci_as£π_equÆ
(
ù
->
ù_id_be16
, 0);

1495 
t˝
 = (
ci_t˝_hdr
 *)(
ù
 + 1);

1496 
t˝
->
t˝_urg_±r_be16
 = 0;

1497 
t˝
->
t˝_Êags
 = 
CI_TCP_FLAG_RST
;

1498 
t˝
->
t˝_£q_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_¢d_nxt
(
ts
));

1499 
t˝
->
t˝_ack_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_rcv_nxt
(
ts
));

1500 
t˝
->
t˝_sour˚_be16
 = 
	`t˝_Õ‹t_be16
(
ts
);

1501 
t˝
->
t˝_de°_be16
 = 
	`t˝_Ω‹t_be16
(
ts
);

1502 
t˝
->
t˝_wödow_be16
 = 0;

1503 
	`CI_TCP_HDR_SET_LEN
(
t˝
, (
ci_t˝_hdr
));

1504 
t˝
->
t˝_check_be16
 = 0;

1506 
	`LOG_E
(
	`ci_log
(
NT_FMT
 
CI_IP_PRINTF_FORMAT
":%d->"CI_IP_PRINTF_FORMAT":%d RESET",

1507 
	`NT_PRI_ARGS
(
√tif
, 
ts
),

1508 
	`CI_IP_PRINTF_ARGS
(&
ù
->
ù_ßddr_be32
),

1509 
	`CI_BSWAP_BE16
(
t˝
->
t˝_sour˚_be16
),

1510 
	`CI_IP_PRINTF_ARGS
(&
ù
->
ù_daddr_be32
),

1511 
	`CI_BSWAP_BE16
(
t˝
->
t˝_de°_be16
)));

1512 
rc
 = 
	`ci˝_øw_ù_£nd
(
ù
, 
ù_Àn
, 
ts
->
s
.
˝
.
so_bödtodevi˚
);

1513 
	`ci_‰ì
(
ù
);

1514  
rc
;

1515 
	}
}

1518 
	$ci_t˝_ª∂y_wôh_r°
(
ci_√tif
* 
√tif
, 
ciù_t˝_rx_pkt
* 
rxp
)

1526 
ci_ù_pkt_fmt
* 
pkt
 = 
rxp
->pkt;

1527 
ci_t˝_hdr
 
π˝
;

1528 
ci_uöt32
 
π˝_íd£q
;

1529 
ci_ù4_hdr
 
rù
;

1530 
ci_t˝_hdr
* 
t˝
;

1531 
ci_ù4_hdr
* 
ù
;

1533 
	`ci_as£π
(
√tif
);

1534 
	`ASSERT_VALID_PKT
(
√tif
, 
pkt
);

1538 
π˝
 = *
rxp
->
t˝
;

1539 
rù
 = *
	`oo_ù_hdr
(
pkt
);

1540 
π˝_íd£q
 = 
pkt
->
pf
.
t˝_rx
.
íd_£q
;

1542 if–(
pkt
 = 
	`ci_√tif_pkt_rx_to_tx
(
√tif
,Ökt)Ë=
NULL
 )

1548 
	`oo_tx_pkt_œyout_öô
(
pkt
);

1549 
	`oo_tx_ëhî_ty≥_£t
(
pkt
, 
CI_ETHERTYPE_IP
);

1550 
ù
 = 
	`oo_tx_ù_hdr
(
pkt
);

1551 
	`ci_ù_hdr_öô_fixed
(
ù
, 
IPPROTO_TCP
, 
CI_IP_DFLT_TTL
, 
CI_IP_DFLT_TOS
);

1552 
ù
->
ù_daddr_be32
 = 
rù
.
ù_ßddr_be32
;

1553 
ù
->
ù_ßddr_be32
 = 
rù
.
ù_daddr_be32
;

1555 
t˝
 = (
ci_t˝_hdr
*Ë(
ù
 + 1);

1556 
t˝
->
t˝_urg_±r_be16
 = 0;

1557 
t˝
->
t˝_sour˚_be16
 = 
π˝
.
t˝_de°_be16
;

1558 
t˝
->
t˝_de°_be16
 = 
π˝
.
t˝_sour˚_be16
;

1563 if–(
π˝
.
t˝_Êags
 & 
CI_TCP_FLAG_ACK
) ) {

1564 
t˝
->
t˝_£q_be32
 = 
π˝
.
t˝_ack_be32
;

1565 
t˝
->
t˝_Êags
 = 
CI_TCP_FLAG_RST
;

1566 
t˝
->
t˝_ack_be32
 = 0;

1568 
t˝
->
t˝_£q_be32
 = 0;

1569 
t˝
->
t˝_Êags
 = 
CI_TCP_FLAG_RST
 | 
CI_TCP_FLAG_ACK
;

1570 
t˝
->
t˝_ack_be32
 = 
	`CI_BSWAP_BE32
(
π˝_íd£q
);

1572 
	`CI_TCP_HDR_SET_LEN
(
t˝
, (*tcp));

1573 
t˝
->
t˝_wödow_be16
 = 0;

1574 
ù
->
ù_check_be16
 = 0;

1575 
ù
->
ù_id_be16
 = 0;

1576 
t˝
->
t˝_check_be16
 = 0;

1577 
	`ci_t˝_ù_hdr_öô
(
ù
, (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
));

1579 
	`LOG_TR
(
	`log
(
LN_FMT
 "RSTACK %s:%u->%s:%u s=%08xá=%08x",

1580 
	`LN_PRI_ARGS
(
√tif
), 
	`ù_addr_°r
(
ù
->
ù_ßddr_be32
),

1581 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_sour˚_be16
),

1582 
	`ù_addr_°r
(
ù
->
ù_daddr_be32
),

1583 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_de°_be16
),

1584 (Ë
	`CI_BSWAP_BE32
(
t˝
->
t˝_£q_be32
),

1585 (Ë
	`CI_BSWAP_BE32
(
t˝
->
t˝_ack_be32
)));

1587 
pkt
->
buf_Àn
 =Ökt->
∑y_Àn
 =

1588 
	`oo_ëhî_hdr_size
(
pkt
Ë+ (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
);

1589 if–
pkt
->
ötf_i
 =
OO_INTF_I_LOOPBACK
 ) {

1590 
	`ci_√tif_pkt_hﬁd
(
√tif
, 
pkt
);

1591 
	`ci_ù_loˇl_£nd
(
√tif
, 
pkt
,Ökt->
pf
.
t˝_tx
.
lo
.
rx_sock
,

1592 
pkt
->
pf
.
t˝_tx
.
lo
.
tx_sock
);

1596 
	`ci_ù_£nd_pkt
(
√tif
, 
NULL
, 
pkt
);

1598 
	`CI_TCP_STATS_INC_OUT_SEGS
(
√tif
);

1599 
	`ci_√tif_pkt_ªÀa£
(
√tif
, 
pkt
);

1600 
	`CI_TCP_STATS_INC_OUT_RSTS
–
√tif
 );

1601 
	}
}

1604 
	$ci_t˝_£nd_zwö_¥obe
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

1610 
ci_ù_pkt_fmt
* 
pkt
;

1611 
ci_t˝_hdr
* 
t˝
;

1612 
ci_uöt8
* 
›t
;

1613 
›éí
 = 0;

1615 
	`ci_as£π
(
√tif
);

1616 
	`ci_as£π
(
	`ci_ù_queue_is_em±y
(&
ts
->
ªå™s
));

1617 
	`ci_as£π
(
	`OO_SP_IS_NULL
(
ts
->
loˇl_≥î
));

1619 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
√tif
);

1620 if–! 
pkt
 ) {

1621 
	`LOG_U
(
	`log
(
LNTS_FMT
 "out ofÖkt buffers,Çot sending zwinÖrobe",

1622 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
)));

1626 
	`oo_tx_pkt_œyout_öô
(
pkt
);

1627 
	`ci_pkt_öô_‰om_ùˇche
(
pkt
, &
ts
->
s
.pkt);

1628 
t˝
 = 
	`TX_PKT_TCP
(
pkt
);

1629 
›t
 = 
	`CI_TCP_HDR_OPTS
(
t˝
);

1632 
	`ci_t˝_ªdu˚_Á°°¨t
(
ts
, 
	`SEQ_SUB
(
	`t˝_rcv_nxt
—s),Ås->
t¶a°ack
));

1635 
ts
->
t¶a°ack
 = 
	`t˝_rcv_nxt
(ts);

1636 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

1637 
›éí
 +
	`ci_t˝_tx_›t_tso
(&
›t
, 
	`ci_t˝_time_now
(
√tif
), 
ts
->
t§e˚¡
);

1639 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
 )

1640 
›éí
 +
	`ci_t˝_tx_›t_ßck
(&
›t
, o±Àn, 
√tif
, 
ts
);

1642 
t˝
->
t˝_Êags
 = 
CI_TCP_FLAG_ACK
;

1644 
	`CI_TCP_HDR_SET_LEN
(
t˝
, (
ci_t˝_hdr
Ë+ 
›éí
);

1647 
t˝
->
t˝_£q_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_¢d_u«
(
ts
)-1);

1648 
	`ci_t˝_ù_hdr_öô
(
	`oo_tx_ù_hdr
(
pkt
),

1649 (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
Ë+ 
›éí
);

1650 
pkt
->
buf_Àn
 =Ökt->
∑y_Àn
 =

1651 
	`oo_ëhî_hdr_size
(
pkt
Ë+ (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
Ë+ 
›éí
;

1654 
	`ci_t˝_ˇlc_rcv_wnd
(
ts
, "zwin_probe");

1656 
	`ci_t˝_tx_£t_urg_±r
(
ts
, 
√tif
, 
t˝
);

1657 
t˝
->
t˝_ack_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_rcv_nxt
(
ts
));

1658 
t˝
->
t˝_wödow_be16
 = 
	`TS_TCP
(
ts
)->tcp_window_be16;

1660 
	`LOG_TT
(
	`log
(
LNT_FMT
 "ZWIN id=%i s=%08xá=%08x w=%u",

1661 
	`LNT_PRI_ARGS
(
√tif
,
ts
), 
	`OO_PKT_FMT
(
pkt
),

1662 (Ë
	`CI_BSWAP_BE32
(
t˝
->
t˝_£q_be32
),

1663 (Ë
	`CI_BSWAP_BE32
(
t˝
->
t˝_ack_be32
),

1664 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_wödow_be16
)));

1666 
	`ci_ù_£nd_t˝
(
√tif
, 
pkt
, 
ts
);

1668 
	`CI_IP_SOCK_STATS_ADD_TXBYTE
(
ts
, 
pkt
->
buf_Àn
);

1670 
	`ci_√tif_pkt_ªÀa£
(
√tif
, 
pkt
);

1671 
	}
}

1674 
	$ci_t˝_£nd_ack_lo›back
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

1675 
sock_locked
)

1677 
ci_t˝_°©e
* 
≥î
;

1678 
côp_waôabÀ
* 
w_≥î
;

1680 
	`ci_as£π
–
	`OO_SP_NOT_NULL
(
ts
->
loˇl_≥î
) );

1681 
w_≥î
 = 
	`ID_TO_WAITABLE
(
√tif
, 
ts
->
loˇl_≥î
);

1683 
ts
->
acks_≥ndög
 = 0;

1688 if–~
w_≥î
->
°©e
 & 
CI_TCP_STATE_TCP_CONN
 )

1690 
≥î
 = (
ci_t˝_°©e
 *)
w_≥î
;

1691 if–
≥î
->
loˇl_≥î
 !
	`S_SP
(
ts
) )

1696 if–
√tif
->
°©e
->
ö_pﬁl
 )

1697 
	`ci_√tif_put_⁄_po°_pﬁl
(
√tif
, &
≥î
->
s
.
b
);

1700 
ts
->
acks_≥ndög
 = 0;

1701 
	`ci_t˝_ˇlc_rcv_wnd
(
ts
, "send_ack");

1702 
	`ci_as£π
(!
	`ci_ù_timî_≥ndög
(
√tif
, &
ts
->
dñack_tid
));

1704 
≥î
->
¢d_u«
 = 
	`t˝_rcv_nxt
(
ts
);

1705 
≥î
->
¢d_max
 = 
	`t˝_rcv_wnd_right_edge_£¡
(
ts
);

1709 if–
	`ci_ù_queue_nŸ_em±y
(&
≥î
->
£nd
) )

1710 
	`ci_t˝_tx_adv™˚
(
≥î
, 
√tif
);

1711 }  
ts
->
acks_≥ndög
 != 0 );

1713 
	`ci_as£π_equÆ
(
ts
->
acks_≥ndög
, 0);

1715 
	`LOG_TC
(
	`log
(
LPF
 "lo›back ACK %d: %d->%d", 
	`NI_ID
(
√tif
),

1716 
	`S_FMT
(
ts
), S_FMT(
≥î
));

1717 
	`log
(
LNTS_FMT
 
RCV_WND_FMT
 " snd=%08x-%08x-%08xÉnq=%08x",

1718 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
), 
	`RCV_WND_ARGS
(ts),

1719 
	`t˝_¢d_u«
(
ts
),

1720 
	`t˝_¢d_nxt
(
ts
),Ås->
¢d_max
, 
	`t˝_íq_nxt
(ts));

1721 
	`log
(
LNTS_FMT
 
RCV_WND_FMT
 " snd=%08x-%08x-%08xÉnq=%08x",

1722 
	`LNTS_PRI_ARGS
(
√tif
, 
≥î
), 
	`RCV_WND_ARGS
(peer),

1723 
	`t˝_¢d_u«
(
≥î
),

1724 
	`t˝_¢d_nxt
(
≥î
),Öìr->
¢d_max
, 
	`t˝_íq_nxt
(peer)));

1725 
	}
}

1728 
	$ci_t˝_£nd_ack
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
, 
ci_ù_pkt_fmt
* 
pkt
,

1729 
sock_locked
)

1731 
ci_t˝_hdr
* 
t˝
;

1732 
ci_uöt8
* 
›t
;

1733 
›éí
 = 0;

1735 
	`CITP_STATS_NETIF_INC
(
√tif
, 
acks_£¡
);

1738 if–
	`OO_SP_NOT_NULL
(
ts
->
loˇl_≥î
) ) {

1739 
	`ci_√tif_pkt_ªÀa£
(
√tif
, 
pkt
);

1740 
	`ci_t˝_£nd_ack_lo›back
(
√tif
, 
ts
, 
sock_locked
);

1746 if–
	`ci_t˝_rcvbuf_abu£d
(
√tif
, 
ts
) )

1747 
	`ci_t˝_rcvbuf_u«bu£
(
√tif
, 
ts
, 
sock_locked
);

1749 
ts
->
acks_≥ndög
 = 0;

1750 
	`ci_t˝_dñack_˛ór
(
√tif
, 
ts
);

1751 
	`ci_t˝_ˇlc_rcv_wnd
(
ts
, "send_ack");

1753 
	`ci_as£π
(
√tif
);

1754 
	`ASSERT_VALID_PKT
(
√tif
, 
pkt
);

1755 
	`ci_as£π
(
pkt
->
ªfcou¡
 == 1);

1756 
	`ci_as£π
–! (
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_PENDING
));

1758 
	`oo_tx_pkt_œyout_öô
(
pkt
);

1759 
	`ci_pkt_öô_‰om_ùˇche
(
pkt
, &
ts
->
s
.pkt);

1760 
	`ci_as£π_equÆ
(
ts
->
s
.
pkt
.
ù
.
ù_check_be16
, 0);

1761 
	`ci_as£π_equÆ
(
	`oo_tx_ù_hdr
(
pkt
)->
ù_check_be16
, 0);

1762 
t˝
 = 
	`TX_PKT_TCP
(
pkt
);

1763 
	`ci_as£π_equÆ
(
t˝
->
t˝_check_be16
, 0);

1764 
›t
 = 
	`CI_TCP_HDR_OPTS
(
t˝
);

1770 
t˝
->
t˝_£q_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_¢d_nxt
(
ts
Ë+Ås->
¢d_dñeg©ed
);

1773 
	`ci_t˝_ªdu˚_Á°°¨t
(
ts
, 
	`SEQ_SUB
(
	`t˝_rcv_nxt
—s),Ås->
t¶a°ack
));

1776 
ts
->
t¶a°ack
 = 
	`t˝_rcv_nxt
(ts);

1777 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

1778 
›éí
 +
	`ci_t˝_tx_›t_tso
(&
›t
, 
	`ci_t˝_time_now
(
√tif
), 
ts
->
t§e˚¡
);

1780 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_SACK
 ) {

1781 
›éí
 +
	`ci_t˝_tx_›t_ßck
(&
›t
, o±Àn, 
√tif
, 
ts
);

1784 
t˝
->
t˝_Êags
 = 
CI_TCP_FLAG_ACK
;

1786 
	`CI_TCP_HDR_SET_LEN
(
t˝
, (
ci_t˝_hdr
Ë+ 
›éí
);

1788 
	`ci_t˝_tx_£t_urg_±r
(
ts
, 
√tif
, 
t˝
);

1791 
	`ci_t˝_ù_hdr_öô
(
	`oo_tx_ù_hdr
(
pkt
),

1792 (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
Ë+ 
›éí
);

1793 
t˝
->
t˝_ack_be32
 = 
	`CI_BSWAP_BE32
(
	`t˝_rcv_nxt
(
ts
));

1794 
t˝
->
t˝_wödow_be16
 = 
	`TS_TCP
(
ts
)->tcp_window_be16;

1796 
	`LOG_TT
(
	`log
(
LNT_FMT
 "ACK id=%i s=%08xá=%08x w(unscaled)=%u w_cur=%u",

1797 
	`LNT_PRI_ARGS
(
√tif
,
ts
), 
	`OO_PKT_FMT
(
pkt
),

1798 (Ë
	`CI_BSWAP_BE32
(
t˝
->
t˝_£q_be32
),

1799 (Ë
	`CI_BSWAP_BE32
(
t˝
->
t˝_ack_be32
),

1800 (Ë
	`CI_BSWAP_BE16
(
t˝
->
t˝_wödow_be16
),

1801 
	`t˝_rcv_wnd_cuºít
(
ts
)));

1803 
pkt
->
buf_Àn
 =Ökt->
∑y_Àn
 =

1804 
	`oo_ëhî_hdr_size
(
pkt
Ë+ (
ci_ù4_hdr
Ë+ (
ci_t˝_hdr
Ë+ 
›éí
;

1806 
	`ci_t˝_tx_maybe_do_°rùög
(
pkt
, 
ts
);

1807 
	`__ci_ù_£nd_t˝
(
√tif
, 
pkt
, 
ts
);

1808 
	`CI_TCP_STATS_INC_OUT_SEGS
(
√tif
);

1809 
	`CI_IP_SOCK_STATS_ADD_TXBYTE
(
ts
, 
pkt
->
buf_Àn
);

1810 
	`ci_√tif_pkt_ªÀa£
(
√tif
, 
pkt
);

1811 
	}
}

1813 #i‡
CI_CFG_TAIL_DROP_PROBE


1814 
	$ci_t˝_£nd_èûdr›_¥obe
(
ci_√tif
 *
√tif
, 
ci_t˝_°©e
 *
ts
)

1816 
ci_ù_pkt_fmt
 *
pkt
;

1817 
ci_ù_pkt_queue
 *
πq
 = &
ts
->
ªå™s
;

1819 
	`ci_as£π
(
	`ci_ù_queue_nŸ_em±y
(
πq
));

1820 
	`ci_as£π
(
	`NI_OPTS
(
√tif
).
èû_dr›_¥obe
);

1823 
pkt
 = 
	`PKT_CHK
(
√tif
, 
πq
->
èû
);

1824 if–! (
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_PENDING
) ) {

1825 
	`ci_t˝_ªå™s_⁄e
(
ts
, 
√tif
, 
pkt
);

1833 
	}
}

1840 
	$ci_ù_hdr_öô_fixed
(
ci_ù4_hdr
* 
ù
, 
¥Ÿocﬁ
,

1841 
âl
, 
tos
)

1843 
	`ci_as£π
(
âl
);

1845 
ù
->
ù_ihl_vîsi⁄
 = 
	`CI_IP4_IHL_VERSION
((*ip));

1846 
ù
->
ù_tos
 = (
ci_uöt8
)
tos
;

1847 
ù
->
ù_‰ag_off_be16
 = 
CI_IP4_FRAG_DONT
;

1848 
ù
->
ù_âl
 = (
ci_uöt8
)
âl
;

1849 
ù
->
ù_¥Ÿocﬁ
 = (
ci_uöt8
)
¥Ÿocﬁ
;

1850 
	}
}

	@tcp_tx.h

1 #i‚de‡
__TCP_TX_H__


2 
	#__TCP_TX_H__


	)

8 
ci_ölöe
 
	$ci_t˝_tx_›t_tso
(
ci_uöt8
** 
›t
,

9 
ci_uöt32
 
tsvÆ
, ci_uöt32 
t£¸
)

11 *(
ci_uöt32
*)(*
›t
Ë
CI_TCP_TSO_WORD
;

12 *(
ci_uöt32
*)(*
›t
 + 4Ë
	`CI_BSWAP_BE32
(
tsvÆ
);

13 *(
ci_uöt32
*)(*
›t
 + 8Ë
	`CI_BSWAP_BE32
(
t£¸
);

14 *
›t
 += 12;

16 
	}
}

26 
ci_ölöe
 
	$ci_t˝_tx_föish
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
,

27 
ci_ù_pkt_fmt
* 
pkt
)

29 
ci_t˝_hdr
* 
t˝
 = 
	`TX_PKT_TCP
(
pkt
);

30 
ci_uöt8
* 
›t
 = 
	`CI_TCP_HDR_OPTS
(
t˝
);

31 
£q
 = 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
;

34 
	`ci_t˝_ªdu˚_Á°°¨t
(
ts
, 
	`SEQ_SUB
(
	`t˝_rcv_nxt
—s),ts->
t¶a°ack
));

37 
ts
->
t¶a°ack
 = 
	`t˝_rcv_nxt
(ts);

38 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_TSO
 ) {

39 
now
 = 
	`ci_t˝_time_now
(
√tif
);

40 
	`ci_t˝_tx_›t_tso
(&
›t
, 
now
, 
ts
->
t§e˚¡
);

43 if–
	`CI_LIKELY
((
ts
->
c⁄g°©e
 =
CI_TCP_CONG_OPEN
) |

44 (
ts
->
c⁄g°©e
 =
CI_TCP_CONG_NOTIFIED
)) ) {

47 if–!
	`SEQ_LE
(
	`t˝_¢d_u«
(
ts
),Ås->
timed_£q
) ) {

48 
	`ci_t˝_£t_πt_timög
(
√tif
, 
ts
, 
£q
);

54 if–
	`SEQ_LE
(
ts
->
c⁄gªcovî
, 
£q
) &&

55 !
	`SEQ_LE
(
	`t˝_¢d_u«
(
ts
),Ås->
timed_£q
) ) {

57 
	`ci_t˝_£t_πt_timög
(
√tif
, 
ts
, 
£q
);

62 
t˝
->
t˝_£q_be32
 = 
	`CI_BSWAP_BE32
(
£q
);

63 
	}
}

66 
ci_ölöe
 
	$ci_t˝_ù_hdr_öô
(
ci_ù4_hdr
* 
ù
, 
Àn
)

68 
	`ci_as£π_equÆ
(
	`CI_IP4_IHL
(
ù
), (
ci_ù4_hdr
));

69 
ù
->
ù_tŸ_Àn_be16
 = 
	`CI_BSWAP_BE16
((
ci_uöt16
Ë
Àn
);

70 
	`ci_as£π_equÆ
(
ù
->
ù_check_be16
, 0);

71 
	`ci_as£π_equÆ
(
ù
->
ù_id_be16
, 0);

72 
	}
}

75 
ci_ölöe
 
	$__ci_t˝_ˇlc_rcv_wnd
(
ci_t˝_°©e
* 
ts
)

79 
√w_wödow
;

80 
√w_rhs
;

81 
ci_uöt16
 
tmp
;

83 
√w_wödow
 = 
	`CI_MIN
(
ts
->
rcv_wödow_max
,

84 
ts
->
s
.
so
.
rcvbuf
 -

85 
	`SEQ_SUB
(
	`t˝_rcv_nxt
(
ts
),Ås->
rcv_dñivîed
));

86 
√w_rhs
 = 
	`t˝_rcv_nxt
(
ts
Ë+ 
√w_wödow
;

94 if–
	`CI_LIKELY
–
	`SEQ_GE
(
√w_rhs
, 
ts
->
rcv_wnd_right_edge_£¡
 +Ås->
amss
) )

95 || 
	`t˝_rcv_u§
(
ts
) == 0 ) {

97 
ts
->
rcv_wnd_advîti£d
 = 
√w_wödow
;

98 
	`t˝_rcv_wnd_right_edge_£¡
(
ts
Ë
√w_rhs
;

105 
√w_wödow
 = 
ts
->
rcv_wnd_right_edge_£¡
 - 
	`t˝_rcv_nxt
(ts);

106 
ts
->
rcv_wnd_advîti£d
 = 
	`CI_MIN
(
√w_wödow
,

107 
CI_CFG_TCP_MAX_WINDOW
 << 
ts
->
rcv_ws˛
);

110 
tmp
 = 
ts
->
rcv_wnd_advîti£d
 >>Ås->
rcv_ws˛
;

111 
	`TS_TCP
(
ts
)->
t˝_wödow_be16
 = 
	`CI_BSWAP_BE16
(
tmp
);

112 
	`CI_IP_SOCK_STATS_VAL_RXWIN
(
ts
,Ås->
rcv_wnd_advîti£d
);

113 
	}
}

116 
	#ci_t˝_ˇlc_rcv_wnd
(
ts
, 
ˇŒî
Ë
	`__ci_t˝_ˇlc_rcv_wnd
—s)

	)

119 
ci_ölöe
 
	$ci_t˝_tx_maybe_do_°rùög
(
ci_ù_pkt_fmt
* 
pkt
,

120 
ci_t˝_°©e
* 
ts
) {

121 #i‡
CI_CFG_PORT_STRIPING


122 if–
ts
->
t˝Êags
 & 
CI_TCPT_FLAG_STRIPE
 )

123 
pkt
->
√tif
.
tx
.
ötf_sw≠
 = 
	`ci_ts_p‹t_sw≠
’kt->
pf
.
t˝_tx
.
°¨t_£q
, 
ts
);

125 
	}
}

	@tcp_tx_reformat.c

14 
	~"ù_öã∫Æ.h
"

15 
	~<ci/öã∫Æ/å™•‹t_c⁄fig_›t.h
>

16 
	~"iovec_±r.h
"

17 
	~"√tif_tx.h
"

19 
	#LPF
 "TCP TX RFMT "

	)

35 
	$ci_t˝_tx_mîge_£gmít
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
de°_pkt
,

36 
ci_ù_pkt_fmt
* 
§c_pkt
, 
ef_iovec
* 
§c_£g
,

37 
do_c›y
)

39 
n
;

40 *
§c
, *
de°
;

41 
§c_off
 = ()(
§c_£g
->
iov_ba£
 - (
§c_pkt
->
dma_addr
[§c_pkt->
ötf_i
] +

42 
§c_pkt
->
pkt_°¨t_off
));

47 
	`ci_as£π_gt
(
	`oo_offbuf_À·
(&
de°_pkt
->
buf
), 0);

48 
	`ci_as£π_gt
(
§c_£g
->
iov_Àn
, 0);

49 
	`ci_as£π_equÆ
(
§c_pkt
->
n_buf„rs
, 1);

50 
	`ci_as£π_equÆ
(
de°_pkt
->
n_buf„rs
, 1);

51 
	`ci_as£π_gt
(
§c_off
, 0);

52 
	`ci_as£π_…
((Ë
§c_off
, 
CI_CFG_PKT_BUF_SIZE
);

54 
§c
 = 
	`PKT_START
(
§c_pkt
Ë+ 
§c_off
;

55 
de°
 = 
	`oo_offbuf_±r
(&
de°_pkt
->
buf
);

57 
n
 = 
	`oo_offbuf_À·
(&
de°_pkt
->
buf
);

58 
n
 = 
	`CI_MIN
((Í, 
§c_£g
->
iov_Àn
);

60 if–
do_c›y
 ) {

61 if–
de°_pkt
 =
§c_pkt
 ) {

63 
	`memmove
(
de°
, 
§c
, 
n
);

66 
	`mem˝y
(
de°
, 
§c
, 
n
);

69 
de°_pkt
->
buf_Àn
 +
n
;

70 
de°_pkt
->
∑y_Àn
 +
n
;

71 
	`oo_offbuf_adv™˚
(&
de°_pkt
->
buf
, 
n
);

72 
de°_pkt
->
pf
.
t˝_tx
.
íd_£q
 +
n
;

73 
§c_£g
->
iov_ba£
 +
n
;

74 
§c_£g
->
iov_Àn
 -
n
;

76  
n
;

77 
	}
}

80 
ci_ù_pkt_fmt
* 
	$ci_t˝_tx_Æloˇã_pkt
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

81 
ci_ù_pkt_queue
* 
qu
, 
ci_ù_pkt_fmt
* 
pkt
,

82 
hdæí
, 
ﬁd_Àn
, 
√w_∑yÀn
)

84 
ci_ù_pkt_fmt
* 
√xt
;

86 
√xt
 = 
	`ci_√tif_pkt_tx_t˝_Æloc
(
ni
, 
ts
);

87 if–! 
√xt
 )  
NULL
;

88 
	`oo_tx_pkt_œyout_öô
(
√xt
);

89 
	`ci_pkt_öô_‰om_ùˇche_Àn
(
√xt
, &
ts
->
s
.
pkt
, 
hdæí
);

94 
	`oo_offbuf_öô
(&
√xt
->
buf
, (
uöt8_t
*Ë
	`oo_tx_ëhî_d©a
“extË+ 
hdæí
,

95 
ﬁd_Àn
);

98 
√xt
->
buf_Àn
 =Çext->
∑y_Àn
 = 
hdæí
 + 
	`oo_ëhî_hdr_size
(next);

99 
	`ci_as£π_equÆ
(
√xt
->
n_buf„rs
, 1);

101 
pkt
->
pf
.
t˝_tx
.
íd_£q
 =Ökt->pf.t˝_tx.
°¨t_£q
 + 
√w_∑yÀn
;

102 
√xt
->
pf
.
t˝_tx
.
°¨t_£q
 = 
pkt
->pf.t˝_tx.
íd_£q
;

103 
√xt
->
pf
.
t˝_tx
.
íd_£q
 =Çext->pf.t˝_tx.
°¨t_£q
;

104 
√xt
->
pf
.
t˝_tx
.
block_íd
 = 
OO_PP_NULL
;

112 
√xt
->
Êags
 = 
pkt
->flags;

114  
√xt
;

115 
	}
}

119 
	$ci_t˝_tx_add_to_queue
(
ci_ù_pkt_queue
* 
qu
, 
ci_ù_pkt_fmt
* 
pkt
,

120 
ci_ù_pkt_fmt
* 
√xt
) {

122 
√xt
->√xà
pkt
->next;

123 
pkt
->
√xt
 = 
	`OO_PKT_P
(next);

124 ++
qu
->
num
;

125 if–
	`OO_PP_IS_NULL
(
√xt
->next) ) {

126 
	`ci_as£π
(
	`OO_PP_EQ
(
qu
->
èû
, 
	`OO_PKT_P
(
pkt
)));

127 
qu
->
èû
 = 
	`OO_PKT_P
(
√xt
);

129 
	}
}

144 
	$ci_t˝_tx_•lô
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
, 
ci_ù_pkt_queue
* 
qu
,

145 
ci_ù_pkt_fmt
* 
pkt
, 
√w_∑yÀn
,

146 
ci_boﬁón_t
 
is_£ndq
)

148 
ﬁd_Àn
 = 
	`PKT_TCP_TX_SEQ_SPACE
(
pkt
)

149 - ((
	`TX_PKT_TCP
(
pkt
)->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
Ë>> 
CI_TCP_FLAG_FIN_BIT
);

150 
n
, 
ﬁd_œ°_£g_size
;

151 
hdæí
 = 
ts
->
outgoög_hdrs_Àn
;

152 
ci_ù_pkt_fmt
 *
√xt
;

153 
ef_iovec_±r
 
£gs
;

154 
ef_iovec
 
iov
[
CI_IP_PKT_SEGMENTS_MAX
];

156 
	`ci_as£π_À
(()
√w_∑yÀn
, 
	`t˝_eff_mss
(
ts
));

157 
	`ci_as£π_À
(
√w_∑yÀn
, 
ﬁd_Àn
);

159 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_PENDING
 )  -1;

161 
√xt
 = 
	`ci_t˝_tx_Æloˇã_pkt
(
ni
, 
ts
, 
qu
, 
pkt
, 
hdæí
, 
ﬁd_Àn
, 
√w_∑yÀn
);

162 if–
√xt
 =
NULL
 )  -1;

164 
n
 = 
√w_∑yÀn
 + 
hdæí
 + 
	`oo_ëhî_hdr_size
(
pkt
);

166 
	`ci_as£π_ge
(
pkt
->
buf_Àn
, 
n
);

167 
	`ci_as£π_equÆ
(
pkt
->
n_buf„rs
, 1);

168 
pkt
->
ötf_i
 = 0;

169 
	`ci_√tif_pkt_to_iovec
(
ni
, 
pkt
, 
iov
, (iov) / (iov[0]));

170 
	`ef_iovec_±r_öô_nz
(&
£gs
, 
iov
, 
pkt
->
n_buf„rs
);

171 
	`ef_iovec_±r_adv™˚
(&
£gs
, 
n
);

172 
ﬁd_œ°_£g_size
 = 
pkt
->
buf_Àn
;

173 
pkt
->
buf_Àn
 = 
n
;

174 
pkt
->
∑y_Àn
 -(
ﬁd_œ°_£g_size
 - 
n
);

176  ! 
	`ef_iovec_±r_is_em±y_¥›î
(&
£gs
) ) {

177 #i‚de‡
NDEBUG


178 
moved
 = 
	`ci_t˝_tx_mîge_£gmít
(
ni
, 
√xt
, 
pkt
, &
£gs
.
io
, 1);

179 
	`ci_as£π_√quÆ
(
moved
, 0);

181 
	`ci_t˝_tx_mîge_£gmít
(
ni
, 
√xt
, 
pkt
, &
£gs
.
io
, 1);

186 
	`ci_as£π_equÆ
(
pkt
->
n_buf„rs
, 1);

189 
	`ci_t˝_tx_pkt_£t_íd
(
ts
, 
√xt
);

191 
pkt
->
buf
.
off
 =

192 (
ci_uöt32
)((*Ë
	`oo_tx_ëhî_d©a
(
pkt
Ë+ 
ts
->
outgoög_hdrs_Àn


193 + 
√w_∑yÀn
 - (*Ë&
pkt
->
buf
);

195 
	`ci_t˝_tx_add_to_queue
(
qu
, 
pkt
, 
√xt
);

196 if–
is_£ndq
 )

197 ++
ts
->
£nd_ö
;

200 if–
	`TX_PKT_TCP
(
pkt
)->
t˝_Êags
 & 
CI_TCP_FLAG_FIN
 ) {

201 
	`TX_PKT_TCP
(
pkt
)->
t˝_Êags
 &=~ 
CI_TCP_FLAG_FIN
;

202 
	`TX_PKT_TCP
(
√xt
)->
t˝_Êags
 |
CI_TCP_FLAG_FIN
;

203 
√xt
->
pf
.
t˝_tx
.
íd_£q
++;

206 
	`ASSERT_VALID_PKT
(
ni
, 
pkt
);

207 
	`CITP_DETAILED_CHECKS
(
	`ci_t˝_tx_pkt_as£π_vÆid
(
ni
, 
ts
, 
pkt
,

208 
__FILE__
, 
__LINE__
));

209 
	`ASSERT_VALID_PKT
(
ni
, 
√xt
);

210 
	`CITP_DETAILED_CHECKS
(
	`ci_t˝_tx_pkt_as£π_vÆid
(
ni
, 
ts
, 
√xt
,

211 
__FILE__
, 
__LINE__
));

214 
	}
}

220 
	$ci_t˝_tx_chomp
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

221 
ci_ù_pkt_fmt
* 
pkt
, 
byãs
)

223 
ef_iovec
 
⁄e_£gmít
;

224 
ef_iovec_±r
 
£gs
;

225 
n
;

227 
	`ci_as£π_gt
(
byãs
, 0);

228 
	`ci_as£π_equÆ
(
pkt
->
n_buf„rs
, 1);

229 
	`ci_as£π_equÆ
(
	`TX_PKT_TCP
(
pkt
)->
t˝_Êags
 & (
CI_TCP_FLAG_SYN
 |

230 
CI_TCP_FLAG_FIN
), 0);

232 
pkt
->
ötf_i
 = 0;

233 
	`ci_√tif_pkt_to_iovec
(
ni
, 
pkt
, &
⁄e_£gmít
, 1);

234 
	`ef_iovec_±r_öô_nz
(&
£gs
, &
⁄e_£gmít
, 
pkt
->
n_buf„rs
);

235 
	`ef_iovec_±r_adv™˚
(&
£gs
, 
ts
->
outgoög_hdrs_Àn
+
	`oo_ëhî_hdr_size
(
pkt
));

239 
n
 = 
	`CI_MIN
(
£gs
.
io
.
iov_Àn
, (Ë
byãs
);

240 
	`ef_iovec_±r_adv™˚
(&
£gs
, 
n
);

241 
byãs
 -
n
;

242 
	`ci_as£π_gt
(
£gs
.
io
.
iov_Àn
, 0);

243 }  
byãs
 );

245 
pkt
->
buf_Àn
 =Ökt->
∑y_Àn
 =

246 
ts
->
outgoög_hdrs_Àn
 + 
	`oo_ëhî_hdr_size
(
pkt
);

247 
pkt
->
pf
.
t˝_tx
.
íd_£q
 =Ökt->pf.t˝_tx.
°¨t_£q
;

252 
	`oo_offbuf_öô2
(&
pkt
->
buf
, 
	`PKT_START
’ktË+Ökt->
buf_Àn
,

253 (*Ë
pkt
 + 
CI_CFG_PKT_BUF_SIZE
);

256  ! 
	`ef_iovec_±r_is_em±y_¥›î
(&
£gs
) )

257 
	`ci_t˝_tx_mîge_£gmít
(
ni
, 
pkt
,Ökt, &
£gs
.
io
, 1);

260 
	`ci_t˝_tx_pkt_£t_íd
(
ts
, 
pkt
);

261 
	`ASSERT_VALID_PKT
(
ni
, 
pkt
);

262 
	`CITP_DETAILED_CHECKS
(
	`ci_t˝_tx_pkt_as£π_vÆid
(
ni
, 
ts
, 
pkt
,

263 
__FILE__
, 
__LINE__
));

264 
	}
}

273 
	$ci_t˝_tx_cﬂÀs˚
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

274 
ci_ù_pkt_queue
* 
q
, 
ci_ù_pkt_fmt
* 
pkt
,

275 
ci_boﬁón_t
 
is_£ndq
)

277 
n
, 
byãs_moved
;

278 
ef_iovec_±r
 
√xt_iov
;

279 
ci_ù_pkt_fmt
* 
√xt
;

280 
ef_iovec
 
⁄e_£gmít
;

283 
	`ci_t˝_tx_pkt_£t_íd
(
ts
, 
pkt
);

286 if–
	`oo_offbuf_À·
(&
pkt
->
buf
) <= 0 )

289 
√xt
 = 
	`PKT_CHK
(
ni
, 
pkt
->next);

292 if–(
pkt
->
Êags
 | 
√xt
->ÊagsË& 
CI_PKT_FLAG_TX_PENDING
 )

296 if–(
	`TX_PKT_TCP
(
pkt
)->
t˝_Êags
 | TX_PKT_TCP(
√xt
)->tcp_flags)

297 & (
CI_TCP_FLAG_SYN
 | 
CI_TCP_FLAG_FIN
) )

302 
	`ci_as£π_equÆ
(
	`t˝_eff_mss
(
ts
Ë- 
	`PKT_TCP_TX_SEQ_SPACE
(
pkt
),

303 
	`oo_offbuf_À·
(&
pkt
->
buf
));

305 
	`ci_as£π_equÆ
(
pkt
->
n_buf„rs
, 1);

306 
byãs_moved
 = 0;

311 
√xt
->
ötf_i
 = 0;

312 
	`ci_√tif_pkt_to_iovec
(
ni
, 
√xt
, &
⁄e_£gmít
, 1);

313 
	`ef_iovec_±r_öô_nz
(&
√xt_iov
, &
⁄e_£gmít
, 
pkt
->
n_buf„rs
);

314 
	`ef_iovec_±r_adv™˚
(&
√xt_iov
,

315 
ts
->
outgoög_hdrs_Àn
 + 
	`oo_ëhî_hdr_size
(
pkt
));

318 
	`ci_as£π_gt
(
	`oo_offbuf_À·
(&
pkt
->
buf
), 0);

323 if–
	`ef_iovec_±r_is_em±y_¥›î
(&
√xt_iov
) ) ;

325 
n
 = 
	`ci_t˝_tx_mîge_£gmít
(
ni
, 
pkt
, 
√xt
, &
√xt_iov
.
io
, 1);

326 
byãs_moved
 +
n
;

328 
	`ci_as£π_ge
(
	`oo_offbuf_À·
(&
pkt
->
buf
), 0);

330 if–
n
 =0 || 
	`oo_offbuf_À·
(&
pkt
->
buf
) == 0 ) ;

333 
√xt
->
pf
.
t˝_tx
.
°¨t_£q
 +
byãs_moved
;

335 if–
	`SEQ_EQ
(
√xt
->
pf
.
t˝_tx
.
°¨t_£q
,Çext->pf.t˝_tx.
íd_£q
) ) {

337 
	`TX_PKT_TCP
(
pkt
)->
t˝_Êags
 |TX_PKT_TCP(
√xt
)->tcp_flags;

338 
pkt
->
√xt
 =Çext->next;

339 if–
	`OO_PP_EQ
(
q
->
èû
, 
	`OO_PKT_P
(
√xt
)ËËq->èû = OO_PKT_P(
pkt
);

340 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
√xt
);

341 --
q
->
num
;

345 if–
is_£ndq
 )

346 ++
ts
->
£nd_out
;

348 if–
byãs_moved
 ) {

349 
	`ci_t˝_tx_chomp
(
ni
, 
ts
, 
√xt
, 
byãs_moved
);

350 
	`ASSERT_VALID_PKT
(
ni
, 
√xt
);

351 
	`CITP_DETAILED_CHECKS
(
	`ci_t˝_tx_pkt_as£π_vÆid
(
ni
, 
ts
, 
√xt
,

352 
__FILE__
, 
__LINE__
));

355 
	`ASSERT_VALID_PKT
(
ni
, 
pkt
);

356 
	`CITP_DETAILED_CHECKS
(
	`ci_t˝_tx_pkt_as£π_vÆid
(
ni
, 
ts
, 
pkt
,

357 
__FILE__
, 
__LINE__
));

360 
	}
}

363 
	$ci_t˝_tx_ö£π_›ti⁄_•a˚
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

364 
ci_ù_pkt_fmt
* 
pkt
, 
hdæí
,

365 
exåa_›ts
)

367 *
ﬁd_°¨t
, *
ﬁd_íd
, *
√w_°¨t
;

368 
ef_iovec
 
⁄e_£gmít
;

369 
ef_iovec_±r
 
£gs
;

371 
	`ci_as£π_gt
(
hdæí
, 0);

372 
	`ci_as£π_equÆ
(
pkt
->
n_buf„rs
, 1);

374 
	`LOG_U
(
	`ci_log
(
LNT_FMT


376 
	`LNT_PRI_ARGS
(
ni
,
ts
), 
	`OO_PKT_FMT
(
pkt
),Ökt->
pf
.
t˝_tx
.
°¨t_£q
,

377 
pkt
->
pf
.
t˝_tx
.
íd_£q
, 
exåa_›ts
));

395 
ﬁd_°¨t
 = 
	`PKT_START
(
pkt
Ë+ 
hdæí
;

396 
ﬁd_íd
 = 
	`oo_offbuf_±r
(&
pkt
->
buf
);

397 
√w_°¨t
 = 
ﬁd_°¨t
 + 
exåa_›ts
;

398 
	`ci_as£π_equÆ
(
	`oo_offbuf_±r
(&
pkt
->
buf
Ë- 
	`PKT_START
’kt), 
	`TX_PKT_LEN
(pkt));

400 
	`memmove
(
√w_°¨t
, 
ﬁd_°¨t
, 
ﬁd_íd
 - old_start);

402 
pkt
->
ötf_i
 = 0;

403 
	`ci_√tif_pkt_to_iovec
(
ni
, 
pkt
, &
⁄e_£gmít
, 1);

404 
	`ef_iovec_±r_öô_nz
(&
£gs
, &
⁄e_£gmít
, 
pkt
->
n_buf„rs
);

407 
	`ef_iovec_±r_adv™˚
(&
£gs
, 
hdæí
);

410 
pkt
->
buf_Àn
 =Ökt->
∑y_Àn
 = 
hdæí
 + 
exåa_›ts
;

411 
pkt
->
pf
.
t˝_tx
.
íd_£q
 =Ökt->pf.t˝_tx.
°¨t_£q
;

416 
	`oo_offbuf_öô2
(&
pkt
->
buf
, 
	`PKT_START
’ktË+Ökt->
buf_Àn
,

417 (*Ë
pkt
 + 
CI_CFG_PKT_BUF_SIZE
);

420  ! 
	`ef_iovec_±r_is_em±y_¥›î
(&
£gs
) )

421 
	`ci_t˝_tx_mîge_£gmít
(
ni
, 
pkt
,Ökt, &
£gs
.
io
, 0);

424 
	`ci_t˝_tx_pkt_£t_íd
(
ts
, 
pkt
);

431 
	`ASSERT_VALID_PKT
(
ni
, 
pkt
);

434 
	}
}

437 
	$ci_t˝_ªå™s_cﬂÀs˚_block
(
ci_√tif
* 
ni
, 
ci_t˝_°©e
* 
ts
,

438 
ci_ù_pkt_fmt
* 
pkt
)

444 
ci_ù_pkt_queue
* 
πq
 = &
ts
->
ªå™s
;

445 
ci_ù_pkt_fmt
* 
°¨t
;

446 
oo_pkt_p
 
√xt_id
;

448 if–
	`OO_PP_EQ
(
pkt
->
pf
.
t˝_tx
.
block_íd
, 
	`OO_PKT_P
(pkt)) ) ;

450 
°¨t
 = 
pkt
;

452  
	`OO_PP_NOT_NULL
(
pkt
->
√xt
) &&

453 ! 
	`OO_PP_EQ
(
pkt
->
pf
.
t˝_tx
.
block_íd
, 
	`OO_PKT_P
(pkt)) ) {

454 
√xt_id
 = 
pkt
->
√xt
;

456 if–
	`PKT_TCP_TX_SEQ_SPACE
(
pkt
Ë< 
	`t˝_eff_mss
(
ts
) ) {

457 if–
	`ci_t˝_tx_cﬂÀs˚
(
ni
, 
ts
, 
πq
, 
pkt
, 
CI_FALSE
) )

461 if–! 
	`OO_PP_EQ
(
pkt
->
√xt
, 
√xt_id
) ) {

462 if–
	`OO_PP_EQ
(
ts
->
ªå™s_±r
, 
√xt_id
) ) {

469 
ts
->
ªå™s_±r
 = 
	`OO_PKT_P
(
pkt
);

470 
ts
->
ªå™s_£q
 = 
pkt
->
pf
.
t˝_tx
.
°¨t_£q
;

473 if–
	`OO_PP_EQ
(
pkt
->
pf
.
t˝_tx
.
block_íd
, 
√xt_id
) ) {

476 
°¨t
->
pf
.
t˝_tx
.
block_íd
 = 
	`OO_PKT_P
(
pkt
);

477 if–
°¨t
 =
pkt
 ) ;

478 
°¨t
 = 
	`PKT_CHK
(
ni
, sèπ->
√xt
);

485 if–
	`OO_PP_EQ
(
pkt
->
√xt
, 
√xt_id
) )

486 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

488 
	}
}

491 
	$ci_t˝_fûl_smÆl_wödow
(
ci_√tif
* 
√tif
, 
ci_t˝_°©e
* 
ts
)

493 
ci_ù_pkt_fmt
* 
pkt
 = 
	`PKT_CHK
(
√tif
, 
ts
->
£nd
.
hód
);

495 
	`ASSERT_VALID_PKT
(
√tif
, 
pkt
);

496 i‡(
	`PKT_TCP_TX_SEQ_SPACE
(
pkt
Ë> 
	`t˝_¢d_wnd
(
ts
) &&

497 (
	`ci_t˝_tx_•lô
(
√tif
, 
ts
, &ts->
£nd
, 
pkt
, 
	`t˝_¢d_wnd
(ts), 1) != 0)) {

498 
	`LOG_U
(
	`log
(
LNTS_FMT
 "FailedÅo splitÖacket whenÅryingÅo fill "

500 
	`LNTS_PRI_ARGS
(
√tif
, 
ts
), 
	`t˝_¢d_wnd
(ts)));

504 
	`ci_t˝_tx_adv™˚
(
ts
, 
√tif
);

505 
	}
}

	@udp.c

14 
	~"ù_öã∫Æ.h
"

15 
	~"udp_öã∫Æ.h
"

16 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__KERNEL__
)

17 
	~<ci/öã∫Æ/evít_£À˘.h
>

21 
	#LPF
 "ci_udp_"

	)

22 
	#LPFIN
 "-> " 
LPF


	)

23 
	#LPFOUT
 "<- " 
LPF


	)

25 
	#VERB
(
x
)

	)

31 
	$ci_udp_hdrs_öô
(
ci_ù_ˇched_hdrs
* 
ùˇche
)

34 
	`ci_ù_hdr_öô_fixed
(&
ùˇche
->
ù
, 
IPPROTO_UDP
,

35 
CI_IP_DFLT_TTL
, 
CI_IP_DFLT_TOS
);

36 
ùˇche
->
ù
.
ù_ßddr_be32
 = 0;

37 
ùˇche
->
ù
.
ù_daddr_be32
 = 0;

38 
	}
}

43 
	$ci_udp_°©e_öô
(
ci_√tif
* 
√tif
, 
ci_udp_°©e
* 
us
)

45 
	`ci_sock_cmn_öô
(
√tif
, &
us
->
s
, 1);

49 if–! 
	`NI_OPTS
(
√tif
).
f‹˚_£nd_mu…iˇ°
 )

50 
us
->
s
.
˝
.
sock_˝_Êags
 |
OO_SCP_NO_MULTICAST
;

53 
	`CI_DEBUG
(
	`mem£t
(&
us
->
s
 + 1, 0xf0, (*) (us + 1) - (*) (&us->s + 1)));

57 #ifde‡
_WIN32


58 
	`ci_ù_queue_öô
(&
us
->
async_tx_q
);

61 
	`ci_udp_ªcv_q_öô
(&
us
->
time°amp_q
);

67 
us
->
s
.
b
.
°©e
 = 
CI_TCP_STATE_UDP
;

69 
us
->
s
.
so
.
¢dbuf
 = 
	`NI_OPTS
(
√tif
).
udp_¢dbuf_def
;

70 
us
->
s
.
so
.
rcvbuf
 = 
	`NI_OPTS
(
√tif
).
udp_rcvbuf_def
;

73 
	`ci_udp_hdrs_öô
(&
us
->
s
.
pkt
);

74 
	`ci_ù_ˇche_öô
(&
us
->
ïhemîÆ_pkt
);

75 
	`ci_udp_hdrs_öô
(&
us
->
ïhemîÆ_pkt
);

76 
	`udp_Õ‹t_be16
(
us
) = 0;

77 
	`udp_Ω‹t_be16
(
us
) = 0;

79 
	`ci_udp_ªcv_q_öô
(&
us
->
ªcv_q
);

80 
us
->
zc_kî√l_d©agøm
 = 
OO_PP_NULL
;

81 
us
->
zc_kî√l_d©agøm_cou¡
 = 0;

82 
us
->
tx_async_q
 = 
CI_ILL_END
;

83 
	`oo_©omic_£t
(&
us
->
tx_async_q_Àvñ
, 0);

84 
us
->
tx_cou¡
 = 0;

85 
us
->
udpÊags
 = 
CI_UDPF_MCAST_LOOP
;

86 
us
->
°amp
 = 0;

87 
	`mem£t
(&
us
->
°©s
, 0, (us->stats));

88 
	}
}

91 
ci_udp_°©e
* 
	$ci_udp_gë_°©e_buf
(
ci_√tif
* 
√tif
)

93 
côp_waôabÀ_obj
* 
wo
;

95 
	`ci_as£π
(
√tif
);

97 
wo
 = 
	`côp_waôabÀ_obj_Æloc
(
√tif
);

98 if–
wo
 ) {

99 
	`ci_udp_°©e_öô
(
√tif
, &
wo
->
udp
);

100  &
wo
->
udp
;

102  
NULL
;

103 
	}
}

109 #i‚de‡
__KERNEL__


110 #i‚de‡
__ci_drivî__


111 
ci_fd_t
 
	$ci_udp_ï_˘‹
(
côp_sockë
* 
ï
, 
ci_√tif
* 
√tif
, 
domaö
, 
ty≥
)

113 
ci_udp_°©e
* 
us
;

114 
ci_fd_t
 
fd
;

116 
	`VERB
–
	`log
(
LPFIN
 "ctor( )" ) );

118 
	`ci_as£π
(
ï
);

119 
	`ci_as£π
(
√tif
);

121 
	`ci_√tif_lock
(
√tif
);

122 
us
 = 
	`ci_udp_gë_°©e_buf
(
√tif
);

123 i‡(!
us
) {

124 
	`ci_√tif_u∆ock
(
√tif
);

125 
	`LOG_E
(
	`ci_log
("%s: [%d] ouào‡sockë buf„rs", 
__FUNCTION__
,
	`NI_ID
(
√tif
)));

126  -
ENOMEM
;

132 
	`sock_¥Ÿocﬁ
(&
us
->
s
Ë
IPPROTO_UDP
;

135 
fd
 = 
	`ci_t˝_hñ≥r_sock_©èch
(
	`ci_√tif_gë_drivî_h™dÀ
(
√tif
),

136 
	`SC_SP
(&
us
->
s
), 
domaö
, 
ty≥
);

137 if–
fd
 < 0 ) {

138 
	`LOG_E
(
	`ci_log
("%s: ci_tcp_helper_sock_attach(domain=%d,Åype=%d) failed %d",

139 
__FUNCTION__
, 
domaö
, 
ty≥
, 
fd
));

140 
	`ci_√tif_u∆ock
(
√tif
);

141  
fd
;

144 
	`ci_as£π
(~
us
->
s
.
b
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
);

146 
us
->
s
.
rx_î∫o
 = 0;

147 
us
->
s
.
tx_î∫o
 = 0;

148 
us
->
s
.
so_îr‹
 = 0;

150 
ï
->
s
 = &
us
->s;

151 
ï
->
√tif
 =Çetif;

152 
	`CHECK_UEP
(
ï
);

153 
	`ci_√tif_u∆ock
(
√tif
);

154  
fd
;

155 
	}
}

159 
	$ci_udp_£t_œddr
(
côp_sockë
* 
ï
, 
œddr_be32
, 
Õ‹t_be16
)

161 
ci_udp_°©e
* 
us
 = 
	`SOCK_TO_UDP
(
ï
->
s
);

162 
	`udp_œddr_be32
(
us
Ë
œddr_be32
;

163 
	`udp_Õ‹t_be16
(
us
Ë(
ci_uöt16
Ë
Õ‹t_be16
;

164 if–
	`CI_IP_IS_MULTICAST
(
œddr_be32
) )

165 
us
->
s
.
˝
.
ù_œddr_be32
 = 0;

167 
us
->
s
.
˝
.
ù_œddr_be32
 = 
œddr_be32
;

168 
us
->
s
.
˝
.
Õ‹t_be16
 =Üport_be16;

169 
	}
}

173 
ci_uöt8
 
	$ci_udp_gë_tos
–
ci_udp_°©e
* 
us
 )

175  
	`UDP_IP_HDR
(
us
)->
ù_tos
;

176 
	}
}

179 
	$ci_udp_£t_tos
–
ci_udp_°©e
* 
us
, 
ci_uöt32
 
tos
 )

181 
	`ci_ù_hdr_öô_fixed
(
	`UDP_IP_HDR
(
us
), 
IPPROTO_UDP
, UDP_IP_HDR(us)->
ù_âl
,

182 
	`CI_MIN
(
tos
, 
CI_IP_MAX_TOS
));

183 
	}
}

191 #i‚de‡
NDEBUG


193 
	$ci_udp_°©e_as£π_vÆid
(
ci_√tif
* 
√tif
, 
ci_udp_°©e
* 
us
,

194 c⁄° * 
fûe
, 
löe
)

196 
	`ci_as£π
(
us
);

198 
	}
}

201 
	$ci_udp_ï_as£π_vÆid
(
côp_sockë
* 
ï
, c⁄° * 
fûe
, 
löe
)

203 
ci_√tif
* 
√tif
;

204 
ci_udp_°©e
* 
us
;

206 
	`ci_as£π
(
ï
);

207 
√tif
 = 
ï
->netif;

209 
	`ci_√tif_as£π_vÆid
(
√tif
, 
fûe
, 
löe
);

211 
	`_ci_as£π_equÆ
(
ï
->
s
->
b
.
°©e
, 
CI_TCP_STATE_UDP
, 
fûe
, 
löe
);

212 
us
 = 
	`SOCK_TO_UDP
(
ï
->
s
);

214 
	`ci_udp_°©e_as£π_vÆid
(
√tif
, 
us
, 
fûe
, 
löe
);

215 
	}
}

220 #unde‡
≥r˚¡


222 
	$≥r˚¡
 (
uöt64_t
 
a
, 
b
)

224 #i‡
	`deföed
(
__KERNEL__
Ë&& (
CI_WORD_SIZE
 == 4)

226 ()
a
;

227 ()
b
;

230  ((Ë((
b
Ë? (
uöt64_t
Ë(
a
) * 100 / (b) : 0));

232 
	}
}

234 
	$ci_udp_ªcvq_dump
(
ci_√tif
* 
ni
, 
ci_udp_ªcv_q
* 
q
,

235 c⁄° * 
pf1
, c⁄° * 
pf2
,

236 
oo_dump_log_‚_t
 
loggî
, * 
log_¨g
)

238 
	`loggî
(
log_¨g
,

239 "%s%†q_pkts=%dÑóp=%dÅŸ_pkts=%u", 
pf1
, 
pf2
,

240 
	`ci_udp_ªcv_q_pkts
(
q
), 
	`ci_udp_ªcv_q_ª≠abÀ
(q),

241 
q
->
pkts_added
);

243 
	}
}

245 
	$ci_udp_°©e_dump
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
, c⁄° * 
pf
,

246 
oo_dump_log_‚_t
 
loggî
, * 
log_¨g
)

248 
ci_udp_sockë_°©s
 
uss
 = 
us
->
°©s
;

249 
rx_added
 = 
us
->
ªcv_q
.
pkts_added
;

250 
rx_os
 = 
uss
.
n_rx_os
 + uss.
n_rx_os_¶ow
;

251 
rx_tŸÆ
 = 
rx_added
 + 
uss
.
n_rx_mem_dr›
 + uss.
n_rx_ovîÊow
 + 
rx_os
;

252 
n_tx_⁄lﬂd
 = 
uss
.
n_tx_⁄lﬂd_uc
 + uss.
n_tx_⁄lﬂd_c
;

253 
tx_tŸÆ
 = 
n_tx_⁄lﬂd
 + 
uss
.
n_tx_os
;

254 
ci_ù_ˇched_hdrs
* 
ùˇche
;

256 (Ë
rx_tŸÆ
;

257 (Ë
tx_tŸÆ
;

259 if–
us
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_TX_HARDWARE
 )

260 
	`ci_udp_ªcvq_dump
(
ni
, &
us
->
time°amp_q
, 
pf
, " TXÅimestamping queue:",

261 
loggî
, 
log_¨g
);

264 
	`loggî
(
log_¨g
, "%† udpÊags: "
CI_UDP_STATE_FLAGS_FMT
, 
pf
,

265 
	`CI_UDP_STATE_FLAGS_PRI_ARG
(
us
));

268 
	`ci_udp_ªcvq_dump
(
ni
, &
us
->
ªcv_q
, 
pf
, "Ñcv:", 
loggî
, 
log_¨g
);

269 
	`loggî
(
log_¨g
,

271 "q_max_pkts=%u", 
pf
, 
uss
.
n_rx_ovîÊow
,

272 
	`≥r˚¡
(
uss
.
n_rx_ovîÊow
, 
rx_tŸÆ
),

273 
uss
.
n_rx_mem_dr›
, uss.
n_rx_ógaö
, uss.
n_rx_pktöfo
,

274 
uss
.
max_ªcvq_pkts
);

275 
	`loggî
(
log_¨g
, "%†Ñcv: os=%u(%u%%Ëos_¶ow=%u os_îr‹=%u", 
pf
,

276 
rx_os
, 
	`≥r˚¡
‘x_os, 
rx_tŸÆ
), 
uss
.
n_rx_os_¶ow
, uss.
n_rx_os_îr‹
);

279 
	`loggî
(
log_¨g
, "%† snd: q=%u+%u ul=%u os=%u(%u%%)", 
pf
,

280 
us
->
tx_cou¡
, 
	`oo_©omic_ªad
(&us->
tx_async_q_Àvñ
),

281 
n_tx_⁄lﬂd
, 
uss
.
n_tx_os
, 
	`≥r˚¡
(uss.n_tx_os, 
tx_tŸÆ
));

282 
	`loggî
(
log_¨g
,

284 "de„r=%u(%u%%)", 
pf
,

285 
uss
.
n_tx_lock_˝
, 
	`≥r˚¡
(uss.n_tx_lock_˝, 
n_tx_⁄lﬂd
),

286 
uss
.
n_tx_lock_pkt
, 
	`≥r˚¡
(uss.n_tx_lock_pkt, 
n_tx_⁄lﬂd
),

287 
uss
.
n_tx_lock_¢d
, 
	`≥r˚¡
(uss.n_tx_lock_¢d, 
n_tx_⁄lﬂd
),

288 
uss
.
n_tx_lock_pﬁl
, 
	`≥r˚¡
(uss.n_tx_lock_pﬁl, 
n_tx_⁄lﬂd
),

289 
uss
.
n_tx_lock_de„r
, 
	`≥r˚¡
(uss.n_tx_lock_de„r, 
n_tx_⁄lﬂd
));

291 
	`loggî
(
log_¨g
, "%† snd: MCAST if=%d src="
OOF_IP4
"Åé=%d", 
pf
,

292 
us
->
s
.
˝
.
ù_mu…iˇ°_if
,

293 
	`OOFA_IP4
(
us
->
s
.
˝
.
ù_mu…iˇ°_if_œddr_be32
),

294 (Ë
us
->
s
.
˝
.
ù_mˇ°_âl
);

297 
ùˇche
 = &
us
->
ïhemîÆ_pkt
;

298 
	`loggî
(
log_¨g
,

300 "lookup=%u+%u(%u%%Ë"
OOF_IPCACHE_STATE
,

301 
pf
, 
uss
.
n_tx_⁄lﬂd_uc
,

302 
uss
.
n_tx_˝_m©ch
, 
	`≥r˚¡
(uss.n_tx_˝_m©ch, uss.
n_tx_⁄lﬂd_uc
),

303 
uss
.
n_tx_˝_uc_lookup
, uss.
n_tx_˝_a_lookup
,

304 
	`≥r˚¡
(
uss
.
n_tx_˝_uc_lookup
 + uss.
n_tx_˝_a_lookup
,

305 
uss
.
n_tx_⁄lﬂd_uc
),

306 
	`OOFA_IPCACHE_STATE
(
ni
, 
ùˇche
));

307 
	`loggî
(
log_¨g
, "%† snd: TO "
OOF_IPCACHE_DETAIL
, 
pf
,

308 
	`OOFA_IPCACHE_DETAIL
(
ùˇche
));

309 
	`loggî
(
log_¨g
, "%† snd: TO "
OOF_IP4PORT
" => "OOF_IP4PORT, 
pf
,

310 
	`OOFA_IP4PORT
(
ùˇche
->
ù_ßddr_be32
, 
	`udp_Õ‹t_be16
(
us
)),

311 
	`OOFA_IP4PORT
(
ùˇche
->
ù
.
ù_daddr_be32
, ipˇche->
dp‹t_be16
));

314 
ùˇche
 = &
us
->
s
.
pkt
;

315 
	`loggî
(
log_¨g
, "%† snd: CONÇ=%dÜookup=%d "
OOF_IPCACHE_STATE
, 
pf
,

316 
uss
.
n_tx_⁄lﬂd_c
, uss.
n_tx_˝_c_lookup
,

317 
	`OOFA_IPCACHE_STATE
(
ni
,
ùˇche
));

318 
	`loggî
(
log_¨g
, "%† snd: CON "
OOF_IPCACHE_DETAIL
, 
pf
,

319 
	`OOFA_IPCACHE_DETAIL
(
ùˇche
));

321 
	`loggî
(
log_¨g
, "%† snd:Éagaö=%d spö=%d block=%d", 
pf
,

322 
uss
.
n_tx_ógaö
, uss.
n_tx_•ö
, uss.
n_tx_block
);

323 
	`loggî
(
log_¨g
, "%† snd:Öﬁl_avoids_fuŒ=%d føgmíts=%d c⁄fúm=%d", 
pf
,

324 
uss
.
n_tx_pﬁl_avoids_fuŒ
, uss.
n_tx_‰agmíts
, uss.
n_tx_msg_c⁄fúm
);

325 
	`loggî
(
log_¨g
,

326 "%† snd: os_¶ow=%d os_œã=%d unc⁄√˘_œã=%dÇomac=%u(%u%%)", 
pf
,

327 
uss
.
n_tx_os_¶ow
, uss.
n_tx_os_œã
, uss.
n_tx_unc⁄√˘_œã
,

328 
uss
.
n_tx_˝_no_mac
, 
	`≥r˚¡
(uss.n_tx_˝_no_mac, 
tx_tŸÆ
));

329 
	}
}

	@udp_connect.c

15 
	~"ù_öã∫Æ.h
"

16 
	~<⁄lﬂd/comm⁄.h
>

18 #ifde‡
ONLOAD_OFE


19 
	~"o„/⁄lﬂd.h
"

22 #i‚de‡
__KERNEL__


23 
	~<ci/öã∫Æ/eÁbcfg.h
>

26 
	#LPF
 "ci_udp_"

	)

27 
	#LPFIN
 "-> " 
LPF


	)

28 
	#LPFOUT
 "<- " 
LPF


	)

30 
	#INADDR_ANY_BE32
 (
	`CI_BSWAPC_BE32
(
INADDR_ANY
))

	)

32 #i‚de‡
__ci_drivî__


34 #i‚de‡
NDEBUG


35 * 
	$ci_udp_addr_°r
–
ci_udp_°©e
* 
us
 )

37 
buf
[128];

39 
	`ci_as£π
(
us
);

40 
	`•rötf
–
buf
, "L[%s:%d] R[%s:%d]",

41 
	`ù_addr_°r
–
	`udp_œddr_be32
(
us
)),

42 
	`CI_BSWAP_BE16
(
	`udp_Õ‹t_be16
(
us
)),

43 
	`ù_addr_°r
–
	`udp_øddr_be32
(
us
)),

44 
	`CI_BSWAP_BE16
(
	`udp_Ω‹t_be16
(
us
)) );

45  
buf
;

46 
	}
}

47 
	#CI_UDP_EP_ADDR_STR
(
ï
) \

48 
	`ci_udp_addr_°r
((
ï
)->
°©e
)

	)

50 
	#CI_UDPSTATE_SHOW
(
us
) \

51 
	`LOG_UV
(
	`log
( "%s: %d UDP %s Fl[%s]", \

52 
__FUNCTION__
, 
	`S_FMT
(
us
), \

53 
	`ci_udp_addr_°r
((
us
)), \

54 
	`UDP_GET_FLAG
((
us
), 
CI_UDPF_FILTERED
) ? "Flt " : "" \

55 ))

	)

57 
	#CI_UDPSTATE_SHOW_EP
(
ï
) \

58 
	`CI_UDPSTATE_SHOW
–
	`SOCK_TO_UDP
((
ï
)->
s
Ë)

	)

62 
	#CI_UDPSTATE_SHOW
(
us
)

	)

63 
	#CI_UDPSTATE_SHOW_EP
(
ï
)

	)

69 
	$ci_udp_sys_gësock«me
–
ci_fd_t
 
sock
, 
côp_sockë
* 
ï
 )

71 
sockÀn_t
 
ßÀn
;

72 
rc
;

73 
ci_sockaddr_u
 
ß_u
;

75 
	`ci_as£π
(
ï
);

76 #i‡
CI_CFG_FAKE_IPV6


77 
	`ci_as£π
(
ï
->
s
->
domaö
 =
AF_INET
 ||Ép->s->domaö =
AF_INET6
);

79 
	`ci_as£π
(
ï
->
s
->
domaö
 =
AF_INET
);

82 
ßÀn
 = (
ß_u
);

84 #ifde‡
_WIN32


85 
rc
 = 
	`ci_sys_gësock«me
–
ï
, &
ß_u
.
ß
, &
ßÀn
 );

87 
rc
 = 
	`ci_sys_gësock«me
–
sock
, &
ß_u
.
ß
, &
ßÀn
 );

89 if–
rc
 )

90  
rc
;

92 if–
ß_u
.
ß
.
ß_Ámûy
 !
ï
->
s
->
domaö
 || 
ßÀn
 < (
sockaddr_ö
)

93 #i‡
CI_CFG_FAKE_IPV6


94 || (
ï
->
s
->
domaö
 =
AF_INET6
 && 
ßÀn
 < (
sockaddr_ö6
) )

97 
	`LOG_UV
(
	`log
("%s: OS sock domain %d !=Éxpected domain %d or "

99 
__FUNCTION__
, 
ß_u
.
ß
.
ß_Ámûy
, 
ï
->
s
->
domaö
,

100 
ßÀn
,

101 ()(
ï
->
s
->
domaö
 =
AF_INET
 ? (
sockaddr_ö
) :

102 (
sockaddr_ö6
))));

106 #i‡
CI_CFG_FAKE_IPV6


107 if–
ï
->
s
->
domaö
 =
AF_INET
 ) {

108 
	`ci_udp_£t_œddr
–
ï
, 
	`ci_gë_ù4_addr
(
ß_u
.
ß
.
ß_Ámûy
, &sa_u.sa),

109 
ß_u
.
sö
.
sö_p‹t
 );

112 
	`ci_udp_£t_œddr
–
ï
, 
	`ci_gë_ù4_addr
(
ß_u
.
ß
.
ß_Ámûy
, &sa_u.sa),

113 
ß_u
.
sö6
.
sö6_p‹t
 );

116 
	`ci_udp_£t_œddr
–
ï
, 
	`ci_gë_ù4_addr
(
ß_u
.
ß
.
ß_Ámûy
, &sa_u.sa),

117 
ß_u
.
sö
.
sö_p‹t
 );

125 
nic
;

126 if–(((
sockaddr_ö
*)&
ß
)->
sö_addr
.
s_addr
 !
INADDR_ANY
) &&

127 !
	`ci_ii·bl_is_eÁb_addr
–
ï
->
√tif
,

128 ((
sockaddr_ö
*)&
ß
)->
sö_addr
.
s_addr
,

129 &
nic
)) {

130 
	`ci_log
(" %s: sr¯IP %†ö %s:%d i†nŸ o√ o‡ours!", 
__FUNCTION__
,

131 
	`ù_addr_°r
(((
sockaddr_ö
*)&
ß
)->
sö_addr
.
s_addr
 ),

132 
	`ù_addr_°r
(((
sockaddr_ö
*)&
ß
)->
sö_addr
.
s_addr
 ),

133 ((
sockaddr_ö
*)&
ß
)->
sö_p‹t
 );

134 
	`ci_as£π
(0);

139 
	}
}

142 
ci_ölöe
 
	$ci_udp_sys_disc⁄√˘
–
ci_fd_t
 
sock
, 
côp_sockë
* 
ï
 )

144 
sockaddr_ö
 
sö
;

146 #ifde‡
_WIN32


147 
sö
.
sö_Ámûy
 = 
AF_INET
;

148 
sö
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

149 
sö
.
sö_p‹t
 = 0;

150  
	`ci_sys_c⁄√˘
–
ï
, (
sockaddr
*)&
sö
, (sin) );

152 
sö
.
sö_Ámûy
 = 
AF_UNSPEC
;

153  
	`ci_sys_c⁄√˘
–
sock
, (
sockaddr
*)&
sö
, (sin) );

155 
	}
}

158 
	$ci_udp_˛r_fûãrs
(
côp_sockë
* 
ï
)

160 
ci_udp_°©e
* 
us
 = 
	`SOCK_TO_UDP
(
ï
->
s
);

161 if–
	`UDP_GET_FLAG
(
us
, 
CI_UDPF_FILTERED
) ) {

162 
	`ci_t˝_ï_˛ór_fûãrs
(
ï
->
√tif
, 
	`S_SP
(
us
), 0);

163 
	`UDP_CLR_FLAG
(
us
, 
CI_UDPF_FILTERED
);

165 
	}
}

168 
	$ci_udp_£t_fûãrs
(
côp_sockë
* 
ï
, 
ci_udp_°©e
* 
us
)

170 
rc
;

172 
	`ci_as£π
(
ï
);

173 
	`ci_as£π
(
us
);

175 if–
	`udp_Õ‹t_be16
(
us
) == 0 )

178 
rc
 = 
	`ci_t˝_ï_£t_fûãrs
(
ï
->
√tif
, 
	`S_SP
(
us
), us->
s
.
˝
.
so_bödtodevi˚
,

179 
OO_SP_NULL
);

180 if–
rc
 =-
EFILTERSSOME
 ) {

181 if–
CITP_OPTS
.
no_Áû
 )

182 
rc
 = 0;

184 
	`ci_t˝_ï_˛ór_fûãrs
(
ï
->
√tif
, 
	`S_SP
(
us
), 0);

185 
rc
 = -
ENOBUFS
;

188 if–
rc
 < 0 ) {

189 
	`LOG_UC
(
	`log
(
FNS_FMT
 "ci_tcp_ep_set_filters failed (%d)",

190 
	`FNS_PRI_ARGS
(
ï
->
√tif
,Ép->
s
), -
rc
));

191 
	`CI_SET_ERROR
(
rc
, -rc);

192  
rc
;

194 
	`UDP_SET_FLAG
(
us
, 
CI_UDPF_FILTERED
);

196 
	}
}

203 
	$ci_udp_should_h™dovî
(
côp_sockë
* 
ï
, c⁄° 
sockaddr
* 
addr
,

204 
ci_uöt16
 
Õ‹t
)

206 
ci_uöt32
 
addr_be32
;

208 #i‡
CI_CFG_FAKE_IPV6


209 if–
ï
->
s
->
domaö
 =
AF_INET6
 && ! 
	`ci_t˝_ùv6_is_ùv4
(
addr
) )

210 
h™dovî
;

213 if–(
	`CI_BSWAP_BE16
(
Õ‹t
Ë>
	`NI_OPTS
(
ï
->
√tif
).
udp_p‹t_h™dovî_mö
 &&

214 
	`CI_BSWAP_BE16
(
Õ‹t
Ë<
	`NI_OPTS
(
ï
->
√tif
).
udp_p‹t_h™dovî_max
) ||

215 (
	`CI_BSWAP_BE16
(
Õ‹t
Ë>
	`NI_OPTS
(
ï
->
√tif
).
udp_p‹t_h™dovî2_mö
 &&

216 
	`CI_BSWAP_BE16
(
Õ‹t
Ë<
	`NI_OPTS
(
ï
->
√tif
).
udp_p‹t_h™dovî2_max
) ||

217 (
	`CI_BSWAP_BE16
(
Õ‹t
Ë>
	`NI_OPTS
(
ï
->
√tif
).
udp_p‹t_h™dovî3_mö
 &&

218 
	`CI_BSWAP_BE16
(
Õ‹t
Ë<
	`NI_OPTS
(
ï
->
√tif
).
udp_p‹t_h™dovî3_max
) ) {

219 
	`LOG_UC
(
	`log
(
FNS_FMT
 "HANDOVER (%d <= %d <= %d)",

220 
	`FNS_PRI_ARGS
(
ï
->
√tif
,Ép->
s
),

221 
	`NI_OPTS
(
ï
->
√tif
).
udp_p‹t_h™dovî_mö
,

222 
	`CI_BSWAP_BE16
(
Õ‹t
),

223 
	`NI_OPTS
(
ï
->
√tif
).
udp_p‹t_h™dovî_max
));

224 
h™dovî
;

227 
addr_be32
 = 
	`ci_gë_ù4_addr
(
ï
->
s
->
domaö
, 
addr
);

228 if–
addr_be32
 !
	`CI_BSWAPC_BE32
(
INADDR_ANY
) &&

229 ! 
	`ci˝_u£r_addr_is_loˇl_eÁb
(
	`CICP_HANDLE
(
ï
->
√tif
), &
addr_be32
) &&

230 ! 
	`CI_IP_IS_MULTICAST
(
addr_be32
) ) {

235 
h™dovî
;

239 
h™dovî
:

241 
	}
}

247 
	$ci_udp_böd_c⁄˛ude
(
côp_sockë
* 
ï
, c⁄° 
sockaddr
* 
addr
,

248 
ci_uöt16
 
Õ‹t
 )

250 
ci_udp_°©e
* 
us
;

251 
ci_uöt32
 
addr_be32
;

252 
rc
;

254 
	`CHECK_UEP
(
ï
);

255 
	`ci_as£π
(
addr
 !
NULL
);

257 if–
	`ci_udp_should_h™dovî
(
ï
, 
addr
, 
Õ‹t
) )

258 
h™dovî
;

260 
addr_be32
 = 
	`ci_gë_ù4_addr
(
ï
->
s
->
domaö
, 
addr
);

262 
	`ci_udp_£t_œddr
(
ï
, 
addr_be32
, 
Õ‹t
);

263 
us
 = 
	`SOCK_TO_UDP
(
ï
->
s
);

264 if–
addr_be32
 != 0 )

265 
us
->
s
.
˝
.
sock_˝_Êags
 |
OO_SCP_LADDR_BOUND
;

267 
	`UDP_CLR_FLAG
(
us
, 
CI_UDPF_EF_SEND
);

269 #ifde‡
ONLOAD_OFE


270 if–
ï
->
√tif
->
o„_ch™√l
 !
NULL
 )

271 
us
->
s
.
o„_code_°¨t
 = 
	`o„_socktbl_föd
(

272 
ï
->
√tif
->
o„
, 
OFE_SOCKTYPE_UDP
,

273 
	`udp_œddr_be32
(
us
), 
	`udp_øddr_be32
(us),

274 
	`udp_Õ‹t_be16
(
us
), 
	`udp_Ω‹t_be16
(us));

276 
us
->
s
.
o„_code_°¨t
 = 
OFE_ADDR_NULL
;

282 
rc
 = 
	`ci_udp_£t_fûãrs
–
ï
, 
us
);

283 
	`ci_as£π
–!
	`UDP_GET_FLAG
(
us
, 
CI_UDPF_EF_BIND
) );

285 if–
	`udp_œddr_be32
(
us
Ë!
INADDR_ANY_BE32
 )

286 
	`UDP_SET_FLAG
(
us
, 
CI_UDPF_EF_BIND
);

287 
	`CI_UDPSTATE_SHOW_EP
–
ï
 );

288 if–
rc
 =
CI_SOCKET_ERROR
 && 
CITP_OPTS
.
no_Áû
) {

289 
	`CITP_STATS_NETIF
(++
ï
->
√tif
->
°©e
->
°©s
.
udp_böd_no_fûãr
);

290 
h™dovî
;

292  
rc
;

294 
h™dovî
:

295 
	`LOG_UV
(
	`log
("%s: "
SK_FMT
" HANDOVER", 
__FUNCTION__
, 
	`SK_PRI_ARGS
(
ï
)));

296  
CI_SOCKET_HANDOVER
;

297 
	}
}

300 
	$ci_udp_h™dÀ_f‹˚_ªu£p‹t
(
ci_fd_t
 
fd
, 
côp_sockë
* 
ï
,

301 c⁄° 
sockaddr
* 
ß
, 
sockÀn_t
 
ß_Àn
)

303 
rc
;

305 if–
CITP_OPTS
.
udp_ªu£p‹ts
 != 0 &&

306 ((
sockaddr_ö
*)
ß
)->
sö_p‹t
 != 0 ) {

307 
ci_p‹t_li°
 *
f‹˚_ªu£p‹t
;

308 
	`CI_DLLIST_FOR_EACH2
(
ci_p‹t_li°
, 
f‹˚_ªu£p‹t
, 
lök
,

309 (
ci_dŒi°
*)(
ci_uöçå_t
)
CITP_OPTS
.
udp_ªu£p‹ts
) {

310 if–
f‹˚_ªu£p‹t
->
p‹t
 =((
sockaddr_ö
*)
ß
)->
sö_p‹t
 ) {

311 
⁄e
 = 1;

312 
ci_fd_t
 
os_sock
 = 
	`ci_gë_os_sock_fd
(
fd
);

313 
	`ci_as£π
(
	`CI_IS_VALID_SOCKET
(
os_sock
));

314 
rc
 = 
	`ci_sys_£tsock›t
(
os_sock
, 
SOL_SOCKET
, 
SO_REUSEPORT
, &
⁄e
,

315 (
⁄e
));

316 
	`ci_ªl_os_sock_fd
(
os_sock
);

318 if–
rc
 != 0 ) {

319 
	`log
("%s: failedÅo set SO_REUSEPORT on OS socket: "

320 "rc=%dÉºno=%d", 
__func__
, 
rc
, 
î∫o
);

322 
ï
->
s
->
s_Êags
 |
CI_SOCK_FLAG_REUSEPORT
;

323 
	`LOG_UC
(
	`log
("%†"
SF_FMT
",áppliedÜegacy SO_REUSEPORT flag forÖort %u",

324 
__FUNCTION__
, 
	`SF_PRI_ARGS
(
ï
, 
fd
), 
f‹˚_ªu£p‹t
->
p‹t
));

328 
	}
}

333 
	$ci_udp_ªu£p‹t_böd
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
,

334 c⁄° 
sockaddr
* 
ß
, 
sockÀn_t
 
ß_Àn
)

336 
rc
;

337 
ci_uöt32
 
œddr_be32
 = 
	`ci_gë_ù4_addr
(
ï
->
s
->
domaö
, 
ß
);

338 
Õ‹t_be16
 = ((
sockaddr_ö
*)
ß
)->
sö_p‹t
;

339 
	`ci_as£π_√quÆ
(
ï
->
s
->
s_Êags
 & 
CI_SOCK_FLAG_REUSEPORT
, 0);

346 if–
Õ‹t_be16
 == 0 ) {

347 
	`LOG_UC
(
	`ci_log
("%s: BindingÅoÖort 0 withÑeuseport setÇot supported",

348 
__FUNCTION__
));

349 
	`RET_WITH_ERRNO
(
ENOSYS
);

352 if–(
rc
 = 
	`ci_t˝_ï_ªu£p‹t_böd
(
fd
, 
CITP_OPTS
.
˛u°î_«me
,

353 
CITP_OPTS
.
˛u°î_size
,

354 
CITP_OPTS
.
˛u°î_ª°¨t_›t
, 
œddr_be32
,

355 
Õ‹t_be16
)) != 0 ) {

356 
î∫o
 = -
rc
;

359  
rc
;

360 
	}
}

368 
	$ci_udp_böd
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
, c⁄° 
sockaddr
* 
addr
,

369 
sockÀn_t
 
addæí
)

371 
rc
;

372 
ci_uöt16
 
loˇl_p‹t
;

374 
	`CHECK_UEP
(
ï
);

375 
	`LOG_UC
(
	`log
("%s("
SF_FMT
",áddæí=%d)", 
__FUNCTION__
,

376 
	`SF_PRI_ARGS
(
ï
,
fd
), 
addæí
));

383 
	`ci_udp_˛r_fûãrs
(
ï
);

385 
rc
 = 
	`ci_t˝_hñ≥r_böd_os_sock
(
fd
, 
addr
, 
addæí
, &
loˇl_p‹t
);

387 if–
rc
 =
CI_SOCKET_ERROR
 )

388  
rc
;

389  
	`ci_udp_böd_c⁄˛ude
(
ï
, 
addr
, 
loˇl_p‹t
 );

390 
	}
}

393 
	$ci_udp_£t_øddr
(
ci_udp_°©e
* 
us
, 
øddr_be32
,

394 
Ω‹t_be16
)

396 
	`ci_ù_ˇche_övÆid©e
(&
us
->
s
.
pkt
);

397 
	`udp_øddr_be32
(
us
Ë
øddr_be32
;

398 
	`udp_Ω‹t_be16
(
us
Ë(
ci_uöt16
Ë
Ω‹t_be16
;

399 
us
->
s
.
pkt
.
dp‹t_be16
 = (
ci_uöt16
Ë
Ω‹t_be16
;

400 
	}
}

403 #i‚de‡
_WIN32


404 
	#IS_DISCONNECTING
(
sö
Ë–(sö)->
sö_Ámûy
 =
AF_UNSPEC
 )

	)

406 
	#IS_DISCONNECTING
(
sö
Ë((sö)->
sö_addr
.
s_addr
 =
INADDR_ANY
 && \

407 ((
sö
)->
sö_Ámûy
 =
AF_INET
 || \

408 (
sö
)->
sö_Ámûy
 =
AF_UNSPEC
))

	)

413 
	$ci_udp_disc⁄√˘
(
côp_sockë
* 
ï
, 
ci_udp_°©e
* 
us
, 
ci_fd_t
 
os_sock
)

415 
rc
;

417 if–(
rc
 = 
	`ci_udp_sys_gësock«me
(
os_sock
, 
ï
)) != 0 ) {

418 
	`LOG_E
(
	`log
(
FNS_FMT
 "ERROR: sys_getsockname failed (%d)",

419 
	`FNS_PRI_ARGS
(
ï
->
√tif
,Ép->
s
), 
î∫o
));

420  
rc
;

422 
	`ci_udp_£t_øddr
(
us
, 0, 0);

428 
	`ci_udp_˛r_fûãrs
(
ï
);

430 #ifde‡
ONLOAD_OFE


431 if–
ï
->
√tif
->
o„_ch™√l
 !
NULL
 )

432 
us
->
s
.
o„_code_°¨t
 = 
	`o„_socktbl_föd
(

433 
ï
->
√tif
->
o„
, 
OFE_SOCKTYPE_UDP
,

434 
	`udp_œddr_be32
(
us
), 
	`udp_øddr_be32
(us),

435 
	`udp_Õ‹t_be16
(
us
), 
	`udp_Ω‹t_be16
(us));

437 
us
->
s
.
o„_code_°¨t
 = 
OFE_ADDR_NULL
;

440 if–(
rc
 = 
	`ci_udp_£t_fûãrs
(
ï
, 
us
)) != 0 )

442 
	`LOG_U
(
	`log
(
FNS_FMT
 "ERROR: ci_udp_set_filters failed (%d)",

443 
	`FNS_PRI_ARGS
(
ï
->
√tif
,Ép->
s
), 
î∫o
));

444 
us
->
s
.
˝
.
sock_˝_Êags
 &~
OO_SCP_CONNECTED
;

446 
	}
}

453 
	$ci_udp_c⁄√˘_c⁄˛ude
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
,

454 c⁄° 
sockaddr
* 
£rv_addr
,

455 
sockÀn_t
 
addæí
, 
ci_fd_t
 
os_sock
)

457 c⁄° 
sockaddr_ö
* 
£rv_sö
 = (c⁄° sockaddr_ö*Ë
£rv_addr
;

458 
ci_uöt32
 
d°_be32
;

459 
ci_udp_°©e
* 
us
 = 
	`SOCK_TO_UDP
(
ï
->
s
);

460 
⁄lﬂdabÀ
;

461 
rc
 = 0;

463 
	`CHECK_UEP
(
ï
);

465 
	`UDP_CLR_FLAG
(
us
, 
CI_UDPF_EF_SEND
);

466 
us
->
s
.
rx_î∫o
 = 0;

467 
us
->
s
.
tx_î∫o
 = 0;

469 if–
	`IS_DISCONNECTING
(
£rv_sö
) ) {

470 
rc
 = 
	`ci_udp_disc⁄√˘
(
ï
, 
us
, 
os_sock
);

471 
out
;

473 #i‡
CI_CFG_FAKE_IPV6


474 if–
us
->
s
.
domaö
 =
PF_INET6
 && !
	`ci_t˝_ùv6_is_ùv4
(
£rv_addr
) ) {

475 
	`LOG_UC
(
	`log
(
FNT_FMT
 "HANDOVERÇŸ IPv4", 
	`FNT_PRI_ARGS
(
ï
->
√tif
, 
us
)));

476 
h™dovî
;

480 
d°_be32
 = 
	`ci_gë_ù4_addr
(
£rv_sö
->
sö_Ámûy
, 
£rv_addr
);

481 if–(
rc
 = 
	`ci_udp_sys_gësock«me
(
os_sock
, 
ï
)) != 0 ) {

482 
	`LOG_E
(
	`log
(
FNT_FMT
 "ERROR: (%s:%d) sys_getsockname failed (%d)",

483 
	`FNT_PRI_ARGS
(
ï
->
√tif
, 
us
), 
	`ù_addr_°r
(
d°_be32
),

484 
	`CI_BSWAP_BE16
(
£rv_sö
->
sö_p‹t
), 
î∫o
));

485 
out
;

488 
us
->
s
.
˝
.
sock_˝_Êags
 |
OO_SCP_CONNECTED
;

489 
	`ci_udp_£t_øddr
(
us
, 
d°_be32
, 
£rv_sö
->
sö_p‹t
);

490 
	`ci˝_u£r_ªåõve
(
ï
->
√tif
, &
us
->
s
.
pkt
, &us->s.
˝
);

492  
us
->
s
.
pkt
.
°©us
 ) {

493 
ªårc_suc˚ss
:

494 
ªårc_nomac
:

495 
⁄lﬂdabÀ
 = 1;

498 
⁄lﬂdabÀ
 = 0;

499 if–
	`NI_OPTS
(
ï
->
√tif
).
udp_c⁄√˘_h™dovî
 ) {

500 
	`LOG_UC
(
	`log
(
FNT_FMT
 "HANDOVER %s:%d", 
	`FNT_PRI_ARGS
(
ï
->
√tif
, 
us
),

501 
	`ù_addr_°r
(
d°_be32
), 
	`CI_BSWAP_BE16
(
£rv_sö
->
sö_p‹t
)));

502 
h™dovî
;

507 #i‚de‡
_WIN32


508 if–
d°_be32
 =
INADDR_ANY_BE32
 || 
£rv_sö
->
sö_p‹t
 == 0 ) {

509 
	`LOG_UC
(
	`log
(
FNT_FMT
 "%s:%d -Ñoute via OS socket",

510 
	`FNT_PRI_ARGS
(
ï
->
√tif
, 
us
), 
	`ù_addr_°r
(
d°_be32
),

511 
	`CI_BSWAP_BE16
(
£rv_sö
->
sö_p‹t
)));

512 
	`ci_udp_˛r_fûãrs
(
ï
);

515 if–
	`CI_IP_IS_LOOPBACK
(
d°_be32
) ) {

519 
	`LOG_UC
(
	`log
(
FNT_FMT
 "HANDOVER %s:%d", 
	`FNT_PRI_ARGS
(
ï
->
√tif
, 
us
),

520 
	`ù_addr_°r
(
d°_be32
), 
	`CI_BSWAP_BE16
(
£rv_sö
->
sö_p‹t
)));

521 
h™dovî
;

525 if–
⁄lﬂdabÀ
 ) {

526 #ifde‡
ONLOAD_OFE


527 if–
ï
->
√tif
->
o„_ch™√l
 !
NULL
 )

528 
us
->
s
.
o„_code_°¨t
 = 
	`o„_socktbl_föd
(

529 
ï
->
√tif
->
o„
, 
OFE_SOCKTYPE_UDP
,

530 
	`udp_œddr_be32
(
us
), 
	`udp_øddr_be32
(us),

531 
	`udp_Õ‹t_be16
(
us
), 
	`udp_Ω‹t_be16
(us));

533 
us
->
s
.
o„_code_°¨t
 = 
OFE_ADDR_NULL
;

536 if–(
rc
 = 
	`ci_udp_£t_fûãrs
(
ï
, 
us
)) != 0 ) {

545 
	`LOG_U
(
	`log
(
FNT_FMT
 "ERROR: (%s:%d) ci_udp_set_filters failed (%d)",

546 
	`FNT_PRI_ARGS
(
ï
->
√tif
, 
us
), 
	`ù_addr_°r
(
d°_be32
),

547 
	`CI_BSWAP_BE16
(
£rv_sö
->
sö_p‹t
), 
rc
));

548 
	`CITP_STATS_NETIF
(++
ï
->
√tif
->
°©e
->
°©s
.
udp_c⁄√˘_no_fûãr
);

549 
out
;

553 
	`ci_udp_˛r_fûãrs
(
ï
);

556 
	`LOG_UC
(
	`log
(
LPF
 "c⁄√˘: "
SF_FMT
" %sCONNECTED L:%s:%u R:%s:%u (err:%d)",

557 
	`SF_PRI_ARGS
(
ï
,
fd
), 
	`udp_øddr_be32
(
us
) ? "" : "DIS",

558 
	`ù_addr_°r
(
	`udp_œddr_be32
(
us
)),

559 (Ë
	`CI_BSWAP_BE16
(
	`udp_Õ‹t_be16
(
us
)),

560 
	`ù_addr_°r
(
	`udp_øddr_be32
(
us
)),

561 (Ë
	`CI_BSWAP_BE16
(
	`udp_Ω‹t_be16
(
us
)), 
î∫o
));

564 
out
:

565 if–
rc
 < 0 && 
CITP_OPTS
.
no_Áû
 )

566 
h™dovî
;

567  
rc
;

569 
h™dovî
:

570 
	`ci_udp_˛r_fûãrs
(
ï
);

571  
CI_SOCKET_HANDOVER
;

572 
	}
}

592 
	$ci_udp_c⁄√˘
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
,

593 c⁄° 
sockaddr
* 
£rv_addr
, 
sockÀn_t
 
addæí
 )

595 
rc
;

596 
ci_fd_t
 
os_sock
;

598 
	`CHECK_UEP
(
ï
);

599 
	`LOG_UC
(
	`log
("%s("
SF_FMT
",áddæí=%d)", 
__FUNCTION__
,

600 
	`SF_PRI_ARGS
(
ï
,
fd
), 
addæí
));

602 
os_sock
 = 
	`ci_gë_os_sock_fd
(
fd
);

603 if–!
	`CI_IS_VALID_SOCKET
–
os_sock
 ) ) {

604 
	`LOG_U
(
	`ci_log
("%s:Çÿbackög sockë", 
__FUNCTION__
));

618 #i‚de‡
_WIN32


619 
rc
 = 
	`ci_sys_c⁄√˘
(
os_sock
, 
£rv_addr
, 
addæí
);

621 
rc
 = 
	`ci_sys_c⁄√˘
(
ï
, 
£rv_addr
, 
addæí
);

623 if–
rc
 != 0 ) {

624 
	`LOG_U
(
	`log
("%s: sys_c⁄√˘ faûedÉºno:%d", 
__FUNCTION__
, 
î∫o
));

625 
	`ci_ªl_os_sock_fd
(
os_sock
);

629 
rc
 = 
	`ci_udp_c⁄√˘_c⁄˛ude
–
ï
, 
fd
, 
£rv_addr
, 
addæí
, 
os_sock
);

630 
	`ci_ªl_os_sock_fd
(
os_sock
);

631  
rc
;

632 
	}
}

635 
	$__ci_udp_shutdown
(
ci_√tif
* 
√tif
, 
ci_udp_°©e
* 
us
, 
how
)

637 
	`ci_as£π
(
√tif
);

638 
	`ci_as£π
(
us
);

640 #i‚de‡
_WIN32


642 if–
	`udp_øddr_be32
(
us
) == 0 )

643  -
ENOTCONN
;

646  
how
 ) {

647 
SHUT_RD
:

648 
us
->
s
.
rx_î∫o
 |
CI_SHUT_RD
;

650 
SHUT_WR
:

651 
us
->
s
.
rx_î∫o
 |
CI_SHUT_WR
;

652 
us
->
s
.
tx_î∫o
 = 
EPIPE
;

654 
SHUT_RDWR
:

655 
us
->
s
.
rx_î∫o
 |(
CI_SHUT_RD
 | 
CI_SHUT_WR
);

656 
us
->
s
.
tx_î∫o
 = 
EPIPE
;

657 
	`ci_as£π
(
	`UDP_IS_SHUT_RDWR
(
us
));

660 
	`ci_Áû
(("'how'Öarameter of shutdown() must be verifiedÉarlier"));

661  -
EINVAL
;

665 
	}
}

670 #i‚de‡
__ci_drivî__


672 
	$ci_udp_shutdown
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
, 
how
)

674 
ci_fd_t
 
os_sock
;

675 
rc
;

677 
	`CHECK_UEP
(
ï
);

678 
	`LOG_UV
(
	`log
(
LPF
 "shutdown("
SF_FMT
", %d)", 
	`SF_PRI_ARGS
(
ï
,
fd
), 
how
));

680 
os_sock
 = 
	`ci_gë_os_sock_fd
(
fd
);

682 if–
	`CI_IS_VALID_SOCKET
–
os_sock
 ) ) {

683 #i‚de‡
_WIN32


684 
rc
 = 
	`ci_sys_shutdown
(
os_sock
, 
how
);

686 
rc
 = 
	`ci_sys_shutdown
(
ï
, 
how
);

688 
	`ci_ªl_os_sock_fd
–
os_sock
 );

689 if–
rc
 < 0 )

690  
CI_SOCKET_ERROR
;

693 
rc
 = 
	`__ci_udp_shutdown
(
ï
->
√tif
, 
	`SOCK_TO_UDP
”p->
s
), 
how
);

695 if–
rc
 < 0 ) {

696 
	`CI_SET_ERROR
(
rc
, -rc);

697  
rc
;

700 
	}
}

704 
	$ci_udp_gë≥î«me
(
côp_sockë
*
ï
, 
sockaddr
* 
«me
, 
sockÀn_t
* 
«mñí
)

706 
ci_udp_°©e
* 
us
;

708 
	`CHECK_UEP
(
ï
);

710 
us
 = 
	`SOCK_TO_UDP
(
ï
->
s
);

717 if–
	`udp_øddr_be32
(
us
) == 0 ) {

718 
	`RET_WITH_ERRNO
(
ENOTCONN
);

719 } if–
«me
 =
NULL
 || 
«mñí
 == NULL ) {

720 
	`RET_WITH_ERRNO
(
EFAULT
);

721 #ifde‡
__sun__


722 } if–
	`UDP_IS_SHUT_WR
(
us
Ë|| 
	`UDP_IS_SHUT_RDWR
(us) ) {

723 
	`RET_WITH_ERRNO
(
EINVAL
);

726 
	`ci_addr_to_u£r
(
«me
, 
«mñí
, 
ï
->
s
->
domaö
,

727 
	`udp_Ω‹t_be16
(
us
), 
	`udp_øddr_be32
(us));

730 
	}
}

735 #ifde‡
__ci_drivî__


737 
	$ci_udp_Æl_fds_g⁄e
(
ci_√tif
* 
√tif
, 
oo_•
 
sock_id
, 
do_‰ì
)

745 
ci_udp_°©e
* 
us
 = 
	`SP_TO_UDP
(
√tif
, 
sock_id
);

747 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

748 
	`ci_as£π
(
us
->
s
.
b
.
°©e
 =
CI_TCP_STATE_UDP
);

750 
	`LOG_UC
(
	`ci_log
("ci_udp_Æl_fds_g⁄e: "
NTS_FMT
,

751 
	`NTS_PRI_ARGS
(
√tif
, 
us
)));

753 if–
	`UDP_GET_FLAG
(
us
, 
CI_UDPF_FILTERED
) ) {

754 
	`UDP_CLR_FLAG
(
us
, 
CI_UDPF_FILTERED
);

755 
	`ci_t˝_ï_˛ór_fûãrs
(
√tif
, 
	`S_SP
(
us
), 0);

757 
	`ci_udp_ªcv_q_dr›
(
√tif
, &
us
->
ªcv_q
);

758 
	`ci_ni_dŒi°_ªmove
(
√tif
, &
us
->
s
.
ª≠_lök
);

760 if–
	`OO_PP_NOT_NULL
(
us
->
zc_kî√l_d©agøm
) ) {

761 
	`ci_√tif_pkt_ªÀa£_rx
(
√tif
, 
	`PKT_CHK
“ëif, 
us
->
zc_kî√l_d©agøm
));

762 
us
->
zc_kî√l_d©agøm
 = 
OO_PP_NULL
;

763 
us
->
zc_kî√l_d©agøm_cou¡
 = 0;

769 if–
do_‰ì
 ) {

770 if–
us
->
tx_cou¡
 == 0 )

771 
	`ci_udp_°©e_‰ì
(
√tif
, 
us
);

773 
	`CITP_STATS_NETIF_INC
(
√tif
, 
udp_‰ì_wôh_tx_a˘ive
);

775 
	}
}

	@udp_internal.h

12 #i‚de‡
__UDP_INTERNAL_H__


13 
	#__UDP_INTERNAL_H__


	)

16 
	sci_udp_rx_dñivî_°©e
 {

17 
ci_√tif
* 
	mni
;

18 
ci_ù_pkt_fmt
* 
	mpkt
;

19 
	mdñivîed
;

20 
	mqueued
;

25 
ci_ölöe
 

26 
	$ci_mˇ°_ùˇche_£t_mac
(
ci_√tif
* 
ni
, 
ci_ù_ˇched_hdrs
* 
ùˇche
,

27 
daddr_be32
)

29 *
dho°
 = 
	`ci_ù_ˇche_ëhî_dho°
(
ùˇche
);

30 
daddr
 = 
	`CI_BSWAP_BE32
(daddr);

31 
dho°
[0] = 1;

32 
dho°
[1] = 0;

33 
dho°
[2] = 0x5e;

34 
dho°
[3] = (
daddr
 >> 16) & 0x7f;

35 
dho°
[4] = (
daddr
 >> 8) & 0xff;

36 
dho°
[5] = 
daddr
 & 0xff;

37 
	`ci˝_mac_£t_mo°ly_vÆid
(
	`CICP_USER_MIBS
(
	`CICP_HANDLE
(
ni
)).
mac_uèbÀ
,

38 &
ùˇche
->
mac_öãgrôy
);

39 
	}
}

42 
	$ci_udp_rx_dñivî
(
ci_sock_cmn
*, *Ë
CI_HF
;

	@udp_ioctl.c

14 #ifde‡ 
__löux__


15 
	~<löux/sockios.h
>

16 
	~<sys/time.h
>

19 
	~"ù_öã∫Æ.h
"

20 
	~<ci/√t/io˘ls.h
>

21 
	~<⁄lﬂd/osfûe.h
>

24 
	$ci_synchr⁄i£_˛ock
(
ci_√tif
 *
ni
, 
oo_timesync
* 
oo_ts_loˇl
)

26 
ci_uöt32
 
gc
;

27 
oo_timesync
 *
oo_ts
 = 
ni
->
timesync
;

32 if–
oo_ts_loˇl
->
gíî©i⁄_cou¡
 !
oo_ts
->generation_count ) {

34 
gc
 = 
oo_ts
->
gíî©i⁄_cou¡
;

35 
	`ci_rmb
();

36 
oo_ts_loˇl
->
smoŸhed_ticks
 = 
oo_ts
->smoothed_ticks;

37 
oo_ts_loˇl
->
smoŸhed_ns
 = 
oo_ts
->smoothed_ns;

38 
oo_ts_loˇl
->
wÆl_˛ock
.
tv_£c
 = 
oo_ts
->wall_clock.tv_sec;

39 
oo_ts_loˇl
->
wÆl_˛ock
.
tv_n£c
 = 
oo_ts
->wall_clock.tv_nsec;

40 
oo_ts_loˇl
->
m⁄o_˛ock
.
tv_£c
 = 
oo_ts
->mono_clock.tv_sec;

41 
oo_ts_loˇl
->
m⁄o_˛ock
.
tv_n£c
 = 
oo_ts
->mono_clock.tv_nsec;

42 
oo_ts_loˇl
->
˛ock_made
 = 
oo_ts
->clock_made;

43 
	`ci_rmb
();

44 } 
gc
 & 1 || g¯!
oo_ts
->
gíî©i⁄_cou¡
);

45 
oo_ts_loˇl
->
gíî©i⁄_cou¡
 = 
gc
;

47 
	}
}

50 
	$ci_udp_compuã_°amp
(
ci_√tif
 *
ni
, 
ci_uöt64
 
°amp
, 
time•ec
 *
ts
)

52 
ci_uöt64
 
dñè
, 
dñè_£c
, 
dñè_n£c
;

53 
oo_timesync
* 
oo_ts_loˇl
;

54 
ns_øã
;

56 
oo_ts_loˇl
 = &(
	`__oo_≥r_thªad_gë
()->
timesync
);

57 
	`ci_synchr⁄i£_˛ock
(
ni
, 
oo_ts_loˇl
);

59 
ts
->
tv_£c
 = 
oo_ts_loˇl
->
wÆl_˛ock
.tv_sec;

60 
ts
->
tv_n£c
 = 
oo_ts_loˇl
->
wÆl_˛ock
.tv_nsec;

62 
ns_øã
 = ()
oo_ts_loˇl
->
smoŸhed_ns
 /

63 ()
oo_ts_loˇl
->
smoŸhed_ticks
;

65 if–
oo_ts_loˇl
->
˛ock_made
 >
°amp
 ) {

70 
dñè
 = (
ci_uöt64
)(()(
oo_ts_loˇl
->
˛ock_made
 - 
°amp
Ë* 
ns_øã
);

71 
dñè_£c
 = 
dñè
 / 1000000000llu;

72 
dñè_n£c
 = 
dñè
 % 1000000000llu;

74 
ts
->
tv_£c
 -
dñè_£c
;

75 if(
ts
->
tv_n£c
 < 
dñè_n£c
){

76 --
ts
->
tv_£c
;

77 
ts
->
tv_n£c
 += 1000000000;

79 
ts
->
tv_n£c
 -
dñè_n£c
;

86 
dñè
 = (
ci_uöt64
)(()(
°amp
 - 
oo_ts_loˇl
->
˛ock_made
Ë* 
ns_øã
);

87 
dñè_£c
 = 
dñè
 / 1000000000llu;

88 
dñè_n£c
 = 
dñè
 % 1000000000llu;

90 
ts
->
tv_£c
 +
dñè_£c
;

91 
ts
->
tv_n£c
 +
dñè_n£c
;

92 if(
ts
->
tv_n£c
 > 1000000000){

93 ++
ts
->
tv_£c
;

94 
ts
->
tv_n£c
 -= 1000000000;

97 
	}
}

100 
	$ci_udp_upd©e_°amp_ˇche
(
ci_√tif
 *
√tif
, 
ci_udp_°©e
 *
us
,

101 
ci_uöt64
 *
°amp
)

103 
time•ec
 
ts
;

105 
	`ci_udp_compuã_°amp
(
√tif
, *
°amp
, &
ts
);

113 *
°amp
 = 1;

114 
us
->
°amp_ˇche
.
tv_£c
 = 
ts
.tv_sec;

115 
us
->
°amp_ˇche
.
tv_n£c
 = 
ts
.tv_nsec;

116 
	}
}

119 
	$ci_udp_io˘l_siocg°amp
(
ci_√tif
 *
√tif
, 
ci_udp_°©e
 *
us
,

120 * 
¨g
, 
mi¸os
)

122 
ci_uöt64
 
°amp
 = 
us
->stamp;

124 if–
us
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_TIMESTAMP_ANY
 )

125 
°amp
 = 
us
->
°amp_¥e_sŸs
;

127 if–
°amp
 == 0 )

128  -
ENOENT
;

129 if–
¨g
 =
NULL
 )

130  -
EFAULT
;

131 if–
°amp
 != 1 ) {

132 if–
us
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_TIMESTAMP_ANY
 )

133 
	`ci_udp_upd©e_°amp_ˇche
(
√tif
, 
us
, &us->
°amp_¥e_sŸs
);

135 
	`ci_udp_upd©e_°amp_ˇche
(
√tif
, 
us
, &us->
°amp
);

138 ((
timevÆ
*)
¨g
)->
tv_£c
 = 
us
->
°amp_ˇche
.tv_sec;

139 if–
mi¸os
 )

140 ((
timevÆ
*)
¨g
)->
tv_u£c
 = 
us
->
°amp_ˇche
.
tv_n£c
 / 1000;

142 ((
timevÆ
*)
¨g
)->
tv_u£c
 = 
us
->
°amp_ˇche
.
tv_n£c
;

144 
	}
}

147 
	$ci_udp_io˘l_¶ow
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

148 
ci_fd_t
 
fd
, 
ªque°
, * 
¨g
)

150 
os_rc
, 
rc
 = 0;

155 if–
ªque°
 !
FIOASYNC
 &&

156 (
os_rc
 = 
	`oo_os_sock_io˘l
(
ni
, 
us
->
s
.
b
.
bufid
, 
ªque°
, 
¨g
, 
NULL
)) < 0 )

157  
os_rc
;

159  
ªque°
 ) {

160 
FIONBIO
:

164 
	`CI_CMN_IOCTL_FIONBIO
(&
us
->
s
, 
¨g
);

167 
FIOASYNC
:

170 
rc
 = 
	`ci_sys_io˘l
(
fd
, 
ªque°
, 
¨g
);

171 if–
rc
 < 0 ) {

173 
	`LOG_E
(
	`ci_log
("%s: ERROR: FIOASYNC failed on fd=%dÑc=%dÉrrno=%d",

174 
__FUNCTION__
, 
fd
, 
rc
, 
î∫o
));

175 
rc
 = -
î∫o
;

179 
SIOCSPGRP
:

184 
rc
 = 
	`ci_sys_f˙é
(
fd
, 
F_SETOWN
, 
	`CI_IOCTL_GETARG
(, 
¨g
));

185 if–
rc
 < 0 )

187 
	`LOG_E
(
	`ci_log
("%s: ERROR: fcntl(F_SETOWN) failed on fd=%dÑc=%dÉrrno=%d",

188 
__FUNCTION__
, 
fd
, 
rc
, 
î∫o
));

189 
rc
 = 
	`ci_cmn_io˘l
(
ni
, &
us
->
s
, 
ªque°
, 
¨g
, 
os_rc
, 1);

193 
rc
 = 
	`ci_cmn_io˘l
(
ni
, &
us
->
s
, 
ªque°
, 
¨g
, 
os_rc
, 1);

196  
rc
;

197 
	}
}

200 
	$ci_udp_io˘l_locked
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

201 
ci_fd_t
 
fd
, 
ªque°
, * 
¨g
)

203 
rc
;

205  
ªque°
 ) {

206 
FIONREAD
:

207 if–! 
	`CI_IOCTL_ARG_OK
(, 
¨g
) )

208  -
EFAULT
;

209 
rc
 = 1;

210 if–
rc
 ) {

218 
oo_pkt_p
 
exåa˘
 = 
	`OO_ACCESS_ONCE
(
us
->
ªcv_q
.extract);

219 if–
	`OO_PP_NOT_NULL
(
exåa˘
) ) {

220 
ci_ù_pkt_fmt
* 
pkt
 = 
	`PKT_CHK
(
ni
, 
exåa˘
);

221 if–(
pkt
->
rx_Êags
 & 
CI_PKT_RX_FLAG_RECV_Q_CONSUMED
) &&

222 
	`OO_PP_NOT_NULL
(
pkt
->
udp_rx_√xt
) )

223 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
udp_rx_√xt
);

224 if–!(
pkt
->
rx_Êags
 & 
CI_PKT_RX_FLAG_RECV_Q_CONSUMED
) ) {

225 *(*Ë
¨g
 = 
pkt
->
pf
.
udp
.
∑y_Àn
;

233 if–!(
us
->
s
.
os_sock_°©us
 & 
OO_OS_STATUS_RX
) ) {

234 *(*)
¨g
 = 0;

237 
sys_io˘l
;

239 
TIOCOUTQ
:

240 if–! 
	`CI_IOCTL_ARG_OK
(, 
¨g
) )

241  -
EFAULT
;

243 *(*)
¨g
 = 
us
->
tx_cou¡
 + 
	`oo_©omic_ªad
(&us->
tx_async_q_Àvñ
);

246 
SIOCGSTAMP
:

247 #i‡
	`deföed
–
__löux__
Ë&& deföed(
__KERNEL__
)

251 if–! (
us
->
udpÊags
 & 
CI_UDPF_LAST_RECV_ON
) )

252  
	`oo_os_sock_io˘l
(
ni
, 
us
->
s
.
b
.
bufid
, 
ªque°
, 
¨g
, 
NULL
);

253  
	`ci_udp_io˘l_siocg°amp
(
ni
, 
us
, 
¨g
, 1);

254 
SIOCGSTAMPNS
:

255 if–! (
us
->
udpÊags
 & 
CI_UDPF_LAST_RECV_ON
) )

256  
	`oo_os_sock_io˘l
(
ni
, 
us
->
s
.
b
.
bufid
, 
ªque°
, 
¨g
, 
NULL
);

257  
	`ci_udp_io˘l_siocg°amp
(
ni
, 
us
, 
¨g
, 0);

260  
	`ci_udp_io˘l_¶ow
(
ni
, 
us
, 
fd
, 
ªque°
, 
¨g
);

262 
sys_io˘l
:

263  
	`oo_os_sock_io˘l
(
ni
, 
us
->
s
.
b
.
bufid
, 
ªque°
, 
¨g
, 
NULL
);

264 
	}
}

267 
	$ci_udp_io˘l
(
côp_sockë
 *
ï
, 
ci_fd_t
 
fd
, 
ªque°
, * 
¨g
)

269 
ci_√tif
* 
ni
 = 
ï
->
√tif
;

270 
ci_udp_°©e
* 
us
 = 
	`SOCK_TO_UDP
(
ï
->
s
);

271 
rc
;

273 
	`ci_√tif_lock
(
ni
);

274 
rc
 = 
	`ci_udp_io˘l_locked
(
ni
, 
us
, 
fd
, 
ªque°
, 
¨g
);

275 
	`ci_√tif_u∆ock
(
ni
);

276  
rc
;

277 
	}
}

	@udp_misc.c

13 
	~"ù_öã∫Æ.h
"

14 
	~"udp_öã∫Æ.h
"

15 
	~<⁄lﬂd/osfûe.h
>

17 
	#VERB
(
x
)

	)

20 
	$ci_udp_°©e_‰ì
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
)

22 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

23 
	`ci_as£π
(
us
->
s
.
b
.
°©e
 =
CI_TCP_STATE_UDP
);

24 
	`ci_as£π
(
	`ci_ni_dŒi°_is_£lf_löked
(
ni
, &
us
->
s
.
b
.
po°_pﬁl_lök
));

26 
	`ci_udp_ªcv_q_dr›
(
ni
, &
us
->
time°amp_q
);

28 
	`côp_waôabÀ_obj_‰ì
(
ni
, &
us
->
s
.
b
);

29 
	}
}

32 
	$ci_udp_åy_to_‰ì_pkts
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
, 
de•î©i⁄
)

36 
	}
}

38 
	$ci_udp_≥rf‹m_de„ºed_sockë_w‹k
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
)

40 
	`ci_as£π
(
us
->
s
.
b
.
°©e
 =
CI_TCP_STATE_UDP
);

42 
	`ci_udp_£ndmsg_£nd_async_q
(
ni
, 
us
);

43 
	}
}

	@udp_recv.c

14 
	#_GNU_SOURCE


	)

16 
	~"ù_öã∫Æ.h
"

17 
	~<⁄lﬂd/osfûe.h
>

18 #i‡
deföed
(
__unix__
Ë&& !deföed(
__KERNEL__
)

19 
	~<ci/öã∫Æ/ù_sig«l.h
>

22 #i‡!
deföed
(
__KERNEL__
)

23 
	~<sys/sockë.h
>

24 
	~<⁄lﬂd/exãnsi⁄s_zc.h
>

27 
	#VERB
(
x
)

	)

29 
	#LPF
 "ci_udp_"

	)

30 
	#LPFIN
 
LPF


	)

31 
	#LPFOUT
 
LPF


	)

34 
	#SLOWPATH_RET_IOVLEN_INITED
 (1<<30)

	)

35 
	#SLOWPATH_RET_ZERO
 (
SLOWPATH_RET_IOVLEN_INITED
 + 1)

	)

54 #ifde‡
__sun__


55 
	#MSG_OOB_CHK
 
MSG_OOB


	)

57 
	#MSG_OOB_CHK
 0

	)

60 #ifde‡
MSG_ERRQUEUE


61 
	#MSG_ERRQUEUE_CHK
 
MSG_ERRQUEUE


	)

63 
	#MSG_ERRQUEUE_CHK
 0

	)

66 #ifde‡
__löux__


67 #i‚de‡
__KERNEL__


68 
	#HAVE_MSG_FLAGS
 1

	)

70 
	#HAVE_MSG_FLAGS
 0

	)

72 
	#LOCAL_MSG_TRUNC
 
MSG_TRUNC


	)

73 #ñi‡
deföed
(
_WIN32
)

74 
	#HAVE_MSG_FLAGS
 1

	)

75 
	#LOCAL_MSG_TRUNC
 
MSG_PARTIAL


	)

76 #ñi‡
deföed
(
__sun__
)

77 
	#HAVE_MSG_FLAGS
 0

	)

79 #îr‹ 
Hñp
.

83 
ci_udp_iomsg_¨gs
 *
	ma
;

84 
ci_msghdr
* 
	mmsg
;

85 
	msock_locked
;

86 
	mÊags
;

87 #i‡
HAVE_MSG_FLAGS


88 
	mmsg_Êags
;

90 } 
	tci_udp_ªcv_öfo
;

93 
ci_ölöe
 
	$ci_udp_ªcvmsg_fûl_msghdr
(
ci_√tif
* 
ni
, 
ci_msghdr
* 
msg
,

94 c⁄° 
ci_ù_pkt_fmt
* 
pkt
,

95 
ci_sock_cmn
* 
s
)

97 #i‚de‡
__KERNEL__


98 c⁄° 
ci_udp_hdr
* 
udp
;

99 c⁄° 
ci_ù4_hdr
* 
ù
;

101 if–
msg
 !
NULL
 ) {

102 if–
msg
->
msg_«me
 !
NULL
 ) {

103 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_RX_INDIRECT
 )

104 
pkt
 = 
	`PKT_CHK_NNL
(
ni
,Ökt->
‰ag_√xt
);

105 
ù
 = 
	`oo_ù_hdr_c⁄°
(
pkt
);

106 
udp
 = (c⁄° 
ci_udp_hdr
*Ë((*Ë
ù
 + 
	`CI_IP4_IHL
(ip));

107 
	`ci_addr_to_u£r
(
	`CI_SA
(
msg
->
msg_«me
), &msg->
msg_«mñí
,

108 
s
->
domaö
, 
udp
->
udp_sour˚_be16
, 
ù
->
ù_ßddr_be32
);

110 #ifde‡
__sun__


112 
msg
->
msg_«mñí
 = 0;

116 
	}
}

119 
ci_ölöe
 
	$do_c›y
(* 
to
, c⁄° * 
‰om
, 
n_byãs
)

121 #ifde‡
__KERNEL__


122  
	`c›y_to_u£r
(
to
, 
‰om
, 
n_byãs
) != 0;

124 
	`mem˝y
(
to
, 
‰om
, 
n_byãs
);

127 
	}
}

130 
	soo_c›y_°©e
 {

131 
	mpkt_À·
;

132 
	mpkt_off
;

133 
	mbyãs_c›õd
;

134 
	mbyãs_to_c›y
;

135 c⁄° *
	m‰om
;

136 c⁄° 
ci_ù_pkt_fmt
* 
	mpkt
;

139 
ci_ölöe
 

140 
	$__oo_c›y_‰ag_to_iovec_no_adv
(
ci_√tif
* 
ni
,

141 
ci_iovec_±r
* 
piov
,

142 
oo_c›y_°©e
 *
ocs
)

144 
n
;

146 
n
 = 
	`CI_MIN
(
ocs
->
pkt_À·
, 
	`CI_IOVEC_LEN
(&
piov
->
io
));

147 
n
 = 
	`CI_MIN
“, 
ocs
->
byãs_to_c›y
);

148 if(
	`CI_UNLIKELY
–
	`do_c›y
(
	`CI_IOVEC_BASE
(&
piov
->
io
),

149 
ocs
->
‰om
 + ocs->
pkt_off
, 
n
) != 0 ))

150  -
EFAULT
;

152 
ocs
->
byãs_c›õd
 +
n
;

153 
ocs
->
pkt_off
 +
n
;

154 if–
n
 =
ocs
->
byãs_to_c›y
 )

157 
ocs
->
byãs_to_c›y
 -
n
;

158 if–
n
 =
ocs
->
pkt_À·
 ) {

160 
	`ci_as£π
(
	`OO_PP_NOT_NULL
(
ocs
->
pkt
->
‰ag_√xt
));

161 
	`ci_iovec_±r_adv™˚
(
piov
, 
n
);

162 
ocs
->
pkt
 = 
	`PKT_CHK_NNL
(
ni
, ocs->pkt->
‰ag_√xt
);

163 
ocs
->
pkt_off
 = 0;

170 
	`ci_as£π_equÆ
(
n
, 
	`CI_IOVEC_LEN
(&
piov
->
io
));

171 if–
piov
->
iovÀn
 == 0 )

173 
piov
->
io
 = *piov->
iov
++;

174 --
piov
->
iovÀn
;

177 
	}
}

181 
	$oo_c›y_pkt_to_iovec_no_adv
(
ci_√tif
* 
ni
, c⁄° 
ci_ù_pkt_fmt
* 
pkt
,

182 
ci_iovec_±r
* 
piov
, 
byãs_to_c›y
)

191 
rc
;

192 
oo_c›y_°©e
 
ocs
;

193 
ocs
.
byãs_c›õd
 = 0;

194 
ocs
.
byãs_to_c›y
 = bytes_to_copy;

195 
ocs
.
pkt_off
 = 0;

196 
ocs
.
pkt
 =Ökt;

199 
ocs
.
pkt_À·
 = 
	`oo_offbuf_À·
(&(ocs.
pkt
->
buf
)Ë- ocs.
pkt_off
;

200 
ocs
.
‰om
 = 
	`oo_offbuf_±r
(&(ocs.
pkt
->
buf
));

201 
rc
 = 
	`__oo_c›y_‰ag_to_iovec_no_adv
(
ni
, 
piov
, &
ocs
);

202 if–
rc
 == 0 )

203  
ocs
.
byãs_c›õd
;

204 if–
rc
 == 1 )

206 if–
rc
 < 0 )

207  
rc
;

209 
	`ci_as£π
(0);

211 
	}
}

214 #i‚de‡
__KERNEL__


217 
	$ci_udp_time°amp_q_pkt_to_iovec
(
ci_√tif
* 
ni
, c⁄° 
ci_ù_pkt_fmt
* 
pkt
,

218 
ci_iovec_±r
* 
piov
)

220 
rc
;

221 
oo_c›y_°©e
 
ocs
;

222 
ocs
.
byãs_c›õd
 = 0;

223 
ocs
.
byãs_to_c›y
 = 
	`CI_BSWAP_BE16
(
	`oo_ù_hdr_c⁄°
(
pkt
)->
ù_tŸ_Àn_be16
) +

224 
	`oo_ëhî_hdr_size
(
pkt
);

225 
ocs
.
pkt_off
 = 0;

226 
ocs
.
pkt
 =Ökt;

231 
ocs
.
pkt_À·
 = ocs.
pkt
->
buf_Àn
 - ocs.
pkt_off
;

232 
ocs
.
‰om
 = (*)
	`oo_ëhî_hdr_c⁄°
(ocs.
pkt
);

233 
rc
 = 
	`__oo_c›y_‰ag_to_iovec_no_adv
(
ni
, 
piov
, &
ocs
);

234 if–
rc
 == 0 )

235  
ocs
.
byãs_c›õd
;

236 if–
rc
 == 1 )

238 if–
rc
 < 0 )

239  
rc
;

241 
	`ci_as£π
(0);

243 
	}
}

247 #i‚de‡
__KERNEL__


253 
	#CI_UDP_ZC_IOVEC_MAX
 120

	)

255 
	$ci_udp_pkt_to_zc_msg
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

256 
⁄lﬂd_zc_msg
* 
zc_msg
)

258 
i
, 
byãs_À·
 = 
pkt
->
pf
.
udp
.
∑y_Àn
;

259 
ci_ù_pkt_fmt
* 
‰ag
;

260 
ci_ù_pkt_fmt
* 
h™dÀ_‰ag
;

262 
h™dÀ_‰ag
 = 
‰ag
 = 
pkt
;

263 
i
 = 0;

264 
	`ci_as£π_√quÆ
(
zc_msg
->
iov
, 
NULL
);

270 if–
	`oo_offbuf_À·
(&
‰ag
->
buf
Ë=0 && 
	`OO_PP_NOT_NULL
(‰ag->
‰ag_√xt
) )

271 
‰ag
 = 
	`PKT_CHK_NNL
(
ni
, føg->
‰ag_√xt
);

274 
zc_msg
->
iov
[
i
].
iov_Àn
 = 
	`CI_MIN
(
	`oo_offbuf_À·
(&
‰ag
->
buf
),

275 
byãs_À·
);

276 
zc_msg
->
iov
[
i
].
iov_ba£
 = 
	`oo_offbuf_±r
(&
‰ag
->
buf
);

277 
zc_msg
->
iov
[
i
].
buf
 = (
⁄lﬂd_zc_h™dÀ
)
h™dÀ_‰ag
;

278 
zc_msg
->
iov
[
i
].
iov_Êags
 = 0;

279 
byãs_À·
 -
zc_msg
->
iov
[
i
].
iov_Àn
;

280 ++
i
;

281 if–
	`OO_PP_IS_NULL
(
‰ag
->
‰ag_√xt
) ||

282 (
i
 =
CI_UDP_ZC_IOVEC_MAX
) ||

283 (
byãs_À·
 == 0) )

285 
‰ag
 = 
	`PKT_CHK_NNL
(
ni
, føg->
‰ag_√xt
);

286 
h™dÀ_‰ag
 = 
‰ag
;

288 
zc_msg
->
msghdr
.
msg_iovÀn
 = 
i
;

289 
	}
}

293 
	$ci_udp_ªcvmsg_gë
(
ci_udp_ªcv_öfo
* 
röf
, 
ci_iovec_±r
* 
piov
)

295 
ci_√tif
* 
ni
 = 
röf
->
a
->ni;

296 
ci_udp_°©e
* 
us
 = 
röf
->
a
->us;

297 
ci_msghdr
* 
msg
 = 
röf
->msg;

298 
ci_ù_pkt_fmt
* 
pkt
;

299 
rc
;

303 if–
	`ci_udp_ªcv_q_is_em±y
(&
us
->
ªcv_q
) )

304 
ªcv_q_is_em±y
;

306 
	`ci_rmb
();

308 
pkt
 = 
	`ci_udp_ªcv_q_gë
(
ni
, &
us
->
ªcv_q
);

310 #i‡
	`deföed
(
__löux__
Ë&& !deföed(
__KERNEL__
)

311 if–
msg
 !
NULL
 && msg->
msg_c⁄åﬁÀn
 != 0 ) {

312 if–
	`CI_UNLIKELY
(
us
->
s
.
cmsg_Êags
 != 0 ) )

313 
	`ci_ù_cmsg_ªcv
(
ni
, 
us
, 
pkt
, 
msg
, 0, &
röf
->
msg_Êags
);

315 
msg
->
msg_c⁄åﬁÀn
 = 0;

318 
us
->
°amp
 = 
pkt
->
pf
.
udp
.
rx_°amp
;

320 
rc
 = 
	`oo_c›y_pkt_to_iovec_no_adv
(
ni
, 
pkt
, 
piov
,Ökt->
pf
.
udp
.
∑y_Àn
);

322 if(
	`CI_LIKELY
–
rc
 >= 0 )) {

323 #i‡
HAVE_MSG_FLAGS


324 if(
	`CI_UNLIKELY
–
rc
 < 
pkt
->
pf
.
udp
.
∑y_Àn
 && 
msg
 !
NULL
 ))

325 
röf
->
msg_Êags
 |
LOCAL_MSG_TRUNC
;

327 
	`ci_udp_ªcvmsg_fûl_msghdr
(
ni
, 
msg
, 
pkt
, &
us
->
s
);

328 if–! (
röf
->
Êags
 & 
MSG_PEEK
) )

329 
	`ci_udp_ªcv_q_dñivî
(
ni
, &
us
->
ªcv_q
, 
pkt
);

330 
us
->
udpÊags
 |
CI_UDPF_LAST_RECV_ON
;

333  
rc
;

335 
ªcv_q_is_em±y
:

336  -
EAGAIN
;

337 
	}
}

340 #i‚de‡
__KERNEL__


342 
	$__ci_udp_ªcvmsg_åy_os
(
ci_√tif
 *
ni
, 
ci_udp_°©e
 *
us
,

343 
msghdr
* 
msg
, 
Êags
, * 
¥c
)

345 
rc
;

347 
rc
 = 
	`oo_os_sock_ªcvmsg
(
ni
, 
	`SC_SP
(&
us
->
s
), 
msg
, 
Êags
 | 
MSG_DONTWAIT
);

349 if–
rc
 >= 0 ) {

350 ++
us
->
°©s
.
n_rx_os
;

351 
us
->
udpÊags
 &~
CI_UDPF_LAST_RECV_ON
;

352 if–! (
Êags
 & 
MSG_PEEK
) )

353 
us
->
udpÊags
 &=~ 
CI_UDPF_PEEK_FROM_OS
;

355 
us
->
udpÊags
 |
CI_UDPF_PEEK_FROM_OS
;

358 if–
rc
 =-
EAGAIN
 )

360 
	`ci_as£π
(-
rc
 =
î∫o
);

361 
rc
 = -1;

362 ++
us
->
°©s
.
n_rx_os_îr‹
;

365 *
¥c
 = 
rc
;

367 
	}
}

371 
	$__ci_udp_ªcvmsg_åy_os
(
ci_√tif
 *
ni
, 
ci_udp_°©e
 *
us
,

372 
ci_msghdr
* 
msg
, 
Êags
, * 
¥c
)

374 
rc
, 
tŸÆ_byãs
, 
i
;

375 
sockë
 *
sock
;

376 
oo_os_fûe
 
os_sock
;

377 
msghdr
 
kmsg
;

379 
tŸÆ_byãs
 = 0;

380  
i
 = 0; i < 
msg
->
msg_iovÀn
; ++i )

381 
tŸÆ_byãs
 +
msg
->
msg_iov
[
i
].
iov_Àn
;

382 
rc
 = -
EMSGSIZE
;

383 if–
tŸÆ_byãs
 < 0 )

384  -
EINVAL
;

386 
rc
 = 
	`oo_os_sock_gë
(
ni
, 
	`S_ID
(
us
), &
os_sock
);

387 if–
rc
 != 0 )

388  
rc
;

389 
	`ci_as£π
(
	`S_ISSOCK
(
os_sock
->
f_díåy
->
d_öode
->
i_mode
));

390 
sock
 = 
	`SOCKET_I
(
os_sock
->
f_díåy
->
d_öode
);

391 
	`ci_as£π
(
sock
);

393 
	`oo_msg_iov_öô
(&
kmsg
, 
READ
, 
msg
->
msg_iov
, msg->
msg_iovÀn
, 
tŸÆ_byãs
);

397 
kmsg
.
msg_«mñí
 = 0;

398 
kmsg
.
msg_«me
 = 
NULL
;

399 
kmsg
.
msg_c⁄åﬁÀn
 = 0;

400 
rc
 = 
	`sock_ªcvmsg
(
sock
, &
kmsg
, 
Êags
 | 
MSG_DONTWAIT
);

402 
	`oo_os_sock_°©us_bô_˛ór_h™dÀd
(&
us
->
s
, 
os_sock
, 
OO_OS_STATUS_RX
);

403 
	`oo_os_sock_put
(
os_sock
);

405 if–
rc
 >= 0 ) {

406 ++
us
->
°©s
.
n_rx_os
;

409 if–
rc
 =-
EAGAIN
 )

411 ++
us
->
°©s
.
n_rx_os_îr‹
;

414 if–
rc
 >= 0 ) {

415 
us
->
udpÊags
 &~
CI_UDPF_LAST_RECV_ON
;

416 if–! (
Êags
 & 
MSG_PEEK
) )

417 
us
->
udpÊags
 &=~ 
CI_UDPF_PEEK_FROM_OS
;

419 
us
->
udpÊags
 |
CI_UDPF_PEEK_FROM_OS
;

421 *
¥c
 = 
rc
;

423 
	}
}

427 
	$ci_udp_ªcvmsg_åy_os
(
ci_udp_ªcv_öfo
 *
röf
, * 
¥c
)

429 
ci_udp_°©e
 *
us
 = 
röf
->
a
->us;

430 
rc
;

432 if–!(
us
->
s
.
os_sock_°©us
 & 
OO_OS_STATUS_RX
) )

434 
rc
 = 
	`__ci_udp_ªcvmsg_åy_os
(
röf
->
a
->
ni
, 
us
,Ñöf->
msg
,Ñöf->
Êags
, 
¥c
);

435 #i‡
HAVE_MSG_FLAGS


439 if–
rc
 >= 0 )

440 
röf
->
msg_Êags
 =Ñöf->
msg
->msg_flags;

442  
rc
;

443 
	}
}

446 
	$ci_udp_ªcvmsg_socklocked_¶ow∑th
(
ci_udp_ªcv_öfo
* 
röf
,

447 
ci_iovec_±r
 *
piov
)

449 
rc
 = 0;

450 
ci_√tif
* 
ni
 = 
röf
->
a
->ni;

451 
ci_udp_°©e
* 
us
 = 
röf
->
a
->us;

453 if(
	`CI_UNLIKELY
–
ni
->
°©e
->
rxq_low
 ))

454 
	`ci_√tif_rxq_low_⁄_ªcv
(
ni
, &
us
->
s
,

458 #ifde‡
__KERNEL__


459 
	`ci_as£π_equÆ
(
röf
->
Êags
, 0);

462 #i‚de‡
__KERNEL__


463 if–
röf
->
Êags
 & 
MSG_ERRQUEUE_CHK
 ) {

464 if–
	`ci_udp_ªcv_q_nŸ_em±y
(&
us
->
time°amp_q
) ) {

465 
ci_ù_pkt_fmt
* 
pkt
;

466 
time•ec
 
ts
[3];

467 
cmsg_°©e
 cmsg_state;

470 
oo_sock_exãnded_îr
 
ì
;

471 
sockaddr_ö
 
of„ndî
;

472 } 
îrhdr
;

475 
	`ci_rmb
();

477 
pkt
 = 
	`ci_udp_ªcv_q_gë
(
ni
, &
us
->
time°amp_q
);

479 
cmsg_°©e
.
msg
 = 
röf
->msg;

480 
cmsg_°©e
.
cm
 = 
röf
->
msg
->
msg_c⁄åﬁ
;

481 
cmsg_°©e
.
cmsg_byãs_u£d
 = 0;

482 
cmsg_°©e
.
p_msg_Êags
 = &
röf
->
msg_Êags
;

483 
	`ci_iovec_±r_öô_nz
(
piov
, 
röf
->
msg
->
msg_iov
,Ñöf->msg->
msg_iovÀn
);

484 
	`mem£t
(
ts
, 0, (ts));

486 if–
us
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_RAW_HARDWARE
 ) {

487 
ts
[2].
tv_£c
 = 
pkt
->
tx_hw_°amp
.tv_sec;

488 
ts
[2].
tv_n£c
 = 
pkt
->
tx_hw_°amp
.tv_nsec;

490 if–(
us
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_SYS_HARDWARE
) &&

491 (
pkt
->
tx_hw_°amp
.
tv_n£c
 & 
CI_IP_PKT_HW_STAMP_FLAG_IN_SYNC
) ) {

492 
ts
[1].
tv_£c
 = 
pkt
->
tx_hw_°amp
.tv_sec;

493 
ts
[1].
tv_n£c
 = 
pkt
->
tx_hw_°amp
.tv_nsec;

495 
	`ci_put_cmsg
(&
cmsg_°©e
, 
SOL_SOCKET
, 
ONLOAD_SCM_TIMESTAMPING
,

496 (
ts
), &ts);

497 if–
us
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_OPT_TSONLY
 )

498 
rc
 = 
SLOWPATH_RET_ZERO
;

500 
rc
 = 
	`ci_udp_time°amp_q_pkt_to_iovec
(
ni
, 
pkt
, 
piov
);

502 
	`mem£t
(&
îrhdr
, 0, (errhdr));

503 
îrhdr
.
ì
.
ì_î∫o
 = 
ENOMSG
;

504 
îrhdr
.
ì
.
ì_‹igö
 = 
SO_EE_ORIGIN_TIMESTAMPING
;

505 
îrhdr
.
ì
.
ì_öfo
 = 0;

506 
îrhdr
.
ì
.
ì_d©a
 = 
pkt
->
ts_key
;

507 if–
us
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_OPT_CMSG
 ) {

508 
îrhdr
.
of„ndî
.
sö_Ámûy
 = 
AF_INET
;

509 
îrhdr
.
of„ndî
.
sö_addr
.
s_addr
 = 
	`oo_ù_hdr
(
pkt
)->
ù_ßddr_be32
;

512 
	`ci_rmb
();

513 
	`ci_udp_ªcv_q_dñivî
(
ni
, &
us
->
time°amp_q
, 
pkt
);

515 
	`ci_put_cmsg
(&
cmsg_°©e
, 
SOL_IP
, 
IP_RECVERR
, (
îrhdr
), &errhdr);

517 
	`ci_ù_cmsg_föish
(&
cmsg_°©e
);

518 
röf
->
msg_Êags
 |
MSG_ERRQUEUE_CHK
;

519  
rc
;

522 
rc
 = 
	`oo_os_sock_ªcvmsg
(
ni
, 
	`SC_SP
(&
us
->
s
), 
röf
->
msg
,Ñöf->
Êags
);

523 if–
rc
 < 0 ) {

524 
	`ci_as£π
(-
rc
 =
î∫o
);

528 
röf
->
msg_Êags
 =Ñöf->
msg
->msg_flags;

529  
rc
;

533 if–(
rc
 = 
	`ci_gë_so_îr‹
(&
us
->
s
)) != 0 ) {

534 
	`CI_SET_ERROR
(
rc
,Ñc);

535  
rc
;

537 if–
röf
->
msg
->
msg_iovÀn
 > 0 &&Ñöf->msg->
msg_iov
 =
NULL
 ) {

538 
	`CI_SET_ERROR
(
rc
, 
EFAULT
);

539  
rc
;

541 #i‡
MSG_OOB_CHK


542 if–
röf
->
Êags
 & 
MSG_OOB_CHK
 ) {

543 
	`CI_SET_ERROR
(
rc
, 
EOPNOTSUPP
);

544  
rc
;

547 #i‡
CI_CFG_POSIX_RECV


548 if–! 
	`udp_Õ‹t_be16
(
us
)) {

549 
	`LOG_UV
(
	`log
("%s: -1 (ENOTCONN)", 
__FUNCTION__
));

550 
	`CI_SET_ERROR
(
rc
, 
ENOTCONN
);

551  
rc
;

554 if–
röf
->
msg
->
msg_iovÀn
 == 0 ) {

558 
	`CI_IOVEC_LEN
(&
piov
->
io
Ëpiov->
iovÀn
 = 0;

559  
SLOWPATH_RET_IOVLEN_INITED
;

562 
	}
}

565 
	sªcvmsg_•ö°©e
 {

566 
ci_uöt64
 
	m°¨t_‰c
;

567 
ci_uöt64
 
	mscheduÀ_‰c
;

568 
ci_uöt64
 
	mmax_•ö
;

569 
	mdo_•ö
;

570 
	m•ö_limô_by_so
;

571 
ci_uöt32
 
	mtimeout
;

572 #i‚de‡
__KERNEL__


573 
côp_sig«l_öfo
* 
	msi
;

579 
	$ci_udp_ªcvmsg_block
(
ci_udp_iomsg_¨gs
* 
a
, 
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

580 
timeout
)

582 
rc
;

584 #i‚de‡
__KERNEL__


586 
côp_sig«l_öfo
* 
si
;

587 
pﬁlfd
 
pfd
;

588 #i‡!
CI_CFG_CITP_INSIDE_LIB_IS_FLAG


589 
öside_lib
;

591 
pfd
.
fd
 = 
a
->fd;

592 
pfd
.
evíts
 = 
POLLIN
;

594 if–
timeout
 == 0 )

595 
timeout
 = -1;

600 
si
 = 
	`côp_sig«l_gë_•ecific_öôed
();

601 
c⁄töue_to_block
:

602 #i‡!
CI_CFG_CITP_INSIDE_LIB_IS_FLAG


603 
öside_lib
 = 
si
->inside_lib;

604 
	`ci_as£π_gt
(
öside_lib
, 0);

606 
si
->
öside_lib
 = 0;

607 
	`ci_compûî_b¨rõr
();

608 if(
	`CI_UNLIKELY
–
si
->
aÊags
 & 
OO_SIGNAL_FLAG_HAVE_PENDING
 ))

609 
	`côp_sig«l_run_≥ndög
(
si
);

611 
rc
 = 
	`ci_sys_pﬁl
(&
pfd
, 1, 
timeout
);

613 #i‡
CI_CFG_CITP_INSIDE_LIB_IS_FLAG


614 
si
->
öside_lib
 = 1;

616 
si
->
öside_lib
 = inside_lib;

619 if–
rc
 > 0 )

621 if–
rc
 == 0 )

622 
rc
 = -
EAGAIN
;

623 if–
î∫o
 =
EINTR
 && (
si
->
aÊags
 & 
OO_SIGNAL_FLAG_NEED_RESTART
) &&

624 
timeout
 == -1 ) {

626 
c⁄töue_to_block
;

628 
rc
 = -
î∫o
;

630  
rc
;

633 #ifde‡
__unix__


635 
mask
;

636 
s64
 
t
;

638 if–
timeout
 == 0 )

639 
t
 = -1;

641 
t
 = 
	`m£cs_to_jiffõs
(
timeout
);

643 
mask
 = 
POLLIN
;

644 
rc
 = 
	`eÁb_t˝_hñ≥r_pﬁl_udp
(
a
->
fûp
, &
mask
, &
t
);

645 if–
rc
 == 0 ) {

646 if–
mask
 ) {

650 
rc
 = -
EAGAIN
;

652 if–
rc
 =-
ERESTARTSYS
 && 
us
->
s
.
so
.
rcvtimeo_m£c
 )

653 
rc
 = -
EINTR
;

656  
rc
;

658 
	}
}

661 
ci_ölöe
 

662 
	$ci_udp_ªcvmsg_socklocked_•ö
(
ci_udp_iomsg_¨gs
* 
a
,

663 
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

664 
ªcvmsg_•ö°©e
* 
•ö_°©e
)

666 
ci_uöt64
 
now_‰c
;

667 
ötf_i
;

669 
	`ci_‰c64
(&
now_‰c
);

670 if–
now_‰c
 - 
•ö_°©e
->
°¨t_‰c
 < spö_°©e->
max_•ö
 ) {

671 #i‡
CI_CFG_SPIN_STATS


672 
ni
->
°©e
->
°©s
.
•ö_udp_ªcv
++;

674 if–
	`ci_√tif_may_pﬁl
(
ni
) ) {

675 
	`OO_STACK_FOR_EACH_INTF_I
(
ni
, 
ötf_i
)

676 if–
	`ci_√tif_ötf_has_evít
(
ni
, 
ötf_i
Ë&& 
	`ci_√tif_åylock
(ni) ) {

677 
	`ci_√tif_pﬁl_ötf_Á°
(
ni
, 
ötf_i
, 
now_‰c
);

678 
	`ci_√tif_u∆ock
(
ni
);

679 if–
	`ci_udp_ªcv_q_nŸ_em±y
(&
us
->
ªcv_q
) )

682 if–
ni
->
°©e
->
pﬁl_w‹k_out°™dög
 ||

683 
	`ci_√tif_√ed_timî_¥ime
(
ni
, 
now_‰c
) )

684 if–
	`ci_√tif_åylock
(
ni
) ) {

685 
	`ci_√tif_pﬁl
(
ni
);

686 
	`ci_√tif_u∆ock
(
ni
);

688 if–! 
ni
->
°©e
->
is_•ö√r
 )

689 
ni
->
°©e
->
is_•ö√r
 = 1;

691  
	`OO_SPINLOOP_PAUSE_CHECK_SIGNALS
(
ni
, 
now_‰c
,

692 &
•ö_°©e
->
scheduÀ_‰c
,

693 
us
->
s
.
so
.
rcvtimeo_m£c
,

694 &
us
->
s
.
b
, 
•ö_°©e
->
si
);

697 if–
•ö_°©e
->
•ö_limô_by_so
 ) {

698 ++
us
->
°©s
.
n_rx_ógaö
;

699  -
EAGAIN
;

702 if–
•ö_°©e
->
timeout
 ) {

703 
ci_uöt32
 
•ö_ms
 = 
	`NI_OPTS
(
ni
).
•ö_u£c
 >> 10;

704 if–
•ö_ms
 < 
•ö_°©e
->
timeout
 )

705 
•ö_°©e
->
timeout
 -
•ö_ms
;

707 ++
us
->
°©s
.
n_rx_ógaö
;

708  -
EAGAIN
;

711 
•ö_°©e
->
do_•ö
 = 0;

714 
ni
->
°©e
->
is_•ö√r
 = 0;

716 
	}
}

720 
	$ci_udp_ªcvmsg_comm⁄
(
ci_udp_ªcv_öfo
 *
röf
)

722 
ci_√tif
* 
ni
 = 
röf
->
a
->ni;

723 
ci_udp_°©e
* 
us
 = 
röf
->
a
->us;

724 
have_pﬁÀd
 = 0;

725 
ci_iovec_±r
 
piov
 = {
NULL
,0, {NULL, 0}};

726 
rc
 = 0, 
¶ow
;

727 
ªcvmsg_•ö°©e
 
•ö_°©e
 = {0};

729 #i‚de‡
__KERNEL__


730 
•ö_°©e
.
do_•ö
 = -1;

731 
•ö_°©e
.
si
 = 
	`côp_sig«l_gë_•ecific_öôed
();

733 
•ö_°©e
.
timeout
 = 
us
->
s
.
so
.
rcvtimeo_m£c
;

736 if–!
röf
->
sock_locked
 ) {

737 
rc
 = 
	`ci_sock_lock
(
ni
, &
us
->
s
.
b
);

738 if(
	`CI_UNLIKELY
–
rc
 != 0 )) {

739 
	`CI_SET_ERROR
(
rc
, -rc);

740  
rc
;

742 
röf
->
sock_locked
 = 1;

745 #i‡
HAVE_MSG_FLAGS


746 
röf
->
msg_Êags
 = 0;

749 
¶ow
 = ((
röf
->
Êags
 & (
MSG_OOB_CHK
 | 
MSG_ERRQUEUE_CHK
)) |

750 (
röf
->
msg
->
msg_iovÀn
 == 0 ) |

751 (
röf
->
msg
->
msg_iov
 =
NULL
 ) |

752 (
ni
->
°©e
->
rxq_low
 ) |

753 #i‡
CI_CFG_POSIX_RECV


754 (
	`udp_Õ‹t_be16
(
us
) == 0 ) |

756 (
us
->
s
.
so_îr‹
 ));

757 if–
¶ow
 )

758 
¶ow_∑th
;

760 
back_to_Á°_∑th
:

761 
	`ci_iovec_±r_öô_nz
(&
piov
, 
röf
->
msg
->
msg_iov
,Ñöf->msg->
msg_iovÀn
);

763 
piov_öôed
:

764 if(
	`CI_UNLIKELY
–
us
->
udpÊags
 & 
CI_UDPF_PEEK_FROM_OS
 ))

765 
≥ek_‰om_os
;

767 
check_ul_ªcv_q
:

768 
rc
 = 
	`ci_udp_ªcvmsg_gë
(
röf
, &
piov
);

769 if–
rc
 >= 0 )

770 
out
;

774 if–! 
have_pﬁÀd
 ) {

775 
have_pﬁÀd
 = 1;

776 
	`ci_‰c64
(&
•ö_°©e
.
°¨t_‰c
);

778 if–
	`ci_√tif_may_pﬁl
(
ni
) &&

779 
	`ci_√tif_√ed_pﬁl_•önög
(
ni
, 
•ö_°©e
.
°¨t_‰c
) &&

780 
	`ci_√tif_åylock
(
ni
) ) {

781 
™y_evs
 = 
	`ci_√tif_pﬁl_n
(
ni
, 
	`NI_OPTS
“i).
evs_≥r_pﬁl
);

782 if–
	`ci_udp_ªcv_q_is_em±y
(&
us
->
ªcv_q
Ë&& 
™y_evs
 )

783 
	`ci_√tif_pﬁl
(
ni
);

784 
	`ci_√tif_u∆ock
(
ni
);

785 if–
	`ci_udp_ªcv_q_nŸ_em±y
(&
us
->
ªcv_q
) )

786 
check_ul_ªcv_q
;

790 if(
	`CI_UNLIKELY
–(
rc
 = 
	`UDP_RX_ERRNO
(
us
)) )) {

791 
	`CI_SET_ERROR
(
rc
,Ñc);

792 
us
->
s
.
rx_î∫o
 = us->s.rx_errno & 0xf0000000;

793 
out
;

795 if(
	`CI_UNLIKELY
–
us
->
s
.
so_îr‹
 )) {

796 
rc1
 = 
	`ci_gë_so_îr‹
(&
us
->
s
);

797 if–
rc1
 != 0 ) {

798 
	`CI_SET_ERROR
(
rc
, 
rc1
);

799 
out
;

804 if–
	`ci_udp_ªcvmsg_åy_os
(
röf
, &
rc
) )

805 
out
;

807 if–((
röf
->
Êags
 | 
us
->
s
.
b
.
sb_aÊags
Ë& 
MSG_DONTWAIT
)) {

809 
	`CI_SET_ERROR
(
rc
, 
EAGAIN
);

810 ++
us
->
°©s
.
n_rx_ógaö
;

811 
out
;

813 i‡(
	`UDP_IS_SHUT_RD
(
us
)) {

815 
rc
 = 0;

816 
out
;

821 #i‚de‡
__KERNEL__


823 if–
•ö_°©e
.
do_•ö
 == -1 ) {

824 
•ö_°©e
.
do_•ö
 =

825 
	`oo_≥r_thªad_gë
()->
•ö°©e
 & (1 << 
ONLOAD_SPIN_UDP_RECV
);

827 if–
•ö_°©e
.
do_•ö
 ) {

828 
•ö_°©e
.
scheduÀ_‰c
 = spö_°©e.
°¨t_‰c
;

829 
•ö_°©e
.
max_•ö
 = 
us
->
s
.
b
.
•ö_cy˛es
;

830 if–
us
->
s
.
so
.
rcvtimeo_m£c
 ) {

831 
ci_uöt64
 
max_so_•ö
 = (ci_uöt64)
us
->
s
.
so
.
rcvtimeo_m£c
 *

832 
	`IPTIMER_STATE
(
ni
)->
khz
;

833 if–
max_so_•ö
 <
•ö_°©e
.
max_•ö
 ) {

834 
•ö_°©e
.
max_•ö
 = 
max_so_•ö
;

835 
•ö_°©e
.
•ö_limô_by_so
 = 1;

841 if–
•ö_°©e
.
do_•ö
 ) {

842 
rc
 = 
	`ci_udp_ªcvmsg_socklocked_•ö
(
röf
->
a
, 
ni
, 
us
, &
•ö_°©e
);

843 if–
rc
 == 0 )

844 
check_ul_ªcv_q
;

845 if–
rc
 < 0 ) {

846 
	`CI_SET_ERROR
(
rc
, -rc);

847 
out
;

852 
	`ci_sock_u∆ock
(
ni
, &
us
->
s
.
b
);

853 
röf
->
sock_locked
 = 0;

854 
rc
 = 
	`ci_udp_ªcvmsg_block
(
röf
->
a
, 
ni
, 
us
, 
•ö_°©e
.
timeout
);

855 if–
rc
 == 0 ) {

856 if–!
röf
->
sock_locked
 )

857 
rc
 = 
	`ci_sock_lock
(
ni
, &
us
->
s
.
b
);

859 if–
rc
 == 0 ) {

860 
röf
->
sock_locked
 = 1;

861 
check_ul_ªcv_q
;

863 
	`CI_SET_ERROR
(
rc
, -rc);

865 
out
:

866 
ni
->
°©e
->
is_•ö√r
 = 0;

867  
rc
;

869 
¶ow_∑th
:

870 
rc
 = 
	`ci_udp_ªcvmsg_socklocked_¶ow∑th
(
röf
, &
piov
);

871 if–
rc
 == 0 )

872 
back_to_Á°_∑th
;

873 if–
rc
 =
SLOWPATH_RET_IOVLEN_INITED
 )

874 
piov_öôed
;

875 if–
rc
 =
SLOWPATH_RET_ZERO
 ) {

876 
rc
 = 0;

877 
out
;

880 
out
;

882 
≥ek_‰om_os
:

883 if–
	`ci_udp_ªcvmsg_åy_os
(
röf
, &
rc
) )

884 
out
;

886 
check_ul_ªcv_q
;

887 
	}
}

890 
	$ci_udp_ªcvmsg
(
ci_udp_iomsg_¨gs
 *
a
, 
ci_msghdr
* 
msg
, 
Êags
)

892 
ci_√tif
* 
ni
 = 
a
->ni;

893 
ci_udp_°©e
* 
us
 = 
a
->us;

894 
rc
;

895 
ci_udp_ªcv_öfo
 
röf
;

897 
röf
.
a
 =á;

898 
röf
.
msg
 = msg;

899 
röf
.
sock_locked
 = 0;

900 
röf
.
Êags
 = flags;

902 
rc
 = 
	`ci_udp_ªcvmsg_comm⁄
(&
röf
);

903 if–
röf
.
sock_locked
 )

904 
	`ci_sock_u∆ock
(
ni
, &
us
->
s
.
b
);

905 #i‡
HAVE_MSG_FLAGS


906 if–
rc
 >= 0 )

907 
msg
->
msg_Êags
 = 
röf
.msg_flags;

910  
rc
;

911 
	}
}

914 #i‡
CI_CFG_RECVMMSG
 && !
deföed
(
__KERNEL__
)

915 
	$ci_udp_ªcvmmsg
(
ci_udp_iomsg_¨gs
 *
a
, 
mmsghdr
* 
mmsg
,

916 
vÀn
, 
Êags
,

917 c⁄° 
time•ec
* 
timeout
)

919 
ci_√tif
* 
ni
 = 
a
->ni;

920 
ci_udp_°©e
* 
us
 = 
a
->us;

921 
rc
, 
i
;

922 
timevÆ
 
tv_bef‹e
;

923 
timeout_m£c
 = -1;

924 
ci_udp_ªcv_öfo
 
röf
;

926 
röf
.
a
 =á;

927 
röf
.
sock_locked
 = 0;

928 
röf
.
Êags
 = flags;

930 if–
timeout
 ) {

931 
timeout_m£c
 = 
timeout
->
tv_£c
 * 1000 +Åimeout->
tv_n£c
 / 1000000;

932 
	`gëtimeofday
(&
tv_bef‹e
, 
NULL
);

935 
i
 = 0;

936  
i
 < 
vÀn
 ) {

937 
röf
.
msg
 = &
mmsg
[
i
].
msg_hdr
;

938 
rc
 = 
	`ci_udp_ªcvmsg_comm⁄
(&
röf
);

939 if–
rc
 >= 0 ) {

940 
mmsg
[
i
].
msg_Àn
 = 
rc
;

941 #i‡
HAVE_MSG_FLAGS


942 
mmsg
[
i
].
msg_hdr
.
msg_Êags
 = 
röf
.msg_flags;

946 if–
i
 !0 && 
î∫o
 !
EAGAIN
 )

947 
us
->
s
.
so_îr‹
 = 
î∫o
;

948 if–
röf
.
sock_locked
 )

949 
	`ci_sock_u∆ock
(
ni
, &
us
->
s
.
b
);

950 if–
i
 != 0 )

951  
i
;

953  
rc
;

956 if––
röf
.
Êags
 & 
MSG_DONTWAIT
 ) && 
rc
 == 0 )

959 if–
röf
.
Êags
 & 
MSG_WAITFORONE
 )

960 
röf
.
Êags
 |
MSG_DONTWAIT
;

962 ++
i
;

964 if–
timeout_m£c
 >= 0 ) {

965 
timevÆ
 
tv_a·î
, 
tv_sub
;

966 
	`gëtimeofday
(&
tv_a·î
, 
NULL
);

967 
	`timîsub
(&
tv_a·î
, &
tv_bef‹e
, &
tv_sub
);

968 
tv_bef‹e
 = 
tv_a·î
;

969 
timeout_m£c
 -
tv_sub
.
tv_£c
 * 1000 +Åv_sub.
tv_u£c
 / 1000;

970 if–
timeout_m£c
 < 0 )

975 if–
röf
.
sock_locked
 )

976 
	`ci_sock_u∆ock
(
ni
, &
us
->
s
.
b
);

978  
i
;

979 
	}
}

983 #i‚de‡
__KERNEL__


985 
	$ci_udp_zc_ªcv_‰om_os
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

986 
⁄lﬂd_zc_ªcv_¨gs
* 
¨gs
,

987 
⁄lﬂd_zc_ˇŒback_rc
* 
cb_rc
)

989 
	#ZC_BUFFERS_FOR_64K_DATAGRAM
 \

990 ((0x10000 / (
CI_CFG_PKT_BUF_SIZE
 - \

991 
	`CI_MEMBER_OFFSET
(
ci_ù_pkt_fmt
, 
dma_°¨t
))Ë+ 1)

	)

993 
rc
, 
i
, 
cb_Êags
;

994 
msghdr
 
msg
;

995 
iovec
 
iov
[
ZC_BUFFERS_FOR_64K_DATAGRAM
];

996 
⁄lﬂd_zc_iovec
 
zc_iov
[
ZC_BUFFERS_FOR_64K_DATAGRAM
];

997 
oo_pkt_p
 
pkt_p
, 
fú°_pkt_p
;

998 
ci_ù_pkt_fmt
* 
pkt
;

1000 if–
us
->
zc_kî√l_d©agøm_cou¡
 < 
ZC_BUFFERS_FOR_64K_DATAGRAM
) {

1004 
	`ci_√tif_lock
(
ni
);

1005  
us
->
zc_kî√l_d©agøm_cou¡
 < 
ZC_BUFFERS_FOR_64K_DATAGRAM
 ) {

1006 
pkt
 = 
	`ci_√tif_pkt_Æloc
(
ni
);

1007 if–!
pkt
 ) {

1008 
	`ci_√tif_u∆ock
(
ni
);

1009  -
ENOBUFS
;

1011 
pkt
->
‰ag_√xt
 = 
us
->
zc_kî√l_d©agøm
;

1012 
us
->
zc_kî√l_d©agøm
 = 
	`OO_PKT_P
(
pkt
);

1013 ++
us
->
zc_kî√l_d©agøm_cou¡
;

1015 
	`ci_√tif_u∆ock
(
ni
);

1018 
pkt_p
 = 
us
->
zc_kî√l_d©agøm
;

1019 
i
 = 0;

1020  
	`OO_PP_NOT_NULL
(
pkt_p
) ) {

1021 #i‚de‡
NDEBUG


1022 
	`ci_as£π_…
(
i
, 
us
->
zc_kî√l_d©agøm_cou¡
);

1024 
pkt
 = 
	`PKT_CHK_NNL
(
ni
, 
pkt_p
);

1025 
iov
[
i
].
iov_ba£
 = 
pkt
->
dma_°¨t
;

1026 
iov
[
i
].
iov_Àn
 = (
CI_CFG_PKT_BUF_SIZE
 -

1027 ((*)
pkt
->
dma_°¨t
 - (*)pkt));

1028 ++
i
;

1029 
pkt_p
 = 
pkt
->
‰ag_√xt
;

1032 
msg
.
msg_iov
 = 
iov
;

1033 
msg
.
msg_iovÀn
 = 
i
;

1034 
msg
.
msg_c⁄åﬁ
 = 
¨gs
->msg.
msghdr
.msg_control;

1035 
msg
.
msg_c⁄åﬁÀn
 = 
¨gs
->msg.
msghdr
.msg_controllen;

1036 
msg
.
msg_«me
 = 
¨gs
->msg.
msghdr
.msg_name;

1037 
msg
.
msg_«mñí
 = 
¨gs
->msg.
msghdr
.msg_namelen;

1038 
msg
.
msg_Êags
 = 0;

1040 
	`ci_as£π
(
us
->
s
.
os_sock_°©us
 & 
OO_OS_STATUS_RX
);

1041 
i
 = 
	`__ci_udp_ªcvmsg_åy_os
(
ni
, 
us
, &
msg
,

1042 
¨gs
->
Êags
 & 
ONLOAD_ZC_RECV_FLAGS_PTHRU_MASK
,

1043 &
rc
);

1044 
	`ci_as£π_equÆ
(
i
, 1);

1045 
	`ci_as£π_gt
(
rc
, 0);

1052 
i
 = 0;

1053 
pkt_p
 = 
us
->
zc_kî√l_d©agøm
;

1054  
rc
 > 0 ) {

1055 #i‚de‡
NDEBUG


1056 
	`ci_as£π_…
(
i
, 
us
->
zc_kî√l_d©agøm_cou¡
);

1058 
pkt
 = 
	`PKT_CHK_NNL
(
ni
, 
pkt_p
);

1059 
zc_iov
[
i
].
iov_Àn
 = 
rc
 > 
iov
[i].iov_len ? iov[i].iov_len :Ñc;

1060 
zc_iov
[
i
].
iov_ba£
 = 
iov
[i].iov_base;

1061 
zc_iov
[
i
].
buf
 = (
⁄lﬂd_zc_h™dÀ
)
pkt
;

1063 
rc
 -
zc_iov
[
i
].
iov_Àn
;

1064 ++
i
;

1065 
pkt_p
 = 
pkt
->
‰ag_√xt
;

1071 
pkt
->
‰ag_√xt
 = 
OO_PP_NULL
;

1076 
fú°_pkt_p
 = 
us
->
zc_kî√l_d©agøm
;

1077 
us
->
zc_kî√l_d©agøm
 = 
pkt_p
;

1078 #i‚de‡
NDEBUG


1079 
	`ci_as£π_ge
(
us
->
zc_kî√l_d©agøm_cou¡
, 
i
);

1081 
us
->
zc_kî√l_d©agøm_cou¡
 -
i
;

1083 
¨gs
->
msg
.
iov
 = 
zc_iov
;

1084 
¨gs
->
msg
.
msghdr
.
msg_iovÀn
 = 
i
;

1085 
¨gs
->
msg
.
msghdr
.
msg_c⁄åﬁ
 = msg.msg_control;

1086 
¨gs
->
msg
.
msghdr
.
msg_c⁄åﬁÀn
 = msg.msg_controllen;

1087 
¨gs
->
msg
.
msghdr
.
msg_«me
 = msg.msg_name;

1088 
¨gs
->
msg
.
msghdr
.
msg_«mñí
 = msg.msg_namelen;

1089 
¨gs
->
msg
.
msghdr
.
msg_Êags
 = msg.msg_flags;

1091 
cb_Êags
 = 0;

1092 if–(
	`ci_udp_ªcv_q_pkts
(&
us
->
ªcv_q
) == 0) &&

1093 (
us
->
s
.
os_sock_°©us
 & 
OO_OS_STATUS_RX
) == 0 )

1094 
cb_Êags
 |
ONLOAD_ZC_END_OF_BURST
;

1100 *
cb_rc
 = (*
¨gs
->
cb
)◊rgs, 
cb_Êags
);

1102 if–!((*
cb_rc
Ë& 
ONLOAD_ZC_KEEP
) ) {

1104 
pkt
->
‰ag_√xt
 = 
us
->
zc_kî√l_d©agøm
;

1105 
us
->
zc_kî√l_d©agøm
 = 
fú°_pkt_p
;

1106 
us
->
zc_kî√l_d©agøm_cou¡
 +
i
;

1109 if–
cb_Êags
 & 
ONLOAD_ZC_END_OF_BURST
 ) {

1115 (*
cb_rc
Ë|
ONLOAD_ZC_TERMINATE
;

1116 
	`ci_as£π
(((*
cb_rc
Ë& 
ONLOAD_ZC_CONTINUE
) == 0);

1120 
	}
}

1123 
	$ci_udp_zc_ªcv
(
ci_udp_iomsg_¨gs
* 
a
, 
⁄lﬂd_zc_ªcv_¨gs
* 
¨gs
)

1125 
rc
, 
d⁄e_big_pﬁl
 = 0, 
d⁄e_kî√l_pﬁl
 = 0, 
d⁄e_ˇŒback
 = 0;

1126 
ci_√tif
* 
ni
 = 
a
->ni;

1127 
ci_udp_°©e
* 
us
 = 
a
->us;

1128 
⁄lﬂd_zc_ˇŒback_rc
 
cb_rc
 = 
ONLOAD_ZC_CONTINUE
;

1129 
ªcvmsg_•ö°©e
 
•ö_°©e
 = {0};

1130 
size_t
 
suµlõd_c⁄åﬁÀn
 = 
¨gs
->
msg
.
msghdr
.
msg_c⁄åﬁÀn
;

1131 * 
suµlõd_c⁄åﬁ
 = 
¨gs
->
msg
.
msghdr
.
msg_c⁄åﬁ
;

1132 
sockÀn_t
 
suµlõd_«mñí
 = 
¨gs
->
msg
.
msghdr
.
msg_«mñí
;

1133 * 
suµlõd_«me
 = 
¨gs
->
msg
.
msghdr
.
msg_«me
;

1134 
⁄lﬂd_zc_iovec
 
iovec
[
CI_UDP_ZC_IOVEC_MAX
];

1135 
cb_Êags
;

1137 
•ö_°©e
.
do_•ö
 = -1;

1138 
•ö_°©e
.
si
 = 
	`côp_sig«l_gë_•ecific_öôed
();

1139 
•ö_°©e
.
timeout
 = 
us
->
s
.
so
.
rcvtimeo_m£c
;

1141 
rc
 = 
	`ci_sock_lock
(
ni
, &
us
->
s
.
b
);

1142 if(
	`CI_UNLIKELY
–
rc
 != 0 ))

1143  
rc
;

1145 if–
	`CI_UNLIKELY
(
us
->
s
.
so_îr‹
) ) {

1146 if–(
rc
 = 
	`ci_gë_so_îr‹
(&
us
->
s
)) != 0 )

1147  -
rc
;

1150 if–
	`ci_udp_ªcv_q_is_em±y
(&
us
->
ªcv_q
) )

1151 
em±y
;

1154 
nŸ_em±y
:

1155 
¨gs
->
msg
.
iov
 = 
iovec
;

1156 
cb_Êags
 = 0;

1158  
	`ci_udp_ªcv_q_nŸ_em±y
(&
us
->
ªcv_q
) ) {

1159 
ci_ù_pkt_fmt
* 
pkt
;

1160 
	`ci_rmb
();

1162 
pkt
 = 
	`ci_udp_ªcv_q_gë
(
ni
, &
us
->
ªcv_q
);

1164 
¨gs
->
msg
.
msghdr
.
msg_«me
 = 
suµlõd_«me
;

1165 
¨gs
->
msg
.
msghdr
.
msg_«mñí
 = 
suµlõd_«mñí
;

1166 
¨gs
->
msg
.
msghdr
.
msg_Êags
 = 0;

1168 if–
	`CI_UNLIKELY
(
us
->
s
.
cmsg_Êags
 != 0 ) ) {

1169 
¨gs
->
msg
.
msghdr
.
msg_c⁄åﬁÀn
 = 
suµlõd_c⁄åﬁÀn
;

1170 
¨gs
->
msg
.
msghdr
.
msg_c⁄åﬁ
 = 
suµlõd_c⁄åﬁ
;

1171 
	`ci_ù_cmsg_ªcv
(
ni
, 
us
, 
pkt
, &
¨gs
->
msg
.
msghdr
, 0,

1172 &
¨gs
->
msg
.
msghdr
.
msg_Êags
);

1175 
¨gs
->
msg
.
msghdr
.
msg_c⁄åﬁÀn
 = 0;

1177 
	`ci_udp_ªcvmsg_fûl_msghdr
(
ni
, &
¨gs
->
msg
.
msghdr
, 
pkt
,

1178 &
us
->
s
);

1180 
	`ci_udp_pkt_to_zc_msg
(
ni
, 
pkt
, &
¨gs
->
msg
);

1182 
us
->
°amp
 = 
pkt
->
pf
.
udp
.
rx_°amp
;

1183 
us
->
udpÊags
 |
CI_UDPF_LAST_RECV_ON
;

1185 
cb_Êags
 = 
	`CI_IP_IS_MULTICAST
(
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
) ?

1186 
ONLOAD_ZC_MSG_SHARED
 : 0;

1187 if–(
	`ci_udp_ªcv_q_pkts
(&
us
->
ªcv_q
) == 1) &&

1188 ((
us
->
s
.
os_sock_°©us
 & 
OO_OS_STATUS_RX
) == 0) )

1189 
cb_Êags
 |
ONLOAD_ZC_END_OF_BURST
;

1195 
pkt
->
rx_Êags
 |
CI_PKT_RX_FLAG_UDP_KEEP
;

1197 
cb_rc
 = (*
¨gs
->
cb
)◊rgs, 
cb_Êags
);

1199 if–! (
cb_rc
 & 
ONLOAD_ZC_KEEP
) ) {

1201 
pkt
->
rx_Êags
 &=~ 
CI_PKT_RX_FLAG_UDP_KEEP
;

1204 
	`ci_udp_ªcv_q_dñivî
(
ni
, &
us
->
ªcv_q
, 
pkt
);

1206 
d⁄e_ˇŒback
 = 1;

1208 if–
cb_rc
 & 
ONLOAD_ZC_TERMINATE
 )

1209 
out
;

1212 if–
d⁄e_big_pﬁl
 && 
d⁄e_kî√l_pﬁl
 &&

1213 (
cb_Êags
 & 
ONLOAD_ZC_END_OF_BURST
) )

1214 
out
;

1216 
em±y
;

1219 
out
:

1220 
ni
->
°©e
->
is_•ö√r
 = 0;

1221 
	`ci_sock_u∆ock
(
ni
, &
us
->
s
.
b
);

1223  
rc
;

1225 
em±y
:

1226 if–
•ö_°©e
.
°¨t_‰c
 == 0 )

1227 
	`ci_‰c64
(&
•ö_°©e
.
°¨t_‰c
);

1229 if–
	`ci_√tif_may_pﬁl
(
ni
) &&

1230 
	`ci_√tif_√ed_pﬁl_•önög
(
ni
, 
•ö_°©e
.
°¨t_‰c
) &&

1231 
	`ci_√tif_åylock
(
ni
) ) {

1233 if–
	`ci_√tif_pﬁl_n
(
ni
, 
	`NI_OPTS
“i).
evs_≥r_pﬁl
) <

1234 
	`NI_OPTS
(
ni
).
evs_≥r_pﬁl
 )

1235 
d⁄e_big_pﬁl
 = 1;

1238 if–!
d⁄e_big_pﬁl
 && 
	`ci_udp_ªcv_q_is_em±y
(&
us
->
ªcv_q
) ) {

1239 
d⁄e_big_pﬁl
 = 1;

1240 
	`ci_√tif_pﬁl
(
ni
);

1243 
	`ci_√tif_u∆ock
(
ni
);

1245 if–
	`ci_udp_ªcv_q_nŸ_em±y
(&
us
->
ªcv_q
) )

1246 
nŸ_em±y
;

1249 
d⁄e_big_pﬁl
 = 1;

1251 
•ö_lo›
:

1252 if(
	`CI_UNLIKELY
–(
rc
 = 
	`UDP_RX_ERRNO
(
us
)) )) {

1253 
rc
 = -rc;

1254 
us
->
s
.
rx_î∫o
 = us->s.rx_errno & 0xf0000000;

1255 
out
;

1257 if(
	`CI_UNLIKELY
–
us
->
s
.
so_îr‹
 )) {

1258 
rc1
 = 
	`ci_gë_so_îr‹
(&
us
->
s
);

1259 if–
rc1
 != 0 ) {

1260 
rc
 = -
rc1
;

1261 
out
;

1265 
d⁄e_kî√l_pﬁl
 = 1;

1266 if–
us
->
s
.
os_sock_°©us
 & 
OO_OS_STATUS_RX
 ) {

1267 if–
¨gs
->
Êags
 & 
ONLOAD_MSG_RECV_OS_INLINE
 ) {

1270 
¨gs
->
msg
.
msghdr
.
msg_c⁄åﬁÀn
 = 
suµlõd_c⁄åﬁÀn
;

1271 
¨gs
->
msg
.
msghdr
.
msg_c⁄åﬁ
 = 
suµlõd_c⁄åﬁ
;

1272 
¨gs
->
msg
.
msghdr
.
msg_«me
 = 
suµlõd_«me
;

1273 
¨gs
->
msg
.
msghdr
.
msg_«mñí
 = 
suµlõd_«mñí
;

1274 
rc
 = 
	`ci_udp_zc_ªcv_‰om_os
(
ni
, 
us
, 
¨gs
, &
cb_rc
);

1275 
d⁄e_ˇŒback
 = 1;

1276 if–
rc
 !0 || 
cb_rc
 & 
ONLOAD_ZC_TERMINATE
 ) {

1277 
	`ci_as£π
(
d⁄e_big_pﬁl
);

1278 
out
;

1280 if–
	`ci_udp_ªcv_q_nŸ_em±y
(&
us
->
ªcv_q
) )

1281 
nŸ_em±y
;

1282 }  
us
->
s
.
os_sock_°©us
 & 
OO_OS_STATUS_RX
 );

1286 
rc
 = -
ENOTEMPTY
;

1287 
out
;

1295 if–
d⁄e_ˇŒback
 ) {

1296 
	`ci_as£π
(
d⁄e_big_pﬁl
);

1297 
	`ci_as£π
(
d⁄e_kî√l_pﬁl
);

1298 
rc
 = 0;

1299 
out
;

1302 if–((
¨gs
->
Êags
 | 
us
->
s
.
b
.
sb_aÊags
Ë& 
MSG_DONTWAIT
)) {

1304 
rc
 = -
EAGAIN
;

1305 ++
us
->
°©s
.
n_rx_ógaö
;

1306 
out
;

1308 i‡(
	`UDP_IS_SHUT_RD
(
us
)) {

1310 
rc
 = 0;

1311 
out
;

1317 if–
•ö_°©e
.
do_•ö
 == -1 ) {

1318 
•ö_°©e
.
do_•ö
 =

1319 
	`oo_≥r_thªad_gë
()->
•ö°©e
 & (1 << 
ONLOAD_SPIN_UDP_RECV
);

1321 if–
•ö_°©e
.
do_•ö
 ) {

1322 
•ö_°©e
.
si
 = 
	`côp_sig«l_gë_•ecific_öôed
();

1323 
•ö_°©e
.
max_•ö
 = 
us
->
s
.
b
.
•ö_cy˛es
;

1325 if–
us
->
s
.
so
.
rcvtimeo_m£c
 ) {

1326 
ci_uöt64
 
max_so_•ö
 = (ci_uöt64)
us
->
s
.
so
.
rcvtimeo_m£c
 *

1327 
	`IPTIMER_STATE
(
ni
)->
khz
;

1328 if–
max_so_•ö
 <
•ö_°©e
.
max_•ö
 ) {

1329 
•ö_°©e
.
max_•ö
 = 
max_so_•ö
;

1330 
•ö_°©e
.
•ö_limô_by_so
 = 1;

1336 if–
•ö_°©e
.
do_•ö
 ) {

1337 
rc
 = 
	`ci_udp_ªcvmsg_socklocked_•ö
(
a
, 
ni
, 
us
, &
•ö_°©e
);

1342 if–
rc
 == 0 ) {

1343 if–
	`ci_udp_ªcv_q_nŸ_em±y
(&
us
->
ªcv_q
) )

1344 
nŸ_em±y
;

1345 
•ö_lo›
;

1347 if–
rc
 < 0 )

1348 
out
;

1351 
	`ci_sock_u∆ock
(
ni
, &
us
->
s
.
b
);

1352 
rc
 = 
	`ci_udp_ªcvmsg_block
(
a
, 
ni
, 
us
, 
•ö_°©e
.
timeout
);

1353 
	`ci_sock_lock
(
ni
, &
us
->
s
.
b
);

1354 if–
rc
 == 0 ) {

1355 if–
	`ci_udp_ªcv_q_nŸ_em±y
(&
us
->
ªcv_q
) )

1356 
nŸ_em±y
;

1358 
em±y
;

1361 
out
;

1362 
	}
}

1365 
	$ci_udp_ªcvmsg_kî√l
(
fd
, 
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

1366 
msghdr
* 
msg
, 
Êags
)

1368 
rc
 = 0;

1369 
rc1
;

1371 if–
us
->
s
.
os_sock_°©us
 & 
OO_OS_STATUS_RX
 ) {

1372 
rc1
 = 
	`__ci_udp_ªcvmsg_åy_os
(
ni
, 
us
, 
msg
, 
Êags
, &
rc
);

1373 if–
rc1
 != 1 ) {

1374 if–
rc1
 == 0 )

1375 
rc
 = -
EAGAIN
;

1377 
rc
 = 
rc1
;

1380 if–
rc
 < 0 )

1381 
	`CI_SET_ERROR
(
rc
, -rc);

1384  
rc
;

1385 
	}
}

	@udp_rx.c

14 
	~"ù_öã∫Æ.h
"

15 
	~"udp_öã∫Æ.h
"

16 
	~<⁄lﬂd/¶ìp.h
>

18 #ifde‡
ONLOAD_OFE


19 
	~"o„/⁄lﬂd.h
"

23 
	#LPF
 "ci_udp_"

	)

24 
	#LPFIN
 "-> " 
LPF


	)

25 
	#LPFOUT
 "<- " 
LPF


	)

27 
	#VERB
(
x
)

	)

33 
	$ci_udp_time°amp_q_íqueue
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

34 
ci_ù_pkt_fmt
* 
pkt
)

36 
ci_ù_pkt_fmt
* 
p
;

37 
ts⁄ly
 = 
us
->
s
.
time°ampög_Êags
 &

38 
ONLOAD_SOF_TIMESTAMPING_OPT_TSONLY
;

41 if–
	`ci_udp_ªcv_q_pkts
(&
us
->
time°amp_q
Ë+ 
pkt
->
n_buf„rs
 >

42 
	`ci_udp_ªcv_q_byãs2∑ckës
(
us
->
s
.
so
.
¢dbuf
) ) {

46 
	`ci_udp_ªcv_q_ª≠
(
ni
, &
us
->
time°amp_q
);

47 if–
	`ci_udp_ªcv_q_pkts
(&
us
->
time°amp_q
Ë+ 
pkt
->
n_buf„rs
 >=

48 
	`ci_udp_ªcv_q_byãs2∑ckës
(
us
->
s
.
so
.
¢dbuf
) ) {

49  -
ENOSPC
;

53 if–
ts⁄ly
 && 
	`OO_PP_NOT_NULL
(
pkt
->
‰ag_√xt
) ) {

54 
p
 = 
	`PKT_CHK
(
ni
, 
pkt
->
‰ag_√xt
);

55 
pkt
->
‰ag_√xt
 = 
OO_PP_NULL
;

56 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
p
);

59 
	`ci_udp_ªcv_q_put
(
ni
, &
us
->
time°amp_q
, 
pkt
);

61 
us
->
s
.
b
.
sb_Êags
 |
CI_SB_FLAG_RX_DELIVERED
;

64 
	`ci_wmb
();

66 
	`ci_√tif_put_⁄_po°_pﬁl
(
ni
, &
us
->
s
.
b
);

67 
	`ci_udp_wake_possibly_nŸ_ö_pﬁl
(
ni
, 
us
, 
CI_SB_FLAG_WAKE_RX
);

70 
	}
}

73 
	$ci_udp_ªcv_q_ª≠
(
ci_√tif
* 
ni
, 
ci_udp_ªcv_q
* 
q
)

75 
‰ìd
 = 0;

76  ! 
	`OO_PP_EQ
(
q
->
hód
, 
	`OO_ACCESS_ONCE
(q->
exåa˘
)) ) {

77 
ci_ù_pkt_fmt
* 
pkt
 = 
	`PKT_CHK
(
ni
, 
q
->
hód
);

78 
n_buf„rs
 = 
pkt
->n_buffers;

79 
q
->
hód
 = 
pkt
->
udp_rx_√xt
;

80 
‰ìd
 +
	`ci_√tif_pkt_ªÀa£_check_kìp
(
ni
, 
pkt
);

81 
q
->
pkts_ª≠ed
 +
n_buf„rs
;

83  
‰ìd
;

84 
	}
}

87 
	$ci_udp_ªcv_q_dr›
(
ci_√tif
* 
ni
, 
ci_udp_ªcv_q
* 
q
)

89 
ci_ù_pkt_fmt
* 
pkt
;

90  
	`OO_PP_NOT_NULL
(
q
->
hód
) ) {

91 
pkt
 = 
	`PKT_CHK
(
ni
, 
q
->
hód
);

92 
q
->
hód
 = 
pkt
->
udp_rx_√xt
;

93 
	`ci_√tif_pkt_ªÀa£_check_kìp
(
ni
, 
pkt
);

95 
	}
}

98 
	$ci_udp_csum_c‹ª˘
(
ci_ù_pkt_fmt
* 
pkt
, 
ci_udp_hdr
* 
udp
)

100 
ù_Àn
, 
ù_∑yÀn
;

101 
ci_ù4_p£udo_hdr
 
ph
;

102 
csum
;

104 
ù_Àn
 = 
	`CI_BSWAP_BE16
(
	`oo_ù_hdr
(
pkt
)->
ù_tŸ_Àn_be16
);

105 
ù_∑yÀn
 = 
ù_Àn
 - (
ci_ù4_hdr
);

106 
pkt
->
pf
.
udp
.
∑y_Àn
 = 
	`CI_BSWAP_BE16
(udp->
udp_Àn_be16
);

108 if–
pkt
->
pf
.
udp
.
∑y_Àn
 + (
ci_udp_hdr
Ë> 
ù_∑yÀn
 )

111 if–
udp
->
udp_check_be16
 == 0 )

114 
ph
.
ù_ßddr_be32
 = 
	`oo_ù_hdr
(
pkt
)->ip_saddr_be32;

115 
ph
.
ù_daddr_be32
 = 
	`oo_ù_hdr
(
pkt
)->ip_daddr_be32;

116 
ph
.
zîo
 = 0;

117 
ph
.
ù_¥Ÿocﬁ
 = 
IPPROTO_UDP
;

118 
ph
.
Àngth_be16
 = 
	`CI_BSWAP_BE16
(
pkt
->
pf
.
udp
.
∑y_Àn
);

120 
csum
 = 
	`ci_ù_csum_∑πül
(0, &
ph
, (ph));

121 
csum
 = 
	`ci_ù_csum_∑πül
(csum, 
udp
, 
pkt
->
pf
.udp.
∑y_Àn
);

122 
csum
 = 
	`ci_ù_hdr_csum_föish
(csum);

123  
csum
 == 0;

124 
	}
}

127 #ifde‡
_WIN32


128 
	$ci_udp_rx_åy_dr›_ﬁd
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

129 
•a˚_√eded
)

131 
ci_ù_pkt_fmt
* 
pkt
;

133 if–
us
->
udpÊags
 & 
CI_UDPF_CIRCULAR_Q
 ) {

140 if–
	`ci_sock_åylock
(
ni
, &
us
->
s
.
b
) ) {

141  
	`OO_PP_NOT_NULL
(
us
->
ªcv_q
.
exåa˘
Ë&& 
•a˚_√eded
 > 0 ) {

142 
pkt
 = 
	`PKT_CHK
(
ni
, 
us
->
ªcv_q
.
exåa˘
);

143 if–!(
pkt
->
rx_Êags
 & 
CI_PKT_RX_FLAG_RECV_Q_CONSUMED
) ) {

144 
•a˚_√eded
 -
pkt
->
pf
.
udp
.
∑y_Àn
;

145 
us
->
ªcv_q
.
byãs_dñivîed
 +
pkt
->
pf
.
udp
.
∑y_Àn
;

146 ++
us
->
ªcv_q
.
pkts_dñivîed
;

147 
pkt
->
rx_Êags
 |
CI_PKT_RX_FLAG_RECV_Q_CONSUMED
;

148 ++
us
->
°©s
.
n_rx_ovîÊow
;

150 if–
•a˚_√eded
 <0 || 
	`OO_PP_IS_NULL
(
pkt
->
√xt
) )

152 
us
->
ªcv_q
.
exåa˘
 = 
pkt
->
√xt
;

154 
	`ci_sock_u∆ock
(
ni
, &
us
->
s
.
b
);

157  
•a˚_√eded
 <= 0;

158 
	}
}

162 
	$ci_udp_rx_dñivî
(
ci_sock_cmn
* 
s
, * 
›aque_¨g
)

166 
ci_udp_rx_dñivî_°©e
* 
°©e
 = 
›aque_¨g
;

167 
ci_ù_pkt_fmt
* 
pkt
 = 
°©e
->pkt;

168 
ci_ù_pkt_fmt
* 
q_pkt
;

169 
ci_udp_°©e
* 
us
 = 
	`SOCK_TO_UDP
(
s
);

170 
ci_√tif
* 
ni
 = 
°©e
->ni;

171 
ªcvq_dïth
 = 
	`ci_udp_ªcv_q_pkts
(&
us
->
ªcv_q
Ë+ 
pkt
->
n_buf„rs
;

173 
	`LOG_UV
(
	`log
("%s: "
NS_FMT
 "∑y_Àn=%d "
CI_IP_PRINTF_FORMAT
" -> "

174 
CI_IP_PRINTF_FORMAT
, 
__FUNCTION__
,

175 
	`NS_PRI_ARGS
(
ni
, 
s
), 
pkt
->
pf
.
udp
.
∑y_Àn
,

176 
	`CI_IP_PRINTF_ARGS
(&
	`oo_ù_hdr
(
pkt
)->
ù_ßddr_be32
),

177 
	`CI_IP_PRINTF_ARGS
(&
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
)));

179 
°©e
->
dñivîed
 = 1;

181 #ifde‡
ONLOAD_OFE


182 if–
s
->
o„_code_°¨t
 !
OFE_ADDR_NULL
 &&

183 
	`o„_¥o˚ss_∑ckë
(
ni
->
o„_ch™√l
, 
s
->
o„_code_°¨t
, 
	`ci_ù_time_now
(ni),

184 
	`oo_ëhî_hdr
(
pkt
),Ökt->
∑y_Àn
,Ökt->
vœn
,

185 
	`CI_BSWAP_BE16
(
	`oo_ëhî_ty≥_gë
(
pkt
)),

186 
	`oo_ù_hdr
(
pkt
))

187 !
OFE_ACCEPT
 ) {

192 if–(
ªcvq_dïth
 <
us
->
°©s
.
max_ªcvq_pkts
) &&

193 ! (
ni
->
°©e
->
mem_¥essuª
 & 
OO_MEM_PRESSURE_CRITICAL
) ) {

194 
mu…i_de°ö©i⁄_pkt
;

196 
Á°_ª˚ive
:

197 
mu…i_de°ö©i⁄_pkt
 =

198 
	`CI_IP_IS_MULTICAST
(
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
) ||

199 
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
 =
CI_IP_ALL_BROADCAST
;

206 if–! 
°©e
->
queued
 && !(
pkt
->
Êags
 & 
CI_PKT_FLAG_TX_TIMESTAMPED
) ) {

207 
°©e
->
queued
 = 1;

208 
	`ci_√tif_pkt_hﬁd
(
ni
, 
pkt
);

217 if–
ni
->
°©e
->
n_rx_pkts
 > 
	`NI_OPTS
“i).
max_rx_∑ckës
 ||

218 (
q_pkt
 = 
	`ci_√tif_pkt_Æloc
(
ni
)Ë=
NULL
 )

219 
dr›
;

220 ++
ni
->
°©e
->
n_rx_pkts
;

221 
q_pkt
->
pf
.
udp
.
∑y_Àn
 = 
pkt
->pf.udp.pay_len;

222 
q_pkt
->
pf
.
udp
.
rx_°amp
 = 
pkt
->pf.udp.rx_stamp;

223 
q_pkt
->
pf
.
udp
.
rx_hw_°amp
.
tv_£c
 = 
pkt
->pf.udp.rx_hw_stamp.tv_sec;

224 #ifde‡
_WIN32


225 
q_pkt
->
pf
.
udp
.
rx_icmp_îr‹
 = 
pkt
->pf.udp.rx_icmp_error;

227 
	`oo_offbuf_öô
(&
q_pkt
->
buf
, 
	`PKT_START
(q_pkt), 0);

228 
q_pkt
->
Êags
 = (
CI_PKT_FLAG_RX_INDIRECT
 | 
CI_PKT_FLAG_UDP
 |

229 
CI_PKT_FLAG_RX
);

230 
q_pkt
->
‰ag_√xt
 = 
	`OO_PKT_P
(
pkt
);

231 
q_pkt
->
n_buf„rs
 = 
pkt
->n_buffers + 1;

232 
	`ci_√tif_pkt_hﬁd
(
ni
, 
pkt
);

233 
pkt
 = 
q_pkt
;

235 
	`ci_as£π
–(
pkt
->
rx_Êags
 & 
CI_PKT_RX_FLAG_UDP_KEEP
) == 0 );

236 
	`ci_udp_ªcv_q_put
(
ni
, &
us
->
ªcv_q
, 
pkt
);

237 
us
->
s
.
b
.
sb_Êags
 |
CI_SB_FLAG_RX_DELIVERED
;

238 
	`ci_√tif_put_⁄_po°_pﬁl
(
ni
, &
us
->
s
.
b
);

239 
	`ci_udp_wake_possibly_nŸ_ö_pﬁl
(
ni
, 
us
, 
CI_SB_FLAG_WAKE_RX
);

240 if–
mu…i_de°ö©i⁄_pkt
 ) {

253 if–
ªcvq_dïth
 > 
us
->
°©s
.
max_ªcvq_pkts
 ) {

254 if–
ªcvq_dïth
 <
	`ci_udp_ªcv_q_byãs2∑ckës
(
us
->
s
.
so
.
rcvbuf
) &&

255 ! (
ni
->
°©e
->
mem_¥essuª
 & 
OO_MEM_PRESSURE_CRITICAL
) ) {

256 
us
->
°©s
.
max_ªcvq_pkts
 = 
ªcvq_dïth
;

257 
Á°_ª˚ive
;

262 #ifde‡
_WIN32


263 if–! (
ni
->
°©e
->
mem_¥essuª
 & 
OO_MEM_PRESSURE_CRITICAL
) &&

264 
	`ci_udp_rx_åy_dr›_ﬁd
(
ni
, 
us
, 
pkt
->
pf
.
udp
.
∑y_Àn
) )

265 
Á°_ª˚ive
;

267 
dr›
:

268 if–
ªcvq_dïth
 > 
	`ci_udp_ªcv_q_byãs2∑ckës
(
us
->
s
.
so
.
rcvbuf
) ) {

269 
	`LOG_UR
(
	`log
(
FNS_FMT
 "OVERFLOWÖay_len=%d",

270 
	`FNS_PRI_ARGS
(
ni
, 
s
), 
pkt
->
pf
.
udp
.
∑y_Àn
));

271 ++
us
->
°©s
.
n_rx_ovîÊow
;

274 
	`LOG_UR
(
	`log
(
FNS_FMT
 "DROP (memoryÖressure)Öay_len=%d",

275 
	`FNS_PRI_ARGS
(
ni
, 
s
), 
pkt
->
pf
.
udp
.
∑y_Àn
));

276 
	`CITP_STATS_NETIF_INC
(
ni
, 
mem‹y_¥essuª_dr›s
);

277 ++
us
->
°©s
.
n_rx_mem_dr›
;

280 
	}
}

287 
	$ci_udp_h™dÀ_rx
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
, 
ci_udp_hdr
* 
udp
,

288 
ù_∑yÀn
)

290 
ci_udp_rx_dñivî_°©e
 
°©e
;

291 
dó…_wôh
;

293 
	`ASSERT_VALID_PKT
(
ni
, 
pkt
);

294 
	`ci_as£π
(
	`oo_ù_hdr
(
pkt
)->
ù_¥Ÿocﬁ
 =
IPPROTO_UDP
);

295 
	`ci_as£π
(
	`oo_offbuf_±r
(&
pkt
->
buf
Ë=
	`PKT_START
(pkt));

296 
	`ci_as£π_gt
(
pkt
->
∑y_Àn
, 
ù_∑yÀn
);

298 
pkt
->
pf
.
udp
.
rx_°amp
 = 
	`IPTIMER_STATE
(
ni
)->
‰c
;

300 
	`LOG_UV
–
	`log
–
LPF
 "h™dÀ_rx: UDP:%∞IP:%p", 
udp
, 
	`oo_ù_hdr
(
pkt
)));

303 
pkt
->
pf
.
udp
.
∑y_Àn
 = 
	`CI_BSWAP_BE16
(udp->
udp_Àn_be16
);

304 if–(
pkt
->
pf
.
udp
.
∑y_Àn
 < (
ci_udp_hdr
)) |

305 (
pkt
->
pf
.
udp
.
∑y_Àn
 > 
ù_∑yÀn
) )

306 
Àngth_îr‹
;

307 
pkt
->
pf
.
udp
.
∑y_Àn
 -(
ci_udp_hdr
);

309 #ifde‡
_WIN32


310 
pkt
->
pf
.
udp
.
rx_icmp_îr‹
 = 0;

312 
	`oo_offbuf_£t_°¨t
(&
pkt
->
buf
, 
udp
 + 1);

313 
	`CI_UDP_STATS_INC_IN_DGRAMS
(
ni
);

315 
°©e
.
ni
 =Çi;

316 
°©e
.
pkt
 =Ökt;

317 
°©e
.
queued
 = 0;

318 
°©e
.
dñivîed
 = 0;

320 
dó…_wôh
 =

321 
	`ci_√tif_fûãr_f‹_óch_m©ch
(
ni
,

322 
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
,

323 
udp
->
udp_de°_be16
,

324 
	`oo_ù_hdr
(
pkt
)->
ù_ßddr_be32
,

325 
udp
->
udp_sour˚_be16
,

326 
IPPROTO_UDP
, 
pkt
->
ötf_i
,Ökt->
vœn
,

327 
ci_udp_rx_dñivî
, &
°©e
, 
NULL
);

328 if–! 
dó…_wôh
 ) {

329 
	`ci_√tif_fûãr_f‹_óch_m©ch
(
ni
,

330 
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
,

331 
udp
->
udp_de°_be16
,

332 0, 0, 
IPPROTO_UDP
, 
pkt
->
ötf_i
,Ökt->
vœn
,

333 
ci_udp_rx_dñivî
, &
°©e
, 
NULL
);

336 if–
°©e
.
queued
 ) {

337 
	`ci_as£π_gt
(
pkt
->
ªfcou¡
, 1);

338 --
pkt
->
ªfcou¡
;

342 if–
°©e
.
dñivîed
 == 0 ) {

343 
	`LOG_U
–
	`log
(
LPFOUT
 "handle_rx: NO MATCH %s:%u->%s:%u",

344 
	`ù_addr_°r
(
	`oo_ù_hdr
(
pkt
)->
ù_ßddr_be32
),

345 (Ë
	`CI_BSWAP_BE16
(
udp
->
udp_sour˚_be16
),

346 
	`ù_addr_°r
(
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
),

347 (Ë
	`CI_BSWAP_BE16
(
udp
->
udp_de°_be16
)));

348 
	`CITP_STATS_NETIF_INC
(
ni
, 
udp_rx_no_m©ch_dr›s
);

349 if–! 
	`CI_IP_IS_MULTICAST
(
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
) ) {

350 
	`CI_UDP_STATS_INC_NO_PORTS
(
ni
);

351 
	`ci_icmp_£nd_p‹t_uƒóch
(
ni
, 
pkt
);

354 
dr›_out
;

356 
Àngth_îr‹
:

357 
	`CI_UDP_STATS_INC_IN_ERRS
(
ni
);

358 
	`LOG_U
(
	`log
("%s: ip_paylen=%d udp_len=%d",

359 
__FUNCTION__
, 
ù_∑yÀn
, 
pkt
->
pf
.
udp
.
∑y_Àn
));

360 
dr›_out
;

362 
dr›_out
:

363 
	`ci_√tif_pkt_ªÀa£_rx_1ªf
(
ni
, 
pkt
);

365 
	}
}

	@udp_send.c

14 
	~"ù_öã∫Æ.h
"

15 
	~"udp_öã∫Æ.h
"

16 
	~"ù_tx.h
"

17 
	~<ci/toﬁs/pktdump.h
>

18 
	~<⁄lﬂd/osfûe.h
>

19 
	~<⁄lﬂd/pkt_fûÀr.h
>

20 
	~<⁄lﬂd/¶ìp.h
>

22 #ifde‡
ONLOAD_OFE


23 
	~"o„/⁄lﬂd.h
"

27 
	#VERB
(
x
)

	)

29 
	#LPF
 "ci_udp_"

	)

30 
	#LPFIN
 "-> " 
LPF


	)

31 
	#LPFOUT
 "<- " 
LPF


	)

35 #i‚de‡
__KERNEL__


36 
	#ERESTARTSYS
 0

	)

40 
	#TXQ_LEVEL
(
us
) \

41 ((
us
)->
tx_cou¡
 + 
	`oo_©omic_ªad
(&(us)->
tx_async_q_Àvñ
))

	)

47 
	#åylock
(
ni
, 
locked
) \

48 ((
locked
Ë|| (
	`ci_√tif_åylock
(
ni
Ë&& (÷ockedË1)))

	)

49 
	#si_åylock
(
ni
, 
söf
) \

50 
	`åylock
((
ni
), (
söf
)->
°ack_locked
)

	)

51 
	#åylock_™d_öc
(
ni
, 
locked
, 
˙å
) \

52 ((
locked
Ë|| (
	`ci_√tif_åylock
(
ni
Ë&& (++(
˙å
), (lockedË1)))

	)

53 
	#si_åylock_™d_öc
(
ni
, 
söf
, 
˙å
) \

54 
	`åylock_™d_öc
((
ni
), (
söf
)->
°ack_locked
, (
˙å
))

	)

56 #ifde‡
__sun__


57 
	#msg_«mñí_ok
(
«mñí
Ë(“amñíË=(
sockaddr_ö
))

	)

59 
	#msg_«mñí_ok
(
«mñí
Ë(“amñíË>(
sockaddr_ö
))

	)

62 
	#oo_tx_udp_hdr
(
pkt
Ë((
ci_udp_hdr
*Ë
	`oo_tx_ù_d©a
’kt))

	)

65 
	sudp_£nd_öfo
 {

66 
	mrc
;

67 
ci_ù_ˇched_hdrs
 
	mùˇche
;

68 
	mu£d_ùˇche
;

69 
	m°ack_locked
;

70 
ci_uöt32
 
	mtimeout
;

74 
ci_noölöe
 
	$ci_udp_£ndmsg_chksum
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

75 
ci_ù4_hdr
* 
fú°_ù
)

78 
	#MAX_IP_FRAGMENTS
 50

	)

79 
iovec
 
iov
[
MAX_IP_FRAGMENTS
];

80 
n
 = -1;

81 
ci_udp_hdr
* 
udp
 = 
	`TX_PKT_UDP
(
pkt
);

82 
ci_ù_pkt_fmt
* 
p
 = 
pkt
;

83 
fú°_‰ag
 = 1;

86  
	`OO_PP_NOT_NULL
(
p
->
√xt
) ) {

87 
‰ag_Àn
;

88 *
‰ag_°¨t
;

89 
max_sg_Àn
;

92 if–++
n
 =
MAX_IP_FRAGMENTS
 )

95 if–
fú°_‰ag
 ) {

96 
‰ag_°¨t
 = (*)(
udp
 + 1);

97 
‰ag_Àn
 = 
	`CI_BSWAP_BE16
(
fú°_ù
->
ù_tŸ_Àn_be16
) -

98 
	`CI_IP4_IHL
(
fú°_ù
Ë- (
ci_udp_hdr
);

99 
fú°_‰ag
 = 0;

102 
ci_ù4_hdr
 *
p_ù
;

103 
p
 = 
	`PKT_CHK
(
ni
,Ö->
√xt
);

104 
p_ù
 = 
	`oo_tx_ù_hdr
(
p
);

105 
‰ag_Àn
 = 
	`CI_BSWAP_BE16
(
p_ù
->
ù_tŸ_Àn_be16
Ë- 
	`CI_IP4_IHL
(p_ip);

106 
‰ag_°¨t
 = (*)(
p_ù
 + 1);

109 
iov
[
n
].
iov_ba£
 = 
‰ag_°¨t
;

110 
iov
[
n
].
iov_Àn
 = 
‰ag_Àn
;

111 
max_sg_Àn
 = 
	`CI_PTR_ALIGN_FWD
(
	`PKT_START
(
p
), 
CI_CFG_PKT_BUF_SIZE
) -

112 
‰ag_°¨t
;

113 if–
‰ag_Àn
 > 
max_sg_Àn
 ) {

114 
iov
[
n
].
iov_Àn
 = 
max_sg_Àn
;

115 
‰ag_Àn
 -
max_sg_Àn
;

119 if–
p
->
‰ag_√xt
 !p->
√xt
 ) {

120 
ci_ù_pkt_fmt
* 
sg_pkt
 = 
p
;

121  
sg_pkt
->
‰ag_√xt
 !
p
->
√xt
 ) {

122 
	`ci_as£π
(
‰ag_Àn
);

123 
sg_pkt
 = 
	`PKT_CHK
(
ni
, sg_pkt->
‰ag_√xt
);

124 ++
n
;

125 
	`ci_as£π_À
(
n
, 
MAX_IP_FRAGMENTS
);

127 
iov
[
n
].
iov_ba£
 = 
	`PKT_START
(
sg_pkt
);

128 
iov
[
n
].
iov_Àn
 = 
‰ag_Àn
;

129 
max_sg_Àn
 = 
	`CI_PTR_ALIGN_FWD
(
	`PKT_START
(
sg_pkt
),

130 
CI_CFG_PKT_BUF_SIZE
) -

131 
	`PKT_START
(
sg_pkt
);

132 if–
‰ag_Àn
 > 
max_sg_Àn
 ) {

133 
iov
[
n
].
iov_Àn
 = 
max_sg_Àn
;

134 
‰ag_Àn
 -
max_sg_Àn
;

137 
‰ag_Àn
 = 0;

139 
	`ci_as£π_equÆ
(
‰ag_Àn
, 0);

143 
udp
->
udp_check_be16
 = 
	`ci_udp_checksum
(
fú°_ù
, udp, 
iov
, 
n
+1);

144 
	}
}

147 
	$ci_ù_£nd_udp_¶ow
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

148 
ci_ù_ˇched_hdrs
* 
ùˇche
)

150 
os_rc
 = 0;

152 
	`ci_as£π_equÆ
(
	`oo_ëhî_ty≥_gë
(
pkt
), 
CI_ETHERTYPE_IP
);

153 
	`ci_as£π_equÆ
(
	`CI_IP4_IHL
(
	`oo_tx_ù_hdr
(
pkt
)), (
ci_ù4_hdr
));

158 
	`ci_as£π_gt
(
pkt
->
ªfcou¡
, 1);

159 --
pkt
->
ªfcou¡
;

161 
	`ci˝_u£r_de„r_£nd
(
ni
, 
ªårc_nomac
, &
os_rc
, 
	`OO_PKT_P
(
pkt
),

162 
ùˇche
->
ifödex
);

167 
	`ci_udp_dec_tx_cou¡
(
	`SP_TO_UDP
(
ni
, 
pkt
->
pf
.
udp
.
tx_sock_id
),Ökt);

168 
	}
}

171 
	$ci_udp_£ndmsg_lo›
(
ci_sock_cmn
* 
s
, * 
›aque_¨g
)

173 
ci_udp_rx_dñivî_°©e
* 
°©e
 = 
›aque_¨g
;

174 
ci_ù_pkt_fmt
* 
‰ag_hód
;

175 
ci_ù_pkt_fmt
* 
buf_pkt
;

176 
£g_i
, 
buf_Àn
;

177 
ci_udp_hdr
* 
udp
;

178 * 
buf_°¨t
;

180 if–! 
°©e
->
dñivîed
 ) {

186 
‰ag_hód
 = 
°©e
->
pkt
;

187 
udp
 = (
ci_udp_hdr
*Ë(
	`oo_ù_hdr
(
‰ag_hód
) + 1);

188 
‰ag_hód
->
pf
.
udp
.
rx_°amp
 = 
	`IPTIMER_STATE
(
°©e
->
ni
)->
‰c
;

189 #ifde‡
_WIN32


190 
‰ag_hód
->
pf
.
udp
.
rx_icmp_îr‹
 = 0;

192 
‰ag_hód
->
pf
.
udp
.
∑y_Àn
 = 
	`CI_BSWAP_BE16
(udp->
udp_Àn_be16
) - (*udp);

193 
buf_pkt
 = 
‰ag_hód
;

194 
£g_i
 = 0;

196 ++
°©e
->
ni
->°©e->
n_rx_pkts
;

197 
	`ci_as£π
(!(
buf_pkt
->
Êags
 & 
CI_PKT_FLAG_RX
));

198 
buf_pkt
->
Êags
 |
CI_PKT_FLAG_RX
;

199 if–
buf_pkt
 =
°©e
->
pkt
 )

201 
buf_°¨t
 = 
udp
 + 1;

202 if–
£g_i
 == 0 )

204 
buf_°¨t
 = 
	`oo_ù_hdr
(
buf_pkt
) + 1;

207 
buf_°¨t
 = 
	`PKT_START
(
buf_pkt
);

208 
buf_Àn
 = 
buf_pkt
->buf_len;

209 
buf_Àn
 -(*Ë
buf_°¨t
 - 
	`PKT_START
(
buf_pkt
);

210 
	`oo_offbuf_öô
(&
buf_pkt
->
buf
, 
buf_°¨t
, 
buf_Àn
);

211 if–
	`OO_PP_IS_NULL
(
buf_pkt
->
‰ag_√xt
) )

213 
buf_pkt
 = 
	`PKT_CHK
(
°©e
->
ni
, buf_pkt->
‰ag_√xt
);

214 if–++
£g_i
 =
‰ag_hód
->
n_buf„rs
 ) {

215 
£g_i
 = 0;

216 
‰ag_hód
 = 
buf_pkt
;

221 
	`CITP_STATS_NETIF_INC
(
°©e
->
ni
, 
udp_£nd_mˇ°_lo›
);

222 
	`ci_udp_rx_dñivî
(
s
, 
›aque_¨g
);

223 
	`côp_waôabÀ_wake_nŸ_ö_pﬁl
(
°©e
->
ni
, &
s
->
b
, 
CI_SB_FLAG_WAKE_RX
);

226 
	}
}

229 
	$ci_udp_£ndmsg_mˇ°
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

230 
ci_ù_ˇched_hdrs
* 
ùˇche
,

231 
ci_ù_pkt_fmt
* 
pkt
)

242 
ci_udp_rx_dñivî_°©e
 
°©e
;

243 c⁄° 
ci_udp_hdr
* 
udp
;

245 if–! (
us
->
udpÊags
 & 
CI_UDPF_MCAST_LOOP
) ||

246 ! (
	`NI_OPTS
(
ni
).
mˇ°_£nd
 & 
CITP_MCAST_SEND_FLAG_LOCAL
) )

248 if(
	`CI_UNLIKELY
–
ni
->
°©e
->
n_rx_pkts
 >
	`NI_OPTS
“i).
max_rx_∑ckës
 )) {

249 
	`ci_√tif_åy_to_ª≠
(
ni
, 100);

250 if–
ni
->
°©e
->
n_rx_pkts
 >
	`NI_OPTS
“i).
max_rx_∑ckës
 ) {

251 
	`CITP_STATS_NETIF_INC
(
ni
, 
udp_£nd_mˇ°_lo›_dr›
);

256 
°©e
.
ni
 =Çi;

257 
°©e
.
pkt
 =Ökt;

258 
°©e
.
queued
 = 0;

259 
°©e
.
dñivîed
 = 0;

261 
udp
 = 
	`TX_PKT_UDP
(
pkt
);

263 
	`ci_√tif_fûãr_f‹_óch_m©ch
(
ni
,

264 
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
,

265 
udp
->
udp_de°_be16
,

266 
	`oo_ù_hdr
(
pkt
)->
ù_ßddr_be32
,

267 
udp
->
udp_sour˚_be16
,

268 
IPPROTO_UDP
, 
ùˇche
->
ötf_i
,

269 
ùˇche
->
íˇp
.
vœn_id
,

270 
ci_udp_£ndmsg_lo›
, &
°©e
, 
NULL
);

271 
	`ci_√tif_fûãr_f‹_óch_m©ch
(
ni
,

272 
	`oo_ù_hdr
(
pkt
)->
ù_daddr_be32
,

273 
udp
->
udp_de°_be16
,

274 0, 0, 
IPPROTO_UDP
, 
ùˇche
->
ötf_i
,

275 
ùˇche
->
íˇp
.
vœn_id
,

276 
ci_udp_£ndmsg_lo›
, &
°©e
, 
NULL
);

277 
	}
}

281 
ci_ölöe
 
	$¥ï_£nd_pkt
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

282 
ci_ù_pkt_fmt
* 
pkt
, 
ci_ù_ˇched_hdrs
* 
ùˇche
)

284 
ci_ù4_hdr
 *
ù
 = 
	`oo_tx_ù_hdr
(
pkt
);

285 
ni
->
°©e
->
n_async_pkts
 -
pkt
->
n_buf„rs
;

287 
ù
->
ù_ßddr_be32
 = 
ùˇche
->ip_saddr_be32;

288 
ù
->
ù_daddr_be32
 = 
ùˇche
->ip.ip_daddr_be32;

289 
ù
->
ù_âl
 = 
ùˇche
->ip.ip_ttl;

290 
	`ci_ù_£t_mac_™d_p‹t
(
ni
, 
ùˇche
, 
pkt
);

291 
us
->
tx_cou¡
 +
pkt
->
pf
.
udp
.
tx_Àngth
;

292 
pkt
->
Êags
 |
CI_PKT_FLAG_UDP
;

293 
pkt
->
pf
.
udp
.
tx_sock_id
 = 
	`S_SP
(
us
);

294 
	`CI_UDP_STATS_INC_OUT_DGRAMS
–
ni
 );

296 if–(
ù
->
ù_‰ag_off_be16
 & 
CI_IP4_OFFSET_MASK
) == 0 ) {

298 if–
us
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_TX_HARDWARE
 )

299 
pkt
->
Êags
 |
CI_PKT_FLAG_TX_TIMESTAMPED
;

300 if–
ù
->
ù_‰ag_off_be16
 & 
CI_IP4_FRAG_MORE
 ) {

302 
	`ci_udp_£ndmsg_chksum
(
ni
, 
pkt
, 
ù
);

305 
	}
}

308 #ifde‡
__KERNEL__


310 
	$do_sys_£ndmsg
(
ci_sock_cmn
 *
s
, 
oo_os_fûe
 
os_sock
,

311 c⁄° 
ci_msghdr
* 
msg
,

312 
Êags
, 
u£r_buf„rs
, 
©omic
)

314 
sockë
* 
sock
;

315 
i
, 
byãs
;

316 
msghdr
 
kmsg
;

318 
	`ci_as£π
(
	`S_ISSOCK
(
os_sock
->
f_díåy
->
d_öode
->
i_mode
));

319 
sock
 = 
	`SOCKET_I
(
os_sock
->
f_díåy
->
d_öode
);

320 
	`ci_as£π
(! 
u£r_buf„rs
 || ! 
©omic
);

322 
	`LOG_NT
(
	`ci_log
("%s: user_buffers=%dátomic=%d sk_allocation=%x ATOMIC=%x",

323 
__FUNCTION__
, 
u£r_buf„rs
, 
©omic
,

324 
sock
->
sk
->
sk_Æloˇti⁄
, 
GFP_ATOMIC
));

326 if–
©omic
 && 
sock
->
sk
->
sk_Æloˇti⁄
 !
GFP_ATOMIC
 ) {

327 
	`ci_log
("%s: c™nŸÖro˚ed", 
__FUNCTION__
);

328  -
EINVAL
;

331  
i
 = 0, 
byãs
 = 0; i < 
msg
->
msg_iovÀn
; ++i )

332 
byãs
 +
msg
->
msg_iov
[
i
].
iov_Àn
;

334 
	`mem£t
(&
kmsg
, 0, (kmsg));

335 if–
u£r_buf„rs
 ) {

336 
	`oo_msg_iov_öô
(&
kmsg
, 
WRITE
, 
msg
->
msg_iov
, msg->
msg_iovÀn
, 
byãs
);

337 
byãs
 = 
	`sock_£ndmsg
(
sock
, &
kmsg
);

340 
byãs
 = 
	`kî√l_£ndmsg
(
sock
, &
kmsg
,

341 (
kvec
*Ë
msg
->
msg_iov
, msg->
msg_iovÀn
,

342 
byãs
);

346 
	`oo_os_sock_°©us_bô_˛ór_h™dÀd
(
s
, 
os_sock
, 
OO_OS_STATUS_TX
);

347  
byãs
;

348 
	}
}

350 
	$ci_udp_£ndmsg_os
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

351 c⁄° 
ci_msghdr
* 
msg
, 
Êags
,

352 
u£r_buf„rs
, 
©omic
)

354 
rc
;

355 
oo_os_fûe
 
os_sock
;

357 ++
us
->
°©s
.
n_tx_os
;

359 
rc
 = 
	`oo_os_sock_gë
(
ni
, 
	`S_ID
(
us
), &
os_sock
);

360 if–
rc
 == 0 ) {

361 
rc
 = 
	`do_sys_£ndmsg
(&
us
->
s
, 
os_sock
, 
msg
, 
Êags
, 
u£r_buf„rs
, 
©omic
);

362 
	`oo_os_sock_put
(
os_sock
);

364  
rc
;

365 
	}
}

370 
ci_ölöe
 
	$ci_udp_£ndmsg_os
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

371 c⁄° 
msghdr
* 
msg
, 
Êags
,

372 
u£r_buf„rs
, 
©omic
)

374 
rc
;

376 ++
us
->
°©s
.
n_tx_os
;

378 #i‡
	`deföed
(
__i386__
Ë|| (deföed(
__powîpc__
Ë&& !deföed(
__powîpc64__
))

380 if–
msg
->
msg_c⁄åﬁÀn
 != 0 )

381 
rc
 = 
	`oo_os_sock_£ndmsg_øw
(
ni
, 
	`S_SP
(
us
), 
msg
, 
Êags
);

384 
rc
 = 
	`oo_os_sock_£ndmsg
(
ni
, 
	`S_SP
(
us
), 
msg
, 
Êags
);

385  
rc
 >= 0 ?Ñc : -1;

386 
	}
}

391 #i‚de‡
__KERNEL__


398 
	$ci_udp_£ndmsg_os_gë_bödög
(
côp_sockë
 *
ï
, 
ci_fd_t
 
fd
,

399 c⁄° 
msghdr
 * 
msg
, 
Êags
)

401 
ci_√tif
* 
ni
 = 
ï
->
√tif
;

402 
ci_udp_°©e
* 
us
 = 
	`SOCK_TO_UDP
(
ï
->
s
);

403 
ªt
, 
rc
, 
îr
;

404 
sockaddr_ö
 
ß
;

405 
sockÀn_t
 
ßÀn
 = (
ß
);

406 
ci_fd_t
 
os_sock
 = (ci_fd_t)
	`ci_gë_os_sock_fd
(
fd
);

408 
	`ci_as£π
–!
	`udp_Õ‹t_be16
(
us
));

410 i‡–!
	`CI_IS_VALID_SOCKET
(
os_sock
) ) {

411 
	`LOG_U
–
	`log
("%s: "
NT_FMT
" c™'àgë OS sockë (%d)", 
__FUNCTION__
,

412 
	`NT_PRI_ARGS
(
ni
,
us
), 
os_sock
));

413 
	`RET_WITH_ERRNO
(()
os_sock
);

421 
	`UDP_CLR_FLAG
(
us
, 
CI_UDPF_EF_SEND
);

425 ++
us
->
°©s
.
n_tx_os
;

426 ++
us
->
°©s
.
n_tx_os_¶ow
;

427 #i‚de‡
_WIN32


428 
ªt
 = 
	`ci_sys_£ndmsg
(
os_sock
, 
msg
, 
Êags
);

446 
DWORD
 
£¡
;

448 
ªt
 = 
	`ci_sys_£ndto
(
ï
, 
msg
, &
£¡
, 
Êags
 & (
MSG_DONTROUTE
 | 
MSG_PARTIAL
) );

449 if–!
ªt
 )Ñë = 
£¡
;

452 
îr
 = 
	`CI_GET_ERROR
(
ªt
);

455 #i‚de‡
_WIN32


456 
rc
 = 
	`ci_sys_gësock«me
–
os_sock
, (
sockaddr
*)&
ß
, &
ßÀn
);

458 
rc
 = 
	`ci_sys_gësock«me
–
ï
, (
sockaddr
*)&
ß
, &
ßÀn
);

462 if–
	`CI_UNLIKELY
–
rc
 || (!rc &&

463 –
ß
.
sö_Ámûy
 !
AF_INET
 ||

464 
ßÀn
 < (
sockaddr_ö
))))) {

465 
	`LOG_UV
(
	`log
("%s: "
NT_FMT
" sys_getsocknameÖrob. (rc:%dÉrr:%d, fam:%d, "

467 
__FUNCTION__
, 
	`NT_PRI_ARGS
(
ni
,
us
), 
rc
, 
î∫o
, 
ß
.
sö_Ámûy
,

468 
ßÀn
, ()(
sockaddr_ö
)));

469 
	`ci_ªl_os_sock_fd
–
os_sock
 );

470 
î∫o
 = 
îr
;

471  
ªt
;

474 
	`ci_√tif_lock
(
ni
);

475 if–
	`udp_Õ‹t_be16
(
us
) == 0 ) {

476 
us
->
udpÊags
 |
CI_UDPF_IMPLICIT_BIND
;

477 
	`ci_udp_£t_œddr
(
ï
, 
ß
.
sö_addr
.
s_addr
, sa.
sö_p‹t
);

480 if–
ß
.
sö_p‹t
 != 0 &&

481 (
ß
.
sö_addr
.
s_addr
 =
INADDR_ANY
 ||

482 
	`ci˝_u£r_addr_is_loˇl_eÁb
(
	`CICP_HANDLE
(
ni
),&
ß
.
sö_addr
.
s_addr
)) ) {

483 
	`ci_as£π
–! (
us
->
udpÊags
 & 
CI_UDPF_FILTERED
) );

485 #ifde‡
ONLOAD_OFE


486 if–
ni
->
o„_ch™√l
 !
NULL
 )

487 
us
->
s
.
o„_code_°¨t
 = 
	`o„_socktbl_föd
(

488 
ni
->
o„
, 
OFE_SOCKTYPE_UDP
,

489 
	`udp_œddr_be32
(
us
), 
	`udp_øddr_be32
(us),

490 
	`udp_Õ‹t_be16
(
us
), 
	`udp_Ω‹t_be16
(us));

492 
us
->
s
.
o„_code_°¨t
 = 
OFE_ADDR_NULL
;

495 
rc
 = 
	`ci_t˝_ï_£t_fûãrs
(
ni
, 
	`S_SP
(
us
), us->
s
.
˝
.
so_bödtodevi˚
,

496 
OO_SP_NULL
);

497 if–
rc
 ) {

498 
	`LOG_U
(
	`log
("%s: FILTER ADD FAIL %d", 
__FUNCTION__
, -
rc
));

501 
	`UDP_SET_FLAG
(
us
, 
CI_UDPF_FILTERED
);

505 
	`ci_√tif_u∆ock
(
ni
);

507 
	`LOG_UV
(
	`ci_log
("%s: "
NT_FMT
"Unbound: first send via OS got L:[%s:%u]",

508 
__FUNCTION__
, 
	`NT_PRI_ARGS
(
ni
,
us
),

509 
	`ù_addr_°r
–
	`udp_œddr_be32
(
us
)), 
	`udp_Õ‹t_be16
(us)));

510 
	`ci_ªl_os_sock_fd
–
os_sock
 );

511 
î∫o
 = 
îr
;

512  
ªt
;

513 
	}
}

517 
	$ci_udp_£ndmsg_£nd_pkt_vü_os
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

518 
ci_ù_pkt_fmt
* 
pkt
, 
Êags
,

519 
udp_£nd_öfo
* 
söf
)

521 
rc
, 
£g_i
, 
buf_Àn
, 
iov_i
;

522 
ci_ù_pkt_fmt
* 
‰ag_hód
;

523 
ci_ù_pkt_fmt
* 
buf_pkt
;

524 
iovec
 
iov
[30];

525 
ci_udp_hdr
* 
udp
;

526 * 
buf_°¨t
;

528 #i‚de‡
__KERNEL__


529 
sockaddr_ö
 
sö
;

530 
ci_msghdr
 
m
;

532 if–
	`oo_tx_ù_hdr
(
pkt
)->
ù_daddr_be32
 != 0 ) {

533 
sö
.
sö_Ámûy
 = 
AF_INET
;

534 
sö
.
sö_addr
.
s_addr
 = 
	`oo_tx_ù_hdr
(
pkt
)->
ù_daddr_be32
;

535 
sö
.
sö_p‹t
 = 
	`TX_PKT_UDP
(
pkt
)->
udp_de°_be16
;

536 
m
.
msg_«me
 = &
sö
;

537 
m
.
msg_«mñí
 = (
sockaddr_ö
);

540 
m
.
msg_«me
 = 
NULL
;

541 
m
.
msg_«mñí
 = 0;

543 
m
.
msg_iov
 = 
iov
;

544 
m
.
msg_iovÀn
 = 0;

545 #ifde‡ 
__löux__


546 
m
.
msg_c⁄åﬁÀn
 = 0;

548 #ifde‡
__sun__


549 
m
.
msg_ac¸ights
 = 
NULL
;

550 
m
.
msg_ac¸ight¶í
 = 0;

554 
‰ag_hód
 = 
pkt
;

555 
udp
 = (
ci_udp_hdr
*Ë(
	`oo_tx_ù_hdr
(
‰ag_hód
) + 1);

556 
buf_pkt
 = 
‰ag_hód
;

557 
£g_i
 = 0;

558 
iov_i
 = 0;

560 if–
buf_pkt
 =
pkt
 )

562 
buf_°¨t
 = 
udp
 + 1;

563 if–
£g_i
 == 0 )

565 
buf_°¨t
 = 
	`oo_tx_ù_hdr
(
buf_pkt
) + 1;

568 
buf_°¨t
 = 
	`PKT_START
(
buf_pkt
);

569 
buf_Àn
 = 
buf_pkt
->buf_len;

570 
buf_Àn
 -(*Ë
buf_°¨t
 - 
	`PKT_START
(
buf_pkt
);

571 
iov
[
iov_i
].
iov_ba£
 = 
buf_°¨t
;

572 
iov
[
iov_i
].
iov_Àn
 = 
buf_Àn
;

573 if–
	`OO_PP_IS_NULL
(
buf_pkt
->
‰ag_√xt
) )

575 if–++
iov_i
 =(
iov
) / (iov[0]) ) {

581 
buf_pkt
 = 
	`PKT_CHK
(
ni
, buf_pkt->
‰ag_√xt
);

582 if–++
£g_i
 =
‰ag_hód
->
n_buf„rs
 ) {

583 
£g_i
 = 0;

584 
‰ag_hód
 = 
buf_pkt
;

588 #ifde‡
__KERNEL__


589 if–
söf
 =
NULL
 ) {

593 
	`ci_as£π
(
Êags
 =0 || fœg†=
MSG_CONFIRM
);

594 
Êags
 |
MSG_DONTWAIT
;

602 #i‚de‡
__KERNEL__


603 
m
.
msg_iovÀn
 = 
iov_i
 + 1;

604 
rc
 = 
	`ci_udp_£ndmsg_os
(
ni
, 
us
, &
m
, 
Êags
, 0, 
söf
 =
NULL
);

605 if–
rc
 < 0 ) {

607 
	`ci_log
("%s: faûedÑc=%d", 
__FUNCTION__
, 
rc
);

610 (Ë
rc
;

611 (Ë
ci_udp_£ndmsg_os
;

613 
	}
}

616 
	$fixup_pkt_nŸ_å™smôãd
(
ci_√tif
 *
ni
, 
ci_ù_pkt_fmt
* 
pkt
)

618 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

621 
	`ci_as£π_gt
(
pkt
->
n_buf„rs
, 0);

622 
ni
->
°©e
->
n_async_pkts
 -
pkt
->
n_buf„rs
;

626 
	`ci_as£π_gt
(
pkt
->
ªfcou¡
, 1);

627 
pkt
->
ªfcou¡
--;

629 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) )

631 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
√xt
);

633 
	}
}

636 
	$ci_udp_£ndmsg_£nd
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

637 
ci_ù_pkt_fmt
* 
pkt
, 
Êags
,

638 
udp_£nd_öfo
* 
söf
)

640 
ci_ù_pkt_fmt
* 
fú°_pkt
 = 
pkt
;

641 
ci_ù_ˇched_hdrs
* 
ùˇche
;

642 
ùˇche_⁄lﬂdabÀ
;

643 #ifde‡
__KERNEL__


644 
i
 = 0;

647 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

649 if–
	`oo_tx_ù_hdr
(
pkt
)->
ù_daddr_be32
 != 0 ) {

654 ++
us
->
°©s
.
n_tx_⁄lﬂd_uc
;

655 
ùˇche
 = &
us
->
ïhemîÆ_pkt
;

656 if–
	`oo_tx_ù_hdr
(
pkt
)->
ù_daddr_be32
 =
ùˇche
->
ù
.ip_daddr_be32 &&

657 
	`oo_tx_udp_hdr
(
pkt
)->
udp_de°_be16
 =
ùˇche
->
dp‹t_be16
 ) {

658 if–
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
), 
ùˇche
) )

659 
d⁄e_hdr_upd©e
;

662 
ùˇche
->
ù
.
ù_daddr_be32
 = 
	`oo_tx_ù_hdr
(
pkt
)->ip_daddr_be32;

663 
ùˇche
->
dp‹t_be16
 = 
	`oo_tx_udp_hdr
(
pkt
)->
udp_de°_be16
;

664 if–
söf
 !
NULL
 && söf->
u£d_ùˇche
 &&

665 
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
), &
söf
->
ùˇche
) ) {

669 
	`ci˝_ù_ˇche_upd©e_‰om
(
ni
, 
ùˇche
, &
söf
->ipcache);

670 
d⁄e_hdr_upd©e
;

674 ++
us
->
°©s
.
n_tx_˝_uc_lookup
;

675 
	`ci˝_u£r_ªåõve
(
ni
, 
ùˇche
, &
us
->
s
.
˝
);

681 ++
us
->
°©s
.
n_tx_⁄lﬂd_c
;

682 if(
	`CI_UNLIKELY
–! 
	`udp_øddr_be32
(
us
) ))

683 
no_l⁄gî_c⁄√˘ed
;

684 
ùˇche
 = &
us
->
s
.
pkt
;

685 if(
	`CI_UNLIKELY
–! 
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
), 
ùˇche
) )) {

686 ++
us
->
°©s
.
n_tx_˝_c_lookup
;

687 
	`ci˝_u£r_ªåõve
(
ni
, 
ùˇche
, &
us
->
s
.
˝
);

691 
	`oo_tx_ù_hdr
(
pkt
)->
ù_daddr_be32
 = 
	`udp_øddr_be32
(
us
);

692 
	`TX_PKT_UDP
(
pkt
)->
udp_de°_be16
 = 
	`udp_Ω‹t_be16
(
us
);

696 
d⁄e_hdr_upd©e
:

697  
ùˇche
->
°©us
 ) {

698 
ªårc_suc˚ss
:

699 
ùˇche_⁄lﬂdabÀ
 = 1;

701 
ªårc_nomac
:

702 
ùˇche_⁄lﬂdabÀ
 = 0;

705 
£nd_pkt_vü_os
;

708 if(
	`CI_UNLIKELY
–
	`CI_BSWAP_BE16
(
	`oo_tx_ù_hdr
(
pkt
)->
ù_tŸ_Àn_be16
) >

709 
ùˇche
->
mtu
 ))

719 
	`ci_log
("%s:Ökàmtu=%dÉx˚ed†∑th mtu=%d", 
__FUNCTION__
,

720 
	`CI_BSWAP_BE16
(
	`oo_tx_ù_hdr
(
pkt
)->
ù_tŸ_Àn_be16
), 
ùˇche
->
mtu
);

722 
	`ci_as£π_equÆ
(
ni
->
°©e
->
£nd_may_pﬁl
, 0);

723 
ni
->
°©e
->
£nd_may_pﬁl
 = 
	`ci_√tif_may_pﬁl
(ni);

725 if–
ùˇche
->
ù
.
ù_âl
 ) {

726 if(
	`CI_LIKELY
–
ùˇche_⁄lﬂdabÀ
 )) {

729 
oo_pkt_p
 
√xt
 = 
pkt
->next;

730 
	`¥ï_£nd_pkt
(
ni
, 
us
, 
pkt
, 
ùˇche
);

732 
	`ci_√tif_£nd
(
ni
, 
pkt
);

733 if–
	`OO_PP_IS_NULL
(
√xt
) )

735 
pkt
 = 
	`PKT_CHK
(
ni
, 
√xt
);

736 #ifde‡
__KERNEL__


737 if(
	`CI_UNLIKELY
–
i
++ > 
ni
->
pkt_£ts_n
 << 
CI_CFG_PKTS_PER_SET_S
 )) {

738 
	`ci_√tif_îr‹_dëe˘ed
(
ni
, 
CI_NETIF_ERROR_UDP_SEND_PKTS_LIST
,

739 
__FUNCTION__
);

743 
	`ci˝_ù_ˇche_mac_upd©e
(
ni
, 
ùˇche
, 
Êags
 & 
MSG_CONFIRM
);

745 if–
	`CI_IP_IS_MULTICAST
(
ùˇche
->
ù
.
ù_daddr_be32
) )

746 
	`ci_udp_£ndmsg_mˇ°
(
ni
, 
us
, 
ùˇche
, 
fú°_pkt
);

760 ++
us
->
°©s
.
n_tx_˝_no_mac
;

762 
oo_pkt_p
 
√xt
 = 
pkt
->next;

763 
	`¥ï_£nd_pkt
(
ni
, 
us
, 
pkt
, 
ùˇche
);

764 
	`ci_ù_£nd_udp_¶ow
(
ni
, 
pkt
, 
ùˇche
);

765 if–
	`OO_PP_IS_NULL
(
√xt
) )

767 
pkt
 = 
	`PKT_CHK
(
ni
, 
√xt
);

768 #ifde‡
__KERNEL__


769 if(
	`CI_UNLIKELY
–
i
++ > 
ni
->
pkt_£ts_n
 << 
CI_CFG_PKTS_PER_SET_S
 )) {

770 
	`ci_√tif_îr‹_dëe˘ed
(
ni
, 
CI_NETIF_ERROR_UDP_SEND_PKTS_LIST
,

771 
__FUNCTION__
);

777 if–
	`CI_IP_IS_MULTICAST
(
ùˇche
->
ù
.
ù_daddr_be32
) ) {

778 
	`fixup_pkt_nŸ_å™smôãd
(
ni
, 
fú°_pkt
);

779 
	`ci_udp_£ndmsg_mˇ°
(
ni
, 
us
, 
ùˇche
, 
fú°_pkt
);

782 
	`fixup_pkt_nŸ_å™smôãd
(
ni
, 
fú°_pkt
);

783 
	`LOG_U
(
	`ci_log
("%s: doÇot send UDPÖacket because IP TTL = 0",

784 
__FUNCTION__
));

787 
ni
->
°©e
->
£nd_may_pﬁl
 = 0;

790 
£nd_pkt_vü_os
:

791 ++
us
->
°©s
.
n_tx_os_œã
;

792 
	`fixup_pkt_nŸ_å™smôãd
(
ni
, 
pkt
);

793 
	`ci_udp_£ndmsg_£nd_pkt_vü_os
(
ni
, 
us
, 
pkt
, 
Êags
, 
söf
);

796 
no_l⁄gî_c⁄√˘ed
:

801 if–
söf
 !
NULL
 )

802 
söf
->
rc
 = -
EDESTADDRREQ
;

810 ++
us
->
°©s
.
n_tx_unc⁄√˘_œã
;

811 
	`fixup_pkt_nŸ_å™smôãd
(
ni
, 
pkt
);

813 
	}
}

816 
	$ci_udp_tx_d©agøm_Àvñ
(
ci_√tif
* 
ni
, 
ci_ù_pkt_fmt
* 
pkt
,

817 
ci_boﬁón_t
 
ni_locked
)

820 
Àvñ
 = 0;

821  ; ; 
pkt
 = 
	`PKT_CHK_NML
(
ni
,Ökt->
√xt
, 
ni_locked
) ) {

822 
Àvñ
 +
pkt
->
pf
.
udp
.
tx_Àngth
;

823 if–
	`OO_PP_IS_NULL
(
pkt
->
√xt
) )

824  
Àvñ
;

826 
	}
}

829 
	$ci_udp_£ndmsg_£nd_async_q
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
)

831 
oo_pkt_p
 
µ
, 
£nd_li°
;

832 
ci_ù_pkt_fmt
* 
pkt
;

833 
Êags
, 
Àvñ
 = 0;

837 
	`OO_PP_INIT
(
ni
, 
µ
, 
us
->
tx_async_q
);

838 if–
	`OO_PP_IS_NULL
(
µ
) ) ;

839 }  
	`ci_ˇs32_Áû
(&
us
->
tx_async_q
, 
	`OO_PP_ID
(
µ
), 
OO_PP_ID_NULL
) );

842 
£nd_li°
 = 
OO_PP_NULL
;

844 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

845 
Àvñ
 +
	`ci_udp_tx_d©agøm_Àvñ
(
ni
, 
pkt
, 
CI_TRUE
);

846 
µ
 = 
pkt
->
√tif
.
tx
.
dmaq_√xt
;

847 
pkt
->
√tif
.
tx
.
dmaq_√xt
 = 
£nd_li°
;

848 
£nd_li°
 = 
	`OO_PKT_P
(
pkt
);

850  
	`OO_PP_NOT_NULL
(
µ
) );

852 
	`oo_©omic_add
(&
us
->
tx_async_q_Àvñ
, -
Àvñ
);

856 
µ
 = 
pkt
->
√tif
.
tx
.
dmaq_√xt
;

857 if–
pkt
->
Êags
 & 
CI_PKT_FLAG_MSG_CONFIRM
 )

858 
Êags
 = 
MSG_CONFIRM
;

860 
Êags
 = 0;

861 ++
us
->
°©s
.
n_tx_lock_de„r
;

862 
	`ci_udp_£ndmsg_£nd
(
ni
, 
us
, 
pkt
, 
Êags
, 
NULL
);

863 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pkt
);

864 if–
	`OO_PP_IS_NULL
(
µ
) ) ;

865 
pkt
 = 
	`PKT_CHK
(
ni
, 
µ
);

867 
	}
}

869 
	$ci_udp_£ndmsg_async_q_íqueue
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

870 
ci_ù_pkt_fmt
* 
pkt
, 
Êags
)

872 if–
Êags
 & 
MSG_CONFIRM
 )

874 
pkt
->
Êags
 |
CI_PKT_FLAG_MSG_CONFIRM
;

876 
	`oo_©omic_add
(&
us
->
tx_async_q_Àvñ
,

877 
	`ci_udp_tx_d©agøm_Àvñ
(
ni
, 
pkt
, 
CI_FALSE
));

879 
	`OO_PP_INIT
(
ni
, 
pkt
->
√tif
.
tx
.
dmaq_√xt
, 
us
->
tx_async_q
);

880  
	`ci_ˇs32_Áû
(&
us
->
tx_async_q
,

881 
	`OO_PP_ID
(
pkt
->
√tif
.
tx
.
dmaq_√xt
), 
	`OO_PKT_ID
(pkt)) );

883 if–
	`ci_√tif_lock_‹_de„r_w‹k
(
ni
, &
us
->
s
.
b
) )

884 
	`ci_√tif_u∆ock
(
ni
);

885 
	}
}

888 #i‚de‡
__KERNEL__


890 
	$ci_udp_«me_is_ok
(
ci_udp_°©e
* 
us
, c⁄° 
msghdr
* 
msg
)

892 
	`ci_as£π
(
us
);

893 
	`ci_as£π
(
msg
 !
NULL
);

894 
	`ci_as£π
(
msg
->
msg_«mñí
 > 0);

897 if–
msg
->
msg_«me
 =
NULL
 )

900 #i‡
CI_CFG_FAKE_IPV6


901 if–
us
->
s
.
domaö
 =
AF_INET6
 ) {

902 #ifde‡
__sun__


903 if–
msg
->
msg_«mñí
 > (
sockaddr_ö6
) )

906  
msg
->
msg_«mñí
 >
SIN6_LEN_RFC2133
 &&

907 
	`CI_SIN6
(
msg
->
msg_«me
)->
sö6_Ámûy
 =
AF_INET6
 &&

908 
	`ci_t˝_ùv6_is_ùv4
((
sockaddr
*Ë
msg
->
msg_«me
);

912 #ifde‡
__sun__


913 if–
msg
->
msg_«mñí
 > (
sockaddr_ö
) )

917  
msg
->
msg_«mñí
 >(
sockaddr_ö
) &&

918 
	`CI_SIN
(
msg
->
msg_«me
)->
sö_Ámûy
 =
AF_INET
;

919 
	}
}

923 
	#OO_TIMEVAL_UNINITIALISED
 ((
oo_timevÆ
*Ë1)

	)

926 
	$ci_udp_£ndmsg_may_£nd
(
ci_udp_°©e
* 
us
, 
byãs_to_£nd
)

928 
¢dbuf
 = 
us
->
s
.
so
.sndbuf;

930 if–
byãs_to_£nd
 > 
¢dbuf
 / 2 )

935 if–
	`TXQ_LEVEL
(
us
Ë< 
¢dbuf
 )

938 if–
	`ci_udp_tx_advîti£_•a˚
(
us
) )

945  
¢dbuf
 >(Ë(
	`TXQ_LEVEL
(
us
Ë+ 
byãs_to_£nd
);

946 
	}
}

949 
	$ci_udp_£ndmsg_waô
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

950 
byãs_to_£nd
, 
Êags
,

951 
udp_£nd_öfo
* 
söf
)

953 
ci_uöt64
 
°¨t_‰c
 = 0, 
now_‰c
 = 0;

954 
ci_uöt64
 
scheduÀ_‰c
 = 0;

955 #i‚de‡
__KERNEL__


956 
côp_sig«l_öfo
* 
si
 = 
	`côp_sig«l_gë_•ecific_öôed
();

958 
ci_uöt64
 
max_•ö
 = 0;

959 
•ö_limô_by_so
 = 0;

960 
ci_uöt64
 
¶ìp_£q
;

961 
rc
, 
fú°_time
 = 1;

962 
udp_£nd_•ö
;

964 if–
	`ci_udp_£ndmsg_may_£nd
(
us
, 
byãs_to_£nd
) )

967 #i‚de‡
__KERNEL__


968 
udp_£nd_•ö
 = 
	`oo_≥r_thªad_gë
()->
•ö°©e
 & (1 << 
ONLOAD_SPIN_UDP_SEND
);

970 
udp_£nd_•ö
 = 0;

974 if–
	`ci_√tif_may_pﬁl
(
ni
Ë&& 
	`ci_√tif_has_evít
(ni) )

975 if–
	`si_åylock_™d_öc
(
ni
, 
söf
, 
us
->
°©s
.
n_tx_lock_pﬁl
) )

976 
	`ci_√tif_pﬁl
(
ni
);

978 
no_îr‹
:

980 
¶ìp_£q
 = 
us
->
s
.
b
.¶ìp_£q.
Æl
;

981 
	`ci_rmb
();

982 if(
	`CI_UNLIKELY
–(
rc
 = 
	`ci_gë_so_îr‹
(&
us
->
s
)Ë!0 || us->s.
tx_î∫o
 ))

983 
so_îr‹
;

984 if–
	`ci_udp_£ndmsg_may_£nd
(
us
, 
byãs_to_£nd
) ) {

985 
us
->
°©s
.
n_tx_pﬁl_avoids_fuŒ
 +
fú°_time
;

986 if–
udp_£nd_•ö
 )

987 
ni
->
°©e
->
is_•ö√r
 = 0;

990 if–(
Êags
 & 
MSG_DONTWAIT
) ||

991 (
us
->
s
.
b
.
sb_aÊags
 & (
CI_SB_AFLAG_O_NONBLOCK
|
CI_SB_AFLAG_O_NDELAY
)) ) {

992 ++
us
->
°©s
.
n_tx_ógaö
;

993  -
EAGAIN
;

995 if–
fú°_time
 ) {

996 
fú°_time
 = 0;

997 if–
udp_£nd_•ö
 ) {

998 
max_•ö
 = 
us
->
s
.
b
.
•ö_cy˛es
;

999 if–
us
->
s
.
so
.
¢dtimeo_m£c
 ) {

1000 
ci_uöt64
 
max_so_•ö
 = 
söf
->
timeout
 * 
	`IPTIMER_STATE
(
ni
)->
khz
;

1001 if–
max_so_•ö
 <
max_•ö
 ) {

1002 
max_•ö
 = 
max_so_•ö
;

1003 
•ö_limô_by_so
 = 1;

1006 ++
us
->
°©s
.
n_tx_•ö
;

1007 
	`ci_‰c64
(&
°¨t_‰c
);

1008 
now_‰c
 = 
°¨t_‰c
;

1009 
scheduÀ_‰c
 = 
°¨t_‰c
;

1012 if–
udp_£nd_•ö
 ) {

1013 if–
now_‰c
 - 
°¨t_‰c
 < 
max_•ö
 ) {

1014 #i‡
CI_CFG_SPIN_STATS


1015 
ni
->
°©e
->
°©s
.
•ö_udp_£nd
++;

1017 if–
	`ci_√tif_may_pﬁl
(
ni
) ) {

1018 if–
	`ci_√tif_√ed_pﬁl_•önög
(
ni
, 
now_‰c
) ) {

1019 if–
	`si_åylock
(
ni
, 
söf
) )

1020 
	`ci_√tif_pﬁl_n
(
ni
, 
	`NI_OPTS
“i).
evs_≥r_pﬁl
);

1022 if–! 
ni
->
°©e
->
is_•ö√r
 )

1023 
ni
->
°©e
->
is_•ö√r
 = 1;

1025 if–
söf
->
°ack_locked
 ) {

1026 
	`ci_√tif_u∆ock
(
ni
);

1027 
söf
->
°ack_locked
 = 0;

1029 
rc
 = 
	`OO_SPINLOOP_PAUSE_CHECK_SIGNALS
(
ni
, 
now_‰c
, &
scheduÀ_‰c
,

1030 
us
->
s
.
so
.
¢dtimeo_m£c
,

1031 
NULL
, 
si
);

1032 if–
rc
 != 0 ) {

1033 
ni
->
°©e
->
is_•ö√r
 = 0;

1034  
rc
;

1037 if–
•ö_limô_by_so
 ) {

1038 ++
us
->
°©s
.
n_tx_ógaö
;

1039  -
EAGAIN
;

1043 if–
söf
->
timeout
 && 
udp_£nd_•ö
 ) {

1044 
ci_uöt32
 
•ö_ms
 = 
	`NI_OPTS
(
ni
).
•ö_u£c
 >> 10;

1045 if–
•ö_ms
 < 
söf
->
timeout
 )

1046 
söf
->
timeout
 -
•ö_ms
;

1048 ++
us
->
°©s
.
n_tx_ógaö
;

1049  -
EAGAIN
;

1052 ++
us
->
°©s
.
n_tx_block
;

1053 
rc
 = 
	`ci_sock_¶ìp
(
ni
, &
us
->
s
.
b
, 
CI_SB_FLAG_WAKE_TX
,

1054 
söf
->
°ack_locked
 ? 
CI_SLEEP_NETIF_LOCKED
 : 0,

1055 
¶ìp_£q
, &
söf
->
timeout
);

1056 
söf
->
°ack_locked
 = 0;

1057 if–
rc
 < 0 )

1058  
rc
;

1062 
so_îr‹
:

1063 if–
udp_£nd_•ö
 )

1064 
ni
->
°©e
->
is_•ö√r
 = 0;

1065 if–
rc
 == 0 )

1066 
rc
 = -
us
->
s
.
tx_î∫o
;

1067 if–
rc
 == 0 )

1068 
no_îr‹
;

1069  
rc
;

1070 
	}
}

1073 
ci_ölöe
 
ci_udp_hdr
* 
	$udp_öô
(
ci_udp_°©e
* 
us
, 
ci_ù_pkt_fmt
* 
pkt
,

1074 
∑ylﬂd_byãs
)

1076 
ci_udp_hdr
* 
udp
 = 
	`TX_PKT_UDP
(
pkt
);

1077 
udp
->
udp_Àn_be16
 = (
ci_uöt16
Ë(
∑ylﬂd_byãs
 + (
ci_udp_hdr
));

1078 
udp
->
udp_Àn_be16
 = 
	`CI_BSWAP_BE16
(udp->udp_len_be16);

1079 
udp
->
udp_check_be16
 = 0;

1080 
udp
->
udp_sour˚_be16
 = 
	`udp_Õ‹t_be16
(
us
);

1081  
udp
;

1082 
	}
}

1087 
ci_ölöe
 
ci_ù4_hdr
* 
	$ëh_ù_öô
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

1088 
ci_ù_pkt_fmt
* 
pkt
)

1090 
ci_ù4_hdr
* 
ù
;

1092 
ù
 = 
	`oo_tx_ù_hdr
(
pkt
);

1094 
ù
->
ù_ihl_vîsi⁄
 = 
	`CI_IP4_IHL_VERSION
((*ip));

1095 
ù
->
ù_tos
 = 
	`UDP_IP_HDR
(
us
)->ip_tos;

1098 
ù
->
ù_‰ag_off_be16
 = 
CI_IP4_FRAG_DONT
;

1099 
ù
->
ù_¥Ÿocﬁ
 = 
IPPROTO_UDP
;

1100 
ù
->
ù_check_be16
 = 0;

1101  
ù
;

1102 
	}
}

1110 
	$ci_udp_£ndmsg_fûl
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

1111 
ci_iovec_±r
* 
piov
, 
byãs_to_£nd
,

1112 
Êags
,

1113 
oo_pkt_fûÀr
* 
pf
,

1114 
udp_£nd_öfo
* 
söf
)

1116 
ci_ù_pkt_fmt
* 
fú°_pkt
;

1117 
ci_ù_pkt_fmt
* 
√w_pkt
;

1118 
rc
, 
‰ag_byãs
, 
∑ylﬂd_byãs
;

1119 
byãs_À·
, 
‰ag_off
;

1120 
ci_uöt16
 
ù_id
;

1121 
ci_ù4_hdr
* 
ù
;

1122 
pmtu
 = 
söf
->
ùˇche
.
mtu
;

1123 
ˇn_block
 = ! ((
	`NI_OPTS
(
ni
).
udp_n⁄block_no_pkts_mode
) &&

1124 ((
Êags
 & 
MSG_DONTWAIT
) ||

1125 (
us
->
s
.
b
.
sb_aÊags
 & (
CI_SB_AFLAG_O_NONBLOCK
|
CI_SB_AFLAG_O_NDELAY
))));

1127 
	`ci_as£π
(
pmtu
 > 0);

1129 
‰ag_off
 = 0;

1130 
byãs_À·
 = 
byãs_to_£nd
;

1135 if–
byãs_to_£nd
 < 
	`NI_OPTS
(
ni
).
udp_£nd_u∆ock_thªsh
 &&

1136 ! 
söf
->
°ack_locked
 )

1137 
söf
->
°ack_locked
 = 
	`ci_√tif_åylock
(
ni
);

1139 
rc
 = 
	`ci_√tif_pkt_Æloc_block
(
ni
, &
us
->
s
, &
söf
->
°ack_locked
, 
ˇn_block
,

1140 &
fú°_pkt
);

1141 if–
rc
 != 0 )

1142  
rc
;

1143 
	`oo_tx_pkt_œyout_öô
(
fú°_pkt
);

1145 
ù_id
 = 
	`NEXT_IP_ID
(
ni
);

1146 
ù_id
 = 
	`CI_BSWAP_BE16
(ip_id);

1148 
	`udp_öô
(
us
, 
fú°_pkt
, 
byãs_to_£nd
);

1150 
	`oo_pkt_fûÀr_öô
(
pf
, 
fú°_pkt
,

1151 (
uöt8_t
*Ë
	`oo_tx_ù_d©a
(
fú°_pkt
Ë+ (
ci_udp_hdr
));

1152 
fú°_pkt
->
∑y_Àn
 = ((*Ë
	`oo_tx_ù_d©a
(first_pkt)

1153 + (
ci_udp_hdr
Ë- 
	`PKT_START
(
fú°_pkt
));

1155 
∑ylﬂd_byãs
 = 
pmtu
 - (
ci_ù4_hdr
Ë- (
ci_udp_hdr
);

1156 if–
∑ylﬂd_byãs
 >
byãs_À·
 ) {

1157 
∑ylﬂd_byãs
 = 
byãs_À·
;

1158 
byãs_À·
 = 0;

1161 
∑ylﬂd_byãs
 = 
	`UDP_PAYLOAD1_SPACE_PMTU
(
pmtu
);

1162 
byãs_À·
 -
∑ylﬂd_byãs
;

1164 
‰ag_byãs
 = 
∑ylﬂd_byãs
 + (
ci_udp_hdr
);

1167 
pf
->
pkt
->pf.
udp
.
tx_Àngth
 = 
∑ylﬂd_byãs
 + (
ci_udp_hdr
) +

1168 (
ci_ù4_hdr
Ë+ (
ci_ëhî_hdr
);

1169 
ù
 = 
	`ëh_ù_öô
(
ni
, 
us
, 
pf
->
pkt
);

1170 
ù
->
ù_tŸ_Àn_be16
 = 
‰ag_byãs
 + (
ci_ù4_hdr
);

1171 
ù
->
ù_tŸ_Àn_be16
 = 
	`CI_BSWAP_BE16
(ip->ip_tot_len_be16);

1172 
ù
->
ù_‰ag_off_be16
 = 
‰ag_off
 >> 3u;

1173 
ù
->
ù_‰ag_off_be16
 = 
	`CI_BSWAP_BE16
(ip->ip_frag_off_be16);

1174 if–
byãs_À·
 > 0 )

1175 
ù
->
ù_‰ag_off_be16
 |
CI_IP4_FRAG_MORE
;

1176 if–
us
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_ALWAYS_DF
 ||

1177 –
us
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_PMTU_DO
 &&

1178 
pf
->
pkt
 =
fú°_pkt
 ) ) {

1179 
ù
->
ù_‰ag_off_be16
 = 
CI_IP4_FRAG_DONT
;

1181 
‰ag_off
 +
‰ag_byãs
;

1182 
ù
->
ù_id_be16
 = 
ù_id
;

1185 
	`ci_√tif_pkt_hﬁd
(
ni
, 
pf
->
pkt
);

1187 
rc
 = 
	`oo_pkt_fûl
(
ni
, &
us
->
s
, &
söf
->
°ack_locked
, 
ˇn_block
, 
pf
, 
piov
,

1188 
∑ylﬂd_byãs
 
	`CI_KERNEL_ARG
(
CI_ADDR_SPC_CURRENT
));

1189 if–
	`CI_UNLIKELY
–
rc
 != 0 ) )

1190 
fûl_Áûed
;

1192 if–
byãs_À·
 == 0 )

1196 ++
us
->
°©s
.
n_tx_‰agmíts
;

1198 
rc
 = 
	`ci_√tif_pkt_Æloc_block
(
ni
, &
us
->
s
, &
söf
->
°ack_locked
,

1199 
ˇn_block
, &
√w_pkt
);

1200 if–
	`CI_UNLIKELY
–
rc
 != 0 ))

1201 
fûl_Áûed
;

1202 
	`oo_tx_pkt_œyout_öô
(
√w_pkt
);

1204 
pf
->
pkt
->
√xt
 = 
	`OO_PKT_P
(
√w_pkt
);

1205 
pf
->
œ°_pkt
->
‰ag_√xt
 = 
	`OO_PKT_P
(
√w_pkt
);

1206 
	`oo_pkt_fûÀr_öô
(
pf
, 
√w_pkt
, 
	`oo_tx_ù_d©a
(new_pkt));

1207 
√w_pkt
->
∑y_Àn
 = (*Ë
	`oo_tx_ù_d©a
“ew_pktË- 
	`PKT_START
(new_pkt);

1209 
∑ylﬂd_byãs
 = 
	`UDP_PAYLOAD2_SPACE_PMTU
(
pmtu
);

1210 
∑ylﬂd_byãs
 = 
	`CI_MIN
’aylﬂd_byãs, 
byãs_À·
);

1211 
byãs_À·
 -
∑ylﬂd_byãs
;

1212 
‰ag_byãs
 = 
∑ylﬂd_byãs
;

1215 
pf
->
pkt
->
√xt
 = 
OO_PP_NULL
;

1216 
pf
->
œ°_pkt
 =Öf->
pkt
;

1217 
pf
->
pkt
 = 
fú°_pkt
;

1219  
byãs_to_£nd
;

1221 
fûl_Áûed
:

1222 if–! 
söf
->
°ack_locked
 && 
	`ci_√tif_lock
(
ni
) == 0 )

1223 
söf
->
°ack_locked
 = 1;

1231 
ci_ù_pkt_fmt
* 
pkt
 = 
fú°_pkt
;

1232 
n_buf„rs
;

1235 
n_buf„rs
 = 
pkt
->n_buffers;

1236 
	`ci_as£π_gt
(
pkt
->
ªfcou¡
, 1);

1237 
pkt
->
ªfcou¡
--;

1240  
n_buf„rs
-- > 0 ) {

1241 
	`CI_NETIF_STATE_MOD
(
ni
, 
söf
->
°ack_locked
, 
n_async_pkts
, -);

1242 if–
	`OO_PP_IS_NULL
(
pkt
->
‰ag_√xt
) )

1243 
pkt_chaö_ªÀa£d
;

1244 
pkt
 = 
	`PKT_CHK
(
ni
,Ökt->
‰ag_√xt
);

1248 
pkt_chaö_ªÀa£d
:

1251 #ifde‡
__KERNEL__


1252 if–! 
söf
->
°ack_locked
 )

1253 
	`ci_√tif_£t_mîge_©omic_Êag
(
ni
);

1254 
	`ci_√tif_pkt_ªÀa£_m∆
(
ni
, 
fú°_pkt
, &
söf
->
°ack_locked
);

1257 
	`ci_as£π
(
söf
->
°ack_locked
);

1258 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
fú°_pkt
);

1261  
rc
;

1262 
	}
}

1266 
	$ci_udp_£ndmsg_⁄lﬂd
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

1267 c⁄° 
ci_msghdr
* 
msg
, 
Êags
,

1268 
udp_£nd_öfo
* 
söf
)

1270 
rc
, 
i
, 
byãs_to_£nd
;

1271 
oo_pkt_fûÀr
 
pf
;

1272 
ci_iovec_±r
 
piov
;

1273 
was_locked
;

1276 
	`ci_as£π
(
ni
);

1277 
	`ci_as£π
(
us
);

1278 
	`ci_as£π
(
msg
 !
NULL
);

1281 
byãs_to_£nd
 = 0;

1282 if–
msg
->
msg_iovÀn
 > 0 ) {

1283 
i
 = 
msg
->
msg_iovÀn
 - 1;

1285 if–
	`CI_IOVEC_BASE
(&
msg
->
msg_iov
[
i
]Ë!
NULL
 )

1286 
byãs_to_£nd
 +
	`CI_IOVEC_LEN
(&
msg
->
msg_iov
[
i
]);

1287 if–
	`CI_IOVEC_LEN
(&
msg
->
msg_iov
[
i
]) > 0 )

1288 
eÁu…
;

1289 }  --
i
 >= 0 );

1290 
	`ci_iovec_±r_öô_nz
(&
piov
, 
msg
->
msg_iov
, msg->
msg_iovÀn
);

1293 
	`ci_iovec_±r_öô
(&
piov
, 
NULL
, 0);

1297 
pf
.
Æloc_pkt
 = 
NULL
;

1299 if–! 
	`UDP_HAS_SENDQ_SPACE
(
us
, 
byãs_to_£nd
) |

1300 (
byãs_to_£nd
 > (Ë
CI_UDP_MAX_PAYLOAD_BYTES
) )

1301 
no_•a˚_‹_too_big
;

1303 
back_to_Á°_∑th
:

1304 
was_locked
 = 
söf
->
°ack_locked
;

1305 if–
byãs_to_£nd
 > 
söf
->
ùˇche
.
mtu
 - (
ci_ù4_hdr
) -

1306 (
ci_udp_hdr
) &&

1307 (
us
->
s
.
s_Êags
 & 
CI_SOCK_FLAG_ALWAYS_DF
) ) {

1309 #i‚de‡
__KERNEL__


1310 if–
msg
->
msg_«mñí
 == 0 ||

1311 (
us
->
s
.
so
.
so_debug
 & 
CI_SOCKOPT_FLAG_IP_RECVERR
) )

1313 
us
->
s
.
so_îr‹
 = 
EMSGSIZE
;

1314 
söf
->
rc
 = -
EMSGSIZE
;

1317 
rc
 = 
	`ci_udp_£ndmsg_fûl
(
ni
, 
us
, &
piov
, 
byãs_to_£nd
, 
Êags
, &
pf
, 
söf
);

1318 if–
us
->
s
.
time°ampög_Êags
 & 
ONLOAD_SOF_TIMESTAMPING_OPT_ID
 ) {

1319 
pf
.
pkt
->
ts_key
 = 
us
->
s
.ts_key;

1320 
	`ci_©omic32_öc
(&
us
->
s
.
ts_key
);

1322 if–
söf
->
°ack_locked
 && ! 
was_locked
 )

1323 ++
us
->
°©s
.
n_tx_lock_pkt
;

1324 if(
	`CI_LIKELY
–
rc
 >= 0 )) {

1325 
söf
->
rc
 = 
byãs_to_£nd
;

1326 
	`oo_tx_ù_hdr
(
pf
.
pkt
)->
ù_daddr_be32
 = 
söf
->
ùˇche
.
ù
.ip_daddr_be32;

1327 
	`oo_tx_udp_hdr
(
pf
.
pkt
)->
udp_de°_be16
 = 
söf
->
ùˇche
.
dp‹t_be16
;

1328 if–
	`si_åylock_™d_öc
(
ni
, 
söf
, 
us
->
°©s
.
n_tx_lock_¢d
) ) {

1329 
	`ci_udp_£ndmsg_£nd
(
ni
, 
us
, 
pf
.
pkt
, 
Êags
, 
söf
);

1330 
	`ci_√tif_pkt_ªÀa£
(
ni
, 
pf
.
pkt
);

1331 
	`ci_√tif_u∆ock
(
ni
);

1332 
söf
->
°ack_locked
 = 0;

1335 
	`ci_udp_£ndmsg_async_q_íqueue
(
ni
, 
us
, 
pf
.
pkt
, 
Êags
);

1339 
söf
->
rc
 =Ñc;

1345 
eÁu…
:

1346 
söf
->
rc
 = -
EFAULT
;

1349 
no_•a˚_‹_too_big
:

1353 if–
byãs_to_£nd
 > 
CI_UDP_MAX_PAYLOAD_BYTES
 ) {

1354 
söf
->
rc
 = -
EMSGSIZE
;

1359 
rc
 = 
	`ci_udp_£ndmsg_waô
(
ni
, 
us
, 
byãs_to_£nd
, 
Êags
, 
söf
);

1360 if(
	`CI_UNLIKELY
–
rc
 != 0 )) {

1361 
söf
->
rc
 =Ñc;

1365 
	`LOG_UV
(
	`ci_log
("%s: "
NT_FMT
"backÅÿÁ°Ö©h", 
__FUNCTION__
,

1366 
	`NT_PRI_ARGS
(
ni
,
us
)));

1367 
back_to_Á°_∑th
;

1368 
	}
}

1371 
	$ci_udp_£ndmsg
(
ci_udp_iomsg_¨gs
 *
a
,

1372 c⁄° 
ci_msghdr
* 
msg
, 
Êags
)

1374 
ci_√tif
 *
ni
 = 
a
->ni;

1375 
ci_udp_°©e
 *
us
 = 
a
->us;

1376 
udp_£nd_öfo
 
söf
;

1377 
rc
;

1380 
	`ci_as£π
(
msg
 !
NULL
);

1383 
söf
.
rc
 = 0;

1384 
söf
.
°ack_locked
 = 0;

1385 
söf
.
u£d_ùˇche
 = 0;

1386 
söf
.
timeout
 = 
us
->
s
.
so
.
¢dtimeo_m£c
;

1388 #i‡
	`deföed
(
__löux__
Ë&& !deföed(
__KERNEL__
)

1390 if(
	`CI_UNLIKELY
–
	`CMSG_FIRSTHDR
(
msg
Ë!
NULL
 )) {

1391 
ö_pktöfo
* 
öfo
 = 
NULL
;

1392 if–
	`ci_ù_cmsg_£nd
(
msg
, &
öfo
Ë!0 || infÿ!
NULL
 )

1393 
£nd_vü_os
;

1397 if(
	`CI_UNLIKELY
–
Êags
 & 
MSG_MORE
 )) {

1398 
	`LOG_E
(
	`ci_log
("%s: MSG_MOREÇŸ yë suµ‹ãd", 
__FUNCTION__
));

1399 
	`CI_SET_ERROR
(
rc
, 
EOPNOTSUPP
);

1400  
rc
;

1403 if(
	`CI_UNLIKELY
–
Êags
 & 
MSG_OOB
 ))

1405 
£nd_vü_os
;

1407 if(
	`CI_UNLIKELY
–
us
->
s
.
so_îr‹
 | us->s.
tx_î∫o
 ))

1408 
so_îr‹
;

1409 
no_îr‹
:

1411 #i‡
CI_CFG_UDP_SEND_UNLOCK_OPT


1412 if–! 
	`NI_OPTS
(
ni
).
udp_£nd_u∆ocked
 ) {

1413 #i‚de‡
__KERNEL__


1414 
	`ci_√tif_lock
(
ni
);

1416 if–(
rc
 = 
	`ci_√tif_lock
(
ni
)) < 0 ) {

1417 
rc
 = -
ERESTARTSYS
;

1418 
îr‹
;

1421 
söf
.
°ack_locked
 = 1;

1425 #i‚de‡
__KERNEL__


1426 if–
msg
->
msg_«mñí
 == 0 )

1432 if(
	`CI_UNLIKELY
–! 
	`udp_øddr_be32
(
us
) )) {

1436 
rc
 = -
EDESTADDRREQ
;

1437 
îr‹
;

1440 
söf
.
ùˇche
.
ù
.
ù_daddr_be32
 = 0;

1442 if–
us
->
s
.
pkt
.
°©us
 =
ªårc_suc˚ss
 ) {

1456 if(
	`CI_UNLIKELY
–! 
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
),&
us
->
s
.
pkt
) )) {

1457 if–
	`si_åylock_™d_öc
(
ni
, &
söf
, 
us
->
°©s
.
n_tx_lock_˝
) ) {

1458 ++
us
->
°©s
.
n_tx_˝_c_lookup
;

1459 
	`ci˝_u£r_ªåõve
(
ni
, &
us
->
s
.
pkt
, &us->s.
˝
);

1462 if–
us
->
s
.
pkt
.
°©us
 !
ªårc_suc˚ss
 &&

1463 
us
->
s
.
pkt
.
°©us
 !
ªårc_nomac
 )

1464 
£nd_vü_os
;

1466 
söf
.
ùˇche
.
mtu
 = 
us
->
s
.
pkt
.mtu;

1468 #i‚de‡
__KERNEL__


1469 if(
	`CI_UNLIKELY
–
msg
->
msg_«me
 =
NULL
 )) {

1470 
rc
 = -
EFAULT
;

1471 
îr‹
;

1477 if–
msg
->
msg_«me
 !
NULL
 && 
	`msg_«mñí_ok
(msg->
msg_«mñí
) &&

1478 (! 
CI_CFG_FAKE_IPV6
 || 
us
->
s
.
domaö
 =
AF_INET
) &&

1479 
	`CI_SIN
(
msg
->
msg_«me
)->
sö_Ámûy
 =
AF_INET
 ) {

1482 if–! 
	`ci_udp_«me_is_ok
(
us
, 
msg
) )

1484 
£nd_vü_os
;

1485 #ifde‡
__sun__


1486 if(
	`CI_UNLIKELY
–
	`udp_øddr_be32
(
us
) != 0 )) {

1487 
	`CI_SET_ERROR
(
rc
, 
EISCONN
);

1488  
rc
;

1491 if–! 
CI_CFG_FAKE_IPV6
 || 
	`CI_SA
(
msg
->
msg_«me
)->
ß_Ámûy
 =
AF_INET
 ) {

1492 
söf
.
ùˇche
.
ù
.
ù_daddr_be32
 = 
	`CI_SIN
(
msg
->
msg_«me
)->
sö_addr
.
s_addr
;

1493 
söf
.
ùˇche
.
dp‹t_be16
 = 
	`CI_SIN
(
msg
->
msg_«me
)->
sö_p‹t
;

1495 #i‡
CI_CFG_FAKE_IPV6


1497 
söf
.
ùˇche
.
ù
.
ù_daddr_be32
 = 
	`ci_gë_ù4_addr
(
AF_INET6
,

1498 
	`CI_SA
(
msg
->
msg_«me
));

1499 
söf
.
ùˇche
.
dp‹t_be16
 = 
	`CI_SIN6
(
msg
->
msg_«me
)->
sö6_p‹t
;

1503 if(
	`CI_UNLIKELY
–
söf
.
ùˇche
.
ù
.
ù_daddr_be32
 =
INADDR_ANY
 ))

1504 
£nd_vü_os
;

1506 #i‚de‡
__KERNEL__


1507 if(
	`CI_UNLIKELY
–
	`udp_Õ‹t_be16
(
us
) == 0 )) {

1512 if–
söf
.
°ack_locked
 )

1513 
	`ci_√tif_u∆ock
(
ni
);

1514  
	`ci_udp_£ndmsg_os_gë_bödög
(
a
->
ï
,á->
fd
, 
msg
, 
Êags
);

1518 if–
söf
.
ùˇche
.
dp‹t_be16
 =
us
->
ïhemîÆ_pkt
.dport_be16 &&

1519 
söf
.
ùˇche
.
ù
.
ù_daddr_be32
 ==

1520 
us
->
ïhemîÆ_pkt
.
ù
.
ù_daddr_be32
 &&

1521 
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
), &
us
->
ïhemîÆ_pkt
) ) {

1532 if–
us
->
ïhemîÆ_pkt
.
°©us
 !
ªårc_suc˚ss
 &&

1533 
us
->
ïhemîÆ_pkt
.
°©us
 !
ªårc_nomac
 )

1534 
£nd_vü_os
;

1535 
söf
.
ùˇche
.
mtu
 = 
us
->
ïhemîÆ_pkt
.mtu;

1536 ++
us
->
°©s
.
n_tx_˝_m©ch
;

1538 if–
	`si_åylock_™d_öc
(
ni
, &
söf
, 
us
->
°©s
.
n_tx_lock_˝
) ) {

1539 if–
söf
.
ùˇche
.
dp‹t_be16
 !
us
->
ïhemîÆ_pkt
.dport_be16 ||

1540 
söf
.
ùˇche
.
ù
.
ù_daddr_be32
 !=

1541 
us
->
ïhemîÆ_pkt
.
ù
.
ù_daddr_be32
 ) {

1542 
us
->
ïhemîÆ_pkt
.
ù
.
ù_daddr_be32
 = 
söf
.
ùˇche
.ip.ip_daddr_be32;

1543 
us
->
ïhemîÆ_pkt
.
dp‹t_be16
 = 
söf
.
ùˇche
.dport_be16;

1544 
	`ci_ù_ˇche_övÆid©e
(&
us
->
ïhemîÆ_pkt
);

1546 if(
	`CI_UNLIKELY
–! 
	`ci˝_ù_ˇche_is_vÆid
(
	`CICP_HANDLE
(
ni
),

1547 &
us
->
ïhemîÆ_pkt
) )) {

1548 ++
us
->
°©s
.
n_tx_˝_uc_lookup
;

1549 
	`ci˝_u£r_ªåõve
(
ni
, &
us
->
ïhemîÆ_pkt
, &us->
s
.
˝
);

1551 if–
us
->
ïhemîÆ_pkt
.
°©us
 !
ªårc_suc˚ss
 &&

1552 
us
->
ïhemîÆ_pkt
.
°©us
 !
ªårc_nomac
 )

1553 
£nd_vü_os
;

1554 
söf
.
ùˇche
.
mtu
 = 
us
->
ïhemîÆ_pkt
.mtu;

1560 
söf
.
u£d_ùˇche
 = 1;

1561 ++
us
->
°©s
.
n_tx_˝_a_lookup
;

1562 
söf
.
ùˇche
.
mac_öãgrôy
.
row_ödex
 = 0;

1563 
	`ci˝_u£r_ªåõve
(
ni
, &
söf
.
ùˇche
, &
us
->
s
.
˝
);

1564 if–
söf
.
ùˇche
.
°©us
 !
ªårc_suc˚ss
 &&

1565 
söf
.
ùˇche
.
°©us
 !
ªårc_nomac
 )

1566 
£nd_vü_os
;

1571 
	`ci_as£π_gt
(
söf
.
ùˇche
.
mtu
, 0);

1572 
	`ci_udp_£ndmsg_⁄lﬂd
(
ni
, 
us
, 
msg
, 
Êags
, &
söf
);

1573 if–
söf
.
°ack_locked
 )

1574 
	`ci_√tif_u∆ock
(
ni
);

1575 if–
söf
.
rc
 < 0 )

1576 
	`CI_SET_ERROR
(
söf
.
rc
, -sinf.rc);

1577  
söf
.
rc
;

1579 
so_îr‹
:

1580 if–(
rc
 = -
	`ci_gë_so_îr‹
(&
us
->
s
)Ë=0 && (r¯-us->s.
tx_î∫o
) == 0 )

1581 
no_îr‹
;

1582 
îr‹
;

1584 
îr‹
:

1585 if–
söf
.
°ack_locked
 )

1586 
	`ci_√tif_u∆ock
(
ni
);

1587 #i‚de‡
__löux__


1588 if–
rc
 =-
EPIPE
 && ! (
Êags
 & 
MSG_NOSIGNAL
) )

1589 
	`ci_sys_io˘l
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),
OO_IOC_KILL_SELF_SIGPIPE
,
NULL
);

1591 
	`CI_SET_ERROR
(
rc
, -rc);

1592  
rc
;

1594 
£nd_vü_os
:

1595 if–
söf
.
°ack_locked
 )

1596 
	`ci_√tif_u∆ock
(
ni
);

1597  
	`ci_udp_£ndmsg_os
(
ni
, 
us
, 
msg
, 
Êags
, 1, 0);

1598 
	}
}

	@udp_sockopts.c

14 
	~"ù_öã∫Æ.h
"

16 #i‚de‡
__KERNEL__


17 
	~<ci/öã∫Æ/eÁbcfg.h
>

20 #i‚de‡
_WIN32


21 
	~<√töë/udp.h
>

25 
	#LPF
 "UDP SOCKOPTS "

	)

28 
	$ci_mˇ°_›ts_upd©ed
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
)

30 if–
	`CI_IP_IS_MULTICAST
(
us
->
ïhemîÆ_pkt
.
ù
.
ù_daddr_be32
) )

31 
	`ci_ù_ˇche_övÆid©e
(&
us
->
ïhemîÆ_pkt
);

32 if–
	`CI_IP_IS_MULTICAST
(
us
->
s
.
pkt
.
ù
.
ù_daddr_be32
) )

33 
	`ci_ù_ˇche_övÆid©e
(&
us
->
s
.
pkt
);

34 
	}
}

37 
	$ci_mˇ°_£t_outgoög_if
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

38 
ifödex
, 
ci_uöt32
 
œddr
)

40 
rc
;

42 
us
->
s
.
˝
.
ù_mu…iˇ°_if_œddr_be32
 = 
œddr
;

43 if–
ifödex
 == 0 ) {

44 if–
œddr
 =
INADDR_ANY
 ) {

45 
us
->
s
.
˝
.
ù_mu…iˇ°_if
 = 
CI_IFID_BAD
;

48 
rc
 = 
	`ci˝_u£r_föd_home
(
	`CICP_HANDLE
(
ni
), &
œddr
,

49 
NULL
 , &
us
->
s
.
˝
.
ù_mu…iˇ°_if
,

50 
NULL
 , NULL , NULL );

51 if(
	`CI_UNLIKELY
–
rc
 != 0 ))

57 
	`LOG_E
(
	`ci_log
("%s: cicp_user_find_home %s failed (%d)",

58 
__FUNCTION__
, 
	`ù_addr_°r
(
œddr
), 
rc
));

61 
us
->
s
.
˝
.
ù_mu…iˇ°_if
 = 
ifödex
;

63 
	}
}

66 
	$ci_mˇ°_joö_Àave
(
ci_√tif
* 
ni
, 
ci_udp_°©e
* 
us
,

67 
ci_ifid_t
 
ifödex
, 
ci_uöt32
 
œddr
,

68 
ci_uöt32
 
maddr
, 
add
)

70 
ci_hwp‹t_id_t
 
hwp‹t
 = 
CI_HWPORT_ID_BAD
;

71 
ci˝_íˇp_t
 
íˇp
 = {
CICP_LLAP_TYPE_NONE
, 0};

72 
rc
;

74 if–
add
 )

75 
us
->
udpÊags
 |
CI_UDPF_MCAST_JOIN
;

77 if–
	`NI_OPTS
(
ni
).
mˇ°_joö_h™dovî
 == 2 )

78  
CI_SOCKET_HANDOVER
;

79 if–! 
	`NI_OPTS
(
ni
).
mˇ°_ªcv
 )

82 if–
ifödex
 != 0 )

83 
rc
 = 
	`ci˝_Œ≠_ªåõve
(
	`CICP_HANDLE
(
ni
), 
ifödex
, 
NULL
, &
hwp‹t
, NULL,

84 &
íˇp
, 
NULL
 , NULL);

85 if–
œddr
 != 0 )

86 
rc
 = 
	`ci˝_u£r_föd_home
(
	`CICP_HANDLE
(
ni
), &
œddr
, &
hwp‹t
, &
ifödex
,

87 
NULL
, NULL, &
íˇp
);

89 
ci_ù_ˇched_hdrs
 
ùˇche
;

90 
	`ci_ù_ˇche_öô
(&
ùˇche
);

91 
ùˇche
.
ù
.
ù_daddr_be32
 = 
maddr
;

92 
ùˇche
.
dp‹t_be16
 = 0;

93 
	`ci˝_u£r_ªåõve
(
ni
, &
ùˇche
, &
us
->
s
.
˝
);

94 
hwp‹t
 = 
ùˇche
.hwport;

95 
íˇp
 = 
ùˇche
.encap;

96 
ifödex
 = 
ùˇche
.ifindex;

97  
ùˇche
.
°©us
 ) {

98 
ªårc_suc˚ss
:

99 
ªårc_nomac
:

100 
rc
 = 0;

103 
rc
 = 1;

111 if–
rc
 !0 || ! 
	`ci_hwp‹t_check_⁄lﬂd
(
hwp‹t
, &
íˇp
) )

116  
	`NI_OPTS
(
ni
).
mˇ°_joö_h™dovî
 ? 
CI_SOCKET_HANDOVER
 : 0;

118 
rc
 = 
	`ci_t˝_ï_mˇ°_add_dñ
(
ni
, 
	`S_SP
(
us
), 
ifödex
, 
maddr
, 
add
);

119 if–
rc
 != 0 ) {

120 
	`LOG_E
(
	`log
(
FNS_FMT
 "%†ifödex=%d maddr="
CI_IP_PRINTF_FORMAT
" failed "

121 "%d", 
	`FNS_PRI_ARGS
(
ni
, &
us
->
s
), 
add
 ? "ADD" : "DROP",

122 (Ë
ifödex
, 
	`CI_IP_PRINTF_ARGS
(&
maddr
), 
rc
));

123 if–
CITP_OPTS
.
no_Áû
 )

127 
	`RET_WITH_ERRNO
(-
rc
);

131 
	`LOG_UC
(
	`log
(
FNS_FMT
 "ci_t˝_ï_mˇ°_add_dñ(%s, %d, "
CI_IP_PRINTF_FORMAT
")",

132 
	`FNS_PRI_ARGS
(
ni
, &
us
->
s
), 
add
 ? "ADD" : "DROP",

133 (Ë
ifödex
, 
	`CI_IP_PRINTF_ARGS
(&
maddr
)));

135 if–
add
 )

136 
us
->
udpÊags
 |
CI_UDPF_MCAST_FILTER
;

138 if–
add
 && 
	`NI_OPTS
(
ni
).
mˇ°_joö_bödtodevi˚
 &&

139 ! (
us
->
udpÊags
 & 
CI_UDPF_NO_MCAST_B2D
) &&

140 
us
->
s
.
˝
.
so_bödtodevi˚
 =
CI_IFID_BAD
 ) {

144 if–
us
->
s
.
rx_böd2dev_ifödex
 =
CI_IFID_BAD
 ) {

145 if–(
rc
 = 
	`ci_sock_rx_böd2dev
(
ni
, &
us
->
s
, 
ifödex
)) == 0 ) {

146 
	`LOG_UC
(
	`log
(
FNS_FMT
 "boundÑxÅo ifindex=%d",

147 
	`FNS_PRI_ARGS
(
ni
, &
us
->
s
), 
ifödex
));

148 
us
->
udpÊags
 |
CI_UDPF_MCAST_B2D
;

151 
	`LOG_E
(
	`log
(
FNS_FMT
 "ERROR: joined on ifindex=%d but bind failed (%d)",

152 
	`FNS_PRI_ARGS
(
ni
, &
us
->
s
), 
ifödex
, 
rc
));

155 if–
us
->
s
.
rx_böd2dev_ifödex
 !
ifödex
 ) {

156 
	`LOG_UC
(
	`log
(
FNS_FMT
 "unbinding socket from ifindex=%d",

157 
	`FNS_PRI_ARGS
(
ni
, &
us
->
s
), us->s.
rx_böd2dev_ifödex
));

158 
us
->
udpÊags
 |
CI_UDPF_NO_MCAST_B2D
;

159 
us
->
s
.
rx_böd2dev_ifödex
 = 
CI_IFID_BAD
;

160 
us
->
s
.
rx_böd2dev_ba£_ifödex
 = 0;

161 
us
->
s
.
rx_böd2dev_vœn
 = 0;

166 
	}
}

169 
ci_ölöe
 
	$__gë_sockë_›t
(
côp_sockë
* 
ï
, 
ci_fd_t
 
sock
, 
Àvñ
,

170 
«me
, * 
v
, 
sockÀn_t
* 
Àn
 )

172 #i‚de‡
_WIN32


173  
	`CI_IS_VALID_SOCKET
(
sock
) ?

174 
	`ci_sys_gësock›t
(
sock
, 
Àvñ
, 
«me
, 
v
, 
Àn
) : -1;

176  
	`CI_IS_VALID_SOCKET
(
sock
) ?

177 
	`ci_sys_gësock›t
–
ï
, 
Àvñ
, 
«me
, 
v
, 
Àn
) : -1;

179 
	}
}

184 
	$ci_udp_gësock›t
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
, 
Àvñ
,

185 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
 )

187 
ci_√tif
* 
√tif
;

188 
ci_udp_°©e
* 
us
;

189 
u
 = 0;

191 
	`ci_as£π
(
ï
);

192 
√tif
 = 
ï
->netif;

193 
us
 = 
	`SOCK_TO_UDP
(
ï
->
s
);

199 if(
Àvñ
 =
SOL_SOCKET
) {

200 #i‡
	`deföed
(
__sun__
)

201 if–
	`CI_UNLIKELY
(*(
sockÀn_t
 *)
›éí
 == 0) )

202 
	`RET_WITH_ERRNO
(
EINVAL
);

204 if(
›äame
 =
SO_ERROR
) {

207 
u
 = 0;

208 if–
us
->
s
.
so_îr‹
 ) {

209 
u
 = 
	`ci_gë_so_îr‹
(&
us
->
s
);

211 
ci_fd_t
 
os_sock
 = 
	`ci_gë_os_sock_fd
(
fd
);

212 if–!
	`__gë_sockë_›t
(
ï
, 
os_sock
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
) )

213 
u
 = *(*)
›tvÆ
;

214 
	`ci_ªl_os_sock_fd
–
os_sock
 );

216 
u_out
;

220  
	`ci_gë_sﬁ_sockë
(
√tif
, &
us
->
s
, 
›äame
, 
›tvÆ
, 
›éí
);

222 } i‡(
Àvñ
 =
IPPROTO_IP
) {

224 
›äame
) {

225 #ifde‡ 
__löux__


226 
IP_RECVERR
:

228 
ci_fd_t
 
os_sock
 = 
	`ci_gë_os_sock_fd
(
fd
);

229 if–!
	`__gë_sockë_›t
(
ï
, 
os_sock
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
) )

230 
u
 = *(*)
›tvÆ
;

231 
	`ci_ªl_os_sock_fd
–
os_sock
 );

233 
u_out
;

236 
IP_MULTICAST_IF
:

237 
u
 = 
us
->
s
.
˝
.
ù_mu…iˇ°_if_œddr_be32
;

240  
	`ci_gësock›t_föÆ
(
›tvÆ
, 
›éí
, 
SOL_UDP
, &
u
, (u));

242 
IP_MULTICAST_LOOP
:

243 
u
 = (
us
->
udpÊags
 & 
CI_UDPF_MCAST_LOOP
) != 0;

244 
u_out_ch¨
;

246 
IP_MULTICAST_TTL
:

247 
u
 = 
us
->
s
.
˝
.
ù_mˇ°_âl
;

248 
u_out_ch¨
;

251  
	`ci_gë_sﬁ_ù
(
√tif
, &
us
->
s
, 
fd
, 
›äame
, 
›tvÆ
, 
›éí
);

254 #i‡
CI_CFG_FAKE_IPV6


255 } i‡(
Àvñ
 =
IPPROTO_IPV6
 && 
us
->
s
.
domaö
 =
AF_INET6
) {

257  
	`ci_gë_sﬁ_ù6
(&
us
->
s
, 
fd
, 
›äame
, 
›tvÆ
, 
›éí
);

260 } i‡(
Àvñ
 =
IPPROTO_UDP
) {

261 #ifde‡
_WIN32


262 if–
›äame
 =
UDP_NOCHECKSUM
 ) {

263 
u
 = !!(
us
->
udpÊags
 & 
CI_UDPF_NO_CHECKSUM
);

264 
u_out
;

266 
	`RET_WITH_ERRNO
(
ENOPROTOOPT
);

269 
	`RET_WITH_ERRNO
(
ENOPROTOOPT
);

272 
	`SOCKOPT_RET_INVALID_LEVEL
(&
us
->
s
);

275 
u_out_ch¨
:

276 #ifde‡
__sun__


277 *
›éí
 = 1;

278 if–*
›éí
 > 0 )

279 *((*)
›tvÆ
Ë()
u
;

282 
u_out
:

283  
	`ci_gësock›t_föÆ
(
›tvÆ
, 
›éí
, 
SOL_IP
, &
u
, (u));

284 
	}
}

287 
	$ci_udp_£tsock›t_lk
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
, ci_fd_à
os_sock
,

288 
Àvñ
, 
›äame
, c⁄° * 
›tvÆ
,

289 
sockÀn_t
 
›éí
)

291 
ci_√tif
* 
√tif
;

292 
ci_udp_°©e
* 
us
;

293 
rc
, 
v
;

295 
	`ci_as£π
(
ï
);

296 
√tif
 = 
ï
->netif;

297 
us
 = 
	`SOCK_TO_UDP
(
ï
->
s
);

301 
	`ci_as£π
–
	`CI_IS_VALID_SOCKET
–
os_sock
 ) );

303 if(
Àvñ
 =
SOL_SOCKET
) {

305 
›äame
) {

306 
SO_SNDBUF
:

308 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
,
›éí
,)) )

309 
Áû_övÆ
;

315 if–
	`__gë_sockë_›t
(
ï
, 
os_sock
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
v
, &
›éí
)) {

318 
v
 = *(*Ë
›tvÆ
;

319 
v
 = 
	`CI_MAX
(v, ()
	`NI_OPTS
(
√tif
).
udp_¢dbuf_mö
);

320 
v
 = 
	`CI_MIN
(v, ()
	`NI_OPTS
(
√tif
).
udp_¢dbuf_max
);

321 
v
 = 
	`oo_adju°_SO_XBUF
(v);

323 if–
	`NI_OPTS
(
√tif
).
udp_¢dbuf_u£r
 ) {

324 
v
 = 
	`oo_adju°_SO_XBUF
(
	`NI_OPTS
(
√tif
).
udp_¢dbuf_u£r
);

327 
us
->
s
.
so
.
¢dbuf
 = 
v
;

330 
SO_RCVBUF
:

332 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
,
›éí
,)) )

333 
Áû_övÆ
;

340 if–
	`__gë_sockë_›t
(
ï
, 
os_sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
v
, &
›éí
)) {

343 
v
 = *(*Ë
›tvÆ
;

344 
v
 = 
	`CI_MAX
(v, ()
	`NI_OPTS
(
√tif
).
udp_rcvbuf_mö
);

345 
v
 = 
	`CI_MIN
(v, ()
	`NI_OPTS
(
√tif
).
udp_rcvbuf_max
);

346 
v
 = 
	`oo_adju°_SO_XBUF
(v);

348 if–
	`NI_OPTS
(
√tif
).
udp_rcvbuf_u£r
 ) {

349 
v
 = 
	`oo_adju°_SO_XBUF
(
	`NI_OPTS
(
√tif
).
udp_rcvbuf_u£r
);

352 
us
->
s
.
so
.
rcvbuf
 = 
v
;

357 
us
->
°©s
.
max_ªcvq_pkts
 = 0;

360 
SO_TIMESTAMP
:

361 
SO_TIMESTAMPNS
:

365 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

366 
Áû_övÆ
;

367 if–(
us
->
s
.
cmsg_Êags
 & 
CI_IP_CMSG_TIMESTAMP_ANY
) == 0 ) {

371 if–
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
) )

372 
us
->
°amp_¥e_sŸs
 = us->
°amp
;

374 
us
->
°amp
 = us->
°amp_¥e_sŸs
;

377  
	`ci_£t_sﬁ_sockë
(
√tif
, &
us
->
s
, 
›äame
, 
›tvÆ
, 
›éí
);

382  
	`ci_£t_sﬁ_sockë
(
√tif
, &
us
->
s
, 
›äame
, 
›tvÆ
, 
›éí
);

384 } i‡(
Àvñ
 =
IPPROTO_IP
) {

386 
›äame
) {

387 
IP_ADD_MEMBERSHIP
:

388 
IP_DROP_MEMBERSHIP
:

390 #ifde‡
__löux__


391 c⁄° 
ù_mªqn
 *
mªqn
 = (*)
›tvÆ
;

393 c⁄° 
ù_mªq
 *
mªq
 = (*)
›tvÆ
;

395 #ifde‡
__löux__


396 if–
›éí
 >(
ù_mªqn
) ) {

397 
rc
 = 
	`ci_mˇ°_joö_Àave
(
√tif
, 
us
, (
ci_ifid_t
)
mªqn
->
imr_ifödex
,

398 
mªqn
->
imr_addªss
.
s_addr
,

399 
mªqn
->
imr_mu…üddr
.
s_addr
,

400 
›äame
 =
IP_ADD_MEMBERSHIP
);

404 if–
›éí
 >(
ù_mªq
) ) {

405 
rc
 = 
	`ci_mˇ°_joö_Àave
(
√tif
, 
us
, 0, 
mªq
->
imr_öãrÁ˚
.
s_addr
,

406 
mªq
->
imr_mu…üddr
.
s_addr
,

407 
›äame
 =
IP_ADD_MEMBERSHIP
);

410 
	`RET_WITH_ERRNO
(
EFAULT
);

411 if–
rc
 ) {

412 if–
›äame
 =
IP_ADD_MEMBERSHIP
 ) {

413 
	`ci_sys_£tsock›t
(
os_sock
, 
SOL_IP
, 
IP_DROP_MEMBERSHIP
,

414 
›tvÆ
, 
›éí
);

416  
rc
;

421 #ifde‡
IP_ADD_SOURCE_MEMBERSHIP


422 
IP_ADD_SOURCE_MEMBERSHIP
:

423 
IP_DROP_SOURCE_MEMBERSHIP
:

433 c⁄° 
ù_mªq_sour˚
 *
mªqs
 = (*)
›tvÆ
;

435 if–
›éí
 >(
ù_mªq_sour˚
) ) {

436 
rc
 = 
	`ci_mˇ°_joö_Àave
(
√tif
, 
us
, 0, 
mªqs
->
imr_öãrÁ˚
.
s_addr
,

437 
mªqs
->
imr_mu…üddr
.
s_addr
,

438 
›äame
 =
IP_ADD_SOURCE_MEMBERSHIP
);

441 
	`RET_WITH_ERRNO
(
EFAULT
);

442 if–
rc
 ) {

443 if–
›äame
 =
IP_ADD_SOURCE_MEMBERSHIP
 ) {

444 
	`ci_sys_£tsock›t
(
os_sock
, 
SOL_IP
, 
IP_DROP_SOURCE_MEMBERSHIP
,

445 
›tvÆ
, 
›éí
);

447  
rc
;

453 #ifde‡
MCAST_JOIN_GROUP


454 
MCAST_JOIN_GROUP
:

455 
MCAST_LEAVE_GROUP
:

457 
group_ªq
 *
gªq
 = (*)
›tvÆ
;

459 if–
›éí
 < (
group_ªq
) )

460 
	`RET_WITH_ERRNO
(
EFAULT
);

461 if–
gªq
->
gr_group
.
ss_Ámûy
 !
AF_INET
 )

462  
CI_SOCKET_HANDOVER
;

463 
rc
 = 
	`ci_mˇ°_joö_Àave
(
√tif
, 
us
, 
gªq
->
gr_öãrÁ˚
, 0,

464 
	`CI_SIN
(&
gªq
->
gr_group
)->
sö_addr
.
s_addr
,

465 
›äame
 =
MCAST_JOIN_GROUP
);

466 if–
rc
 ) {

467 if–
›äame
 =
MCAST_JOIN_GROUP
 ) {

468 
	`ci_sys_£tsock›t
(
os_sock
, 
SOL_IP
, 
MCAST_LEAVE_GROUP
,

469 
›tvÆ
, 
›éí
);

471  
rc
;

477 #ifde‡
MCAST_JOIN_SOURCE_GROUP


478 
MCAST_JOIN_SOURCE_GROUP
:

479 
MCAST_LEAVE_SOURCE_GROUP
:

489 
group_sour˚_ªq
 *
g§eq
 = (*)
›tvÆ
;

491 if–
›éí
 < (
group_sour˚_ªq
) )

492 
	`RET_WITH_ERRNO
(
EFAULT
);

493 if–
g§eq
->
g§_group
.
ss_Ámûy
 !
AF_INET
 )

494  
CI_SOCKET_HANDOVER
;

495 
rc
 = 
	`ci_mˇ°_joö_Àave
(
√tif
, 
us
, 
g§eq
->
g§_öãrÁ˚
, 0,

496 
	`CI_SIN
(&
g§eq
->
g§_group
)->
sö_addr
.
s_addr
,

497 
›äame
 =
MCAST_JOIN_SOURCE_GROUP
);

498 if–
rc
 ) {

499 if–
›äame
 =
MCAST_JOIN_SOURCE_GROUP
 ) {

500 
	`ci_sys_£tsock›t
(
os_sock
, 
SOL_IP
, 
MCAST_LEAVE_SOURCE_GROUP
,

501 
›tvÆ
, 
›éí
);

503  
rc
;

509 
IP_MULTICAST_IF
:

511 #ifde‡
__löux__


512 c⁄° 
ù_mªqn
 *
mªqn
 = (*)
›tvÆ
;

514 if–
›éí
 >(
ù_mªqn
) )

515 
	`ci_mˇ°_£t_outgoög_if
(
√tif
, 
us
, 
mªqn
->
imr_ifödex
,

516 
mªqn
->
imr_addªss
.
s_addr
);

519 if–
›éí
 >(
ö_addr
) )

520 
	`ci_mˇ°_£t_outgoög_if
(
√tif
, 
us
, 0, *(
ci_uöt32
 *)
›tvÆ
);

522 
us
->
s
.
˝
.
ù_mu…iˇ°_if
 = 
CI_IFID_BAD
;

523 
	`ci_mˇ°_›ts_upd©ed
(
√tif
, 
us
);

527 
IP_MULTICAST_LOOP
:

528 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

529 
Áû_övÆ
;

530 if–
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
) ) {

531 
us
->
udpÊags
 |
CI_UDPF_MCAST_LOOP
;

532 if–
	`NI_OPTS
(
√tif
).
f‹˚_£nd_mu…iˇ°
 )

534 
us
->
s
.
˝
.
sock_˝_Êags
 &~
OO_SCP_NO_MULTICAST
;

536 
us
->
s
.
˝
.
sock_˝_Êags
 |
OO_SCP_NO_MULTICAST
;

540 
us
->
udpÊags
 &~
CI_UDPF_MCAST_LOOP
;

541 
us
->
s
.
˝
.
sock_˝_Êags
 &~
OO_SCP_NO_MULTICAST
;

543 
	`ci_mˇ°_›ts_upd©ed
(
√tif
, 
us
);

546 
IP_MULTICAST_TTL
:

548 
âl
;

549 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

550 
Áû_övÆ
;

551 
âl
 = (Ë
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
);

553 
us
->
s
.
˝
.
ù_mˇ°_âl
 = 
âl
 == -1 ? 1 :Åtl;

554 
	`ci_mˇ°_›ts_upd©ed
(
√tif
, 
us
);

559  
	`ci_£t_sﬁ_ù
–
√tif
, &
us
->
s
, 
›äame
, 
›tvÆ
, 
›éí
 );

562 #i‡
CI_CFG_FAKE_IPV6


563 } i‡(
Àvñ
 =
IPPROTO_IPV6
) {

565  
	`ci_£t_sﬁ_ù6
–
√tif
, &
us
->
s
, 
›äame
, 
›tvÆ
, 
›éí
);

568 } i‡(
Àvñ
 =
IPPROTO_UDP
) {

569 #ifde‡
_WIN32


570 if–
›äame
 =
UDP_NOCHECKSUM
 ) {

577 if–(
rc
 = 
	`›t_nŸ_ok
(
›tvÆ
, 
›éí
, )) )

578 
Áû_övÆ
;

579 if–
	`ci_gë_›tvÆ
(
›tvÆ
, 
›éí
) )

580 
us
->
udpÊags
 |
CI_UDPF_NO_CHECKSUM
;

582 
us
->
udpÊags
 &~
CI_UDPF_NO_CHECKSUM
;

584 
	`RET_WITH_ERRNO
(
ENOPROTOOPT
);

586 
	`RET_WITH_ERRNO
(
ENOPROTOOPT
);

590 
	`LOG_U
(
	`log
(
FNS_FMT
 "unknownÜevel=%d optname=%dáccepted by O/S",

591 
	`FNS_PRI_ARGS
(
√tif
, 
ï
->
s
), 
Àvñ
, 
›äame
));

596 
Áû_övÆ
:

597 
	`LOG_UC
(
	`log
("%s: "
SF_FMT
" option %iÖtr/lenÉrror (EINVAL or EFAULT)",

598 
__FUNCTION__
, 
	`SF_PRI_ARGS
(
ï
,
fd
), 
›äame
));

599 
	`RET_WITH_ERRNO
(-
rc
);

601 
	}
}

603 
ci_ölöe
 
	$__£t_sockë_›t
(
côp_sockë
* 
ï
, 
ci_fd_t
 
sock
, 
Àvñ
,

604 
«me
, c⁄° * 
v
, 
sockÀn_t
 
Àn
 )

606 #i‚de‡
_WIN32


607  
	`CI_IS_VALID_SOCKET
(
sock
) ?

608 
	`ci_sys_£tsock›t
(
sock
, 
Àvñ
, 
«me
, 
v
, 
Àn
) : -1;

610  
	`CI_IS_VALID_SOCKET
(
sock
) ?

611 
	`ci_sys_£tsock›t
(
ï
, 
Àvñ
, 
«me
, 
v
, 
Àn
) : -1;

613 
	}
}

615 
	$ci_udp_£tsock›t
(
côp_sockë
* 
ï
, 
ci_fd_t
 
fd
, 
Àvñ
,

616 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
 )

618 
ci_fd_t
 
os_sock
;

619 
rc
;

623 
os_sock
 = 
	`ci_gë_os_sock_fd
(
fd
);

624 
	`ci_as£π
(
	`CI_IS_VALID_SOCKET
(
os_sock
));

625 
rc
 = 
	`__£t_sockë_›t
(
ï
, 
os_sock
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
);

626 if–
rc
 =
CI_SOCKET_ERROR
 &&

627 ! 
	`ci_£tsock›t_os_Áû_ign‹e
(
ï
->
√tif
,Ép->
s
, 
î∫o
, 
Àvñ
,

628 
›äame
, 
›tvÆ
, 
›éí
) ) {

629 
out
;

631 
rc
 = 0;

633 if–
Àvñ
 =
SOL_SOCKET
 ) {

634 
rc
 = 
	`ci_£t_sﬁ_sockë_nﬁock
(
ï
->
√tif
,Ép->
s
, 
›äame
, 
›tvÆ
, 
›éí
);

635 if–
rc
 <0 ) 
out
;

639 
	`ci_√tif_lock_id
(
ï
->
√tif
, 
	`SC_SP
”p->
s
));

640 
rc
 = 
	`ci_udp_£tsock›t_lk
(
ï
, 
fd
, 
os_sock
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
);

641 
	`ci_√tif_u∆ock
(
ï
->
√tif
);

642 
out
:

643 
	`ci_ªl_os_sock_fd
(
os_sock
);

644  
rc
;

645 
	}
}

	@waitable.c

14 
	~"ù_öã∫Æ.h
"

15 
	~<⁄lﬂd/¶ìp.h
>

18 
	$côp_waôabÀ_ªöô
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
)

21 
w
->
¶ìp_£q
.
Æl
 = 0;

22 
w
->
sigown
 = 0;

23 
w
->
•ö_cy˛es
 = 
ni
->
°©e
->
sock_•ö_cy˛es
;

24 
	}
}

27 
	$côp_waôabÀ_öô
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
, 
id
)

31 
oo_p
 
•
;

33 #i‡
CI_CFG_SOCKP_IS_PTR


34 
w
->
bufid
 = 
id
;

36 
w
->
bufid
 = 
	`OO_SP_FROM_INT
(
ni
, 
id
);

38 
w
->
sb_Êags
 = 0;

39 
w
->
sb_aÊags
 = 
CI_SB_AFLAG_ORPHAN
 | 
CI_SB_AFLAG_NOT_READY
;

41 
•
 = 
	`oo_sockp_to_°©ï
(
ni
, 
	`W_SP
(
w
));

42 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
côp_waôabÀ
, 
po°_pﬁl_lök
));

43 
	`ci_ni_dŒi°_lök_öô
(
ni
, &
w
->
po°_pﬁl_lök
, 
•
, "ppll");

44 
	`ci_ni_dŒi°_£lf_lök
(
ni
, &
w
->
po°_pﬁl_lök
);

46 
•
 = 
	`oo_sockp_to_°©ï
(
ni
, 
	`W_SP
(
w
));

47 
	`OO_P_ADD
(
•
, 
	`CI_MEMBER_OFFSET
(
côp_waôabÀ
, 
ªady_lök
));

48 
	`ci_ni_dŒi°_lök_öô
(
ni
, &
w
->
ªady_lök
, 
•
, "rll");

49 
	`ci_ni_dŒi°_£lf_lök
(
ni
, &
w
->
ªady_lök
);

51 
w
->
lock
.
wl_vÆ
 = 0;

52 
	`CI_DEBUG
(
w
->
wt_√xt
 = 
OO_SP_NULL
);

53 
	`CI_DEBUG
(
w
->
√xt_id
 = 
CI_ILL_END
);

55 
	`côp_waôabÀ_ªöô
(
ni
, 
w
);

56 
	}
}

59 
côp_waôabÀ_obj
* 
	$côp_waôabÀ_obj_Æloc
(
ci_√tif
* 
√tif
)

61 
côp_waôabÀ_obj
* 
wo
;

63 
	`ci_as£π
(
√tif
);

64 
	`ci_as£π
(
	`ci_√tif_is_locked
(
√tif
));

66 if–
√tif
->
°©e
->
de„ºed_‰ì_ïs_hód
 !
CI_ILL_END
 ) {

67 
ci_uöt32
 
lök
;

69 
lök
 = 
√tif
->
°©e
->
de„ºed_‰ì_ïs_hód
;

70  
	`ci_ˇs32_Áû
(&
√tif
->
°©e
->
de„ºed_‰ì_ïs_hód
,

71 
lök
, 
CI_ILL_END
));

72  
lök
 !
CI_ILL_END
 ) {

73 
côp_waôabÀ
* 
w
 = 
	`ID_TO_WAITABLE
(
√tif
, 
lök
);

74 
lök
 = 
w
->
√xt_id
;

75 
	`CI_DEBUG
(
w
->
√xt_id
 = 
CI_ILL_END
);

76 
	`ci_as£π_equÆ
(
w
->
°©e
, 
CI_TCP_STATE_FREE
);

77 
	`ci_as£π
(
	`OO_SP_IS_NULL
(
w
->
wt_√xt
));

78 
w
->
wt_√xt
 = 
√tif
->
°©e
->
‰ì_ïs_hód
;

79 
√tif
->
°©e
->
‰ì_ïs_hód
 = 
	`W_SP
(
w
);

83 if–
	`OO_SP_IS_NULL
(
√tif
->
°©e
->
‰ì_ïs_hód
) ) {

84 
	`ci_t˝_hñ≥r_m‹e_socks
(
√tif
);

86 if–
	`OO_SP_IS_NULL
(
√tif
->
°©e
->
‰ì_ïs_hód
) )

87 
	`ci_√tif_timeout_ª≠
(
√tif
);

90 if–
	`OO_SP_IS_NULL
(
√tif
->
°©e
->
‰ì_ïs_hód
) )

91  
NULL
;

93 
	`LOG_TV
(
	`ci_log
("%s:áŒoˇtög %d", 
__FUNCTION__
,

94 
	`OO_SP_FMT
(
√tif
->
°©e
->
‰ì_ïs_hód
)));

96 
	`ci_as£π
(
	`IS_VALID_SOCK_P
(
√tif
,Çëif->
°©e
->
‰ì_ïs_hód
));

97 
wo
 = 
	`SP_TO_WAITABLE_OBJ
(
√tif
,Çëif->
°©e
->
‰ì_ïs_hód
);

99 
	`ci_as£π
(
	`OO_SP_EQ
(
	`W_SP
(&
wo
->
waôabÀ
), 
√tif
->
°©e
->
‰ì_ïs_hód
));

100 
	`ci_as£π_equÆ
(
wo
->
waôabÀ
.
°©e
, 
CI_TCP_STATE_FREE
);

101 
	`ci_as£π_equÆ
(
wo
->
waôabÀ
.
sb_aÊags
, (
CI_SB_AFLAG_ORPHAN
 | 
CI_SB_AFLAG_NOT_READY
));

102 
	`ci_as£π_equÆ
(
wo
->
waôabÀ
.
lock
.
wl_vÆ
, 0);

104 
√tif
->
°©e
->
‰ì_ïs_hód
 = 
wo
->
waôabÀ
.
wt_√xt
;

105 
	`CI_DEBUG
(
wo
->
waôabÀ
.
wt_√xt
 = 
OO_SP_NULL
);

106 
	`ci_as£π_equÆ
(
wo
->
waôabÀ
.
°©e
, 
CI_TCP_STATE_FREE
);

108  
wo
;

109 
	}
}

112 #ifde‡
__KERNEL__


113 
	$ci_dr›_‹ph™
(
ci_√tif
 * 
ni
)

115 
ci_úqlock_°©e_t
 
lock_Êags
;

116 
t˝_hñ≥r_ªsour˚_t
* 
ås
;

117 
dec_√eded
;

125 if–
ni
->
Êags
 & 
CI_NETIF_FLAGS_DROP_SOCK_REFS
 ) {

126 
ås
 = 
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
);

127 
dec_√eded
 = 0;

129 
	`ci_úqlock_lock
(&
ås
->
lock
, &
lock_Êags
);

130 if–
ås
->
n_ï_˛osög_ªfs
 > 0 ) {

131 --
ås
->
n_ï_˛osög_ªfs
;

132 
dec_√eded
 = 1;

134 
	`ci_úqlock_u∆ock
(&
ås
->
lock
, &
lock_Êags
);

136 if–
dec_√eded
 )

137 
	`eÁb_t˝_hñ≥r_k_ªf_cou¡_dec
(
ås
);

139 
	}
}

141 
	#ci_dr›_‹ph™
(
ni
Ëdo{}0)

	)

145 #i‡
CI_CFG_FD_CACHING


146 
	$côp_waôabÀ_obj_‰ì_to_ˇche
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
)

148 #i‡
	`deföed
 (
__KERNEL__
Ë&& !deföed(
NDEBUG
)

152 
t˝_hñ≥r_ídpoöt_t
* 
ï
 = 
	`ci_√tif_gë_vÆid_ï
(
ni
, 
w
->
bufid
);

153 
	`ci_as£π
(!(
ï
->
ï_aÊags
 & 
OO_THR_EP_AFLAG_NON_ATOMIC
));

155 
	`ci_as£π
(!(
w
->
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
));

156 
	`ci_as£π
(
w
->
sb_aÊags
 & 
CI_SB_AFLAG_NOT_READY
);

157 
	`ci_as£π
(
w
->
sb_aÊags
 & 
CI_SB_AFLAG_IN_CACHE
);

158 
	`ci_as£π
(
w
->
°©e
 =
CI_TCP_CLOSED
);

159 
	`ci_as£π
(
	`ci_ni_dŒi°_is_£lf_löked
(
ni
, &
w
->
po°_pﬁl_lök
));

160 
	`ci_as£π
(
	`OO_SP_IS_NULL
(
w
->
wt_√xt
));

171 
w
->
wake_ªque°
 = 0;

172 
w
->
sb_Êags
 = 0;

173 
	`ci_©omic32_™d
(&
w
->
sb_aÊags
, 
CI_SB_AFLAG_NOT_READY
 |

174 
CI_SB_AFLAG_CACHE_PRESERVE
);

175 
w
->
lock
.
wl_vÆ
 = 0;

176 
w
->
ªady_li°_id
 = 0;

177 
	`CI_USER_PTR_SET
(
w
->
eôem
, 
NULL
);

178 
	}
}

182 
	$__côp_waôabÀ_obj_‰ì
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
)

184 
	`ci_as£π
(
w
->
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
);

185 
	`ci_as£π
(
w
->
°©e
 !
CI_TCP_STATE_FREE
);

186 
	`ci_as£π
(
	`ci_ni_dŒi°_is_£lf_löked
(
ni
, &
w
->
po°_pﬁl_lök
));

187 
	`ci_as£π
(
	`OO_SP_IS_NULL
(
w
->
wt_√xt
));

189 
w
->
wake_ªque°
 = 0;

190 
w
->
sb_Êags
 = 0;

191 
w
->
sb_aÊags
 = 
CI_SB_AFLAG_ORPHAN
 | 
CI_SB_AFLAG_NOT_READY
;

192 
w
->
°©e
 = 
CI_TCP_STATE_FREE
;

193 
w
->
lock
.
wl_vÆ
 = 0;

194 
w
->
ªady_li°_id
 = 0;

195 
	`CI_USER_PTR_SET
(
w
->
eôem
, 
NULL
);

196 
	}
}

199 
	$côp_waôabÀ_obj_‰ì
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
)

201 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

203 #ifde‡
__KERNEL__


206 
t˝_hñ≥r_ídpoöt_t
* 
ï
 = 
	`ci_√tif_gë_vÆid_ï
(
ni
, 
w
->
bufid
);

207 
ï_aÊags
;

208 
agaö
:

209 if–(
ï_aÊags
 = 
ï
->ï_aÊagsË& 
OO_THR_EP_AFLAG_NON_ATOMIC
 ) {

210 
	`ci_as£π
(!(
ï_aÊags
 & 
OO_THR_EP_AFLAG_NEED_FREE
));

211 if–
	`ci_ˇs32_Áû
(&
ï
->
ï_aÊags
,Ép_aflags,

212 
ï_aÊags
 | 
OO_THR_EP_AFLAG_NEED_FREE
) )

213 
agaö
;

216 
	`ci_rmb
();

220 
	`__côp_waôabÀ_obj_‰ì
(
ni
, 
w
);

221 
w
->
wt_√xt
 = 
ni
->
°©e
->
‰ì_ïs_hód
;

222 
ni
->
°©e
->
‰ì_ïs_hód
 = 
	`W_SP
(
w
);

224 
	`ci_dr›_‹ph™
(
ni
);

225 
	}
}

228 
	$côp_waôabÀ_obj_‰ì_¬l
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
)

232 
	`__côp_waôabÀ_obj_‰ì
(
ni
, 
w
);

234 
w
->
√xt_id
 = 
ni
->
°©e
->
de„ºed_‰ì_ïs_hód
;

235  
	`ci_ˇs32_Áû
(&
ni
->
°©e
->
de„ºed_‰ì_ïs_hód
,

236 
w
->
√xt_id
, 
	`OO_SP_TO_INT
(
	`W_SP
(w))) );

238 
	`ci_dr›_‹ph™
(
ni
);

239 
	}
}

242 #ifde‡
__KERNEL__


245 
	$côp_waôabÀ_˛ónup
(
ci_√tif
* 
ni
, 
côp_waôabÀ_obj
* 
wo
, 
do_‰ì
)

247 if–
wo
->
waôabÀ
.
sb_aÊags
 & 
CI_SB_AFLAG_MOVED_AWAY
 ) {

248 if–
do_‰ì
 )

249 
	`côp_waôabÀ_obj_‰ì
(
ni
, &
wo
->
waôabÀ
);

251 if–
wo
->
waôabÀ
.
°©e
 =
CI_TCP_LISTEN
 )

252 
	`ci_t˝_li°í_Æl_fds_g⁄e
(
ni
, &
wo
->
t˝_li°í
, 
do_‰ì
);

253 if–
wo
->
waôabÀ
.
°©e
 & 
CI_TCP_STATE_TCP
 )

254 
	`ci_t˝_Æl_fds_g⁄e
(
ni
, &
wo
->
t˝
, 
do_‰ì
);

255 #i‡
CI_CFG_UDP


256 if–
wo
->
waôabÀ
.
°©e
 =
CI_TCP_STATE_UDP
 )

257 
	`ci_udp_Æl_fds_g⁄e
(
ni
, 
wo
->
waôabÀ
.
bufid
, 
do_‰ì
);

259 #i‡
CI_CFG_USERSPACE_PIPE


260 if–
wo
->
waôabÀ
.
°©e
 =
CI_TCP_STATE_PIPE
 )

261 
	`ci_pùe_Æl_fds_g⁄e
(
ni
, &
wo
->
pùe
, 
do_‰ì
);

263 if–
wo
->
waôabÀ
.
°©e
 =
CI_TCP_STATE_ACTIVE_WILD
 )

264 
	`ci_a˘ive_wûd_Æl_fds_g⁄e
(
ni
, &
wo
->
aw
, 
do_‰ì
);

265 if–
do_‰ì
 ) {

269 
	`côp_waôabÀ_obj_‰ì
(
ni
, &
wo
->
waôabÀ
);

271 
	}
}

273 
	$côp_waôabÀ_Æl_fds_g⁄e
(
ci_√tif
* 
ni
, 
oo_•
 
w_id
)

275 
côp_waôabÀ_obj
* 
wo
;

277 
	`ci_as£π
(
ni
);

278 
	`ci_as£π
(
	`IS_VALID_SOCK_P
(
ni
, 
w_id
));

279 
	`ci_as£π
(
	`ci_√tif_is_locked
(
ni
));

281 
wo
 = 
	`SP_TO_WAITABLE_OBJ
(
ni
, 
w_id
);

282 
	`ci_as£π
(
wo
->
waôabÀ
.
°©e
 !
CI_TCP_STATE_FREE
);

284 
	`LOG_NC
(
	`ci_log
("%s: %d:%d %s", 
__FUNCTION__
, 
	`NI_ID
(
ni
), 
	`OO_SP_FMT
(
w_id
),

285 
	`ci_t˝_°©e_°r
(
wo
->
waôabÀ
.
°©e
)));

290 
	`CI_DEBUG
(if–(
wo
->
waôabÀ
.
sb_aÊags
 & 
CI_SB_AFLAG_ORPHAN
) &&

291 
wo
->
waôabÀ
.
°©e
 !
CI_TCP_LISTEN
 &&

292 
wo
->
waôabÀ
.
°©e
 !
CI_TCP_STATE_ACTIVE_WILD
 )

293 
	`ci_log
("%s: %d:%dáÃódy oΩh™", 
__FUNCTION__
,

294 
	`NI_ID
(
ni
), 
	`OO_SP_FMT
(
w_id
)));

304 
	`ci_√tif_purge_de„ºed_sockë_li°
(
ni
);

305 
	`ci_bô_£t
(&
wo
->
waôabÀ
.
sb_aÊags
, 
CI_SB_AFLAG_ORPHAN_BIT
);

310 
	`ci_ni_dŒi°_ªmove_ß„
(
ni
, &
wo
->
waôabÀ
.
po°_pﬁl_lök
);

311 
	`ci_ni_dŒi°_ªmove_ß„
(
ni
, &
wo
->
waôabÀ
.
ªady_lök
);

312 
wo
->
waôabÀ
.
ªady_li°_id
 = 0;

314 
	`côp_waôabÀ_˛ónup
(
ni
, 
wo
, 1);

315 
	}
}

320 c⁄° * 
	$côp_waôabÀ_ty≥_°r
(
côp_waôabÀ
* 
w
)

322 if–
w
->
°©e
 & 
CI_TCP_STATE_TCP
 )  "TCP";

323 if–
w
->
°©e
 =
CI_TCP_STATE_UDP
 )  "UDP";

324 if–
w
->
°©e
 =
CI_TCP_STATE_FREE
 )  "FREE";

325 #i‡
CI_CFG_USERSPACE_PIPE


326 if–
w
->
°©e
 =
CI_TCP_STATE_PIPE
 )  "PIPE";

328 if–
w
->
°©e
 =
CI_TCP_STATE_AUXBUF
 )  "AUXBUFS";

329 if–
w
->
°©e
 =
CI_TCP_STATE_ACTIVE_WILD
 )  "ACTIVE_WILD";

331 
	}
}

334 
	$côp_waôabÀ_dump2
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
, c⁄° * 
pf
,

335 
oo_dump_log_‚_t
 
loggî
, * 
log_¨g
)

337 
tmp
;

338 
ci_sock_cmn
* 
s
 = 
NULL
;

340 if–
	`CI_TCP_STATE_IS_SOCKET
(
w
->
°©e
) ) {

341 
s
 = 
	`CI_CONTAINER
(
ci_sock_cmn
, 
b
, 
w
);

342 
	`loggî
(
log_¨g
, "%s%†"
NT_FMT
"l˛="
OOF_IP4PORT
"Ñmt="OOF_IP4PORT" %s",

343 
pf
, 
	`côp_waôabÀ_ty≥_°r
(
w
), 
	`NI_ID
(
ni
), 
	`W_FMT
(w),

344 
	`OOFA_IP4PORT
(
	`sock_œddr_be32
(
s
), 
	`sock_Õ‹t_be16
(s)),

345 
	`OOFA_IP4PORT
(
	`sock_øddr_be32
(
s
), 
	`sock_Ω‹t_be16
(s)),

346 
	`ci_t˝_°©e_°r
(
w
->
°©e
));

349 
	`loggî
(
log_¨g
, "%s%†"
NT_FMT
, 
pf
,

350 
	`côp_waôabÀ_ty≥_°r
(
w
), 
	`NI_ID
(
ni
), 
	`W_FMT
(w));

352 if–
w
->
°©e
 =
CI_TCP_STATE_FREE
 || w->°©ê=
CI_TCP_STATE_AUXBUF
 ||

353 
w
->
°©e
 =
CI_TCP_STATE_ACTIVE_WILD
 )

356 
tmp
 = 
w
->
lock
.
wl_vÆ
;

357 
	`loggî
(
log_¨g
, "%†Üock: %x %s%s", 
pf
, 
tmp
,

358 (
tmp
 & 
OO_WAITABLE_LK_LOCKED
) ? "LOCKED" : "",

359 (
tmp
 & 
OO_WAITABLE_LK_NEED_WAKE
) ? " CONTENDED": "");

361 
	`loggî
(
log_¨g
, "%†Ñx_wake=%08x%†tx_wake=%08x%†Êags: "
CI_SB_FLAGS_FMT
,

362 
pf
,

363 
w
->
¶ìp_£q
.
rw
.
rx
,

364 
	`ci_bô_ã°
(&
w
->
wake_ªque°
, 
CI_SB_FLAG_WAKE_RX_B
) ? "(RQ)":" ",

365 
w
->
¶ìp_£q
.
rw
.
tx
,

366 
	`ci_bô_ã°
(&
w
->
wake_ªque°
, 
CI_SB_FLAG_WAKE_TX_B
) ? "(RQ)":" ",

367 
	`CI_SB_FLAGS_PRI_ARG
(
w
));

369 if–
w
->
•ö_cy˛es
 == -1 )

370 
	`loggî
(
log_¨g
, "%† ul_pﬁl: -1 spö cy˛e†-1 u£cs", 
pf
);

372 
	`loggî
(
log_¨g
, "%† ul_pﬁl: %Œu spö cy˛e†%u u£c", 
pf
,

373 
w
->
•ö_cy˛es
, 
	`oo_cy˛es64_to_u£c
(
ni
, w->spin_cycles));

374 
	}
}

377 
	$côp_waôabÀ_dump
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
, c⁄° * 
pf
)

379 
	`côp_waôabÀ_dump_to_loggî
(
ni
, 
w
, 
pf
, 
ci_log_dump_‚
, 
NULL
);

380 
	}
}

382 
	$côp_waôabÀ_dump_to_loggî
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
,

383 c⁄° * 
pf
,

384 
oo_dump_log_‚_t
 
loggî
, * 
log_¨g
)

386 
côp_waôabÀ_obj
* 
wo
 = 
	`CI_CONTAINER
(côp_waôabÀ_obj, 
waôabÀ
, 
w
);

388 
	`côp_waôabÀ_dump2
(
ni
, 
w
, 
pf
, 
loggî
, 
log_¨g
);

389 if–
	`CI_TCP_STATE_IS_SOCKET
(
w
->
°©e
) ) {

390 if–
w
->
°©e
 =
CI_TCP_STATE_ACTIVE_WILD
 )

393 
	`ci_sock_cmn_dump
(
ni
, &
wo
->
sock
, 
pf
, 
loggî
, 
log_¨g
);

394 if–
w
->
°©e
 =
CI_TCP_LISTEN
 )

395 
	`ci_t˝_sockë_li°í_dump
(
ni
, &
wo
->
t˝_li°í
, 
pf
, 
loggî
, 
log_¨g
);

396 if–
w
->
°©e
 & 
CI_TCP_STATE_TCP
 )

397 
	`ci_t˝_°©e_dump
(
ni
, &
wo
->
t˝
, 
pf
, 
loggî
, 
log_¨g
);

398 #i‡
CI_CFG_UDP


399 if–
w
->
°©e
 =
CI_TCP_STATE_UDP
 )

400 
	`ci_udp_°©e_dump
(
ni
, &
wo
->
udp
, 
pf
, 
loggî
, 
log_¨g
);

403 #i‡
CI_CFG_USERSPACE_PIPE


404 if–
w
->
°©e
 =
CI_TCP_STATE_PIPE
 )

405 
	`oo_pùe_dump
(
ni
, &
wo
->
pùe
, 
pf
, 
loggî
, 
log_¨g
);

407 
	}
}

410 
	$côp_waôabÀ_¥öt
(
côp_waôabÀ
* 
w
)

416 if–
	`CI_TCP_STATE_IS_SOCKET
(
w
->
°©e
) ) {

417 
ci_sock_cmn
* 
s
 = 
	`CI_CONTAINER
(ci_sock_cmn, 
b
, 
w
);

418 
côp_waôabÀ_obj
* 
wo
 = 
	`CI_CONTAINER
(côp_waôabÀ_obj, 
waôabÀ
, 
w
);

419 
tq
 = 0;

420 
rq
 = 0;

422 if–(
w
->
°©e
 & 
CI_TCP_STATE_TCP
) &&

423 !(
w
->
°©e
 & 
CI_TCP_STATE_NOT_CONNECTED
) ) {

424 
tq
 = 
	`ci_t˝_£ndq_n_pkts
(&
wo
->
t˝
);

425 
rq
 = 
wo
->
t˝
.
ªcv1
.
num
 + wo->t˝.
ªcv2
.num;

427 if–
w
->
°©e
 =
CI_TCP_STATE_UDP
 ) {

428 
tq
 = 
wo
->
udp
.
tx_cou¡
 + 
	`oo_©omic_ªad
(&wo->udp.
tx_async_q_Àvñ
);

429 
rq
 = 
	`ci_udp_ªcv_q_pkts
(&
wo
->
udp
.
ªcv_q
);

431 
	`log
("%†%d %d "
OOF_IP4PORT
" "OOF_IP4PORT" %s",

432 
	`côp_waôabÀ_ty≥_°r
(
w
), 
rq
, 
tq
,

433 
	`OOFA_IP4PORT
(
	`sock_œddr_be32
(
s
), 
	`sock_Õ‹t_be16
(s)),

434 
	`OOFA_IP4PORT
(
	`sock_øddr_be32
(
s
), 
	`sock_Ω‹t_be16
(s)),

435 
	`ci_t˝_°©e_°r
(
w
->
°©e
));

437 
	}
}

440 #i‚de‡
__KERNEL__


442 
	$côp_waôabÀ_wakeup
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
w
)

444 
oo_waôabÀ_wake_t
 
›
;

445 
›
.
sock_id
 = 
w
->
bufid
;

446 
	`oo_ªsour˚_›
(
	`ci_√tif_gë_drivî_h™dÀ
(
ni
),

447 
OO_IOC_WAITABLE_WAKE
, &
›
);

448 
	}
}

452 
	$côp_waôabÀ_wake_nŸ_ö_pﬁl
(
ci_√tif
* 
ni
, 
côp_waôabÀ
* 
sb
,

453 
wh©
)

455 
	`ci_as£π
(
wh©
);

456 
	`ci_as£π
((
wh©
 & ~(
CI_SB_FLAG_WAKE_RX
|
CI_SB_FLAG_WAKE_TX
)) == 0u);

457 
	`ci_as£π
(!
ni
->
°©e
->
ö_pﬁl
);

458 
	`ci_wmb
();

459 if–
wh©
 & 
CI_SB_FLAG_WAKE_RX
 )

460 ++
sb
->
¶ìp_£q
.
rw
.
rx
;

461 if–
wh©
 & 
CI_SB_FLAG_WAKE_TX
 )

462 ++
sb
->
¶ìp_£q
.
rw
.
tx
;

463 
	`ci_mb
();

465 #ifde‡
__KERNEL__


470 
	`ci_ni_dŒi°_ªmove
(
ni
, &
sb
->
ªady_lök
);

471 
	`ci_ni_dŒi°_put
(
ni
, &ni->
°©e
->
ªady_li°s
[
sb
->
ªady_li°_id
],

472 &
sb
->
ªady_lök
);

474 if–
wh©
 & 
sb
->
wake_ªque°
 ) {

475 
sb
->
sb_Êags
 |
wh©
;

476 
	`côp_waôabÀ_wakeup
(
ni
, 
sb
);

480 if–
ni
->
°©e
->
ªady_li°_Êags
[
sb
->
ªady_li°_id
] &

481 
CI_NI_READY_LIST_FLAG_WAKE
 )

482 
	`eÁb_t˝_hñ≥r_ªady_li°_wakeup
(
	`√tif2t˝_hñ≥r_ªsour˚
(
ni
),

483 
sb
->
ªady_li°_id
);

485 if–
wh©
 & 
sb
->
wake_ªque°
 ) {

486 
sb
->
sb_Êags
 |
wh©
;

487 
	`ci_√tif_put_⁄_po°_pﬁl
(
ni
, 
sb
);

488 
	`ef_ïlock_hﬁdî_£t_Êag
(&
ni
->
°©e
->
lock
, 
CI_EPLOCK_NETIF_NEED_WAKE
);

495 
	`ci_ni_dŒi°_ªmove
(
ni
, &
sb
->
ªady_lök
);

496 
	`ci_ni_dŒi°_put
(
ni
, &ni->
°©e
->
ªady_li°s
[
sb
->
ªady_li°_id
],

497 &
sb
->
ªady_lök
);

499 if–
ni
->
°©e
->
ªady_li°_Êags
[
sb
->
ªady_li°_id
] &

500 
CI_NI_READY_LIST_FLAG_WAKE
 )

501 
	`ef_ïlock_hﬁdî_£t_Êag
(&
ni
->
°©e
->
lock
, 
CI_EPLOCK_NETIF_NEED_WAKE
);

504 
	}
}

	@/usr/include/aio.h

22 #i‚de‡
_AIO_H


23 
	#_AIO_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<sys/ty≥s.h
>

27 
	#__√ed_sigevít_t


	)

28 
	~<bôs/sigöfo.h
>

29 
	#__√ed_time•ec


	)

30 
	~<time.h
>

32 
__BEGIN_DECLS


35 
	saiocb


37 
	maio_fûdes
;

38 
	maio_lio_›code
;

39 
	maio_ªq¥io
;

40 vﬁ©ûê*
	maio_buf
;

41 
size_t
 
	maio_nbyãs
;

42 
sigevít
 
	maio_sigevít
;

45 
aiocb
 *
	m__√xt_¥io
;

46 
	m__abs_¥io
;

47 
	m__pﬁicy
;

48 
	m__îr‹_code
;

49 
__ssize_t
 
	m__ªtu∫_vÆue
;

51 #i‚de‡
__USE_FILE_OFFSET64


52 
__off_t
 
	maio_off£t
;

53 
	m__∑d
[ (
__off64_t
Ë-  (
__off_t
)];

55 
__off64_t
 
	maio_off£t
;

57 
	m__glibc_ª£rved
[32];

62 #ifde‡
__USE_LARGEFILE64


63 
	saiocb64


65 
	maio_fûdes
;

66 
	maio_lio_›code
;

67 
	maio_ªq¥io
;

68 vﬁ©ûê*
	maio_buf
;

69 
size_t
 
	maio_nbyãs
;

70 
sigevít
 
	maio_sigevít
;

73 
aiocb
 *
	m__√xt_¥io
;

74 
	m__abs_¥io
;

75 
	m__pﬁicy
;

76 
	m__îr‹_code
;

77 
__ssize_t
 
	m__ªtu∫_vÆue
;

79 
__off64_t
 
	maio_off£t
;

80 
	m__glibc_ª£rved
[32];

85 #ifde‡
__USE_GNU


88 
	saioöô


90 
	maio_thªads
;

91 
	maio_num
;

92 
	maio_locks
;

93 
	maio_u£dba
;

94 
	maio_debug
;

95 
	maio_numu£rs
;

96 
	maio_idÀ_time
;

98 
	maio_ª£rved
;

106 
	mAIO_CANCELED
,

107 
	#AIO_CANCELED
 
AIO_CANCELED


	)

108 
	mAIO_NOTCANCELED
,

109 
	#AIO_NOTCANCELED
 
AIO_NOTCANCELED


	)

110 
	mAIO_ALLDONE


111 
	#AIO_ALLDONE
 
AIO_ALLDONE


	)

118 
	mLIO_READ
,

119 
	#LIO_READ
 
LIO_READ


	)

120 
	mLIO_WRITE
,

121 
	#LIO_WRITE
 
LIO_WRITE


	)

122 
	mLIO_NOP


123 
	#LIO_NOP
 
LIO_NOP


	)

130 
	mLIO_WAIT
,

131 
	#LIO_WAIT
 
LIO_WAIT


	)

132 
	mLIO_NOWAIT


133 
	#LIO_NOWAIT
 
LIO_NOWAIT


	)

138 #ifde‡
__USE_GNU


139 
	$aio_öô
 (c⁄° 
aioöô
 *
__öô
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #i‚de‡
__USE_FILE_OFFSET64


145 
	$aio_ªad
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$aio_wrôe
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

150 
	$lio_li°io
 (
__mode
,

151 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

152 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

153 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
	$aio_îr‹
 (c⁄° 
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

158 
__ssize_t
 
	$aio_ªtu∫
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

162 
	$aio_ˇn˚l
 (
__fûdes
, 
aiocb
 *
__aiocbp
Ë
__THROW
;

169 
	$aio_su•íd
 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

170 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

171 
	`__n⁄nuŒ
 ((1));

175 
	$aio_fsync
 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
)

176 
__THROW
 
	`__n⁄nuŒ
 ((2));

178 #ifde‡
__REDIRECT_NTH


179 
	`__REDIRECT_NTH
 (
aio_ªad
, (
aiocb
 *
__aiocbp
), 
aio_ªad64
)

180 
	`__n⁄nuŒ
 ((1));

181 
	`__REDIRECT_NTH
 (
aio_wrôe
, (
aiocb
 *
__aiocbp
), 
aio_wrôe64
)

182 
	`__n⁄nuŒ
 ((1));

184 
	`__REDIRECT_NTH
 (
lio_li°io
,

185 (
__mode
,

186 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

187 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
),

188 
lio_li°io64
Ë
	`__n⁄nuŒ
 ((2));

190 
	`__REDIRECT_NTH
 (
aio_îr‹
, (c⁄° 
aiocb
 *
__aiocbp
),

191 
aio_îr‹64
Ë
	`__n⁄nuŒ
 ((1));

192 
__ssize_t
 
	`__REDIRECT_NTH
 (
aio_ªtu∫
, (
aiocb
 *
__aiocbp
),

193 
aio_ªtu∫64
Ë
	`__n⁄nuŒ
 ((1));

195 
	`__REDIRECT_NTH
 (
aio_ˇn˚l
,

196 (
__fûdes
, 
aiocb
 *
__aiocbp
),

197 
aio_ˇn˚l64
);

199 
	`__REDIRECT_NTH
 (
aio_su•íd
,

200 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

201 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
),

202 
aio_su•íd64
Ë
	`__n⁄nuŒ
 ((1));

204 
	`__REDIRECT_NTH
 (
aio_fsync
,

205 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
),

206 
aio_fsync64
Ë
	`__n⁄nuŒ
 ((2));

209 
	#aio_ªad
 
aio_ªad64


	)

210 
	#aio_wrôe
 
aio_wrôe64


	)

211 
	#lio_li°io
 
lio_li°io64


	)

212 
	#aio_îr‹
 
aio_îr‹64


	)

213 
	#aio_ªtu∫
 
aio_ªtu∫64


	)

214 
	#aio_ˇn˚l
 
aio_ˇn˚l64


	)

215 
	#aio_su•íd
 
aio_su•íd64


	)

216 
	#aio_fsync
 
aio_fsync64


	)

220 #ifde‡
__USE_LARGEFILE64


221 
	$aio_ªad64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$aio_wrôe64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$lio_li°io64
 (
__mode
,

225 
aiocb64
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

226 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

227 
__THROW
 
	`__n⁄nuŒ
 ((2));

229 
	$aio_îr‹64
 (c⁄° 
aiocb64
 *
__aiocbp
)

230 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
__ssize_t
 
	$aio_ªtu∫64
 (
aiocb64
 *
__aiocbp
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$aio_ˇn˚l64
 (
__fûdes
, 
aiocb64
 *
__aiocbp
Ë
__THROW
;

236 
	$aio_su•íd64
 (c⁄° 
aiocb64
 *c⁄° 
__li°
[], 
__√¡
,

237 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

238 
__THROW
 
	`__n⁄nuŒ
 ((1));

240 
	$aio_fsync64
 (
__›î©i⁄
, 
aiocb64
 *
__aiocbp
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2));

244 
__END_DECLS


	@/usr/include/asm/unistd.h

1 #i‚de‡
_ASM_X86_UNISTD_H


2 
	#_ASM_X86_UNISTD_H


	)

5 
	#__X32_SYSCALL_BIT
 0x40000000

	)

7 #ifde‡
__i386__


8 
	~<asm/uni°d_32.h
>

9 #ñi‡
deföed
(
__ILP32__
)

10 
	~<asm/uni°d_x32.h
>

12 
	~<asm/uni°d_64.h
>

	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/pkt_sched.h

1 #i‚de‡
__LINUX_PKT_SCHED_H


2 
	#__LINUX_PKT_SCHED_H


	)

4 
	~<löux/ty≥s.h
>

19 
	#TC_PRIO_BESTEFFORT
 0

	)

20 
	#TC_PRIO_FILLER
 1

	)

21 
	#TC_PRIO_BULK
 2

	)

22 
	#TC_PRIO_INTERACTIVE_BULK
 4

	)

23 
	#TC_PRIO_INTERACTIVE
 6

	)

24 
	#TC_PRIO_CONTROL
 7

	)

26 
	#TC_PRIO_MAX
 15

	)

32 
	stc_°©s
 {

33 
__u64
 
	mbyãs
;

34 
__u32
 
	m∑ckës
;

35 
__u32
 
	mdr›s
;

36 
__u32
 
	movîlimôs
;

38 
__u32
 
	mbps
;

39 
__u32
 
	mµs
;

40 
__u32
 
	mqÀn
;

41 
__u32
 
	mbacklog
;

44 
	stc_e°im©‹
 {

45 sig√d 
	möãrvÆ
;

46 
	mewma_log
;

66 
	#TC_H_MAJ_MASK
 (0xFFFF0000U)

	)

67 
	#TC_H_MIN_MASK
 (0x0000FFFFU)

	)

68 
	#TC_H_MAJ
(
h
Ë((h)&
TC_H_MAJ_MASK
)

	)

69 
	#TC_H_MIN
(
h
Ë((h)&
TC_H_MIN_MASK
)

	)

70 
	#TC_H_MAKE
(
maj
,
mö
Ë(((maj)&
TC_H_MAJ_MASK
)|((mö)&
TC_H_MIN_MASK
))

	)

72 
	#TC_H_UNSPEC
 (0U)

	)

73 
	#TC_H_ROOT
 (0xFFFFFFFFU)

	)

74 
	#TC_H_INGRESS
 (0xFFFFFFF1U)

	)

75 
	#TC_H_CLSACT
 
TC_H_INGRESS


	)

77 
	#TC_H_MIN_INGRESS
 0xFFF2U

	)

78 
	#TC_H_MIN_EGRESS
 0xFFF3U

	)

81 
	etc_lök_œyî
 {

82 
	mTC_LINKLAYER_UNAWARE
,

83 
	mTC_LINKLAYER_ETHERNET
,

84 
	mTC_LINKLAYER_ATM
,

86 
	#TC_LINKLAYER_MASK
 0x0F

	)

88 
	stc_øã•ec
 {

89 
	m˚Œ_log
;

90 
__u8
 
	mlökœyî
;

91 
	movîhód
;

92 
	m˚Œ_Æign
;

93 
	mmpu
;

94 
__u32
 
	møã
;

97 
	#TC_RTAB_SIZE
 1024

	)

99 
	stc_size•ec
 {

100 
	m˚Œ_log
;

101 
	msize_log
;

102 
	m˚Œ_Æign
;

103 
	movîhód
;

104 
	mlökœyî
;

105 
	mmpu
;

106 
	mmtu
;

107 
	mtsize
;

111 
	mTCA_STAB_UNSPEC
,

112 
	mTCA_STAB_BASE
,

113 
	mTCA_STAB_DATA
,

114 
	m__TCA_STAB_MAX


117 
	#TCA_STAB_MAX
 (
__TCA_STAB_MAX
 - 1)

	)

121 
	stc_fifo_q›t
 {

122 
__u32
 
	mlimô
;

127 
	#TCQ_PRIO_BANDS
 16

	)

128 
	#TCQ_MIN_PRIO_BANDS
 2

	)

130 
	stc_¥io_q›t
 {

131 
	mb™ds
;

132 
__u8
 
	m¥iom≠
[
TC_PRIO_MAX
+1];

137 
	stc_mu…iq_q›t
 {

138 
__u16
 
	mb™ds
;

139 
__u16
 
	mmax_b™ds
;

144 
	#TCQ_PLUG_BUFFER
 0

	)

145 
	#TCQ_PLUG_RELEASE_ONE
 1

	)

146 
	#TCQ_PLUG_RELEASE_INDEFINITE
 2

	)

147 
	#TCQ_PLUG_LIMIT
 3

	)

149 
	stc_∂ug_q›t
 {

159 
	ma˘i⁄
;

160 
__u32
 
	mlimô
;

165 
	stc_tbf_q›t
 {

166 
tc_øã•ec
 
	møã
;

167 
tc_øã•ec
 
	m≥akøã
;

168 
__u32
 
	mlimô
;

169 
__u32
 
	mbuf„r
;

170 
__u32
 
	mmtu
;

174 
	mTCA_TBF_UNSPEC
,

175 
	mTCA_TBF_PARMS
,

176 
	mTCA_TBF_RTAB
,

177 
	mTCA_TBF_PTAB
,

178 
	mTCA_TBF_RATE64
,

179 
	mTCA_TBF_PRATE64
,

180 
	mTCA_TBF_BURST
,

181 
	mTCA_TBF_PBURST
,

182 
	mTCA_TBF_PAD
,

183 
	m__TCA_TBF_MAX
,

186 
	#TCA_TBF_MAX
 (
__TCA_TBF_MAX
 - 1)

	)

195 
	stc_sfq_q›t
 {

196 
	mqu™tum
;

197 
	m≥πurb_≥riod
;

198 
__u32
 
	mlimô
;

199 
	mdivis‹
;

200 
	mÊows
;

203 
	stc_sfqªd_°©s
 {

204 
__u32
 
	m¥ob_dr›
;

205 
__u32
 
	mf‹˚d_dr›
;

206 
__u32
 
	m¥ob_m¨k
;

207 
__u32
 
	mf‹˚d_m¨k
;

208 
__u32
 
	m¥ob_m¨k_hód
;

209 
__u32
 
	mf‹˚d_m¨k_hód
;

212 
	stc_sfq_q›t_v1
 {

213 
tc_sfq_q›t
 
	mv0
;

214 
	mdïth
;

215 
	mhóddr›
;

217 
__u32
 
	mlimô
;

218 
__u32
 
	mqth_mö
;

219 
__u32
 
	mqth_max
;

220 
	mWlog
;

221 
	mPlog
;

222 
	mS˚Œ_log
;

223 
	mÊags
;

224 
__u32
 
	mmax_P
;

226 
tc_sfqªd_°©s
 
	m°©s
;

230 
	stc_sfq_x°©s
 {

231 
__s32
 
	mÆlŸ
;

237 
	mTCA_RED_UNSPEC
,

238 
	mTCA_RED_PARMS
,

239 
	mTCA_RED_STAB
,

240 
	mTCA_RED_MAX_P
,

241 
	m__TCA_RED_MAX
,

244 
	#TCA_RED_MAX
 (
__TCA_RED_MAX
 - 1)

	)

246 
	stc_ªd_q›t
 {

247 
__u32
 
	mlimô
;

248 
__u32
 
	mqth_mö
;

249 
__u32
 
	mqth_max
;

250 
	mWlog
;

251 
	mPlog
;

252 
	mS˚Œ_log
;

253 
	mÊags
;

254 
	#TC_RED_ECN
 1

	)

255 
	#TC_RED_HARDDROP
 2

	)

256 
	#TC_RED_ADAPTATIVE
 4

	)

259 
	stc_ªd_x°©s
 {

260 
__u32
 
	móæy
;

261 
__u32
 
	mpdr›
;

262 
__u32
 
	mŸhî
;

263 
__u32
 
	mm¨ked
;

268 
	#MAX_DPs
 16

	)

271 
	mTCA_GRED_UNSPEC
,

272 
	mTCA_GRED_PARMS
,

273 
	mTCA_GRED_STAB
,

274 
	mTCA_GRED_DPS
,

275 
	mTCA_GRED_MAX_P
,

276 
	mTCA_GRED_LIMIT
,

277 
	m__TCA_GRED_MAX
,

280 
	#TCA_GRED_MAX
 (
__TCA_GRED_MAX
 - 1)

	)

282 
	stc_gªd_q›t
 {

283 
__u32
 
	mlimô
;

284 
__u32
 
	mqth_mö
;

285 
__u32
 
	mqth_max
;

286 
__u32
 
	mDP
;

287 
__u32
 
	mbacklog
;

288 
__u32
 
	mqave
;

289 
__u32
 
	mf‹˚d
;

290 
__u32
 
	móæy
;

291 
__u32
 
	mŸhî
;

292 
__u32
 
	mpdr›
;

293 
__u8
 
	mWlog
;

294 
__u8
 
	mPlog
;

295 
__u8
 
	mS˚Œ_log
;

296 
__u8
 
	m¥io
;

297 
__u32
 
	m∑ckës
;

298 
__u32
 
	mbyãsö
;

302 
	stc_gªd_s›t
 {

303 
__u32
 
	mDPs
;

304 
__u32
 
	mdef_DP
;

305 
__u8
 
	mgrio
;

306 
__u8
 
	mÊags
;

307 
__u16
 
	m∑d1
;

313 
	mTCA_CHOKE_UNSPEC
,

314 
	mTCA_CHOKE_PARMS
,

315 
	mTCA_CHOKE_STAB
,

316 
	mTCA_CHOKE_MAX_P
,

317 
	m__TCA_CHOKE_MAX
,

320 
	#TCA_CHOKE_MAX
 (
__TCA_CHOKE_MAX
 - 1)

	)

322 
	stc_choke_q›t
 {

323 
__u32
 
	mlimô
;

324 
__u32
 
	mqth_mö
;

325 
__u32
 
	mqth_max
;

326 
	mWlog
;

327 
	mPlog
;

328 
	mS˚Œ_log
;

329 
	mÊags
;

332 
	stc_choke_x°©s
 {

333 
__u32
 
	móæy
;

334 
__u32
 
	mpdr›
;

335 
__u32
 
	mŸhî
;

336 
__u32
 
	mm¨ked
;

337 
__u32
 
	mm©ched
;

341 
	#TC_HTB_NUMPRIO
 8

	)

342 
	#TC_HTB_MAXDEPTH
 8

	)

343 
	#TC_HTB_PROTOVER
 3

	)

345 
	stc_htb_›t
 {

346 
tc_øã•ec
 
	møã
;

347 
tc_øã•ec
 
	m˚û
;

348 
__u32
 
	mbuf„r
;

349 
__u32
 
	mcbuf„r
;

350 
__u32
 
	mqu™tum
;

351 
__u32
 
	mÀvñ
;

352 
__u32
 
	m¥io
;

354 
	stc_htb_glob
 {

355 
__u32
 
	mvîsi⁄
;

356 
__u32
 
	møã2qu™tum
;

357 
__u32
 
	mdef˛s
;

358 
__u32
 
	mdebug
;

361 
__u32
 
	mdúe˘_pkts
;

364 
	mTCA_HTB_UNSPEC
,

365 
	mTCA_HTB_PARMS
,

366 
	mTCA_HTB_INIT
,

367 
	mTCA_HTB_CTAB
,

368 
	mTCA_HTB_RTAB
,

369 
	mTCA_HTB_DIRECT_QLEN
,

370 
	mTCA_HTB_RATE64
,

371 
	mTCA_HTB_CEIL64
,

372 
	mTCA_HTB_PAD
,

373 
	m__TCA_HTB_MAX
,

376 
	#TCA_HTB_MAX
 (
__TCA_HTB_MAX
 - 1)

	)

378 
	stc_htb_x°©s
 {

379 
__u32
 
	mÀnds
;

380 
__u32
 
	mb‹rows
;

381 
__u32
 
	mgü¡s
;

382 
__u32
 
	mtokís
;

383 
__u32
 
	m˘okís
;

388 
	stc_hfsc_q›t
 {

389 
__u16
 
	mdef˛s
;

392 
	stc_£rvi˚_curve
 {

393 
__u32
 
	mm1
;

394 
__u32
 
	md
;

395 
__u32
 
	mm2
;

398 
	stc_hfsc_°©s
 {

399 
__u64
 
	mw‹k
;

400 
__u64
 
	mπw‹k
;

401 
__u32
 
	m≥riod
;

402 
__u32
 
	mÀvñ
;

406 
	mTCA_HFSC_UNSPEC
,

407 
	mTCA_HFSC_RSC
,

408 
	mTCA_HFSC_FSC
,

409 
	mTCA_HFSC_USC
,

410 
	m__TCA_HFSC_MAX
,

413 
	#TCA_HFSC_MAX
 (
__TCA_HFSC_MAX
 - 1)

	)

418 
	#TC_CBQ_MAXPRIO
 8

	)

419 
	#TC_CBQ_MAXLEVEL
 8

	)

420 
	#TC_CBQ_DEF_EWMA
 5

	)

422 
	stc_cbq_lss›t
 {

423 
	mch™ge
;

424 
	mÊags
;

425 
	#TCF_CBQ_LSS_BOUNDED
 1

	)

426 
	#TCF_CBQ_LSS_ISOLATED
 2

	)

427 
	mewma_log
;

428 
	mÀvñ
;

429 
	#TCF_CBQ_LSS_FLAGS
 1

	)

430 
	#TCF_CBQ_LSS_EWMA
 2

	)

431 
	#TCF_CBQ_LSS_MAXIDLE
 4

	)

432 
	#TCF_CBQ_LSS_MINIDLE
 8

	)

433 
	#TCF_CBQ_LSS_OFFTIME
 0x10

	)

434 
	#TCF_CBQ_LSS_AVPKT
 0x20

	)

435 
__u32
 
	mmaxidÀ
;

436 
__u32
 
	mmöidÀ
;

437 
__u32
 
	mof·ime
;

438 
__u32
 
	mavpkt
;

441 
	stc_cbq_wº›t
 {

442 
	mÊags
;

443 
	m¥i‹ôy
;

444 
	m˝ri‹ôy
;

445 
	m__ª£rved
;

446 
__u32
 
	mÆlŸ
;

447 
__u32
 
	mweight
;

450 
	stc_cbq_ovl
 {

451 
	m°øãgy
;

452 
	#TC_CBQ_OVL_CLASSIC
 0

	)

453 
	#TC_CBQ_OVL_DELAY
 1

	)

454 
	#TC_CBQ_OVL_LOWPRIO
 2

	)

455 
	#TC_CBQ_OVL_DROP
 3

	)

456 
	#TC_CBQ_OVL_RCLASSIC
 4

	)

457 
	m¥i‹ôy2
;

458 
__u16
 
	m∑d
;

459 
__u32
 
	m≥«…y
;

462 
	stc_cbq_pﬁi˚
 {

463 
	mpﬁi˚
;

464 
	m__ªs1
;

465 
	m__ªs2
;

468 
	stc_cbq_f›t
 {

469 
__u32
 
	m•lô
;

470 
__u32
 
	mdefm≠
;

471 
__u32
 
	mdefch™ge
;

474 
	stc_cbq_x°©s
 {

475 
__u32
 
	mb‹rows
;

476 
__u32
 
	movîa˘i⁄s
;

477 
__s32
 
	mavgidÀ
;

478 
__s32
 
	mundîtime
;

482 
	mTCA_CBQ_UNSPEC
,

483 
	mTCA_CBQ_LSSOPT
,

484 
	mTCA_CBQ_WRROPT
,

485 
	mTCA_CBQ_FOPT
,

486 
	mTCA_CBQ_OVL_STRATEGY
,

487 
	mTCA_CBQ_RATE
,

488 
	mTCA_CBQ_RTAB
,

489 
	mTCA_CBQ_POLICE
,

490 
	m__TCA_CBQ_MAX
,

493 
	#TCA_CBQ_MAX
 (
__TCA_CBQ_MAX
 - 1)

	)

498 
	mTCA_DSMARK_UNSPEC
,

499 
	mTCA_DSMARK_INDICES
,

500 
	mTCA_DSMARK_DEFAULT_INDEX
,

501 
	mTCA_DSMARK_SET_TC_INDEX
,

502 
	mTCA_DSMARK_MASK
,

503 
	mTCA_DSMARK_VALUE
,

504 
	m__TCA_DSMARK_MAX
,

507 
	#TCA_DSMARK_MAX
 (
__TCA_DSMARK_MAX
 - 1)

	)

512 
	mTCA_ATM_UNSPEC
,

513 
	mTCA_ATM_FD
,

514 
	mTCA_ATM_PTR
,

515 
	mTCA_ATM_HDR
,

516 
	mTCA_ATM_EXCESS
,

517 
	mTCA_ATM_ADDR
,

518 
	mTCA_ATM_STATE
,

519 
	m__TCA_ATM_MAX
,

522 
	#TCA_ATM_MAX
 (
__TCA_ATM_MAX
 - 1)

	)

527 
	mTCA_NETEM_UNSPEC
,

528 
	mTCA_NETEM_CORR
,

529 
	mTCA_NETEM_DELAY_DIST
,

530 
	mTCA_NETEM_REORDER
,

531 
	mTCA_NETEM_CORRUPT
,

532 
	mTCA_NETEM_LOSS
,

533 
	mTCA_NETEM_RATE
,

534 
	mTCA_NETEM_ECN
,

535 
	mTCA_NETEM_RATE64
,

536 
	mTCA_NETEM_PAD
,

537 
	m__TCA_NETEM_MAX
,

540 
	#TCA_NETEM_MAX
 (
__TCA_NETEM_MAX
 - 1)

	)

542 
	stc_√ãm_q›t
 {

543 
__u32
 
	mœãncy
;

544 
__u32
 
	mlimô
;

545 
__u32
 
	mloss
;

546 
__u32
 
	mg≠
;

547 
__u32
 
	mdu∂iˇã
;

548 
__u32
 
	mjôãr
;

551 
	stc_√ãm_c‹r
 {

552 
__u32
 
	mdñay_c‹r
;

553 
__u32
 
	mloss_c‹r
;

554 
__u32
 
	mdup_c‹r
;

557 
	stc_√ãm_ª‹dî
 {

558 
__u32
 
	m¥obabûôy
;

559 
__u32
 
	mc‹ªœti⁄
;

562 
	stc_√ãm_c‹ru±
 {

563 
__u32
 
	m¥obabûôy
;

564 
__u32
 
	mc‹ªœti⁄
;

567 
	stc_√ãm_øã
 {

568 
__u32
 
	møã
;

569 
__s32
 
	m∑ckë_ovîhód
;

570 
__u32
 
	m˚Œ_size
;

571 
__s32
 
	m˚Œ_ovîhód
;

575 
	mNETEM_LOSS_UNSPEC
,

576 
	mNETEM_LOSS_GI
,

577 
	mNETEM_LOSS_GE
,

578 
	m__NETEM_LOSS_MAX


580 
	#NETEM_LOSS_MAX
 (
__NETEM_LOSS_MAX
 - 1)

	)

583 
	stc_√ãm_gimodñ
 {

584 
__u32
 
	mp13
;

585 
__u32
 
	mp31
;

586 
__u32
 
	mp32
;

587 
__u32
 
	mp14
;

588 
__u32
 
	mp23
;

592 
	stc_√ãm_gemodñ
 {

593 
__u32
 
	mp
;

594 
__u32
 
	mr
;

595 
__u32
 
	mh
;

596 
__u32
 
	mk1
;

599 
	#NETEM_DIST_SCALE
 8192

	)

600 
	#NETEM_DIST_MAX
 16384

	)

605 
	mTCA_DRR_UNSPEC
,

606 
	mTCA_DRR_QUANTUM
,

607 
	m__TCA_DRR_MAX


610 
	#TCA_DRR_MAX
 (
__TCA_DRR_MAX
 - 1)

	)

612 
	stc_dº_°©s
 {

613 
__u32
 
	mdeficô
;

617 
	#TC_QOPT_BITMASK
 15

	)

618 
	#TC_QOPT_MAX_QUEUE
 16

	)

620 
	stc_mq¥io_q›t
 {

621 
__u8
 
	mnum_tc
;

622 
__u8
 
	m¥io_tc_m≠
[
TC_QOPT_BITMASK
 + 1];

623 
__u8
 
	mhw
;

624 
__u16
 
	mcou¡
[
TC_QOPT_MAX_QUEUE
];

625 
__u16
 
	moff£t
[
TC_QOPT_MAX_QUEUE
];

631 
	mTCA_SFB_UNSPEC
,

632 
	mTCA_SFB_PARMS
,

633 
	m__TCA_SFB_MAX
,

636 
	#TCA_SFB_MAX
 (
__TCA_SFB_MAX
 - 1)

	)

641 
	stc_sfb_q›t
 {

642 
__u32
 
	mªhash_öãrvÆ
;

643 
__u32
 
	mw¨mup_time
;

644 
__u32
 
	mmax
;

645 
__u32
 
	mbö_size
;

646 
__u32
 
	mö¸emít
;

647 
__u32
 
	mde¸emít
;

648 
__u32
 
	mlimô
;

649 
__u32
 
	m≥«…y_øã
;

650 
__u32
 
	m≥«…y_bur°
;

653 
	stc_sfb_x°©s
 {

654 
__u32
 
	móæydr›
;

655 
__u32
 
	m≥«…ydr›
;

656 
__u32
 
	mbuckëdr›
;

657 
__u32
 
	mqueuedr›
;

658 
__u32
 
	mchûddr›
;

659 
__u32
 
	mm¨ked
;

660 
__u32
 
	mmaxqÀn
;

661 
__u32
 
	mmax¥ob
;

662 
__u32
 
	mavg¥ob
;

665 
	#SFB_MAX_PROB
 0xFFFF

	)

669 
	mTCA_QFQ_UNSPEC
,

670 
	mTCA_QFQ_WEIGHT
,

671 
	mTCA_QFQ_LMAX
,

672 
	m__TCA_QFQ_MAX


675 
	#TCA_QFQ_MAX
 (
__TCA_QFQ_MAX
 - 1)

	)

677 
	stc_qfq_°©s
 {

678 
__u32
 
	mweight
;

679 
__u32
 
	mlmax
;

685 
	mTCA_CODEL_UNSPEC
,

686 
	mTCA_CODEL_TARGET
,

687 
	mTCA_CODEL_LIMIT
,

688 
	mTCA_CODEL_INTERVAL
,

689 
	mTCA_CODEL_ECN
,

690 
	mTCA_CODEL_CE_THRESHOLD
,

691 
	m__TCA_CODEL_MAX


694 
	#TCA_CODEL_MAX
 (
__TCA_CODEL_MAX
 - 1)

	)

696 
	stc_codñ_x°©s
 {

697 
__u32
 
	mmax∑ckë
;

698 
__u32
 
	mcou¡
;

701 
__u32
 
	mœ°cou¡
;

702 
__u32
 
	mldñay
;

703 
__s32
 
	mdr›_√xt
;

704 
__u32
 
	mdr›_ovîlimô
;

705 
__u32
 
	me˙_m¨k
;

706 
__u32
 
	mdr›pög
;

707 
__u32
 
	m˚_m¨k
;

713 
	mTCA_FQ_CODEL_UNSPEC
,

714 
	mTCA_FQ_CODEL_TARGET
,

715 
	mTCA_FQ_CODEL_LIMIT
,

716 
	mTCA_FQ_CODEL_INTERVAL
,

717 
	mTCA_FQ_CODEL_ECN
,

718 
	mTCA_FQ_CODEL_FLOWS
,

719 
	mTCA_FQ_CODEL_QUANTUM
,

720 
	mTCA_FQ_CODEL_CE_THRESHOLD
,

721 
	mTCA_FQ_CODEL_DROP_BATCH_SIZE
,

722 
	mTCA_FQ_CODEL_MEMORY_LIMIT
,

723 
	m__TCA_FQ_CODEL_MAX


726 
	#TCA_FQ_CODEL_MAX
 (
__TCA_FQ_CODEL_MAX
 - 1)

	)

729 
	mTCA_FQ_CODEL_XSTATS_QDISC
,

730 
	mTCA_FQ_CODEL_XSTATS_CLASS
,

733 
	stc_fq_codñ_qd_°©s
 {

734 
__u32
 
	mmax∑ckë
;

735 
__u32
 
	mdr›_ovîlimô
;

738 
__u32
 
	me˙_m¨k
;

741 
__u32
 
	m√w_Êow_cou¡
;

744 
__u32
 
	m√w_Êows_Àn
;

745 
__u32
 
	mﬁd_Êows_Àn
;

746 
__u32
 
	m˚_m¨k
;

747 
__u32
 
	mmem‹y_ußge
;

748 
__u32
 
	mdr›_ovîmem‹y
;

751 
	stc_fq_codñ_˛_°©s
 {

752 
__s32
 
	mdeficô
;

753 
__u32
 
	mldñay
;

756 
__u32
 
	mcou¡
;

757 
__u32
 
	mœ°cou¡
;

758 
__u32
 
	mdr›pög
;

759 
__s32
 
	mdr›_√xt
;

762 
	stc_fq_codñ_x°©s
 {

763 
__u32
 
	mty≥
;

765 
tc_fq_codñ_qd_°©s
 
	mqdisc_°©s
;

766 
tc_fq_codñ_˛_°©s
 
	m˛ass_°©s
;

773 
	mTCA_FQ_UNSPEC
,

775 
	mTCA_FQ_PLIMIT
,

777 
	mTCA_FQ_FLOW_PLIMIT
,

779 
	mTCA_FQ_QUANTUM
,

781 
	mTCA_FQ_INITIAL_QUANTUM
,

783 
	mTCA_FQ_RATE_ENABLE
,

785 
	mTCA_FQ_FLOW_DEFAULT_RATE
,

787 
	mTCA_FQ_FLOW_MAX_RATE
,

789 
	mTCA_FQ_BUCKETS_LOG
,

791 
	mTCA_FQ_FLOW_REFILL_DELAY
,

793 
	mTCA_FQ_ORPHAN_MASK
,

795 
	mTCA_FQ_LOW_RATE_THRESHOLD
,

797 
	m__TCA_FQ_MAX


800 
	#TCA_FQ_MAX
 (
__TCA_FQ_MAX
 - 1)

	)

802 
	stc_fq_qd_°©s
 {

803 
__u64
 
	mgc_Êows
;

804 
__u64
 
	mhigh¥io_∑ckës
;

805 
__u64
 
	mt˝_ªå™s
;

806 
__u64
 
	mthrŸéed
;

807 
__u64
 
	mÊows_∂imô
;

808 
__u64
 
	mpkts_too_l⁄g
;

809 
__u64
 
	mÆloˇti⁄_îr‹s
;

810 
__s64
 
	mtime_√xt_dñayed_Êow
;

811 
__u32
 
	mÊows
;

812 
__u32
 
	möa˘ive_Êows
;

813 
__u32
 
	mthrŸéed_Êows
;

814 
__u32
 
	mu¡hrŸée_œãncy_ns
;

820 
	mTCA_HHF_UNSPEC
,

821 
	mTCA_HHF_BACKLOG_LIMIT
,

822 
	mTCA_HHF_QUANTUM
,

823 
	mTCA_HHF_HH_FLOWS_LIMIT
,

824 
	mTCA_HHF_RESET_TIMEOUT
,

825 
	mTCA_HHF_ADMIT_BYTES
,

826 
	mTCA_HHF_EVICT_TIMEOUT
,

827 
	mTCA_HHF_NON_HH_WEIGHT
,

828 
	m__TCA_HHF_MAX


831 
	#TCA_HHF_MAX
 (
__TCA_HHF_MAX
 - 1)

	)

833 
	stc_hhf_x°©s
 {

834 
__u32
 
	mdr›_ovîlimô
;

837 
__u32
 
	mhh_ovîlimô
;

838 
__u32
 
	mhh_tŸ_cou¡
;

839 
__u32
 
	mhh_cur_cou¡
;

844 
	mTCA_PIE_UNSPEC
,

845 
	mTCA_PIE_TARGET
,

846 
	mTCA_PIE_LIMIT
,

847 
	mTCA_PIE_TUPDATE
,

848 
	mTCA_PIE_ALPHA
,

849 
	mTCA_PIE_BETA
,

850 
	mTCA_PIE_ECN
,

851 
	mTCA_PIE_BYTEMODE
,

852 
	m__TCA_PIE_MAX


854 
	#TCA_PIE_MAX
 (
__TCA_PIE_MAX
 - 1)

	)

856 
	stc_põ_x°©s
 {

857 
__u32
 
	m¥ob
;

858 
__u32
 
	mdñay
;

859 
__u32
 
	mavg_dq_øã
;

860 
__u32
 
	m∑ckës_ö
;

861 
__u32
 
	mdr›≥d
;

862 
__u32
 
	movîlimô
;

863 
__u32
 
	mmaxq
;

864 
__u32
 
	me˙_m¨k
;

	@/usr/include/linux/sockios.h

18 #i‚de‡
_LINUX_SOCKIOS_H


19 
	#_LINUX_SOCKIOS_H


	)

21 
	~<asm/sockios.h
>

24 
	#SIOCINQ
 
FIONREAD


	)

25 
	#SIOCOUTQ
 
TIOCOUTQ


	)

28 
	#SIOCADDRT
 0x890B

	)

29 
	#SIOCDELRT
 0x890C

	)

30 
	#SIOCRTMSG
 0x890D

	)

33 
	#SIOCGIFNAME
 0x8910

	)

34 
	#SIOCSIFLINK
 0x8911

	)

35 
	#SIOCGIFCONF
 0x8912

	)

36 
	#SIOCGIFFLAGS
 0x8913

	)

37 
	#SIOCSIFFLAGS
 0x8914

	)

38 
	#SIOCGIFADDR
 0x8915

	)

39 
	#SIOCSIFADDR
 0x8916

	)

40 
	#SIOCGIFDSTADDR
 0x8917

	)

41 
	#SIOCSIFDSTADDR
 0x8918

	)

42 
	#SIOCGIFBRDADDR
 0x8919

	)

43 
	#SIOCSIFBRDADDR
 0x891®

	)

44 
	#SIOCGIFNETMASK
 0x891b

	)

45 
	#SIOCSIFNETMASK
 0x891¯

	)

46 
	#SIOCGIFMETRIC
 0x891d

	)

47 
	#SIOCSIFMETRIC
 0x891ê

	)

48 
	#SIOCGIFMEM
 0x891‡

	)

49 
	#SIOCSIFMEM
 0x8920

	)

50 
	#SIOCGIFMTU
 0x8921

	)

51 
	#SIOCSIFMTU
 0x8922

	)

52 
	#SIOCSIFNAME
 0x8923

	)

53 
	#SIOCSIFHWADDR
 0x8924

	)

54 
	#SIOCGIFENCAP
 0x8925

	)

55 
	#SIOCSIFENCAP
 0x8926

	)

56 
	#SIOCGIFHWADDR
 0x8927

	)

57 
	#SIOCGIFSLAVE
 0x8929

	)

58 
	#SIOCSIFSLAVE
 0x8930

	)

59 
	#SIOCADDMULTI
 0x8931

	)

60 
	#SIOCDELMULTI
 0x8932

	)

61 
	#SIOCGIFINDEX
 0x8933

	)

62 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

63 
	#SIOCSIFPFLAGS
 0x8934

	)

64 
	#SIOCGIFPFLAGS
 0x8935

	)

65 
	#SIOCDIFADDR
 0x8936

	)

66 
	#SIOCSIFHWBROADCAST
 0x8937

	)

67 
	#SIOCGIFCOUNT
 0x8938

	)

69 
	#SIOCGIFBR
 0x8940

	)

70 
	#SIOCSIFBR
 0x8941

	)

72 
	#SIOCGIFTXQLEN
 0x8942

	)

73 
	#SIOCSIFTXQLEN
 0x8943

	)

78 
	#SIOCETHTOOL
 0x8946

	)

80 
	#SIOCGMIIPHY
 0x8947

	)

81 
	#SIOCGMIIREG
 0x8948

	)

82 
	#SIOCSMIIREG
 0x8949

	)

84 
	#SIOCWANDEV
 0x894A

	)

86 
	#SIOCOUTQNSD
 0x894B

	)

90 
	#SIOCDARP
 0x8953

	)

91 
	#SIOCGARP
 0x8954

	)

92 
	#SIOCSARP
 0x8955

	)

95 
	#SIOCDRARP
 0x8960

	)

96 
	#SIOCGRARP
 0x8961

	)

97 
	#SIOCSRARP
 0x8962

	)

101 
	#SIOCGIFMAP
 0x8970

	)

102 
	#SIOCSIFMAP
 0x8971

	)

106 
	#SIOCADDDLCI
 0x8980

	)

107 
	#SIOCDELDLCI
 0x8981

	)

109 
	#SIOCGIFVLAN
 0x8982

	)

110 
	#SIOCSIFVLAN
 0x8983

	)

114 
	#SIOCBONDENSLAVE
 0x8990

	)

115 
	#SIOCBONDRELEASE
 0x8991

	)

116 
	#SIOCBONDSETHWADDR
 0x8992

	)

117 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

118 
	#SIOCBONDINFOQUERY
 0x8994

	)

119 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

122 
	#SIOCBRADDBR
 0x89a0

	)

123 
	#SIOCBRDELBR
 0x89a1

	)

124 
	#SIOCBRADDIF
 0x89a2

	)

125 
	#SIOCBRDELIF
 0x89a3

	)

128 
	#SIOCSHWTSTAMP
 0x89b0

	)

129 
	#SIOCGHWTSTAMP
 0x89b1

	)

142 
	#SIOCDEVPRIVATE
 0x89F0

	)

148 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/linux/time.h

1 #i‚de‡
_LINUX_TIME_H


2 
	#_LINUX_TIME_H


	)

4 
	~<löux/ty≥s.h
>

7 #i‚de‡
_STRUCT_TIMESPEC


8 
	#_STRUCT_TIMESPEC


	)

9 
	stime•ec
 {

10 
__kî√l_time_t
 
	mtv_£c
;

11 
	mtv_n£c
;

15 
	stimevÆ
 {

16 
__kî√l_time_t
 
	mtv_£c
;

17 
__kî√l_su£c⁄ds_t
 
	mtv_u£c
;

20 
	stimez⁄e
 {

21 
	mtz_möuãswe°
;

22 
	mtz_d°time
;

30 
	#ITIMER_REAL
 0

	)

31 
	#ITIMER_VIRTUAL
 1

	)

32 
	#ITIMER_PROF
 2

	)

34 
	sôimî•ec
 {

35 
time•ec
 
	mô_öãrvÆ
;

36 
time•ec
 
	mô_vÆue
;

39 
	sôimîvÆ
 {

40 
timevÆ
 
	mô_öãrvÆ
;

41 
timevÆ
 
	mô_vÆue
;

47 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

49 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

50 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

51 
	#CLOCK_MONOTONIC_RAW
 4

	)

52 
	#CLOCK_REALTIME_COARSE
 5

	)

53 
	#CLOCK_MONOTONIC_COARSE
 6

	)

54 
	#CLOCK_BOOTTIME
 7

	)

55 
	#CLOCK_REALTIME_ALARM
 8

	)

56 
	#CLOCK_BOOTTIME_ALARM
 9

	)

57 
	#CLOCK_SGI_CYCLE
 10

	)

58 
	#CLOCK_TAI
 11

	)

60 
	#MAX_CLOCKS
 16

	)

61 
	#CLOCKS_MASK
 (
CLOCK_REALTIME
 | 
CLOCK_MONOTONIC
)

	)

62 
	#CLOCKS_MONO
 
CLOCK_MONOTONIC


	)

67 
	#TIMER_ABSTIME
 0x01

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 264461

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/net/if_arp.h

22 #i‚de‡
_NET_IF_ARP_H


24 
	#_NET_IF_ARP_H
 1

	)

25 
	~<sys/cdefs.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/sockë.h
>

30 
	g__BEGIN_DECLS


33 
	#MAX_ADDR_LEN
 7

	)

39 
	#ARPOP_REQUEST
 1

	)

40 
	#ARPOP_REPLY
 2

	)

41 
	#ARPOP_RREQUEST
 3

	)

42 
	#ARPOP_RREPLY
 4

	)

43 
	#ARPOP_InREQUEST
 8

	)

44 
	#ARPOP_InREPLY
 9

	)

45 
	#ARPOP_NAK
 10

	)

54 
	s¨phdr


56 
	m¨_hrd
;

57 
	m¨_¥o
;

58 
	m¨_h 
;

59 
	m¨_∂n
;

60 
	m¨_›
;

64 
	m__¨_sha
[
ETH_ALEN
];

65 
	m__¨_sù
[4];

66 
	m__¨_tha
[
ETH_ALEN
];

67 
	m__¨_tù
[4];

73 
	#ARPHRD_NETROM
 0

	)

74 
	#ARPHRD_ETHER
 1

	)

75 
	#ARPHRD_EETHER
 2

	)

76 
	#ARPHRD_AX25
 3

	)

77 
	#ARPHRD_PRONET
 4

	)

78 
	#ARPHRD_CHAOS
 5

	)

79 
	#ARPHRD_IEEE802
 6

	)

80 
	#ARPHRD_ARCNET
 7

	)

81 
	#ARPHRD_APPLETLK
 8

	)

82 
	#ARPHRD_DLCI
 15

	)

83 
	#ARPHRD_ATM
 19

	)

84 
	#ARPHRD_METRICOM
 23

	)

85 
	#ARPHRD_IEEE1394
 24

	)

86 
	#ARPHRD_EUI64
 27

	)

87 
	#ARPHRD_INFINIBAND
 32

	)

90 
	#ARPHRD_SLIP
 256

	)

91 
	#ARPHRD_CSLIP
 257

	)

92 
	#ARPHRD_SLIP6
 258

	)

93 
	#ARPHRD_CSLIP6
 259

	)

94 
	#ARPHRD_RSRVD
 260

	)

95 
	#ARPHRD_ADAPT
 264

	)

96 
	#ARPHRD_ROSE
 270

	)

97 
	#ARPHRD_X25
 271

	)

98 
	#ARPHRD_HWX25
 272

	)

99 
	#ARPHRD_PPP
 512

	)

100 
	#ARPHRD_CISCO
 513

	)

101 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

102 
	#ARPHRD_LAPB
 516

	)

103 
	#ARPHRD_DDCMP
 517

	)

104 
	#ARPHRD_RAWHDLC
 518

	)

106 
	#ARPHRD_TUNNEL
 768

	)

107 
	#ARPHRD_TUNNEL6
 769

	)

108 
	#ARPHRD_FRAD
 770

	)

109 
	#ARPHRD_SKIP
 771

	)

110 
	#ARPHRD_LOOPBACK
 772

	)

111 
	#ARPHRD_LOCALTLK
 773

	)

112 
	#ARPHRD_FDDI
 774

	)

113 
	#ARPHRD_BIF
 775

	)

114 
	#ARPHRD_SIT
 776

	)

115 
	#ARPHRD_IPDDP
 777

	)

116 
	#ARPHRD_IPGRE
 778

	)

117 
	#ARPHRD_PIMREG
 779

	)

118 
	#ARPHRD_HIPPI
 780

	)

119 
	#ARPHRD_ASH
 781

	)

120 
	#ARPHRD_ECONET
 782

	)

121 
	#ARPHRD_IRDA
 783

	)

122 
	#ARPHRD_FCPP
 784

	)

123 
	#ARPHRD_FCAL
 785

	)

124 
	#ARPHRD_FCPL
 786

	)

125 
	#ARPHRD_FCFABRIC
 787

	)

126 
	#ARPHRD_IEEE802_TR
 800

	)

127 
	#ARPHRD_IEEE80211
 801

	)

128 
	#ARPHRD_IEEE80211_PRISM
 802

	)

129 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

130 
	#ARPHRD_IEEE802154
 804

	)

131 
	#ARPHRD_IEEE802154_PHY
 805

	)

133 
	#ARPHRD_VOID
 0xFFFF

	)

134 
	#ARPHRD_NONE
 0xFFFE

	)

138 
	s¨¥eq


140 
sockaddr
 
	m¨p_∑
;

141 
sockaddr
 
	m¨p_ha
;

142 
	m¨p_Êags
;

143 
sockaddr
 
	m¨p_√tmask
;

144 
	m¨p_dev
[16];

147 
	s¨¥eq_ﬁd


149 
sockaddr
 
	m¨p_∑
;

150 
sockaddr
 
	m¨p_ha
;

151 
	m¨p_Êags
;

152 
sockaddr
 
	m¨p_√tmask
;

156 
	#ATF_COM
 0x02

	)

157 
	#ATF_PERM
 0x04

	)

158 
	#ATF_PUBL
 0x08

	)

159 
	#ATF_USETRAILERS
 0x10

	)

160 
	#ATF_NETMASK
 0x20

	)

162 
	#ATF_DONTPUB
 0x40

	)

163 
	#ATF_MAGIC
 0x80

	)

167 
	#ARPD_UPDATE
 0x01

	)

168 
	#ARPD_LOOKUP
 0x02

	)

169 
	#ARPD_FLUSH
 0x03

	)

171 
	s¨pd_ªque°


173 
	mªq
;

174 
u_öt32_t
 
	mù
;

175 
	mdev
;

176 
	m°amp
;

177 
	mupd©ed
;

178 
	mha
[
MAX_ADDR_LEN
];

181 
	g__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‚de‡
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‚de‡
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #ifde‡
__USE_MISC


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #ifde‡
__USE_MISC


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‚de‡
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #ifde‡
__USE_MISC


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‚de‡
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #ifde‡
__USE_MISC


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
s6_addr32
[0] == 0 \

415 && 
__a
->
s6_addr32
[1] == 0 \

416 && 
__a
->
s6_addr32
[2] == 0 \

417 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
s6_addr32
[0] == 0 \

423 && 
__a
->
s6_addr32
[1] == 0 \

424 && 
__a
->
s6_addr32
[2] == 0 \

425 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
s6_addr32
[0] == 0 \

441 && 
__a
->
s6_addr32
[1] == 0 \

442 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
s6_addr32
[0] == 0 \

448 && 
__a
->
s6_addr32
[1] == 0 \

449 && 
__a
->
s6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

457 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

458 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

459 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‚de‡
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

64 
	#TCP_NOTSENT_LOWAT
 25

	)

66 
	#TCP_CC_INFO
 26

	)

68 
	#TCP_SAVE_SYN
 27

	)

70 
	#TCP_SAVED_SYN
 28

	)

73 #ifde‡
__USE_MISC


74 
	~<sys/ty≥s.h
>

75 
	~<sys/sockë.h
>

77 
u_öt32_t
 
	tt˝_£q
;

82 
	st˝hdr


84 
__exãnsi⁄__
 union

88 
u_öt16_t
 
	mth_•‹t
;

89 
u_öt16_t
 
	mth_dp‹t
;

90 
t˝_£q
 
	mth_£q
;

91 
t˝_£q
 
	mth_ack
;

92 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


93 
u_öt8_t
 
	mth_x2
:4;

94 
u_öt8_t
 
	mth_off
:4;

96 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


97 
u_öt8_t
 
	mth_off
:4;

98 
u_öt8_t
 
	mth_x2
:4;

100 
u_öt8_t
 
	mth_Êags
;

101 
	#TH_FIN
 0x01

	)

102 
	#TH_SYN
 0x02

	)

103 
	#TH_RST
 0x04

	)

104 
	#TH_PUSH
 0x08

	)

105 
	#TH_ACK
 0x10

	)

106 
	#TH_URG
 0x20

	)

107 
u_öt16_t
 
	mth_wö
;

108 
u_öt16_t
 
	mth_sum
;

109 
u_öt16_t
 
	mth_uΩ
;

113 
u_öt16_t
 
	msour˚
;

114 
u_öt16_t
 
	mde°
;

115 
u_öt32_t
 
	m£q
;

116 
u_öt32_t
 
	mack_£q
;

117 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


118 
u_öt16_t
 
	mªs1
:4;

119 
u_öt16_t
 
	mdoff
:4;

120 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	msyn
:1;

122 
u_öt16_t
 
	mr°
:1;

123 
u_öt16_t
 
	mpsh
:1;

124 
u_öt16_t
 
	mack
:1;

125 
u_öt16_t
 
	murg
:1;

126 
u_öt16_t
 
	mªs2
:2;

127 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


128 
u_öt16_t
 
	mdoff
:4;

129 
u_öt16_t
 
	mªs1
:4;

130 
u_öt16_t
 
	mªs2
:2;

131 
u_öt16_t
 
	murg
:1;

132 
u_öt16_t
 
	mack
:1;

133 
u_öt16_t
 
	mpsh
:1;

134 
u_öt16_t
 
	mr°
:1;

135 
u_öt16_t
 
	msyn
:1;

136 
u_öt16_t
 
	mfö
:1;

140 
u_öt16_t
 
	mwödow
;

141 
u_öt16_t
 
	mcheck
;

142 
u_öt16_t
 
	murg_±r
;

149 
	mTCP_ESTABLISHED
 = 1,

150 
	mTCP_SYN_SENT
,

151 
	mTCP_SYN_RECV
,

152 
	mTCP_FIN_WAIT1
,

153 
	mTCP_FIN_WAIT2
,

154 
	mTCP_TIME_WAIT
,

155 
	mTCP_CLOSE
,

156 
	mTCP_CLOSE_WAIT
,

157 
	mTCP_LAST_ACK
,

158 
	mTCP_LISTEN
,

159 
	mTCP_CLOSING


162 
	#TCPOPT_EOL
 0

	)

163 
	#TCPOPT_NOP
 1

	)

164 
	#TCPOPT_MAXSEG
 2

	)

165 
	#TCPOLEN_MAXSEG
 4

	)

166 
	#TCPOPT_WINDOW
 3

	)

167 
	#TCPOLEN_WINDOW
 3

	)

168 
	#TCPOPT_SACK_PERMITTED
 4

	)

169 
	#TCPOLEN_SACK_PERMITTED
 2

	)

170 
	#TCPOPT_SACK
 5

	)

171 
	#TCPOPT_TIMESTAMP
 8

	)

172 
	#TCPOLEN_TIMESTAMP
 10

	)

173 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

175 
	#TCPOPT_TSTAMP_HDR
 \

176 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

184 
	#TCP_MSS
 512

	)

186 
	#TCP_MAXWIN
 65535

	)

188 
	#TCP_MAX_WINSHIFT
 14

	)

190 
	#SOL_TCP
 6

	)

193 
	#TCPI_OPT_TIMESTAMPS
 1

	)

194 
	#TCPI_OPT_SACK
 2

	)

195 
	#TCPI_OPT_WSCALE
 4

	)

196 
	#TCPI_OPT_ECN
 8

	)

197 
	#TCPI_OPT_ECN_SEEN
 16

	)

198 
	#TCPI_OPT_SYN_DATA
 32

	)

201 
	et˝_ˇ_°©e


203 
	mTCP_CA_O≥n
 = 0,

204 
	mTCP_CA_Dis‹dî
 = 1,

205 
	mTCP_CA_CWR
 = 2,

206 
	mTCP_CA_Recovîy
 = 3,

207 
	mTCP_CA_Loss
 = 4

210 
	st˝_öfo


212 
u_öt8_t
 
	mt˝i_°©e
;

213 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

214 
u_öt8_t
 
	mt˝i_ªå™smôs
;

215 
u_öt8_t
 
	mt˝i_¥obes
;

216 
u_öt8_t
 
	mt˝i_backoff
;

217 
u_öt8_t
 
	mt˝i_›ti⁄s
;

218 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

220 
u_öt32_t
 
	mt˝i_πo
;

221 
u_öt32_t
 
	mt˝i_©o
;

222 
u_öt32_t
 
	mt˝i_¢d_mss
;

223 
u_öt32_t
 
	mt˝i_rcv_mss
;

225 
u_öt32_t
 
	mt˝i_u«cked
;

226 
u_öt32_t
 
	mt˝i_ßcked
;

227 
u_öt32_t
 
	mt˝i_lo°
;

228 
u_öt32_t
 
	mt˝i_ªå™s
;

229 
u_öt32_t
 
	mt˝i_Áckës
;

232 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

233 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

234 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

235 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

238 
u_öt32_t
 
	mt˝i_pmtu
;

239 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

240 
u_öt32_t
 
	mt˝i_πt
;

241 
u_öt32_t
 
	mt˝i_πtv¨
;

242 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

243 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

244 
u_öt32_t
 
	mt˝i_advmss
;

245 
u_öt32_t
 
	mt˝i_ª‹dîög
;

247 
u_öt32_t
 
	mt˝i_rcv_πt
;

248 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

250 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

255 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

257 
	st˝_md5sig


259 
sockaddr_°‹age
 
	mt˝m_addr
;

260 
u_öt16_t
 
	m__t˝m_∑d1
;

261 
u_öt16_t
 
	mt˝m_keyÀn
;

262 
u_öt32_t
 
	m__t˝m_∑d2
;

263 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

267 
	st˝_ª∑ú_›t


269 
u_öt32_t
 
	m›t_code
;

270 
u_öt32_t
 
	m›t_vÆ
;

276 
	mTCP_NO_QUEUE
,

277 
	mTCP_RECV_QUEUE
,

278 
	mTCP_SEND_QUEUE
,

279 
	mTCP_QUEUES_NR
,

283 
	#TCP_COOKIE_MIN
 8

	)

284 
	#TCP_COOKIE_MAX
 16

	)

285 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

288 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

289 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

293 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

294 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

296 
	#TCP_MSS_DEFAULT
 536U

	)

297 
	#TCP_MSS_DESIRED
 1220U

	)

299 
	st˝_cookõ_å™ß˘i⁄s


301 
u_öt16_t
 
	mt˝˘_Êags
;

302 
u_öt8_t
 
	m__t˝˘_∑d1
;

303 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

304 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

305 
u_öt16_t
 
	mt˝˘_u£d
;

306 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/netinet/udp.h

47 #i‚de‡
__NETINET_UDP_H


48 
	#__NETINET_UDP_H
 1

	)

50 
	~<„©uªs.h
>

51 
	~<sys/ty≥s.h
>

56 
	sudphdr


58 
__exãnsi⁄__
 union

62 
u_öt16_t
 
	muh_•‹t
;

63 
u_öt16_t
 
	muh_dp‹t
;

64 
u_öt16_t
 
	muh_uÀn
;

65 
u_öt16_t
 
	muh_sum
;

69 
u_öt16_t
 
	msour˚
;

70 
u_öt16_t
 
	mde°
;

71 
u_öt16_t
 
	mÀn
;

72 
u_öt16_t
 
	mcheck
;

78 
	#UDP_CORK
 1

	)

79 
	#UDP_ENCAP
 100

	)

81 
	#UDP_NO_CHECK6_TX
 101

	)

83 
	#UDP_NO_CHECK6_RX
 102

	)

87 
	#UDP_ENCAP_ESPINUDP_NON_IKE
 1

	)

88 
	#UDP_ENCAP_ESPINUDP
 2

	)

89 
	#UDP_ENCAP_L2TPINUDP
 3

	)

91 
	#SOL_UDP
 17

	)

	@/usr/include/sys/shm.h

18 #i‚de‡
_SYS_SHM_H


19 
	#_SYS_SHM_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<sys/ùc.h
>

30 
	~<bôs/shm.h
>

33 
	#__√ed_time_t


	)

34 
	~<time.h
>

36 #ifde‡
__USE_XOPEN


37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

44 
__BEGIN_DECLS


50 
	$shm˘l
 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
Ë
__THROW
;

53 
	$shmgë
 (
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
Ë
__THROW
;

56 *
	$shm©
 (
__shmid
, c⁄° *
__shmaddr
, 
__shmÊg
)

57 
__THROW
;

60 
	$shmdt
 (c⁄° *
__shmaddr
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<sys/uio.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

29 #ifde‡
__USE_GNU


31 
	~<bôs/sig£t.h
>

38 
	~<bôs/sockë.h
>

40 #ifde‡
__USE_MISC


43 
	sosockaddr


45 
	mß_Ámûy
;

46 
	mß_d©a
[14];

54 
	mSHUT_RD
 = 0,

55 
	#SHUT_RD
 
SHUT_RD


	)

56 
	mSHUT_WR
,

57 
	#SHUT_WR
 
SHUT_WR


	)

58 
	mSHUT_RDWR


59 
	#SHUT_RDWR
 
SHUT_RDWR


	)

68 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


69 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

70 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

74 
	#__SOCKADDR_ALLTYPES
 \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

89 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

90 uni⁄ { 
	m__SOCKADDR_ALLTYPES


91 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

92 #unde‡
__SOCKADDR_ONETYPE


93 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

94 uni⁄ { 
	m__SOCKADDR_ALLTYPES


95 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

96 #unde‡
__SOCKADDR_ONETYPE


99 #ifde‡
__USE_GNU


101 
	smmsghdr


103 
msghdr
 
	mmsg_hdr
;

104 
	mmsg_Àn
;

113 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

119 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

120 
__fds
[2]Ë
__THROW
;

123 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

124 
__THROW
;

127 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

128 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

137 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

141 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

142 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

149 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

156 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

163 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 
__addr_Àn
);

174 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

175 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

176 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

184 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

185 
__Êags
);

187 #ifde‡
__USE_GNU


193 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

194 
__vÀn
, 
__Êags
);

202 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

204 #ifde‡
__USE_GNU


210 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

211 
__vÀn
, 
__Êags
,

212 
time•ec
 *
__tmo
);

219 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

220 *
__ª°ri˘
 
__›tvÆ
,

221 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

226 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

227 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

233 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

243 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

244 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

246 #ifde‡
__USE_GNU


251 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

252 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

261 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

264 #ifde‡
__USE_XOPEN2K


266 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

270 #ifde‡
__USE_MISC


274 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

279 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


280 
	~<bôs/sockë2.h
>

283 
__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_MISC


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_MISC


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_MISC


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_MISC


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H
 1

	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

351 
	#__NR_sched_£èâr
 351

	)

352 
	#__NR_sched_gë©å
 352

	)

353 
	#__NR_ª«mót2
 353

	)

354 
	#__NR_£ccomp
 354

	)

355 
	#__NR_gëøndom
 355

	)

356 
	#__NR_memfd_¸óã
 356

	)

357 
	#__NR_bpf
 357

	)

358 
	#__NR_execvót
 358

	)

359 
	#__NR_sockë
 359

	)

360 
	#__NR_sockë∑ú
 360

	)

361 
	#__NR_böd
 361

	)

362 
	#__NR_c⁄√˘
 362

	)

363 
	#__NR_li°í
 363

	)

364 
	#__NR_ac˚±4
 364

	)

365 
	#__NR_gësock›t
 365

	)

366 
	#__NR_£tsock›t
 366

	)

367 
	#__NR_gësock«me
 367

	)

368 
	#__NR_gë≥î«me
 368

	)

369 
	#__NR_£ndto
 369

	)

370 
	#__NR_£ndmsg
 370

	)

371 
	#__NR_ªcv‰om
 371

	)

372 
	#__NR_ªcvmsg
 372

	)

373 
	#__NR_shutdown
 373

	)

374 
	#__NR_u£rÁu…fd
 374

	)

375 
	#__NR_memb¨rõr
 375

	)

376 
	#__NR_mlock2
 376

	)

377 
	#__NR_c›y_fûe_ønge
 377

	)

378 
	#__NR_¥ódv2
 378

	)

379 
	#__NR_pwrôev2
 379

	)

380 
	#__NR_pkey_m¥Ÿe˘
 380

	)

381 
	#__NR_pkey_Æloc
 381

	)

382 
	#__NR_pkey_‰ì
 382

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H
 1

	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

318 
	#__NR_sched_£èâr
 314

	)

319 
	#__NR_sched_gë©å
 315

	)

320 
	#__NR_ª«mót2
 316

	)

321 
	#__NR_£ccomp
 317

	)

322 
	#__NR_gëøndom
 318

	)

323 
	#__NR_memfd_¸óã
 319

	)

324 
	#__NR_kexec_fûe_lﬂd
 320

	)

325 
	#__NR_bpf
 321

	)

326 
	#__NR_execvót
 322

	)

327 
	#__NR_u£rÁu…fd
 323

	)

328 
	#__NR_memb¨rõr
 324

	)

329 
	#__NR_mlock2
 325

	)

330 
	#__NR_c›y_fûe_ønge
 326

	)

331 
	#__NR_¥ódv2
 327

	)

332 
	#__NR_pwrôev2
 328

	)

333 
	#__NR_pkey_m¥Ÿe˘
 329

	)

334 
	#__NR_pkey_Æloc
 330

	)

335 
	#__NR_pkey_‰ì
 331

	)

	@/usr/include/asm/unistd_x32.h

1 #i‚de‡
_ASM_X86_UNISTD_X32_H


2 
	#_ASM_X86_UNISTD_X32_H
 1

	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

188 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

189 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

190 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

191 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

192 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

193 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

194 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

195 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

196 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

197 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

198 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

199 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

200 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

201 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

202 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

203 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

204 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

205 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

206 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

207 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

208 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

209 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

210 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

211 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

212 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

213 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

214 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

215 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

216 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

217 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

218 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

219 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

220 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

221 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

222 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

223 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

224 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

225 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

226 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

227 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

228 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

229 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

230 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

231 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

232 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

233 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

234 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

235 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

236 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

237 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

238 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

239 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

240 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

241 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

242 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

243 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

244 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

245 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

246 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

247 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

248 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

249 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

250 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

251 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

252 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

253 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

254 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

255 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

256 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

257 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

258 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

259 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

260 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

261 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

262 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

263 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

264 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

265 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

266 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

267 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

268 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

269 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

270 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

271 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

272 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

273 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

274 
	#__NR_sched_£èâr
 (
__X32_SYSCALL_BIT
 + 314)

	)

275 
	#__NR_sched_gë©å
 (
__X32_SYSCALL_BIT
 + 315)

	)

276 
	#__NR_ª«mót2
 (
__X32_SYSCALL_BIT
 + 316)

	)

277 
	#__NR_£ccomp
 (
__X32_SYSCALL_BIT
 + 317)

	)

278 
	#__NR_gëøndom
 (
__X32_SYSCALL_BIT
 + 318)

	)

279 
	#__NR_memfd_¸óã
 (
__X32_SYSCALL_BIT
 + 319)

	)

280 
	#__NR_kexec_fûe_lﬂd
 (
__X32_SYSCALL_BIT
 + 320)

	)

281 
	#__NR_bpf
 (
__X32_SYSCALL_BIT
 + 321)

	)

282 
	#__NR_u£rÁu…fd
 (
__X32_SYSCALL_BIT
 + 323)

	)

283 
	#__NR_memb¨rõr
 (
__X32_SYSCALL_BIT
 + 324)

	)

284 
	#__NR_mlock2
 (
__X32_SYSCALL_BIT
 + 325)

	)

285 
	#__NR_c›y_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 326)

	)

286 
	#__NR_pkey_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 329)

	)

287 
	#__NR_pkey_Æloc
 (
__X32_SYSCALL_BIT
 + 330)

	)

288 
	#__NR_pkey_‰ì
 (
__X32_SYSCALL_BIT
 + 331)

	)

289 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

290 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

291 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

292 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

293 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

294 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

295 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

296 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

297 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

298 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

299 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

300 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

301 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

302 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

303 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

304 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

305 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

306 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

307 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

308 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

309 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

310 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

311 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

312 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

313 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

314 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

315 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

316 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

317 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

318 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

319 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

320 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 543)

	)

321 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 544)

	)

322 
	#__NR_execvót
 (
__X32_SYSCALL_BIT
 + 545)

	)

323 
	#__NR_¥ódv2
 (
__X32_SYSCALL_BIT
 + 546)

	)

324 
	#__NR_pwrôev2
 (
__X32_SYSCALL_BIT
 + 547)

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


29 #i‡
deföed
 
_UAPI_LINUX_IN6_H
 || deföed 
_UAPI_IPV6_H


33 
	#__USE_KERNEL_IPV6_DEFS


	)

39 
	#IP_OPTIONS
 4

	)

40 
	#IP_HDRINCL
 3

	)

41 
	#IP_TOS
 1

	)

42 
	#IP_TTL
 2

	)

43 
	#IP_RECVOPTS
 6

	)

45 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

46 
	#IP_RETOPTS
 7

	)

47 
	#IP_MULTICAST_IF
 32

	)

48 
	#IP_MULTICAST_TTL
 33

	)

49 
	#IP_MULTICAST_LOOP
 34

	)

50 
	#IP_ADD_MEMBERSHIP
 35

	)

51 
	#IP_DROP_MEMBERSHIP
 36

	)

52 
	#IP_UNBLOCK_SOURCE
 37

	)

53 
	#IP_BLOCK_SOURCE
 38

	)

54 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

55 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

56 
	#IP_MSFILTER
 41

	)

57 #ifde‡
__USE_MISC


58 
	#MCAST_JOIN_GROUP
 42

	)

59 
	#MCAST_BLOCK_SOURCE
 43

	)

60 
	#MCAST_UNBLOCK_SOURCE
 44

	)

61 
	#MCAST_LEAVE_GROUP
 45

	)

62 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

63 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

64 
	#MCAST_MSFILTER
 48

	)

65 
	#IP_MULTICAST_ALL
 49

	)

66 
	#IP_UNICAST_IF
 50

	)

68 
	#MCAST_EXCLUDE
 0

	)

69 
	#MCAST_INCLUDE
 1

	)

72 
	#IP_ROUTER_ALERT
 5

	)

73 
	#IP_PKTINFO
 8

	)

74 
	#IP_PKTOPTIONS
 9

	)

75 
	#IP_PMTUDISC
 10

	)

76 
	#IP_MTU_DISCOVER
 10

	)

77 
	#IP_RECVERR
 11

	)

78 
	#IP_RECVTTL
 12

	)

79 
	#IP_RECVTOS
 13

	)

80 
	#IP_MTU
 14

	)

81 
	#IP_FREEBIND
 15

	)

82 
	#IP_IPSEC_POLICY
 16

	)

83 
	#IP_XFRM_POLICY
 17

	)

84 
	#IP_PASSSEC
 18

	)

85 
	#IP_TRANSPARENT
 19

	)

86 
	#IP_MULTICAST_ALL
 49

	)

89 
	#IP_ORIGDSTADDR
 20

	)

90 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

92 
	#IP_MINTTL
 21

	)

93 
	#IP_NODEFRAG
 22

	)

94 
	#IP_CHECKSUM
 23

	)

95 
	#IP_BIND_ADDRESS_NO_PORT
 24

	)

98 
	#IP_PMTUDISC_DONT
 0

	)

99 
	#IP_PMTUDISC_WANT
 1

	)

100 
	#IP_PMTUDISC_DO
 2

	)

101 
	#IP_PMTUDISC_PROBE
 3

	)

105 
	#IP_PMTUDISC_INTERFACE
 4

	)

107 
	#IP_PMTUDISC_OMIT
 5

	)

109 
	#IP_MULTICAST_IF
 32

	)

110 
	#IP_MULTICAST_TTL
 33

	)

111 
	#IP_MULTICAST_LOOP
 34

	)

112 
	#IP_ADD_MEMBERSHIP
 35

	)

113 
	#IP_DROP_MEMBERSHIP
 36

	)

114 
	#IP_UNBLOCK_SOURCE
 37

	)

115 
	#IP_BLOCK_SOURCE
 38

	)

116 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

117 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

118 
	#IP_MSFILTER
 41

	)

119 
	#IP_MULTICAST_ALL
 49

	)

120 
	#IP_UNICAST_IF
 50

	)

123 
	#SOL_IP
 0

	)

125 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

126 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

127 
	#IP_MAX_MEMBERSHIPS
 20

	)

129 #ifde‡
__USE_MISC


133 
	sù_›ts


135 
ö_addr
 
	mù_d°
;

136 
	mù_›ts
[40];

140 
	sù_mªqn


142 
ö_addr
 
	mimr_mu…üddr
;

143 
ö_addr
 
	mimr_addªss
;

144 
	mimr_ifödex
;

148 
	sö_pktöfo


150 
	mùi_ifödex
;

151 
ö_addr
 
	mùi_•ec_d°
;

152 
ö_addr
 
	mùi_addr
;

159 
	#IPV6_ADDRFORM
 1

	)

160 
	#IPV6_2292PKTINFO
 2

	)

161 
	#IPV6_2292HOPOPTS
 3

	)

162 
	#IPV6_2292DSTOPTS
 4

	)

163 
	#IPV6_2292RTHDR
 5

	)

164 
	#IPV6_2292PKTOPTIONS
 6

	)

165 
	#IPV6_CHECKSUM
 7

	)

166 
	#IPV6_2292HOPLIMIT
 8

	)

168 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

170 
	#IPV6_NEXTHOP
 9

	)

171 
	#IPV6_AUTHHDR
 10

	)

172 
	#IPV6_UNICAST_HOPS
 16

	)

173 
	#IPV6_MULTICAST_IF
 17

	)

174 
	#IPV6_MULTICAST_HOPS
 18

	)

175 
	#IPV6_MULTICAST_LOOP
 19

	)

176 
	#IPV6_JOIN_GROUP
 20

	)

177 
	#IPV6_LEAVE_GROUP
 21

	)

178 
	#IPV6_ROUTER_ALERT
 22

	)

179 
	#IPV6_MTU_DISCOVER
 23

	)

180 
	#IPV6_MTU
 24

	)

181 
	#IPV6_RECVERR
 25

	)

182 
	#IPV6_V6ONLY
 26

	)

183 
	#IPV6_JOIN_ANYCAST
 27

	)

184 
	#IPV6_LEAVE_ANYCAST
 28

	)

185 
	#IPV6_IPSEC_POLICY
 34

	)

186 
	#IPV6_XFRM_POLICY
 35

	)

189 
	#IPV6_RECVPKTINFO
 49

	)

190 
	#IPV6_PKTINFO
 50

	)

191 
	#IPV6_RECVHOPLIMIT
 51

	)

192 
	#IPV6_HOPLIMIT
 52

	)

193 
	#IPV6_RECVHOPOPTS
 53

	)

194 
	#IPV6_HOPOPTS
 54

	)

195 
	#IPV6_RTHDRDSTOPTS
 55

	)

196 
	#IPV6_RECVRTHDR
 56

	)

197 
	#IPV6_RTHDR
 57

	)

198 
	#IPV6_RECVDSTOPTS
 58

	)

199 
	#IPV6_DSTOPTS
 59

	)

200 
	#IPV6_RECVPATHMTU
 60

	)

201 
	#IPV6_PATHMTU
 61

	)

202 
	#IPV6_DONTFRAG
 62

	)

205 
	#IPV6_RECVTCLASS
 66

	)

206 
	#IPV6_TCLASS
 67

	)

209 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

210 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

211 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

212 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

215 
	#IPV6_PMTUDISC_DONT
 0

	)

216 
	#IPV6_PMTUDISC_WANT
 1

	)

217 
	#IPV6_PMTUDISC_DO
 2

	)

218 
	#IPV6_PMTUDISC_PROBE
 3

	)

219 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

220 
	#IPV6_PMTUDISC_OMIT
 5

	)

223 
	#SOL_IPV6
 41

	)

224 
	#SOL_ICMPV6
 58

	)

227 
	#IPV6_RTHDR_LOOSE
 0

	)

228 
	#IPV6_RTHDR_STRICT
 1

	)

230 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/shm.h

18 #i‚de‡
_SYS_SHM_H


22 
	~<bôs/ty≥s.h
>

25 
	#SHM_R
 0400

	)

26 
	#SHM_W
 0200

	)

29 
	#SHM_RDONLY
 010000

	)

30 
	#SHM_RND
 020000

	)

31 
	#SHM_REMAP
 040000

	)

32 
	#SHM_EXEC
 0100000

	)

35 
	#SHM_LOCK
 11

	)

36 
	#SHM_UNLOCK
 12

	)

38 
	g__BEGIN_DECLS


41 
	#SHMLBA
 (
	`__gë∑gesize
 ())

	)

42 
	$__gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

46 
__sysˇŒ_ul⁄g_t
 
	tshm©t_t
;

49 
	sshmid_ds


51 
ùc_≥rm
 
shm_≥rm
;

52 
size_t
 
shm_£gsz
;

53 
__time_t
 
shm_©ime
;

54 #i‚de‡
__x86_64__


55 
__glibc_ª£rved1
;

57 
__time_t
 
shm_dtime
;

58 #i‚de‡
__x86_64__


59 
__glibc_ª£rved2
;

61 
__time_t
 
shm_˘ime
;

62 #i‚de‡
__x86_64__


63 
__glibc_ª£rved3
;

65 
__pid_t
 
shm_˝id
;

66 
__pid_t
 
shm_Õid
;

67 
shm©t_t
 
shm_«âch
;

68 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved4
;

69 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved5
;

72 #ifde‡
__USE_MISC


75 
	#SHM_STAT
 13

	)

76 
	#SHM_INFO
 14

	)

79 
	#SHM_DEST
 01000

	)

80 
	#SHM_LOCKED
 02000

	)

81 
	#SHM_HUGETLB
 04000

	)

82 
	#SHM_NORESERVE
 010000

	)

84 
	sshmöfo


86 
__sysˇŒ_ul⁄g_t
 
shmmax
;

87 
__sysˇŒ_ul⁄g_t
 
shmmö
;

88 
__sysˇŒ_ul⁄g_t
 
shmmni
;

89 
__sysˇŒ_ul⁄g_t
 
shm£g
;

90 
__sysˇŒ_ul⁄g_t
 
shmÆl
;

91 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved1
;

92 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved2
;

93 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved3
;

94 
__sysˇŒ_ul⁄g_t
 
__glibc_ª£rved4
;

97 
	sshm_öfo


99 
u£d_ids
;

100 
__sysˇŒ_ul⁄g_t
 
shm_tŸ
;

101 
__sysˇŒ_ul⁄g_t
 
shm_rss
;

102 
__sysˇŒ_ul⁄g_t
 
shm_swp
;

103 
__sysˇŒ_ul⁄g_t
 
sw≠_©ãm±s
;

104 
__sysˇŒ_ul⁄g_t
 
sw≠_suc˚s£s
;

109 
__END_DECLS


	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_IB
 27

	)

72 
	#PF_MPLS
 28

	)

73 
	#PF_CAN
 29

	)

74 
	#PF_TIPC
 30

	)

75 
	#PF_BLUETOOTH
 31

	)

76 
	#PF_IUCV
 32

	)

77 
	#PF_RXRPC
 33

	)

78 
	#PF_ISDN
 34

	)

79 
	#PF_PHONET
 35

	)

80 
	#PF_IEEE802154
 36

	)

81 
	#PF_CAIF
 37

	)

82 
	#PF_ALG
 38

	)

83 
	#PF_NFC
 39

	)

84 
	#PF_VSOCK
 40

	)

85 
	#PF_MAX
 41

	)

88 
	#AF_UNSPEC
 
PF_UNSPEC


	)

89 
	#AF_LOCAL
 
PF_LOCAL


	)

90 
	#AF_UNIX
 
PF_UNIX


	)

91 
	#AF_FILE
 
PF_FILE


	)

92 
	#AF_INET
 
PF_INET


	)

93 
	#AF_AX25
 
PF_AX25


	)

94 
	#AF_IPX
 
PF_IPX


	)

95 
	#AF_APPLETALK
 
PF_APPLETALK


	)

96 
	#AF_NETROM
 
PF_NETROM


	)

97 
	#AF_BRIDGE
 
PF_BRIDGE


	)

98 
	#AF_ATMPVC
 
PF_ATMPVC


	)

99 
	#AF_X25
 
PF_X25


	)

100 
	#AF_INET6
 
PF_INET6


	)

101 
	#AF_ROSE
 
PF_ROSE


	)

102 
	#AF_DEC√t
 
PF_DEC√t


	)

103 
	#AF_NETBEUI
 
PF_NETBEUI


	)

104 
	#AF_SECURITY
 
PF_SECURITY


	)

105 
	#AF_KEY
 
PF_KEY


	)

106 
	#AF_NETLINK
 
PF_NETLINK


	)

107 
	#AF_ROUTE
 
PF_ROUTE


	)

108 
	#AF_PACKET
 
PF_PACKET


	)

109 
	#AF_ASH
 
PF_ASH


	)

110 
	#AF_ECONET
 
PF_ECONET


	)

111 
	#AF_ATMSVC
 
PF_ATMSVC


	)

112 
	#AF_RDS
 
PF_RDS


	)

113 
	#AF_SNA
 
PF_SNA


	)

114 
	#AF_IRDA
 
PF_IRDA


	)

115 
	#AF_PPPOX
 
PF_PPPOX


	)

116 
	#AF_WANPIPE
 
PF_WANPIPE


	)

117 
	#AF_LLC
 
PF_LLC


	)

118 
	#AF_IB
 
PF_IB


	)

119 
	#AF_MPLS
 
PF_MPLS


	)

120 
	#AF_CAN
 
PF_CAN


	)

121 
	#AF_TIPC
 
PF_TIPC


	)

122 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

123 
	#AF_IUCV
 
PF_IUCV


	)

124 
	#AF_RXRPC
 
PF_RXRPC


	)

125 
	#AF_ISDN
 
PF_ISDN


	)

126 
	#AF_PHONET
 
PF_PHONET


	)

127 
	#AF_IEEE802154
 
PF_IEEE802154


	)

128 
	#AF_CAIF
 
PF_CAIF


	)

129 
	#AF_ALG
 
PF_ALG


	)

130 
	#AF_NFC
 
PF_NFC


	)

131 
	#AF_VSOCK
 
PF_VSOCK


	)

132 
	#AF_MAX
 
PF_MAX


	)

138 
	#SOL_RAW
 255

	)

139 
	#SOL_DECNET
 261

	)

140 
	#SOL_X25
 262

	)

141 
	#SOL_PACKET
 263

	)

142 
	#SOL_ATM
 264

	)

143 
	#SOL_AAL
 265

	)

144 
	#SOL_IRDA
 266

	)

147 
	#SOMAXCONN
 128

	)

150 
	~<bôs/sockaddr.h
>

153 
	ssockaddr


155 
__SOCKADDR_COMMON
 (
ß_
);

156 
	mß_d©a
[14];

162 
	#__ss_Æig¡y≥
 

	)

163 
	#_SS_PADSIZE
 \

164 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 -  (
__ss_Æig¡y≥
))

	)

166 
	ssockaddr_°‹age


168 
__SOCKADDR_COMMON
 (
ss_
);

169 
	m__ss_∑ddög
[
_SS_PADSIZE
];

170 
__ss_Æig¡y≥
 
	m__ss_Æign
;

177 
	mMSG_OOB
 = 0x01,

178 
	#MSG_OOB
 
MSG_OOB


	)

179 
	mMSG_PEEK
 = 0x02,

180 
	#MSG_PEEK
 
MSG_PEEK


	)

181 
	mMSG_DONTROUTE
 = 0x04,

182 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

183 #ifde‡
__USE_GNU


185 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

186 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

188 
	mMSG_CTRUNC
 = 0x08,

189 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

190 
	mMSG_PROXY
 = 0x10,

191 
	#MSG_PROXY
 
MSG_PROXY


	)

192 
	mMSG_TRUNC
 = 0x20,

193 
	#MSG_TRUNC
 
MSG_TRUNC


	)

194 
	mMSG_DONTWAIT
 = 0x40,

195 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

196 
	mMSG_EOR
 = 0x80,

197 
	#MSG_EOR
 
MSG_EOR


	)

198 
	mMSG_WAITALL
 = 0x100,

199 
	#MSG_WAITALL
 
MSG_WAITALL


	)

200 
	mMSG_FIN
 = 0x200,

201 
	#MSG_FIN
 
MSG_FIN


	)

202 
	mMSG_SYN
 = 0x400,

203 
	#MSG_SYN
 
MSG_SYN


	)

204 
	mMSG_CONFIRM
 = 0x800,

205 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

206 
	mMSG_RST
 = 0x1000,

207 
	#MSG_RST
 
MSG_RST


	)

208 
	mMSG_ERRQUEUE
 = 0x2000,

209 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

210 
	mMSG_NOSIGNAL
 = 0x4000,

211 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

212 
	mMSG_MORE
 = 0x8000,

213 
	#MSG_MORE
 
MSG_MORE


	)

214 
	mMSG_WAITFORONE
 = 0x10000,

215 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

216 
	mMSG_FASTOPEN
 = 0x20000000,

217 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

219 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

222 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

228 
	smsghdr


230 *
	mmsg_«me
;

231 
sockÀn_t
 
	mmsg_«mñí
;

233 
iovec
 *
	mmsg_iov
;

234 
size_t
 
	mmsg_iovÀn
;

236 *
	mmsg_c⁄åﬁ
;

237 
size_t
 
	mmsg_c⁄åﬁÀn
;

242 
	mmsg_Êags
;

246 
	scmsghdr


248 
size_t
 
	mcmsg_Àn
;

253 
	mcmsg_Àvñ
;

254 
	mcmsg_ty≥
;

255 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

256 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

261 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

262 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

264 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

266 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

267 
	#CMSG_FIRSTHDR
(
mhdr
) \

268 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

269 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

270 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

271 & (
size_t
Ë~( (size_tË- 1))

	)

272 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

273 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

274 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

276 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

277 
cmsghdr
 *
__cmsg
Ë
__THROW
;

278 #ifde‡
__USE_EXTERN_INLINES


279 #i‚de‡
_EXTERN_INLINE


280 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

282 
_EXTERN_INLINE
 
cmsghdr
 *

283 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

285 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

287  (
cmsghdr
 *) 0;

289 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

290 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

291 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


292 + 
__mhdr
->
msg_c⁄åﬁÀn
)

293 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

294 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

296  (
cmsghdr
 *) 0;

297  
__cmsg
;

298 
	}
}

305 
	mSCM_RIGHTS
 = 0x01

306 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

307 #ifde‡
__USE_GNU


308 , 
	mSCM_CREDENTIALS
 = 0x02

309 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

313 #ifde‡
__USE_GNU


315 
	su¸ed


317 
pid_t
 
	mpid
;

318 
uid_t
 
	muid
;

319 
gid_t
 
	mgid
;

324 #i‚de‡
__USE_MISC


325 #i‚de‡
FIOGETOWN


326 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

328 #i‚de‡
FIOSETOWN


329 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

331 #i‚de‡
SIOCATMARK


332 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

334 #i‚de‡
SIOCGPGRP


335 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

337 #i‚de‡
SIOCGSTAMP


338 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

340 #i‚de‡
SIOCGSTAMPNS


341 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

343 #i‚de‡
SIOCSPGRP


344 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

349 
	~<asm/sockë.h
>

351 #i‚de‡
__USE_MISC


352 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


353 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


354 #unde‡
FIOGETOWN


356 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


357 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


358 #unde‡
FIOSETOWN


360 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


361 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


362 #unde‡
SIOCATMARK


364 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


365 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


366 #unde‡
SIOCGPGRP


368 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


369 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


370 #unde‡
SIOCGSTAMP


372 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


373 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


374 #unde‡
SIOCGSTAMPNS


376 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


377 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


378 #unde‡
SIOCSPGRP


383 
	slögî


385 
	ml_⁄off
;

386 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

330 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

331 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

332 #ñi‡!
__GNUC_PREREQ
 (4, 1)

333 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


334 #ñi‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 #i‚de‡
__USE_FORTIFY_LEVEL


341 
	#__USE_FORTIFY_LEVEL
 0

	)

346 
	~<°dc-¥edef.h
>

354 #unde‡
__GNU_LIBRARY__


355 
	#__GNU_LIBRARY__
 6

	)

359 
	#__GLIBC__
 2

	)

360 
	#__GLIBC_MINOR__
 23

	)

362 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

363 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

366 #i‚de‡
__ASSEMBLER__


367 #i‚de‡
_SYS_CDEFS_H


368 
	~<sys/cdefs.h
>

373 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


374 
	#__USE_LARGEFILE
 1

	)

375 
	#__USE_LARGEFILE64
 1

	)

381 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

382 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

383 && 
deföed
 
	g__exã∫_ölöe


384 
	#__USE_EXTERN_INLINES
 1

	)

392 
	~<gnu/°ubs.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 #i‡(!
deföed
 
_N‹ëu∫
 \

393 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #i‡
	`__GNUC_PREREQ
 (2,8)

396 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

398 
	#_N‹ëu∫


	)

402 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

403 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

404 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

405 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

406 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

407 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

410 
	~<bôs/w‹dsize.h
>

412 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


413 
	#__LDBL_COMPAT
 1

	)

414 #ifde‡
__REDIRECT


415 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

417 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

418 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

419 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

420 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

421 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

422 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

423 
	#__LDBL_REDIR_DECL
(
«me
) \

424 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

425 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

426 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

427 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

428 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

431 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


432 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

433 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

434 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

435 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

436 
	#__LDBL_REDIR_DECL
(
«me
)

	)

437 #ifde‡
__REDIRECT


438 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

439 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

440 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/ipc.h

18 #i‚de‡
_SYS_IPC_H


19 
	#_SYS_IPC_H
 1

	)

21 
	~<„©uªs.h
>

23 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_XOPEN
 && 
__GNUC__
 >= 2

28 
	~<bôs/ù˘y≥s.h
>

29 
	~<bôs/ùc.h
>

31 #i‚de‡
__uid_t_deföed


32 
__uid_t
 
	tuid_t
;

33 
	#__uid_t_deföed


	)

36 #i‚de‡
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

41 #i‚de‡
__mode_t_deföed


42 
__mode_t
 
	tmode_t
;

43 
	#__mode_t_deföed


	)

46 #i‚de‡
__key_t_deföed


47 
__key_t
 
	tkey_t
;

48 
	#__key_t_deföed


	)

51 
__BEGIN_DECLS


54 
key_t
 
	$·ok
 (c⁄° *
__∑th«me
, 
__¥oj_id
Ë
__THROW
;

56 
__END_DECLS


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bôs/uio.h
>

39 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

40 
__wur
;

50 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

51 
__wur
;

54 #ifde‡
__USE_MISC


55 #i‚de‡
__USE_FILE_OFFSET64


65 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

66 
__off_t
 
__off£t
Ë
__wur
;

77 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

78 
__off_t
 
__off£t
Ë
__wur
;

80 #ifde‡
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

82 
__cou¡
, 
__off64_t
 
__off£t
),

83 
¥ódv64
Ë
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

85 
__cou¡
, 
__off64_t
 
__off£t
),

86 
pwrôev64
Ë
__wur
;

88 
	#¥ódv
 
¥ódv64


	)

89 
	#pwrôev
 
pwrôev64


	)

93 #ifde‡
__USE_LARGEFILE64


103 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

104 
__off64_t
 
__off£t
Ë
__wur
;

115 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

116 
__off64_t
 
__off£t
Ë
__wur
;

120 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

6 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/ipc.h

18 #i‚de‡
_SYS_IPC_H


22 
	~<bôs/ty≥s.h
>

25 
	#IPC_CREAT
 01000

	)

26 
	#IPC_EXCL
 02000

	)

27 
	#IPC_NOWAIT
 04000

	)

30 
	#IPC_RMID
 0

	)

31 
	#IPC_SET
 1

	)

32 
	#IPC_STAT
 2

	)

33 #ifde‡
__USE_GNU


34 
	#IPC_INFO
 3

	)

38 
	#IPC_PRIVATE
 ((
__key_t
Ë0Ë

	)

42 
	sùc_≥rm


44 
__key_t
 
	m__key
;

45 
__uid_t
 
	muid
;

46 
__gid_t
 
	mgid
;

47 
__uid_t
 
	mcuid
;

48 
__gid_t
 
	mcgid
;

49 
	mmode
;

50 
	m__∑d1
;

51 
	m__£q
;

52 
	m__∑d2
;

53 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved1
;

54 
__sysˇŒ_ul⁄g_t
 
	m__glibc_ª£rved2
;

	@/usr/include/bits/ipctypes.h

19 #i‚de‡
_SYS_IPC_H


23 #i‚de‡
_BITS_IPCTYPES_H


24 
	#_BITS_IPCTYPES_H
 1

	)

27 #ifde‡
__x86_64__


28 
	t__ùc_pid_t
;

30 
	t__ùc_pid_t
;

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

40 
	#_SS_SIZE
 128

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/stddef.h

3 #i‚de‡
__Æways_ölöe


4 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

83 
	#SO_BPF_EXTENSIONS
 48

	)

85 
	#SO_INCOMING_CPU
 49

	)

87 
	#SO_ATTACH_BPF
 50

	)

88 
	#SO_DETACH_BPF
 
SO_DETACH_FILTER


	)

90 
	#SO_ATTACH_REUSEPORT_CBPF
 51

	)

91 
	#SO_ATTACH_REUSEPORT_EBPF
 52

	)

93 
	#SO_CNX_ADVICE
 53

	)

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
147
3009
active_wild.c
common_ioctl.c
common_sockopts.c
cplane_ops.c
csum_copy_iovec_setlen.c
efabcfg.c
eplock_slow.c
icmp_send.c
init.c
iovec_ptr.h
ip_cmsg.c
ip_internal.h
ip_tx.c
ip_tx.h
ipid.c
iptimer.c
netif.c
netif_debug.c
netif_event.c
netif_init.c
netif_pkt.c
netif_stats.c
netif_table.c
netif_tx.c
netif_tx.h
os_sock.c
per_thread.c
pio_buddy.c
pipe.c
pkt_filler.c
pmtu.c
rwlock.c
save_fd.c
signal.c
sockerr.c
socket.c
syscall.c
tcp_close.c
tcp_connect.c
tcp_debug.c
tcp_driver_ops.c
tcp_helper.c
tcp_init_shared.c
tcp_ioctl.c
tcp_misc.c
tcp_recv.c
tcp_rx.c
tcp_rx.h
tcp_send.c
tcp_sleep.c
tcp_sockopts.c
tcp_stats.c
tcp_syncookie.c
tcp_synrecv.c
tcp_timer.c
tcp_tx.c
tcp_tx.h
tcp_tx_reformat.c
udp.c
udp_connect.c
udp_internal.h
udp_ioctl.c
udp_misc.c
udp_recv.c
udp_rx.c
udp_send.c
udp_sockopts.c
waitable.c
/usr/include/aio.h
/usr/include/asm/unistd.h
/usr/include/limits.h
/usr/include/linux/pkt_sched.h
/usr/include/linux/sockios.h
/usr/include/linux/time.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/net/if.h
/usr/include/net/if_arp.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/netinet/udp.h
/usr/include/sys/shm.h
/usr/include/sys/socket.h
/usr/include/sys/time.h
/usr/include/time.h
/usr/include/asm/sockios.h
/usr/include/asm/types.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/asm/unistd_x32.h
/usr/include/bits/byteswap.h
/usr/include/bits/in.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/shm.h
/usr/include/bits/siginfo.h
/usr/include/bits/sigset.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/linux/posix_types.h
/usr/include/stdint.h
/usr/include/sys/cdefs.h
/usr/include/sys/ipc.h
/usr/include/sys/select.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/asm-generic/sockios.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/asm/socket.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/endian.h
/usr/include/bits/ipc.h
/usr/include/bits/ipctypes.h
/usr/include/bits/local_lim.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wchar.h
/usr/include/gnu/stubs.h
/usr/include/linux/stddef.h
/usr/include/stdc-predef.h
/usr/include/sys/sysmacros.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/socket.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/limits.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/asm-generic/bitsperlong.h
