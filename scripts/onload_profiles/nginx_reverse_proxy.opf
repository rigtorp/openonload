#
# Tuning profile for nginx in reverse-proxy configuration with OpenOnload
# acceleration.
#
# User may supply the following environment variables:
#
#   NGINX_NUM_WORKERS        - the number of workers that nginx is
#                              configured to use. Overrides value
#                              automatically detected from nginx
#                              configuration
#

set -o pipefail

# For diagnostic output
module="nginx profile"

# Regular expressions to match nginx config directives
worker_processes_pattern="/(^|;)\s*worker_processes\s+(\w+)\s*;/"
include_pattern="/(^|;)\s*include\s+(\S+)\s*;/"

# Identify the config file that nginx would use
identify_config_file() {
  local file

  # Look for a -c option
  local state="IDLE"
  for option in "$@"
  do
    if [ "$state" = "MINUS_C" ]
    then
      file=$option
      state="FOUND"
    elif [ "$option" = "-c" ]
    then
      state="MINUS_C"
    fi
  done

  # Extract the compile-time default if config not specified on command line
  if [ "$state" != "FOUND" ]
  then
    file=$($1 -h 2>&1 | perl -ne 'print $1 if '"$worker_processes_pattern")
  fi

  [ -f "$file" ] && echo $file
}

# Recursively look in included config files for a setting of worker_processes.
# NB If this quantity is set in more than one place then the wrong setting might
# be found, but this would be invalid anyway and is rejected by Nginx.
read_config_file() {
  local setting
  local worker_values=$(perl -ne 'print "$2 " if '"$worker_processes_pattern" $1)
  local include_values=$(perl -ne 'print "$2 " if '"$include_pattern" $1)

  # First look in included files
  for file in $include_values
  do
    local possible=$(read_config_file $file)
    if [ -n "$possible" ]
    then
      setting=$possible
    fi
  done

  # Then look in explicit settings at this level
  for workers in $worker_values
  do
    setting=$workers
  done
  echo $setting
}

# Method to parse configuration files directly
try_config_files() {
  local config_file=$(identify_config_file "$@")
  [ -n "$config_file" ] && read_config_file $config_file
}

# Method to parse configuration via nginx, if supported
try_nginx_minus_t() {
  "$@" -T | perl -ne 'print "$2" if '"$worker_processes_pattern"
}

# Method to parse configuration via tengine, if supported
try_tengine_minus_d() {
  "$@" -d | perl -ne 'print "$2" if '"$worker_processes_pattern"
}

# Determine the number of workers nginx will use
determine_worker_processes() {
  # Prefer nginx's own parser, if available, for robustness
  local workers=$(try_nginx_minus_t "$@" || try_tengine_minus_d "$@" || try_config_files "$@")
  if [ "$workers" = "auto" ]
  then
    # Default to the number of process cores
    workers=$(nproc)
  fi
  echo $workers
}

# Define the number of workers
num_workers=${NGINX_NUM_WORKERS:-$(determine_worker_processes "$@")}
if ! [ -n "$num_workers" ]; then
  fail "ERROR: Environment variable NGINX_NUM_WORKERS is not set and worker count cannot be determined from nginx configuration"
fi
log "$module: configuring for $num_workers workers"

# nginx uses epoll within one process only
onload_set EF_EPOLL_MT_SAFE 1

# Enable clustering to spread connections over workers.
onload_set EF_CLUSTER_SIZE "$num_workers"
onload_set EF_CLUSTER_NAME prox
onload_set EF_CLUSTER_RESTART 1
onload_set EF_CLUSTER_HOT_RESTART 1

# Improve performance with many sockets.
onload_set EF_SCALABLE_FILTERS "any=rss:active:passive"
onload_set EF_SCALABLE_FILTERS_ENABLE 2
onload_set EF_SCALABLE_LISTEN_MODE 1

# Enable spinning and sleep-spin mode.
onload_set EF_POLL_USEC 1000000
onload_set EF_SLEEP_SPIN_USEC 50

onload_import throughput
onload_import wan-traffic

# In case invocation tries to send signal to existing instance of nginx
# omit stack checking.
if echo "$@" | perl -n -e 'if(/\s-s/) {exit 1}'; then
  # In case of cold restart make sure previous instance (of the same name) has
  # ceased to exist and in case references to onload stacks are still being
  # released - wait.

  ITER=0
  while onload_stackdump --nopids stacks | grep "\s${EF_CLUSTER_NAME}-c" >/dev/null; do
    if (( $ITER % 20 == 19 )); then
      echo Onload stacks of name ${EF_CLUSTER_NAME}-c## still present. >&2
      echo Verify that previous instance of Nginx has been killed. >&2
      onload_stackdump --nopids stacks >&2
      if (( $ITER > 50 )); then
        exit 16
      fi
    fi
    ITER=$(( $ITER + 1 ))
    sleep 0.2;
  done
fi
