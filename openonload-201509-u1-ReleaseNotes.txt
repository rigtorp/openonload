OpenOnload-201509-u1 Release Notes
==================================

This is a minor update release that fixes a number of issues with
OpenOnload-201509 and the associated SFC net driver.

Below is a brief summary of the relevant changes and limitations that
we are aware of.  Please see the ChangeLog for further details and a
list of bugs fixed.

The ReleaseNotes for OpenOnload-201509 are included below.


RSS and cluster hashing
-----------------------

This release configures the network adapter to use a fixed key for
flow hashing by default, so that all network ports consistently hash
packets for a particular flow to the same channel within an RSS set or
cluster.  In addition the hashing is symmetric, so that both
directions in an IP conversation are hashed to the same channel. This
applies to packets handled by the kernel stack, by ef_vi and by
SolarCapture.

When using solar_clusterd and ef_vi it is possible to select a
particular channel within a cluster by prefixing the cluster name with
index@.  For example, "0@mycluster" selects the first channel. This is
useful when receiving packets from multiple ports, as it ensures that
packets from a particular flow are steered to the same thread
regardless of which port they arrive at.


Teamd support for mixed bonds
-----------------------------

OpenOnload-201509 added support for bonds configured using teamd in
addition to the long-standing bonding module.  It has recently become
apparent that Onload is not correctly dealing with teamd-configured
bonds that have a mix of Solarflare and non-Solarflare interfaces.
Onload should recognise these as unacceleratable but currently will
attempt to accelerate traffic on the Solarflare interfaces in the
bond, which may lead to unexpected behaviour should the bond failover
to a non-Solarflare interface.

We will address this in a future update release.  To work around the
problem we recommend using the bonding module to configure bonds that
have a mix of Solarflare and non-Solarflare interfaces in them.


sfc_resource /proc file name change
-----------------------------------

To avoid a naming collision when interfaces are renamed the files that
used to be at /proc/driver/sfc_resource/ethX/pdY have moved to
/proc/driver/sfc_resource/devices/0000:0Z.00.0/pdY



OpenOnload-201509 Release Notes
===============================

This is a major update release that adds new features to OpenOnload.

Below is a brief summary of the new features and any limitations that we are
aware of.  See the ChangeLog for further details and a list of bugs fixed.


Scalable filters
----------------

Normally, an Onload stack receives only the traffic that is destined for
sockets that it has created.  It achieves this by installing a "filter" in
hardware to match only the expected traffic for each socket.  These filters are
a limited resource and take tens of microseconds to initialise, and so there is
a limit to the number of sockets with filters, and to how quickly they can be
created.

This release of Onload implements several "scalable filtering" modes to
overcome this limitation.  In these modes, Onload receives all incoming traffic
on a specified interface.  This prevents unaccelerated traffic from being
passed on that interface.  It is suggested that additional PFs or VFs be
configured on the adapter and used for this purpose.

Scalable filter modes are configured using the EF_SCALABLE_FILTERS,
EF_SCALABLE_FILTERS_MODE and EF_SCALABLE_FILTERS_ENABLE environment variables.
Further discussion is contained in the "Transparent proxying" and "Scalable
listening sockets" sections below.

The feature requires 7000-series adapters and a firmware version of at least
v4.6.

By default use of scalable filters requires CAP_NET_RAW.  It is possible to
configure Onload to avoid the capability check through the use of the
scalable_filter_gid Onload module parameter.  This can be set to -1 to avoid
capability checking for this feature entirely, set to a group id to allow users
in that group to use the feature, or left at the default to use the
capability checking in all cases.

Please consult the User Guide for full details.


Transparent proxying
--------------------

Support for the IP_TRANSPARENT socket option was added in this release.  The
option allows sockets to be bound to addresses that need not be local, and is
most commonly used by HTTP proxies.  It requires the use of the "transparent
active" or "RSS transparent active" scalable filter modes.

It is subject to the following limitations:

 * The IP_TRANSPARENT option must be set on socket before the socket is bound.
 * The IP_TRANSPARENT option cannot be cleared after bind on accelerated
   sockets.
 * IP_TRANSPARENT sockets cannot be accelerated if they are bound to port 0 or
   to INADDR_ANY.
 * IP_TRANSPARENT sockets cannot be passed to the kernel stack when bound to a
   port that is in the list specified by EF_FORCE_TCP_REUSEPORT.

When combined with clustering (i.e. when using the "RSS transparent active"
mode), the following additional limitations apply:

 * EF_CLUSTER_NAME must be set explicitly for the processes sharing the
   cluster.
 * The stack name, whether specified by EF_NAME or by onload_set_stackname(),
   must be empty.

Please consult the User Guide for full details.


Active-open socket caching
--------------------------

This release adds support for caching active-open sockets in addition to the
support for caching passive-open sockets that was introduced in OpenOnload
201502.  This reduces the time required to create a new socket.  As the cost
of installing a hardware filter would negate the advantages of caching, only
sockets with the IP_TRANSPARENT option set are eligible to enter the active-
open cache.


Scalable listening sockets
--------------------------

Ordinarily, for each accelerated listening socket, Onload installs one filter
per IP address per physical port.  In a typical configuration with one IP
configured per port, this results in a maximum of 2048 listening sockets
(although in practice the limit will be still lower as there will be other
users of the filter table).

Onload can now install a single filter that captures all traffic on an
interface, removing the need to install an extra filter for each listening
socket, and so avoiding this limitation on the number of listening sockets.
This is called the passive scalable filter mode.

To use this feature, first enable scalable filters as described in the User
Guide.  Listening sockets that are bound to an IP configured on the
scalable-filter interface will take advantage of this feature.

The following limitations apply:

 * Sockets using this feature must be bound to the appropriate IP address
   before listen() is called on them.
 * When using large numbers of listening sockets, it might be necessary to
   increase the new option EF_TCP_SYNRECV_MAX to ensure that there are enough
   buffers to handle incoming connections.
 * After an IP address is removed from an interface, sockets using scalable
   filters (both listening sockets and sockets accepted from the listeners)
   will continue to receive traffic that arrives at the NIC if it matches the
   local and remote address and port of the socket.

Please consult the User Guide for full details.


Teamd support
-------------

Onload now supports bonds/teams configured with the "teaming" kernel module and
"teamd" daemon.  This is in addition to the long-standing support for bonds
configured using the "bonding" module.  teamd is distributed with RHEL 7.


Stratus ftServer
----------------

This release adds support for the Stratus ftServer platform.  When one unit of
the system is removed from service, Onload stacks will fail over gracefully to
the redundant unit.


New ef_vi filter-types
----------------------

Support for IP-protocol and Ethertype filters have been added to ef_vi.  These
are only supported on 7000-series adapters with a firmware version of at least
v4.6.  Further details are available in the ef_vi Doxygen documentation.


New options
-----------

In addition to the options described above for scalable filters the following
new options have been added:

 * EF_TCP_SYNRECV_MAX: This controls the maximum number of TCP connections in
   the stack in the SYN_RCVD state.  Endpoint buffers are used to represent
   these connections, and each endpoint buffer can accommodate up to four such
   connections.  As such, when tuning this value it is necessary to ensure that
   EF_MAX_ENDPOINTS is sufficiently large.  As endpoint buffers are also
   required for established connections, it is recommended that
   EF_TCP_SYNRECV_MAX be no larger than three quarters of the value of
   EF_SYNRECV_MAX.  By default, EF_TCP_SYNRECV_MAX is equal to four times the
   value of /proc/sys/net/ipv4/tcp_max_syn_backlog.
 * EF_TCP_CONNECT_SPIN: This option is analogous to EF_TCP_ACCEPT_SPIN.  When
   enabled, calls to connect() for TCP sockets will spin until a connection is
   established, or until the spin- or socket-timeout has elapsed.  It is off by
   default, in imitation of the behaviour of earlier Onload releases.
 * EF_TCP_SNDBUF_MODE=2: A new value of 2 has been introduced for this
   variable.  When selected, the sizes of send-buffers for TCP sockets will be
   adjusted automatically according to network conditions.
 * EF_TCP_SOCKBUF_MAX_FRACTION: This option controls the maximum fraction of the 
   TX buffers that may be allocated to a single socket with EF_TCP_SNDBUF_MODE=2
 * EF_UDP_SEND_NONBLOCK_NO_PACKETS_MODE: This option controls how a non-blocking 
   UDP send() call should behave if it is unable to allocate sufficient packet 
   buffers.
 * EF_RETRANSMIT_THRESHOLD_ORPHAN: This option is similar to 
   EF_RETRANSMIT_THRESHOLD, but sets the maximum number of retransmissions 
   before an orphaned socket is aborted.


UDP TX Timestamps
-----------------

Previously, when using recvmsg() to retrieve TX timestamps for UDP
packets, the payload that Onload would return would consist only of
the UDP payload.  Now, the entire Ethernet frame is returned.  This
matches the behaviour of the Linux kernel.

Any application relying on the old Onload behaviour should be updated
to expect Linux behaviour to ensure it is portable and can be run
without Onload.  To facilitate running applications with multiple
Onload versions onload_fd_check_feature() has been extended to support
the ONLOAD_FD_FEAT_UDP_TX_TS_HDR option.  On new versions of Onload
this will return 1.  When run on older versions of Onload this will
return -EOPNOTSUPP and this should be taken to indicate that no packet
headers are returned if the socket is accelerated.  The behaviour of
TCP sockets and unaccelerated UDP sockets is unchanged and the new
onload_fd_check_feature() option does not apply to them.


TX Timestamp correction
-----------------------

In earlier releases TX timestamps were reported at a point approximately
180ns before the wire time.  That error is corrected in this release, so
that TX timestamps now report the time that the first byte of the packet
reaches the wire.


Other changes
-------------

The onload_set_recv_filter() API for UDP sockets has been deprecated in this
release.

In OpenOnload 201502, the delegated-send APIs were inconsistent in the manner
in which they returned errors.  Now, all of the API calls return -1 on error
and set errno appropriately.

By default, Onload now supports up to 8 interfaces.  The previous default was
6.  This remains a compile-time option and is configured by setting the
CI_CFG_MAX_INTERFACES and CI_CFG_MAX_REGISTER_INTERFACES symbols.

It is now possible to create multiple listening sockets with SO_REUSEPORT bound
to the same port but to different addresses.  Previously, only one such
clustered socket could be bound to any given port.


Known Issues
------------

Epoll sets used with onload_ordered_epoll_wait must only contain sockets in one
onload stack.  This is not explicitly enforced, so applications must ensure
that this is the case or they could potentially see mis-ordering.

On realtime kernels under high interrupt load, certain Onload operations in
kernel context may cause stalls to be reported in the kernel.  The stalls are
not harmful in themselves, but we intend to address this in a future release.

